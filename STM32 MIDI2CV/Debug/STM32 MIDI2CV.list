
STM32 MIDI2CV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  0800a13c  0800a13c  0000b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aafc  0800aafc  0000c00c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aafc  0800aafc  0000c00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aafc  0800aafc  0000c00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800aafc  0800aafc  0000bafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ab04  0800ab04  0000bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800ab0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  2000000c  0800ab18  0000c00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000960  0800ab18  0000c960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc56  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c79  00000000  00000000  00029c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0002d910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fb  00000000  00000000  0002f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208d8  00000000  00000000  0003048b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e163  00000000  00000000  00050d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b08f1  00000000  00000000  0006eec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f7b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006998  00000000  00000000  0011f7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00126194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a124 	.word	0x0800a124

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800a124 	.word	0x0800a124

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <_ZN8mMessage12getSysExSizeEv>:
	Channel channel = 0;
	uint8_t data1 = 0;
	uint8_t data2 = 0;

	uint8_t SysExMaxSize;
	 unsigned getSysExSize()  {
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
		 unsigned size = unsigned(data2) << 8 | data1;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	78d2      	ldrb	r2, [r2, #3]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
		return size > SysExMaxSize ? SysExMaxSize : size;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	795b      	ldrb	r3, [r3, #5]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4293      	cmp	r3, r2
 80009c4:	bf28      	it	cs
 80009c6:	4613      	movcs	r3, r2
	}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_ZN9mSettingsC1Ev>:
	uint8_t sysexArray[];
};

struct mSettings {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2201      	movs	r2, #1
 80009e6:	705a      	strb	r2, [r3, #1]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	709a      	strb	r2, [r3, #2]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_ZN8mMessageC1Ev>:
struct mMessage {
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	709a      	strb	r2, [r3, #2]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	70da      	strb	r2, [r3, #3]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	711a      	strb	r2, [r3, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_ZN13MidiInterfaceC1Ev>:
 *
 */

#include "MIDI.h"
#include "stm32f3xx_hal.h"
MidiInterface::MidiInterface() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f203 1365 	addw	r3, r3, #357	@ 0x165
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffc8 	bl	80009d4 <_ZN9mSettingsC1Ev>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ffd6 	bl	80009fc <_ZN8mMessageC1Ev>
	mRunningStatus_TX = InvalidType;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	mRunningStatus_RX = InvalidType;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159

	mPendingMessageIndex = 0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mPendingMessageExpectedLenght = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

	mCurrentRpnNumber = 0xffff;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a76:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	mCurrentNrpnNumber = 0xffff;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a80:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162

	mMessage.valid = false;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
	mMessage.type = InvalidType;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
	mMessage.channel = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
	mMessage.data1 = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
	mMessage.data2 = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
	mMessage.SysExMaxSize = Settings.SysExMaxSize;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
	mThruFilterMode = Thru::Full;
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000aba:	2101      	movs	r1, #1
 8000abc:	f361 0347 	bfi	r3, r1, #1, #7
 8000ac0:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mThruActivated = true;
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164

	mInputChannel = 0;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
	mRunningStatus_RX = InvalidType;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
	mRunningStatus_TX = InvalidType;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	mPendingMessageExpectedLenght = 0;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
	mPendingMessageIndex = 0;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mCurrentRpnNumber = 0xffff;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b00:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	mCurrentNrpnNumber = 0xffff;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0a:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
	mThruActivated = false;
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000b14:	f36f 0300 	bfc	r3, #0, #1
 8000b18:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mThruFilterMode = Thru::Off;
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000b22:	f36f 0347 	bfc	r3, #1, #7
 8000b26:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mNoteOffCallback = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
	mNoteOnCallback = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
	mAfterTouchPolyCallback = 0;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
	mControlChangeCallback = 0;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
	mProgramChangeCallback = 0;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
	mAfterTouchChannelCallback = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
	mPitchBendCallback = 0;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
	mSystemExclusiveCallback = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
	mTimeCodeQuarterFrameCallback = 0;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
	mSongPositionCallback = 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
	mSongSelectCallback = 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	@ 0x28
	mTuneRequestCallback = 0;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
	mClockCallback = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	631a      	str	r2, [r3, #48]	@ 0x30
	mStartCallback = 0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	635a      	str	r2, [r3, #52]	@ 0x34
	mContinueCallback = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	639a      	str	r2, [r3, #56]	@ 0x38
	mStopCallback = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	63da      	str	r2, [r3, #60]	@ 0x3c
	mActiveSensingCallback = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	641a      	str	r2, [r3, #64]	@ 0x40
	mSystemResetCallback = 0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZN13MidiInterfaceD1Ev>:
MidiInterface::~MidiInterface() {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
}
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>:
 - Input channel set to 1 if no value is specified

 */

void MidiInterface::begin(Channel inChannel, UART_HandleTypeDef *huart_in,
		UART_HandleTypeDef *huart_out) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	72fb      	strb	r3, [r7, #11]
	serial_in = *huart_in;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	33d0      	adds	r3, #208	@ 0xd0
 8000bcc:	4611      	mov	r1, r2
 8000bce:	2288      	movs	r2, #136	@ 0x88
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f009 fa99 	bl	800a108 <memcpy>
	serial_out = *huart_out;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	3348      	adds	r3, #72	@ 0x48
 8000bdc:	4611      	mov	r1, r2
 8000bde:	2288      	movs	r2, #136	@ 0x88
 8000be0:	4618      	mov	r0, r3
 8000be2:	f009 fa91 	bl	800a108 <memcpy>
	mInputChannel = inChannel;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	7afa      	ldrb	r2, [r7, #11]
 8000bea:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158

}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>:
 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */

void MidiInterface::send(MidiType inType, DataByte inData1, DataByte inData2,
		Channel inChannel) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	4608      	mov	r0, r1
 8000c00:	4611      	mov	r1, r2
 8000c02:	461a      	mov	r2, r3
 8000c04:	4603      	mov	r3, r0
 8000c06:	70fb      	strb	r3, [r7, #3]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70bb      	strb	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
	// Then test if channel is valid
	if (inChannel >= MIDI_CHANNEL_OFF || inChannel == MIDI_CHANNEL_OMNI
 8000c10:	7e3b      	ldrb	r3, [r7, #24]
 8000c12:	2b10      	cmp	r3, #16
 8000c14:	d85e      	bhi.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
 8000c16:	7e3b      	ldrb	r3, [r7, #24]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d05b      	beq.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
			|| inType < 0x80) {
 8000c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	da57      	bge.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
		return; // Don't send anything
	}

	if (inType <= PitchBend)  // Channel messages
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2be0      	cmp	r3, #224	@ 0xe0
 8000c28:	d84b      	bhi.n	8000cc2 <_ZN13MidiInterface4sendE8MidiTypehhh+0xcc>
			{
// Protection: remove MSBs on data
		inData1 &= 0x7f;
 8000c2a:	78bb      	ldrb	r3, [r7, #2]
 8000c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	70bb      	strb	r3, [r7, #2]
		inData2 &= 0x7f;
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	707b      	strb	r3, [r7, #1]

		StatusByte status = getStatus(inType, inChannel);
 8000c3e:	7e3a      	ldrb	r2, [r7, #24]
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	4619      	mov	r1, r3
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 f949 	bl	8000edc <_ZN13MidiInterface9getStatusE8MidiTypeh>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]

		if (Settings.UseRunningStatus) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d014      	beq.n	8000c82 <_ZN13MidiInterface4sendE8MidiTypehhh+0x8c>
			if (mRunningStatus_TX != status) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 215a 	ldrb.w	r2, [r3, #346]	@ 0x15a
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d017      	beq.n	8000c94 <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
// New message, memorise and send header
				mRunningStatus_TX = status;
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
				HAL_UART_Transmit(&serial_out, &mRunningStatus_TX, 1,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f503 71ad 	add.w	r1, r3, #346	@ 0x15a
 8000c78:	230a      	movs	r3, #10
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f008 f9f2 	bl	8009064 <HAL_UART_Transmit>
 8000c80:	e008      	b.n	8000c94 <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
				MidiTimeout);
			}
		} else {
			// Don't care about running status, send the status byte.
			HAL_UART_Transmit(&serial_out, &status, 1, MidiTimeout);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c88:	f107 010f 	add.w	r1, r7, #15
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f008 f9e8 	bl	8009064 <HAL_UART_Transmit>
		}

// Then send data
		HAL_UART_Transmit(&serial_out, &inData1, 1, MidiTimeout);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c9a:	1cb9      	adds	r1, r7, #2
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f008 f9e0 	bl	8009064 <HAL_UART_Transmit>
		if (inType != ProgramChange && inType != AfterTouchChannel) {
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2bc0      	cmp	r3, #192	@ 0xc0
 8000ca8:	d015      	beq.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	2bd0      	cmp	r3, #208	@ 0xd0
 8000cae:	d012      	beq.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
			HAL_UART_Transmit(&serial_out, &inData2, 1, MidiTimeout);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000cb6:	1c79      	adds	r1, r7, #1
 8000cb8:	230a      	movs	r3, #10
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f008 f9d2 	bl	8009064 <HAL_UART_Transmit>
 8000cc0:	e009      	b.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		}
	} else if (inType >= Clock && inType <= SystemReset) {
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	2bf7      	cmp	r3, #247	@ 0xf7
 8000cc6:	d906      	bls.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		sendRealTime(inType); // System Real-time and 1 byte.
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f8db 	bl	8000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>
 8000cd2:	e000      	b.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		return; // Don't send anything
 8000cd4:	bf00      	nop
	}
}
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZN13MidiInterface9sendSysExEhPhb>:
 default value for ArrayContainsBoundaries is set to 'false' for compatibility
 with previous versions of the library.
 */

void MidiInterface::sendSysEx(uint8_t inLength, byte *inArray,
		bool inArrayContainsBoundaries) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	72fb      	strb	r3, [r7, #11]
 8000cec:	4613      	mov	r3, r2
 8000cee:	72bb      	strb	r3, [r7, #10]
	bool writeBeginEndBytes = !inArrayContainsBoundaries;
 8000cf0:	7abb      	ldrb	r3, [r7, #10]
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	75fb      	strb	r3, [r7, #23]
	uint8_t StartByte = 0xf0;
 8000cf8:	23f0      	movs	r3, #240	@ 0xf0
 8000cfa:	75bb      	strb	r3, [r7, #22]
	uint8_t EndByte = 0xf7;
 8000cfc:	23f7      	movs	r3, #247	@ 0xf7
 8000cfe:	757b      	strb	r3, [r7, #21]
	if (writeBeginEndBytes) {
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d008      	beq.n	8000d18 <_ZN13MidiInterface9sendSysExEhPhb+0x3c>
		HAL_UART_Transmit(&serial_out, &StartByte, 1, MidiTimeout);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d0c:	f107 0116 	add.w	r1, r7, #22
 8000d10:	230a      	movs	r3, #10
 8000d12:	2201      	movs	r2, #1
 8000d14:	f008 f9a6 	bl	8009064 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&serial_out, inArray, sizeof(inLength), MidiTimeout);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d1e:	230a      	movs	r3, #10
 8000d20:	2201      	movs	r2, #1
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f008 f99e 	bl	8009064 <HAL_UART_Transmit>

	if (writeBeginEndBytes) {
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <_ZN13MidiInterface9sendSysExEhPhb+0x64>
		HAL_UART_Transmit(&serial_out, &EndByte, 1, MidiTimeout);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d34:	f107 0115 	add.w	r1, r7, #21
 8000d38:	230a      	movs	r3, #10
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f008 f992 	bl	8009064 <HAL_UART_Transmit>
	}

	if (Settings.UseRunningStatus) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <_ZN13MidiInterface9sendSysExEhPhb+0x76>
		mRunningStatus_TX = InvalidType;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>:
 \param inValuesNibble    MTC data
 See MIDI Specification for more information.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
		DataByte inValuesNibble) {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
 8000d66:	4613      	mov	r3, r2
 8000d68:	70bb      	strb	r3, [r7, #2]
	byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000d74:	b25a      	sxtb	r2, r3
 8000d76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	73fb      	strb	r3, [r7, #15]
	sendTimeCodeQuarterFrame(data);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f804 	bl	8000d98 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>:
 See MIDI Specification for more information.
 \param inData  if you want to encode directly the nibbles in your program,
 you can send the byte here.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inData) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
	uint8_t TimeCodeMessage[] = { TimeCodeQuarterFrame, inData };
 8000da4:	2300      	movs	r3, #0
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	23f1      	movs	r3, #241	@ 0xf1
 8000daa:	733b      	strb	r3, [r7, #12]
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, TimeCodeMessage, 2, MidiTimeout);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000db6:	f107 010c 	add.w	r1, r7, #12
 8000dba:	230a      	movs	r3, #10
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	f008 f951 	bl	8009064 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh+0x3c>
		mRunningStatus_TX = InvalidType;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZN13MidiInterface16sendSongPositionEj>:

/*! \brief Send a Song Position Pointer message.
 \param inBeats    The number of beats since the start of the song.
 */

void MidiInterface::sendSongPosition(unsigned inBeats) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	uint8_t SongPositionMessage[] = { SongPosition, (uint8_t) (inBeats & 0x7f),
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2100      	movs	r1, #0
 8000dec:	460a      	mov	r2, r1
 8000dee:	801a      	strh	r2, [r3, #0]
 8000df0:	460a      	mov	r2, r1
 8000df2:	709a      	strb	r2, [r3, #2]
 8000df4:	23f2      	movs	r3, #242	@ 0xf2
 8000df6:	733b      	strb	r3, [r7, #12]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e00:	b2db      	uxtb	r3, r3
			(uint8_t) ((inBeats >> 7) & 0x7f) };
 8000e02:	737b      	strb	r3, [r7, #13]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	09db      	lsrs	r3, r3, #7
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&serial_out, SongPositionMessage, 3, MidiTimeout);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	2203      	movs	r2, #3
 8000e20:	f008 f920 	bl	8009064 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <_ZN13MidiInterface16sendSongPositionEj+0x5a>
		mRunningStatus_TX = InvalidType;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_ZN13MidiInterface14sendSongSelectEh>:

/*! \brief Send a Song Select message */

void MidiInterface::sendSongSelect(DataByte inSongNumber) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	70fb      	strb	r3, [r7, #3]
	uint8_t SongSelectMessage[] =
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	81bb      	strh	r3, [r7, #12]
 8000e4e:	23f3      	movs	r3, #243	@ 0xf3
 8000e50:	733b      	strb	r3, [r7, #12]
			{ SongSelect, (uint8_t) (inSongNumber & 0x7f) };
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, SongSelectMessage, 2, MidiTimeout);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000e62:	f107 010c 	add.w	r1, r7, #12
 8000e66:	230a      	movs	r3, #10
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f008 f8fb 	bl	8009064 <HAL_UART_Transmit>
	if (Settings.UseRunningStatus) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <_ZN13MidiInterface14sendSongSelectEh+0x42>
		mRunningStatus_TX = InvalidType;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>:
 \param inType    The available Real Time types are:
 Start, Stop, Continue, Clock, ActiveSensing and SystemReset.
 @see MidiType
 */

void MidiInterface::sendRealTime(MidiType inType) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
	// Do not invalidate Running Status for real-time messages
	// as they can be interleaved within any message.
	uint8_t RealTimeMessage;
	switch (inType) {
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	3bf8      	subs	r3, #248	@ 0xf8
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	bf8c      	ite	hi
 8000e9c:	2201      	movhi	r2, #1
 8000e9e:	2200      	movls	r2, #0
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d115      	bne.n	8000ed2 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
 8000ea6:	22dd      	movs	r2, #221	@ 0xdd
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf14      	ite	ne
 8000eb4:	2301      	movne	r3, #1
 8000eb6:	2300      	moveq	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d009      	beq.n	8000ed2 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
	case Start:
	case Stop:
	case Continue:
	case ActiveSensing:
	case SystemReset:
		HAL_UART_Transmit(&serial_out, &RealTimeMessage, 1, MidiTimeout);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000ec4:	f107 010f 	add.w	r1, r7, #15
 8000ec8:	230a      	movs	r3, #10
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f008 f8ca 	bl	8009064 <HAL_UART_Transmit>
		break;
 8000ed0:	e000      	b.n	8000ed4 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4c>
	default:
// Invalid Real Time marker
		break;
 8000ed2:	bf00      	nop
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN13MidiInterface9getStatusE8MidiTypeh>:
	mCurrentNrpnNumber = 0xffff;
}

/*! @} */ // End of doc group MIDI Output
// -----------------------------------------------------------------------------
StatusByte MidiInterface::getStatus(MidiType inType, Channel inChannel) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	70bb      	strb	r3, [r7, #2]
	return ((byte) inType | ((inChannel - 1) & 0x0f));
 8000eec:	78bb      	ldrb	r3, [r7, #2]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_ZN13MidiInterface4readEv>:
 If the Thru is enabled and the message matches the filter,
 it is sent back on the MIDI output.
 @see see setInputChannel()
 */

bool MidiInterface::read() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	return read(mInputChannel);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f805 	bl	8000f30 <_ZN13MidiInterface4readEh>
 8000f26:	4603      	mov	r3, r0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN13MidiInterface4readEh>:

/*! \brief Read messages on a specified channel.
 */

bool MidiInterface::read(Channel inChannel) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	if (inChannel >= MIDI_CHANNEL_OFF)
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b10      	cmp	r3, #16
 8000f40:	d901      	bls.n	8000f46 <_ZN13MidiInterface4readEh+0x16>
		return false; // MIDI Input disabled.
 8000f42:	2300      	movs	r3, #0
 8000f44:	e020      	b.n	8000f88 <_ZN13MidiInterface4readEh+0x58>

	if (!parse())
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f822 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f083 0301 	eor.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <_ZN13MidiInterface4readEh+0x2c>
		return false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e015      	b.n	8000f88 <_ZN13MidiInterface4readEh+0x58>

	handleNullVelocityNoteOnAsNoteOff();
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fa5b 	bl	8001418 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>
	bool channelMatch = inputFilter(inChannel);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fa78 	bl	800145c <_ZN13MidiInterface11inputFilterEh>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]

	if (channelMatch) {
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <_ZN13MidiInterface4readEh+0x4c>
		launchCallback();
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fb82 	bl	8001680 <_ZN13MidiInterface14launchCallbackEv>
	}

	thruFilter(inChannel);
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fdb5 	bl	8001af0 <_ZN13MidiInterface10thruFilterEh>

	return channelMatch;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZN13MidiInterface5parseEv>:
		break;
	}
}
// Private method: MIDI parser

bool MidiInterface::parse() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	byte extracted;
	if (HAL_UART_Receive(&serial_in, &extracted, 1, MidiTimeout) != HAL_OK) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8000f9e:	f107 010f 	add.w	r1, r7, #15
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f008 f8e6 	bl	8009176 <HAL_UART_Receive>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZN13MidiInterface5parseEv+0x2e>
		return false;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e228      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
	// Ignore Undefined




	if (extracted == 0xf9 || extracted == 0xfd) {
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	2bf9      	cmp	r3, #249	@ 0xf9
 8000fc2:	d002      	beq.n	8000fca <_ZN13MidiInterface5parseEv+0x3a>
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2bfd      	cmp	r3, #253	@ 0xfd
 8000fc8:	d10b      	bne.n	8000fe2 <_ZN13MidiInterface5parseEv+0x52>
		if (Settings.Use1ByteParsing) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZN13MidiInterface5parseEv+0x48>
			return false;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e21b      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			return parse();
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffd9 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e216      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		}
	}

	if (mPendingMessageIndex == 0) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f040 80f9 	bne.w	80011e0 <_ZN13MidiInterface5parseEv+0x250>
// Start a new pending message
		mPendingMessage[0] = extracted;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b

// Check for running status first
		if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fa9e 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001002:	4603      	mov	r3, r0
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fad1 	bl	80015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d011      	beq.n	8001034 <_ZN13MidiInterface5parseEv+0xa4>
			// Only these types allow Running Status

			// If the status byte is not received, prepend it
			// to the pending message
			if (extracted < 0x80) {
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0d      	blt.n	8001034 <_ZN13MidiInterface5parseEv+0xa4>
				mPendingMessage[0] = mRunningStatus_RX;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 2159 	ldrb.w	r2, [r3, #345]	@ 0x159
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
				mPendingMessage[1] = extracted;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
				mPendingMessageIndex = 1;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f





		switch (getTypeFromStatusByte(mPendingMessage[0])) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fa7f 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001040:	4603      	mov	r3, r0
 8001042:	2bff      	cmp	r3, #255	@ 0xff
 8001044:	dc7b      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001046:	2bf1      	cmp	r3, #241	@ 0xf1
 8001048:	da1c      	bge.n	8001084 <_ZN13MidiInterface5parseEv+0xf4>
 800104a:	2bf0      	cmp	r3, #240	@ 0xf0
 800104c:	d06a      	beq.n	8001124 <_ZN13MidiInterface5parseEv+0x194>
 800104e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001050:	dc75      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001052:	2be0      	cmp	r3, #224	@ 0xe0
 8001054:	d061      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001056:	2be0      	cmp	r3, #224	@ 0xe0
 8001058:	dc71      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800105a:	2bd0      	cmp	r3, #208	@ 0xd0
 800105c:	d058      	beq.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 800105e:	2bd0      	cmp	r3, #208	@ 0xd0
 8001060:	dc6d      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001062:	2bc0      	cmp	r3, #192	@ 0xc0
 8001064:	d054      	beq.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 8001066:	2bc0      	cmp	r3, #192	@ 0xc0
 8001068:	dc69      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800106a:	2bb0      	cmp	r3, #176	@ 0xb0
 800106c:	d055      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 800106e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001070:	dc65      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001072:	2ba0      	cmp	r3, #160	@ 0xa0
 8001074:	d051      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001076:	2ba0      	cmp	r3, #160	@ 0xa0
 8001078:	dc61      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800107a:	2b80      	cmp	r3, #128	@ 0x80
 800107c:	d04d      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 800107e:	2b90      	cmp	r3, #144	@ 0x90
 8001080:	d04b      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001082:	e05c      	b.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001084:	3bf1      	subs	r3, #241	@ 0xf1
 8001086:	2201      	movs	r2, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	f646 62a0 	movw	r2, #28320	@ 0x6ea0
 8001090:	401a      	ands	r2, r3
 8001092:	2a00      	cmp	r2, #0
 8001094:	bf14      	ite	ne
 8001096:	2201      	movne	r2, #1
 8001098:	2200      	moveq	r2, #0
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	2a00      	cmp	r2, #0
 800109e:	d112      	bne.n	80010c6 <_ZN13MidiInterface5parseEv+0x136>
 80010a0:	f003 0205 	and.w	r2, r3, #5
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2201      	movne	r2, #1
 80010aa:	2200      	moveq	r2, #0
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d12e      	bne.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d12a      	bne.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 80010c4:	e03b      	b.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
		case Clock:
		case ActiveSensing:
		case SystemReset:
		case TuneRequest:
			// Handle the message type directly here.
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fa36 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
			mMessage.channel = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
			mMessage.data1 = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
			mMessage.data2 = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
			mMessage.valid = true;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

			// Do not reset all input attributes, Running Status must remain unchanged.
			// We still need to reset these
			mPendingMessageIndex = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

			return true;
 800110c:	2301      	movs	r3, #1
 800110e:	e17f      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			// 2 bytes messages
		case ProgramChange:
		case AfterTouchChannel:
		case TimeCodeQuarterFrame:
		case SongSelect:
			mPendingMessageExpectedLenght = 2;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			break;
 8001118:	e016      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>
		case NoteOff:
		case ControlChange:
		case PitchBend:
		case AfterTouchPoly:
		case SongPosition:
			mPendingMessageExpectedLenght = 3;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2203      	movs	r2, #3
 800111e:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			break;
 8001122:	e011      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>

		case SystemExclusive:
			// The message can be any lenght
			// between 3 and Settings.SysExMaxSize bytes
			mPendingMessageExpectedLenght = Settings.SysExMaxSize;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			mRunningStatus_RX = InvalidType;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
			mMessage.sysexArray[0] = SystemExclusive;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	22f0      	movs	r2, #240	@ 0xf0
 8001138:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
			break;
 800113c:	e004      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>

		case InvalidType:
		default:
			// This is obviously wrong. Let's get the hell out'a here.
			resetInput();
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f9b1 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
			return false;
 8001144:	2300      	movs	r3, #0
 8001146:	e163      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			break;
		}

		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
 8001156:	3b01      	subs	r3, #1
 8001158:	429a      	cmp	r2, r3
 800115a:	db2d      	blt.n	80011b8 <_ZN13MidiInterface5parseEv+0x228>
			// Reception complete
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f9eb 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
			mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fa06 	bl	800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
			mMessage.data1 = mPendingMessage[1];
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 215c 	ldrb.w	r2, [r3, #348]	@ 0x15c
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
			mMessage.data2 = 0;			// Completed new message has 1 data byte
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

			mPendingMessageIndex = 0;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			mMessage.valid = true;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
			return true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e12b      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Waiting for more data
			mPendingMessageIndex++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
		}

		if (Settings.Use1ByteParsing) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <_ZN13MidiInterface5parseEv+0x246>
			// Message is not complete.
			return false;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e11c      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Call the parser recursively
			// to parse the rest of the message.
			return parse();
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff feda 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 80011dc:	4603      	mov	r3, r0
 80011de:	e117      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		}
	} else {
// First, test if this is a status byte
		if (extracted >= 0x80) {
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da67      	bge.n	80012b8 <_ZN13MidiInterface5parseEv+0x328>
			// Reception of status bytes in the middle of an uncompleted message
			// are allowed only for interleaved Real Time message or EOX
			switch (extracted) {
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3bf7      	subs	r3, #247	@ 0xf7
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d862      	bhi.n	80012b6 <_ZN13MidiInterface5parseEv+0x326>
 80011f0:	a201      	add	r2, pc, #4	@ (adr r2, 80011f8 <_ZN13MidiInterface5parseEv+0x268>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001249 	.word	0x08001249
 80011fc:	0800121d 	.word	0x0800121d
 8001200:	080012b7 	.word	0x080012b7
 8001204:	0800121d 	.word	0x0800121d
 8001208:	0800121d 	.word	0x0800121d
 800120c:	0800121d 	.word	0x0800121d
 8001210:	080012b7 	.word	0x080012b7
 8001214:	0800121d 	.word	0x0800121d
 8001218:	0800121d 	.word	0x0800121d
// the MIDI class, and recompose the message it was
// interleaved into. Oh, and without killing the running status..
// This is done by leaving the pending message as is,
// it will be completed on next calls.

				mMessage.type = (MidiType) extracted;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
				mMessage.data1 = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
				mMessage.data2 = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
				mMessage.channel = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
				mMessage.valid = true;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
				return true;
 8001244:	2301      	movs	r3, #1
 8001246:	e0e3      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>

// End of Exclusive
			case 0xf7:
				if (mMessage.sysexArray[0] == SystemExclusive) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 800124e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001250:	d12c      	bne.n	80012ac <_ZN13MidiInterface5parseEv+0x31c>
					// Store the last byte (EOX)
					mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	b2d1      	uxtb	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	f882 115f 	strb.w	r1, [r2, #351]	@ 0x15f
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	22f7      	movs	r2, #247	@ 0xf7
 800126a:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
					mMessage.type = SystemExclusive;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	22f0      	movs	r2, #240	@ 0xf0
 8001272:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169

					// Get length
					mMessage.data1 = mPendingMessageIndex & 0xff;		// LSB
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 215f 	ldrb.w	r2, [r3, #351]	@ 0x15f
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
					mMessage.data2 = mPendingMessageIndex >> 8;			// MSB
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8001288:	121b      	asrs	r3, r3, #8
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
					mMessage.channel = 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
					mMessage.valid = true;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

					resetInput();
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f8ff 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
					return true;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b1      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
				} else {
					// Well well well.. error.
					resetInput();
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8fa 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
					return false;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e0ac      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
				}

			default:
				break; // LCOV_EXCL_LINE - Coverage blind spot
 80012b6:	bf00      	nop
			}
		}

// Add extracted data byte to pending message
		if (mPendingMessage[0] == SystemExclusive)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 80012be:	2bf0      	cmp	r3, #240	@ 0xf0
 80012c0:	d109      	bne.n	80012d6 <_ZN13MidiInterface5parseEv+0x346>
			mMessage.sysexArray[mPendingMessageIndex] = extracted;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012c8:	4619      	mov	r1, r3
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
 80012d4:	e008      	b.n	80012e8 <_ZN13MidiInterface5parseEv+0x358>
		else
			mPendingMessage[mPendingMessageIndex] = extracted;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012dc:	4619      	mov	r1, r3
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b

// Now we are going to check if we have reached the end of the message
		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
 80012f6:	3b01      	subs	r3, #1
 80012f8:	429a      	cmp	r2, r3
 80012fa:	db75      	blt.n	80013e8 <_ZN13MidiInterface5parseEv+0x458>
			// "FML" case: fall down here with an overflown SysEx..
			// This means we received the last possible data byte that can fit
			// the buffer. If this happens, try increasing Settings.SysExMaxSize.
			if (mPendingMessage[0] == SystemExclusive) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001302:	2bf0      	cmp	r3, #240	@ 0xf0
 8001304:	d104      	bne.n	8001310 <_ZN13MidiInterface5parseEv+0x380>
				resetInput();
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8cd 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
				return false;
 800130c:	2300      	movs	r3, #0
 800130e:	e07f      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			}

			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f911 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169

			if (isChannelMessage(mMessage.type))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f93d 	bl	80015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <_ZN13MidiInterface5parseEv+0x3c0>
				mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f923 	bl	800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
 800134e:	e003      	b.n	8001358 <_ZN13MidiInterface5parseEv+0x3c8>
			else
				mMessage.channel = 0;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a

			mMessage.data1 = mPendingMessage[1];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 215c 	ldrb.w	r2, [r3, #348]	@ 0x15c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b

			// Save data2 only if applicable
			mMessage.data2 =
					mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
			mMessage.data2 =
 800136a:	2b03      	cmp	r3, #3
 800136c:	d103      	bne.n	8001376 <_ZN13MidiInterface5parseEv+0x3e6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 215d 	ldrb.w	r2, [r3, #349]	@ 0x15d
 8001374:	e000      	b.n	8001378 <_ZN13MidiInterface5parseEv+0x3e8>
 8001376:	2200      	movs	r2, #0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

			// Reset local variables
			mPendingMessageIndex = 0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

			mMessage.valid = true;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

			// Activate running status (if enabled for the received type)
			switch (mMessage.type) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800139c:	2be0      	cmp	r3, #224	@ 0xe0
 800139e:	d015      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013a0:	2be0      	cmp	r3, #224	@ 0xe0
 80013a2:	dc1a      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013a4:	2bd0      	cmp	r3, #208	@ 0xd0
 80013a6:	d011      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013a8:	2bd0      	cmp	r3, #208	@ 0xd0
 80013aa:	dc16      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80013ae:	d00d      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80013b2:	dc12      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013b4:	2bb0      	cmp	r3, #176	@ 0xb0
 80013b6:	d009      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013b8:	2bb0      	cmp	r3, #176	@ 0xb0
 80013ba:	dc0e      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80013be:	d005      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80013c2:	dc0a      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013c4:	2b80      	cmp	r3, #128	@ 0x80
 80013c6:	d001      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013c8:	2b90      	cmp	r3, #144	@ 0x90
 80013ca:	d106      	bne.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
			case ControlChange:
			case ProgramChange:
			case AfterTouchChannel:
			case PitchBend:
// Running status enabled: store it from received message
				mRunningStatus_RX = mPendingMessage[0];
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 215b 	ldrb.w	r2, [r3, #347]	@ 0x15b
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
				break;
 80013d8:	e004      	b.n	80013e4 <_ZN13MidiInterface5parseEv+0x454>

			default:
// No running status
				mRunningStatus_RX = InvalidType;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
				break;
 80013e2:	bf00      	nop
			}
			return true;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e013      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Then update the index of the pending message.
			mPendingMessageIndex++;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f

			if (Settings.Use1ByteParsing) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <_ZN13MidiInterface5parseEv+0x476>
// Message is not complete.
				return false;
 8001402:	2300      	movs	r3, #0
 8001404:	e004      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			} else {
// Call the parser recursively to parse the rest of the message.
				return parse();
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fdc2 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 800140c:	4603      	mov	r3, r0
 800140e:	bf00      	nop
			}
		}
	}
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>:

void MidiInterface::handleNullVelocityNoteOnAsNoteOff() {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
			&& getData2() == 0) {
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00d      	beq.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f851 	bl	80014d2 <_ZN13MidiInterface7getTypeEv>
 8001430:	4603      	mov	r3, r0
 8001432:	2b90      	cmp	r3, #144	@ 0x90
 8001434:	d107      	bne.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
			&& getData2() == 0) {
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f858 	bl	80014ec <_ZN13MidiInterface8getData2Ev>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x30>
 8001446:	2300      	movs	r3, #0
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x3c>
		mMessage.type = NoteOff;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
	}
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN13MidiInterface11inputFilterEh>:

// Private method: check if the received message is on the listened channel

bool MidiInterface::inputFilter(Channel inChannel) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	// This method handles recognition of channel
	// (to know if the message is destinated to the Arduino)

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800146e:	b25b      	sxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	da11      	bge.n	8001498 <_ZN13MidiInterface11inputFilterEh+0x3c>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800147a:	2be0      	cmp	r3, #224	@ 0xe0
 800147c:	d80c      	bhi.n	8001498 <_ZN13MidiInterface11inputFilterEh+0x3c>
// Then we need to know if we listen to it
		if ((mMessage.channel == inChannel)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	429a      	cmp	r2, r3
 8001488:	d002      	beq.n	8001490 <_ZN13MidiInterface11inputFilterEh+0x34>
				|| (inChannel == MIDI_CHANNEL_OMNI)) {
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <_ZN13MidiInterface11inputFilterEh+0x38>
			return true;
 8001490:	2301      	movs	r3, #1
 8001492:	e002      	b.n	800149a <_ZN13MidiInterface11inputFilterEh+0x3e>
		} else {
			// We don't listen to this channel
			return false;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <_ZN13MidiInterface11inputFilterEh+0x3e>
		}
	} else {
// System messages are always received
		return true;
 8001498:	2301      	movs	r3, #1
	}
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZN13MidiInterface10resetInputEv>:

// Private method: reset input attributes

void MidiInterface::resetInput() {
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	mPendingMessageIndex = 0;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mPendingMessageExpectedLenght = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
	mRunningStatus_RX = InvalidType;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_ZN13MidiInterface7getTypeEv>:
/*! \brief Get the last received message's type

 Returns an enumerated type. @see MidiType
 */

MidiType MidiInterface::getType() {
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	return mMessage.type;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_ZN13MidiInterface8getData2Ev>:
	return mMessage.data1;
}

/*! \brief Get the second data byte of the last received message. */

DataByte MidiInterface::getData2() {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	return mMessage.data2;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_ZN13MidiInterface13getSysExArrayEv>:
/*! \brief Get the System Exclusive byte array.

 @see getSysExArrayLength to get the array's length in bytes.
 */

byte* MidiInterface::getSysExArray() {
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	return mMessage.sysexArray;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f503 73b7 	add.w	r3, r3, #366	@ 0x16e
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZN13MidiInterface19getSysExArrayLengthEv>:

 It is coded using data1 as LSB and data2 as MSB.
 \return The array's length, in bytes.
 */

unsigned MidiInterface::getSysExArrayLength() {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	return mMessage.getSysExSize();
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fa38 	bl	80009a4 <_ZN8mMessage12getSysExSizeEv>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>:
 This is a utility static method, used internally,
 made public so you can handle MidiTypes more easily.
 */

MidiType MidiInterface::getTypeFromStatusByte(
byte inStatus) {
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
	if ((inStatus < 0x80) || (inStatus == 0xf4) || (inStatus == 0xf5)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	da0b      	bge.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2bf4      	cmp	r3, #244	@ 0xf4
 8001554:	d008      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2bf5      	cmp	r3, #245	@ 0xf5
 800155a:	d005      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
			|| (inStatus == 0xf9) || (inStatus == 0xfD)) {
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001560:	d002      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2bfd      	cmp	r3, #253	@ 0xfd
 8001566:	d101      	bne.n	800156c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2e>
// Data bytes and undefined.
		return InvalidType;
 8001568:	2300      	movs	r3, #0
 800156a:	e008      	b.n	800157e <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}
	if (inStatus < 0xf0) {
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2bef      	cmp	r3, #239	@ 0xef
 8001570:	d804      	bhi.n	800157c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x3e>
// Channel message, remove channel nibble.
		return MidiType(inStatus & 0xf0);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e000      	b.n	800157e <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}

	return MidiType(inStatus);
 800157c:	79fb      	ldrb	r3, [r7, #7]
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>:

/*! \brief Returns channel in the range 1-16
 */

Channel MidiInterface::getChannelFromStatusByte(
byte inStatus) {
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
	return (inStatus & 0x0f) + 1;
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3301      	adds	r3, #1
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>:

bool MidiInterface::isChannelMessage(MidiType inType) {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
			|| inType == PitchBend || inType == ProgramChange);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b80      	cmp	r3, #128	@ 0x80
 80015ba:	d011      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b90      	cmp	r3, #144	@ 0x90
 80015c0:	d00e      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80015c6:	d00b      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80015cc:	d008      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2bd0      	cmp	r3, #208	@ 0xd0
 80015d2:	d005      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == PitchBend || inType == ProgramChange);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2be0      	cmp	r3, #224	@ 0xe0
 80015d8:	d002      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80015de:	d101      	bne.n	80015e4 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x38>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x3a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>:

void MidiInterface::setHandleNoteOff(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	mNoteOffCallback = fptr;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>:
void MidiInterface::setHandleNoteOn(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	mNoteOnCallback = fptr;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	605a      	str	r2, [r3, #4]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_ZN13MidiInterface14setHandleClockEPFvvE>:
	mSongSelectCallback = fptr;
}
void MidiInterface::setHandleTuneRequest(void (*fptr)(void)) {
	mTuneRequestCallback = fptr;
}
void MidiInterface::setHandleClock(void (*fptr)(void)) {
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	mClockCallback = fptr;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_ZN13MidiInterface14setHandleStartEPFvvE>:
void MidiInterface::setHandleStart(void (*fptr)(void)) {
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
	mStartCallback = fptr;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_ZN13MidiInterface13setHandleStopEPFvvE>:
void MidiInterface::setHandleContinue(void (*fptr)(void)) {
	mContinueCallback = fptr;
}
void MidiInterface::setHandleStop(void (*fptr)(void)) {
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	mStopCallback = fptr;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <_ZN13MidiInterface14launchCallbackEv>:
	}
}

/*! @} */ // End of doc group MIDI Callbacks
// Private - launch callback function based on received type.
void MidiInterface::launchCallback() {
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	// The order is mixed to allow frequent messages to trigger their callback faster.
	switch (mMessage.type) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800168e:	3b80      	subs	r3, #128	@ 0x80
 8001690:	2b7f      	cmp	r3, #127	@ 0x7f
 8001692:	f200 8203 	bhi.w	8001a9c <_ZN13MidiInterface14launchCallbackEv+0x41c>
 8001696:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <_ZN13MidiInterface14launchCallbackEv+0x1c>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	0800189d 	.word	0x0800189d
 80016a0:	08001a9d 	.word	0x08001a9d
 80016a4:	08001a9d 	.word	0x08001a9d
 80016a8:	08001a9d 	.word	0x08001a9d
 80016ac:	08001a9d 	.word	0x08001a9d
 80016b0:	08001a9d 	.word	0x08001a9d
 80016b4:	08001a9d 	.word	0x08001a9d
 80016b8:	08001a9d 	.word	0x08001a9d
 80016bc:	08001a9d 	.word	0x08001a9d
 80016c0:	08001a9d 	.word	0x08001a9d
 80016c4:	08001a9d 	.word	0x08001a9d
 80016c8:	08001a9d 	.word	0x08001a9d
 80016cc:	08001a9d 	.word	0x08001a9d
 80016d0:	08001a9d 	.word	0x08001a9d
 80016d4:	08001a9d 	.word	0x08001a9d
 80016d8:	08001a9d 	.word	0x08001a9d
 80016dc:	080018c1 	.word	0x080018c1
 80016e0:	08001a9d 	.word	0x08001a9d
 80016e4:	08001a9d 	.word	0x08001a9d
 80016e8:	08001a9d 	.word	0x08001a9d
 80016ec:	08001a9d 	.word	0x08001a9d
 80016f0:	08001a9d 	.word	0x08001a9d
 80016f4:	08001a9d 	.word	0x08001a9d
 80016f8:	08001a9d 	.word	0x08001a9d
 80016fc:	08001a9d 	.word	0x08001a9d
 8001700:	08001a9d 	.word	0x08001a9d
 8001704:	08001a9d 	.word	0x08001a9d
 8001708:	08001a9d 	.word	0x08001a9d
 800170c:	08001a9d 	.word	0x08001a9d
 8001710:	08001a9d 	.word	0x08001a9d
 8001714:	08001a9d 	.word	0x08001a9d
 8001718:	08001a9d 	.word	0x08001a9d
 800171c:	08001999 	.word	0x08001999
 8001720:	08001a9d 	.word	0x08001a9d
 8001724:	08001a9d 	.word	0x08001a9d
 8001728:	08001a9d 	.word	0x08001a9d
 800172c:	08001a9d 	.word	0x08001a9d
 8001730:	08001a9d 	.word	0x08001a9d
 8001734:	08001a9d 	.word	0x08001a9d
 8001738:	08001a9d 	.word	0x08001a9d
 800173c:	08001a9d 	.word	0x08001a9d
 8001740:	08001a9d 	.word	0x08001a9d
 8001744:	08001a9d 	.word	0x08001a9d
 8001748:	08001a9d 	.word	0x08001a9d
 800174c:	08001a9d 	.word	0x08001a9d
 8001750:	08001a9d 	.word	0x08001a9d
 8001754:	08001a9d 	.word	0x08001a9d
 8001758:	08001a9d 	.word	0x08001a9d
 800175c:	0800193f 	.word	0x0800193f
 8001760:	08001a9d 	.word	0x08001a9d
 8001764:	08001a9d 	.word	0x08001a9d
 8001768:	08001a9d 	.word	0x08001a9d
 800176c:	08001a9d 	.word	0x08001a9d
 8001770:	08001a9d 	.word	0x08001a9d
 8001774:	08001a9d 	.word	0x08001a9d
 8001778:	08001a9d 	.word	0x08001a9d
 800177c:	08001a9d 	.word	0x08001a9d
 8001780:	08001a9d 	.word	0x08001a9d
 8001784:	08001a9d 	.word	0x08001a9d
 8001788:	08001a9d 	.word	0x08001a9d
 800178c:	08001a9d 	.word	0x08001a9d
 8001790:	08001a9d 	.word	0x08001a9d
 8001794:	08001a9d 	.word	0x08001a9d
 8001798:	08001a9d 	.word	0x08001a9d
 800179c:	080019dd 	.word	0x080019dd
 80017a0:	08001a9d 	.word	0x08001a9d
 80017a4:	08001a9d 	.word	0x08001a9d
 80017a8:	08001a9d 	.word	0x08001a9d
 80017ac:	08001a9d 	.word	0x08001a9d
 80017b0:	08001a9d 	.word	0x08001a9d
 80017b4:	08001a9d 	.word	0x08001a9d
 80017b8:	08001a9d 	.word	0x08001a9d
 80017bc:	08001a9d 	.word	0x08001a9d
 80017c0:	08001a9d 	.word	0x08001a9d
 80017c4:	08001a9d 	.word	0x08001a9d
 80017c8:	08001a9d 	.word	0x08001a9d
 80017cc:	08001a9d 	.word	0x08001a9d
 80017d0:	08001a9d 	.word	0x08001a9d
 80017d4:	08001a9d 	.word	0x08001a9d
 80017d8:	08001a9d 	.word	0x08001a9d
 80017dc:	080019bd 	.word	0x080019bd
 80017e0:	08001a9d 	.word	0x08001a9d
 80017e4:	08001a9d 	.word	0x08001a9d
 80017e8:	08001a9d 	.word	0x08001a9d
 80017ec:	08001a9d 	.word	0x08001a9d
 80017f0:	08001a9d 	.word	0x08001a9d
 80017f4:	08001a9d 	.word	0x08001a9d
 80017f8:	08001a9d 	.word	0x08001a9d
 80017fc:	08001a9d 	.word	0x08001a9d
 8001800:	08001a9d 	.word	0x08001a9d
 8001804:	08001a9d 	.word	0x08001a9d
 8001808:	08001a9d 	.word	0x08001a9d
 800180c:	08001a9d 	.word	0x08001a9d
 8001810:	08001a9d 	.word	0x08001a9d
 8001814:	08001a9d 	.word	0x08001a9d
 8001818:	08001a9d 	.word	0x08001a9d
 800181c:	08001963 	.word	0x08001963
 8001820:	08001a9d 	.word	0x08001a9d
 8001824:	08001a9d 	.word	0x08001a9d
 8001828:	08001a9d 	.word	0x08001a9d
 800182c:	08001a9d 	.word	0x08001a9d
 8001830:	08001a9d 	.word	0x08001a9d
 8001834:	08001a9d 	.word	0x08001a9d
 8001838:	08001a9d 	.word	0x08001a9d
 800183c:	08001a9d 	.word	0x08001a9d
 8001840:	08001a9d 	.word	0x08001a9d
 8001844:	08001a9d 	.word	0x08001a9d
 8001848:	08001a9d 	.word	0x08001a9d
 800184c:	08001a9d 	.word	0x08001a9d
 8001850:	08001a9d 	.word	0x08001a9d
 8001854:	08001a9d 	.word	0x08001a9d
 8001858:	08001a9d 	.word	0x08001a9d
 800185c:	080019fb 	.word	0x080019fb
 8001860:	08001a23 	.word	0x08001a23
 8001864:	08001a3b 	.word	0x08001a3b
 8001868:	08001a65 	.word	0x08001a65
 800186c:	08001a9d 	.word	0x08001a9d
 8001870:	08001a9d 	.word	0x08001a9d
 8001874:	08001a7d 	.word	0x08001a7d
 8001878:	08001a9d 	.word	0x08001a9d
 800187c:	080018e5 	.word	0x080018e5
 8001880:	08001a9d 	.word	0x08001a9d
 8001884:	080018f7 	.word	0x080018f7
 8001888:	08001909 	.word	0x08001909
 800188c:	0800191b 	.word	0x0800191b
 8001890:	08001a9d 	.word	0x08001a9d
 8001894:	0800192d 	.word	0x0800192d
 8001898:	08001a8d 	.word	0x08001a8d
	// Notes
	case NoteOff:
		if (mNoteOffCallback != 0)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80fd 	beq.w	8001aa0 <_ZN13MidiInterface14launchCallbackEv+0x420>
			mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80018bc:	4798      	blx	r3
		break;
 80018be:	e0ef      	b.n	8001aa0 <_ZN13MidiInterface14launchCallbackEv+0x420>
	case NoteOn:
		if (mNoteOnCallback != 0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80ed 	beq.w	8001aa4 <_ZN13MidiInterface14launchCallbackEv+0x424>
			mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80018e0:	4798      	blx	r3
		break;
 80018e2:	e0df      	b.n	8001aa4 <_ZN13MidiInterface14launchCallbackEv+0x424>

// Real-time messages
	case Clock:
		if (mClockCallback != 0)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80dd 	beq.w	8001aa8 <_ZN13MidiInterface14launchCallbackEv+0x428>
			mClockCallback();
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4798      	blx	r3
		break;
 80018f4:	e0d8      	b.n	8001aa8 <_ZN13MidiInterface14launchCallbackEv+0x428>
	case Start:
		if (mStartCallback != 0)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80d6 	beq.w	8001aac <_ZN13MidiInterface14launchCallbackEv+0x42c>
			mStartCallback();
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001904:	4798      	blx	r3
		break;
 8001906:	e0d1      	b.n	8001aac <_ZN13MidiInterface14launchCallbackEv+0x42c>
	case Continue:
		if (mContinueCallback != 0)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80cf 	beq.w	8001ab0 <_ZN13MidiInterface14launchCallbackEv+0x430>
			mContinueCallback();
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001916:	4798      	blx	r3
		break;
 8001918:	e0ca      	b.n	8001ab0 <_ZN13MidiInterface14launchCallbackEv+0x430>
	case Stop:
		if (mStopCallback != 0)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80c8 	beq.w	8001ab4 <_ZN13MidiInterface14launchCallbackEv+0x434>
			mStopCallback();
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001928:	4798      	blx	r3
		break;
 800192a:	e0c3      	b.n	8001ab4 <_ZN13MidiInterface14launchCallbackEv+0x434>
	case ActiveSensing:
		if (mActiveSensingCallback != 0)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80c1 	beq.w	8001ab8 <_ZN13MidiInterface14launchCallbackEv+0x438>
			mActiveSensingCallback();
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4798      	blx	r3
		break;
 800193c:	e0bc      	b.n	8001ab8 <_ZN13MidiInterface14launchCallbackEv+0x438>

// Continuous controllers
	case ControlChange:
		if (mControlChangeCallback != 0)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80ba 	beq.w	8001abc <_ZN13MidiInterface14launchCallbackEv+0x43c>
			mControlChangeCallback(mMessage.channel, mMessage.data1,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 800195e:	4798      	blx	r3
					mMessage.data2);
		break;
 8001960:	e0ac      	b.n	8001abc <_ZN13MidiInterface14launchCallbackEv+0x43c>
	case PitchBend:
		if (mPitchBendCallback != 0)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80aa 	beq.w	8001ac0 <_ZN13MidiInterface14launchCallbackEv+0x440>
			mPitchBendCallback(mMessage.channel,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
					(int) ((mMessage.data1 & 0x7f)
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 800197c:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
							| ((mMessage.data2 & 0x7f) << 7))
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 8001986:	01d2      	lsls	r2, r2, #7
 8001988:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 800198c:	430a      	orrs	r2, r1
			mPitchBendCallback(mMessage.channel,
 800198e:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
 8001992:	4611      	mov	r1, r2
 8001994:	4798      	blx	r3
							+ MIDI_PITCHBEND_MIN);
		break;
 8001996:	e093      	b.n	8001ac0 <_ZN13MidiInterface14launchCallbackEv+0x440>
	case AfterTouchPoly:
		if (mAfterTouchPolyCallback != 0)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8091 	beq.w	8001ac4 <_ZN13MidiInterface14launchCallbackEv+0x444>
			mAfterTouchPolyCallback(mMessage.channel, mMessage.data1,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80019b8:	4798      	blx	r3
					mMessage.data2);
		break;
 80019ba:	e083      	b.n	8001ac4 <_ZN13MidiInterface14launchCallbackEv+0x444>
	case AfterTouchChannel:
		if (mAfterTouchChannelCallback != 0)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8081 	beq.w	8001ac8 <_ZN13MidiInterface14launchCallbackEv+0x448>
			mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 80019d6:	4611      	mov	r1, r2
 80019d8:	4798      	blx	r3
		break;
 80019da:	e075      	b.n	8001ac8 <_ZN13MidiInterface14launchCallbackEv+0x448>

	case ProgramChange:
		if (mProgramChangeCallback != 0)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d073      	beq.n	8001acc <_ZN13MidiInterface14launchCallbackEv+0x44c>
			mProgramChangeCallback(mMessage.channel, mMessage.data1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 80019f4:	4611      	mov	r1, r2
 80019f6:	4798      	blx	r3
		break;
 80019f8:	e068      	b.n	8001acc <_ZN13MidiInterface14launchCallbackEv+0x44c>
	case SystemExclusive:
		if (mSystemExclusiveCallback != 0)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d066      	beq.n	8001ad0 <_ZN13MidiInterface14launchCallbackEv+0x450>
			mSystemExclusiveCallback(mMessage.sysexArray,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69dc      	ldr	r4, [r3, #28]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f503 75b7 	add.w	r5, r3, #366	@ 0x16e
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe ffc6 	bl	80009a4 <_ZN8mMessage12getSysExSizeEv>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	47a0      	blx	r4
					mMessage.getSysExSize());
		break;
 8001a20:	e056      	b.n	8001ad0 <_ZN13MidiInterface14launchCallbackEv+0x450>

// Occasional messages
	case TimeCodeQuarterFrame:
		if (mTimeCodeQuarterFrameCallback != 0)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d054      	beq.n	8001ad4 <_ZN13MidiInterface14launchCallbackEv+0x454>
			mTimeCodeQuarterFrameCallback(mMessage.data1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a34:	4610      	mov	r0, r2
 8001a36:	4798      	blx	r3
		break;
 8001a38:	e04c      	b.n	8001ad4 <_ZN13MidiInterface14launchCallbackEv+0x454>
	case SongPosition:
		if (mSongPositionCallback != 0)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d04a      	beq.n	8001ad8 <_ZN13MidiInterface14launchCallbackEv+0x458>
			mSongPositionCallback(
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
					(mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a4c:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 8001a56:	01d2      	lsls	r2, r2, #7
 8001a58:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001a5c:	430a      	orrs	r2, r1
			mSongPositionCallback(
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4798      	blx	r3
		break;
 8001a62:	e039      	b.n	8001ad8 <_ZN13MidiInterface14launchCallbackEv+0x458>
	case SongSelect:
		if (mSongSelectCallback != 0)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d037      	beq.n	8001adc <_ZN13MidiInterface14launchCallbackEv+0x45c>
			mSongSelectCallback(mMessage.data1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a76:	4610      	mov	r0, r2
 8001a78:	4798      	blx	r3
		break;
 8001a7a:	e02f      	b.n	8001adc <_ZN13MidiInterface14launchCallbackEv+0x45c>
	case TuneRequest:
		if (mTuneRequestCallback != 0)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d02d      	beq.n	8001ae0 <_ZN13MidiInterface14launchCallbackEv+0x460>
			mTuneRequestCallback();
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	4798      	blx	r3
		break;
 8001a8a:	e029      	b.n	8001ae0 <_ZN13MidiInterface14launchCallbackEv+0x460>

	case SystemReset:
		if (mSystemResetCallback != 0)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d027      	beq.n	8001ae4 <_ZN13MidiInterface14launchCallbackEv+0x464>
			mSystemResetCallback();
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a98:	4798      	blx	r3
		break;
 8001a9a:	e023      	b.n	8001ae4 <_ZN13MidiInterface14launchCallbackEv+0x464>

	case InvalidType:
	default:
		break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001a9c:	bf00      	nop
 8001a9e:	e022      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001aa0:	bf00      	nop
 8001aa2:	e020      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001aa4:	bf00      	nop
 8001aa6:	e01e      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001aa8:	bf00      	nop
 8001aaa:	e01c      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001aac:	bf00      	nop
 8001aae:	e01a      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ab0:	bf00      	nop
 8001ab2:	e018      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ab4:	bf00      	nop
 8001ab6:	e016      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ab8:	bf00      	nop
 8001aba:	e014      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001abc:	bf00      	nop
 8001abe:	e012      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac0:	bf00      	nop
 8001ac2:	e010      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac4:	bf00      	nop
 8001ac6:	e00e      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac8:	bf00      	nop
 8001aca:	e00c      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001acc:	bf00      	nop
 8001ace:	e00a      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad0:	bf00      	nop
 8001ad2:	e008      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad4:	bf00      	nop
 8001ad6:	e006      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad8:	bf00      	nop
 8001ada:	e004      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001adc:	bf00      	nop
 8001ade:	e002      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ae0:	bf00      	nop
 8001ae2:	e000      	b.n	8001ae6 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ae4:	bf00      	nop
	}
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdb0      	pop	{r4, r5, r7, pc}
 8001aee:	bf00      	nop

08001af0 <_ZN13MidiInterface10thruFilterEh>:

void MidiInterface::thruFilter(Channel inChannel) {
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
	// If the feature is disabled, don't do anything.
	if (!mThruActivated || (mThruFilterMode == Thru::Off))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 80da 	bne.w	8001cc8 <_ZN13MidiInterface10thruFilterEh+0x1d8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80d1 	beq.w	8001cc8 <_ZN13MidiInterface10thruFilterEh+0x1d8>
		return;

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da65      	bge.n	8001bfe <_ZN13MidiInterface10thruFilterEh+0x10e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001b38:	2be0      	cmp	r3, #224	@ 0xe0
 8001b3a:	d860      	bhi.n	8001bfe <_ZN13MidiInterface10thruFilterEh+0x10e>
		bool filter_condition = ((mMessage.channel == inChannel)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
				|| (inChannel == MIDI_CHANNEL_OMNI));
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d002      	beq.n	8001b4e <_ZN13MidiInterface10thruFilterEh+0x5e>
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <_ZN13MidiInterface10thruFilterEh+0x62>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <_ZN13MidiInterface10thruFilterEh+0x64>
 8001b52:	2300      	movs	r3, #0
		bool filter_condition = ((mMessage.channel == inChannel)
 8001b54:	73fb      	strb	r3, [r7, #15]

		// Now let's pass it to the output
		switch (mThruFilterMode) {
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b5c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d02d      	beq.n	8001bc2 <_ZN13MidiInterface10thruFilterEh+0xd2>
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	dc43      	bgt.n	8001bf2 <_ZN13MidiInterface10thruFilterEh+0x102>
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d002      	beq.n	8001b74 <_ZN13MidiInterface10thruFilterEh+0x84>
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d012      	beq.n	8001b98 <_ZN13MidiInterface10thruFilterEh+0xa8>
						mMessage.channel);
			}
			break;

		default:
			break;
 8001b72:	e03e      	b.n	8001bf2 <_ZN13MidiInterface10thruFilterEh+0x102>
			send(mMessage.type, mMessage.data1, mMessage.data2,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff f830 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001b96:	e031      	b.n	8001bfc <_ZN13MidiInterface10thruFilterEh+0x10c>
			if (filter_condition) {
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d02b      	beq.n	8001bf6 <_ZN13MidiInterface10thruFilterEh+0x106>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4603      	mov	r3, r0
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff f81b 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001bc0:	e019      	b.n	8001bf6 <_ZN13MidiInterface10thruFilterEh+0x106>
			if (!filter_condition) {
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	f083 0301 	eor.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d015      	beq.n	8001bfa <_ZN13MidiInterface10thruFilterEh+0x10a>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4603      	mov	r3, r0
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff f803 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001bf0:	e003      	b.n	8001bfa <_ZN13MidiInterface10thruFilterEh+0x10a>
			break;
 8001bf2:	bf00      	nop
 8001bf4:	e06b      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001bf6:	bf00      	nop
 8001bf8:	e069      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001bfa:	bf00      	nop
		}
	} else {
 8001bfc:	e067      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
		// Send the message to the output
		switch (mMessage.type) {
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001c04:	2bff      	cmp	r3, #255	@ 0xff
 8001c06:	dc61      	bgt.n	8001ccc <_ZN13MidiInterface10thruFilterEh+0x1dc>
 8001c08:	2bf2      	cmp	r3, #242	@ 0xf2
 8001c0a:	da04      	bge.n	8001c16 <_ZN13MidiInterface10thruFilterEh+0x126>
 8001c0c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c0e:	d02b      	beq.n	8001c68 <_ZN13MidiInterface10thruFilterEh+0x178>
 8001c10:	2bf1      	cmp	r3, #241	@ 0xf1
 8001c12:	d04e      	beq.n	8001cb2 <_ZN13MidiInterface10thruFilterEh+0x1c2>
		case TimeCodeQuarterFrame:
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
			break;

		default:
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001c14:	e05a      	b.n	8001ccc <_ZN13MidiInterface10thruFilterEh+0x1dc>
		switch (mMessage.type) {
 8001c16:	3bf2      	subs	r3, #242	@ 0xf2
 8001c18:	2201      	movs	r2, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001c22:	401a      	ands	r2, r3
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2201      	movne	r2, #1
 8001c2a:	2200      	moveq	r2, #0
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	2a00      	cmp	r2, #0
 8001c30:	d112      	bne.n	8001c58 <_ZN13MidiInterface10thruFilterEh+0x168>
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	2a00      	cmp	r2, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2201      	movne	r2, #1
 8001c3c:	2200      	moveq	r2, #0
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d128      	bne.n	8001c96 <_ZN13MidiInterface10thruFilterEh+0x1a6>
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d117      	bne.n	8001c86 <_ZN13MidiInterface10thruFilterEh+0x196>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001c56:	e039      	b.n	8001ccc <_ZN13MidiInterface10thruFilterEh+0x1dc>
			sendRealTime(mMessage.type);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff f911 	bl	8000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>
			break;
 8001c66:	e032      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSysEx(getSysExArrayLength(), getSysExArray(), true);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff fc59 	bl	8001520 <_ZN13MidiInterface19getSysExArrayLengthEv>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b2dc      	uxtb	r4, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fc47 	bl	8001506 <_ZN13MidiInterface13getSysExArrayEv>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff f82c 	bl	8000cdc <_ZN13MidiInterface9sendSysExEhPhb>
			break;
 8001c84:	e023      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongSelect(mMessage.data1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff f8d5 	bl	8000e3e <_ZN13MidiInterface14sendSongSelectEh>
			break;
 8001c94:	e01b      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongPosition(mMessage.data1 | ((unsigned) mMessage.data2 << 7));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8001ca4:	01db      	lsls	r3, r3, #7
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff f896 	bl	8000ddc <_ZN13MidiInterface16sendSongPositionEj>
			break;
 8001cb0:	e00d      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 116b 	ldrb.w	r1, [r3, #363]	@ 0x16b
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff f84a 	bl	8000d5a <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>
			break;
 8001cc6:	e002      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
		return;
 8001cc8:	bf00      	nop
 8001cca:	e000      	b.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1de>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001ccc:	bf00      	nop
		}
	}
}
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}

08001cd4 <_Z12Handle_Clockv>:

#include "MidiHandlers.h"
#include "stm32f3xx_hal.h"
int i;
int u;
void Handle_Clock() {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	i++;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <_Z12Handle_Clockv+0x2c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <_Z12Handle_Clockv+0x2c>)
 8001ce0:	6013      	str	r3, [r2, #0]
	if (i / 12 == 1) {
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <_Z12Handle_Clockv+0x2c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3b0c      	subs	r3, #12
 8001ce8:	2b0b      	cmp	r3, #11
 8001cea:	d807      	bhi.n	8001cfc <_Z12Handle_Clockv+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001cec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cf0:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <_Z12Handle_Clockv+0x30>)
 8001cf2:	f002 fca1 	bl	8004638 <HAL_GPIO_TogglePin>
		i = 0;
 8001cf6:	4b02      	ldr	r3, [pc, #8]	@ (8001d00 <_Z12Handle_Clockv+0x2c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000028 	.word	0x20000028
 8001d04:	48000800 	.word	0x48000800

08001d08 <_Z12Handle_Startv>:

void Handle_Start() {
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
	i = 0;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <_Z12Handle_Startv+0x14>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_SET);
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000028 	.word	0x20000028

08001d20 <_Z11Handle_Stopv>:
void Handle_Stop() {
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_RESET);
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <ADSR_Init>:
//    adsr->gate_signal = 0;
//    adsr->amplitude = 1;      // Default amplitude is 1.0 (full volume)
//}
//extern float lookup_t[128];

void ADSR_Init(ADSR_t *adsr, int num_envelopes) {
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < num_envelopes; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e03c      	b.n	8001dba <ADSR_Init+0x8a>
        adsr[i].attack_rate = attack_rate_lookup[64];
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd0 <ADSR_Init+0xa0>)
 8001d52:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8001d56:	601a      	str	r2, [r3, #0]
        adsr[i].decay_rate = attack_rate_lookup[64];
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a19      	ldr	r2, [pc, #100]	@ (8001dd0 <ADSR_Init+0xa0>)
 8001d6a:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8001d6e:	605a      	str	r2, [r3, #4]
        adsr[i].sustain_level = 0.5f;
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001d84:	609a      	str	r2, [r3, #8]
        adsr[i].release_rate = attack_rate_lookup[64];
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd0 <ADSR_Init+0xa0>)
 8001d98:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8001d9c:	60da      	str	r2, [r3, #12]
        adsr[i].amplitude = 1.0f;
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	461a      	mov	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001db2:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < num_envelopes; i++) {
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3301      	adds	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbbe      	blt.n	8001d40 <ADSR_Init+0x10>
    }
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	0800a14c 	.word	0x0800a14c

08001dd4 <ADSR_UpdateEnvelope>:
//            break;
//    }
//}}}

// Updates the envelope for a specific ADSR instance
void ADSR_UpdateEnvelope(ADSR_t *adsr) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

    switch (adsr->state) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e1b      	ldrb	r3, [r3, #24]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d871      	bhi.n	8001eca <ADSR_UpdateEnvelope+0xf6>
 8001de6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dec <ADSR_UpdateEnvelope+0x18>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e01 	.word	0x08001e01
 8001df0:	08001e3d 	.word	0x08001e3d
 8001df4:	08001e7b 	.word	0x08001e7b
 8001df8:	08001e8d 	.word	0x08001e8d
 8001dfc:	08001ec5 	.word	0x08001ec5
        case ATTACK:
            adsr->envelope_value += adsr->attack_rate;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value >= 1.0f) {
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	da00      	bge.n	8001e2c <ADSR_UpdateEnvelope+0x58>
                adsr->envelope_value = 1.0f;
                adsr->state = DECAY;
            }
            break;
 8001e2a:	e04e      	b.n	8001eca <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 1.0f;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e32:	615a      	str	r2, [r3, #20]
                adsr->state = DECAY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	761a      	strb	r2, [r3, #24]
            break;
 8001e3a:	e046      	b.n	8001eca <ADSR_UpdateEnvelope+0xf6>

        case DECAY:
            adsr->envelope_value -= adsr->decay_rate;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= adsr->sustain_level) {
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	d900      	bls.n	8001e6a <ADSR_UpdateEnvelope+0x96>
                adsr->envelope_value = adsr->sustain_level;
                adsr->state = SUSTAIN;
            }
            break;
 8001e68:	e02f      	b.n	8001eca <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = adsr->sustain_level;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	615a      	str	r2, [r3, #20]
                adsr->state = SUSTAIN;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	761a      	strb	r2, [r3, #24]
            break;
 8001e78:	e027      	b.n	8001eca <ADSR_UpdateEnvelope+0xf6>

        case SUSTAIN:
            if (!adsr->gate_signal) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7e5b      	ldrb	r3, [r3, #25]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d121      	bne.n	8001ec8 <ADSR_UpdateEnvelope+0xf4>
                adsr->state = RELEASE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	761a      	strb	r2, [r3, #24]
            }
            break;
 8001e8a:	e01d      	b.n	8001ec8 <ADSR_UpdateEnvelope+0xf4>

        case RELEASE:
            adsr->envelope_value -= adsr->release_rate;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= 0.0f) {
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d900      	bls.n	8001eb4 <ADSR_UpdateEnvelope+0xe0>
                adsr->envelope_value = 0.0f;
                adsr->state = IDLE;
            }
            break;
 8001eb2:	e00a      	b.n	8001eca <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 0.0f;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
                adsr->state = IDLE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	761a      	strb	r2, [r3, #24]
            break;
 8001ec2:	e002      	b.n	8001eca <ADSR_UpdateEnvelope+0xf6>

        case IDLE:
            // Do nothing
            break;
 8001ec4:	bf00      	nop
 8001ec6:	e000      	b.n	8001eca <ADSR_UpdateEnvelope+0xf6>
            break;
 8001ec8:	bf00      	nop
    }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <ADSR_SetGateSignal>:

// Sets the gate signal for a specific ADSR instance
void ADSR_SetGateSignal(ADSR_t *adsr, uint8_t gate_signal_value) {
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
    adsr->gate_signal = gate_signal_value;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	765a      	strb	r2, [r3, #25]
    if (adsr->gate_signal) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7e5b      	ldrb	r3, [r3, #25]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <ADSR_SetGateSignal+0x24>
        adsr->state = ATTACK;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	761a      	strb	r2, [r3, #24]
    } else {
        adsr->state = RELEASE;
    }
}
 8001efa:	e002      	b.n	8001f02 <ADSR_SetGateSignal+0x2a>
        adsr->state = RELEASE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2203      	movs	r2, #3
 8001f00:	761a      	strb	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <ADSR_GetEnvelopeValue>:
    }
    adsr->amplitude = amplitude;
}

// Returns the envelope value (scaled by the amplitude) for a specific ADSR instance
float ADSR_GetEnvelopeValue(const ADSR_t *adsr) {
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
    return adsr->envelope_value * adsr->amplitude;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f22:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001f26:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	0000      	movs	r0, r0
	...

08001f38 <_Z13Handle_NoteOnhhh>:
void ADSR_HandleCC(byte channel, byte number, byte value);

// Add new variables for third and fourth notes


void Handle_NoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	@ 0x30
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	460b      	mov	r3, r1
 8001f44:	71bb      	strb	r3, [r7, #6]
 8001f46:	4613      	mov	r3, r2
 8001f48:	717b      	strb	r3, [r7, #5]
    uint32_t pitch_CV = (uint32_t)((note * 0.0833333333 * X) / (3.3 / 4095));  // Calculate pitch CV from MIDI note
 8001f4a:	79bb      	ldrb	r3, [r7, #6]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fa8d 	bl	800046c <__aeabi_i2d>
 8001f52:	a39b      	add	r3, pc, #620	@ (adr r3, 80021c0 <_Z13Handle_NoteOnhhh+0x288>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe faf2 	bl	8000540 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b81      	ldr	r3, [pc, #516]	@ (8002170 <_Z13Handle_NoteOnhhh+0x238>)
 8001f6a:	f7fe fae9 	bl	8000540 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	a378      	add	r3, pc, #480	@ (adr r3, 8002158 <_Z13Handle_NoteOnhhh+0x220>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fc0a 	bl	8000794 <__aeabi_ddiv>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fcec 	bl	8000964 <__aeabi_d2uiz>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t velo_CV = (uint32_t)((velocity / 127.0) * 4095);
 8001f90:	797b      	ldrb	r3, [r7, #5]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fa6a 	bl	800046c <__aeabi_i2d>
 8001f98:	a371      	add	r3, pc, #452	@ (adr r3, 8002160 <_Z13Handle_NoteOnhhh+0x228>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fbf9 	bl	8000794 <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	a36f      	add	r3, pc, #444	@ (adr r3, 8002168 <_Z13Handle_NoteOnhhh+0x230>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe fac6 	bl	8000540 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fcd2 	bl	8000964 <__aeabi_d2uiz>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	623b      	str	r3, [r7, #32]
    ChannelConfig config;
    ChannelConfig_2 config2;

    if (!first_note_active) {
 8001fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8002174 <_Z13Handle_NoteOnhhh+0x23c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f083 0301 	eor.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d029      	beq.n	8002026 <_Z13Handle_NoteOnhhh+0xee>
        pitch1_CV = pitch_CV;
 8001fd2:	4a69      	ldr	r2, [pc, #420]	@ (8002178 <_Z13Handle_NoteOnhhh+0x240>)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	6013      	str	r3, [r2, #0]

        ADSR_SetGateSignal(&envelopes[0], 1);
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4868      	ldr	r0, [pc, #416]	@ (800217c <_Z13Handle_NoteOnhhh+0x244>)
 8001fdc:	f7ff ff7c 	bl	8001ed8 <ADSR_SetGateSignal>
        config.val[0] = pitch1_CV; // 12-bit DAC value for channel A
 8001fe0:	4b65      	ldr	r3, [pc, #404]	@ (8002178 <_Z13Handle_NoteOnhhh+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	82fb      	strh	r3, [r7, #22]
        config2.val[0] = velo_CV;  // 12-bit DAC value for channel B
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	817b      	strh	r3, [r7, #10]
        DACx60SW(&hi2c1, config, 0);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff8:	4861      	ldr	r0, [pc, #388]	@ (8002180 <_Z13Handle_NoteOnhhh+0x248>)
 8001ffa:	f000 fe97 	bl	8002d2c <DACx60SW>
        DACx61SW(&hi2c1, config2, 0);
 8001ffe:	2300      	movs	r3, #0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002008:	485d      	ldr	r0, [pc, #372]	@ (8002180 <_Z13Handle_NoteOnhhh+0x248>)
 800200a:	f000 fee9 	bl	8002de0 <DACx61SW>

        HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PIN_SET);  // Indicate first note is on via gate3_Pin
 800200e:	2201      	movs	r2, #1
 8002010:	2101      	movs	r1, #1
 8002012:	485c      	ldr	r0, [pc, #368]	@ (8002184 <_Z13Handle_NoteOnhhh+0x24c>)
 8002014:	f002 faf8 	bl	8004608 <HAL_GPIO_WritePin>
        first_note_active = true;  // First note is now active
 8002018:	4b56      	ldr	r3, [pc, #344]	@ (8002174 <_Z13Handle_NoteOnhhh+0x23c>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
        first_note = note;  // Store the note value
 800201e:	4a5a      	ldr	r2, [pc, #360]	@ (8002188 <_Z13Handle_NoteOnhhh+0x250>)
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	7013      	strb	r3, [r2, #0]

        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_SET);  // Indicate fourth note is on via gate4_Pin
        fourth_note_active = true;  // Fourth note is now active
        fourth_note = note;  // Store the note value
    }
}
 8002024:	e092      	b.n	800214c <_Z13Handle_NoteOnhhh+0x214>
    } else if (!second_note_active) {
 8002026:	4b59      	ldr	r3, [pc, #356]	@ (800218c <_Z13Handle_NoteOnhhh+0x254>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f083 0301 	eor.w	r3, r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d029      	beq.n	8002088 <_Z13Handle_NoteOnhhh+0x150>
        pitch2_CV = pitch_CV;
 8002034:	4a56      	ldr	r2, [pc, #344]	@ (8002190 <_Z13Handle_NoteOnhhh+0x258>)
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	6013      	str	r3, [r2, #0]
        ADSR_SetGateSignal(&envelopes[1], 1);
 800203a:	2101      	movs	r1, #1
 800203c:	4855      	ldr	r0, [pc, #340]	@ (8002194 <_Z13Handle_NoteOnhhh+0x25c>)
 800203e:	f7ff ff4b 	bl	8001ed8 <ADSR_SetGateSignal>
        config.val[1] = pitch2_CV; // 12-bit DAC value for channel A
 8002042:	4b53      	ldr	r3, [pc, #332]	@ (8002190 <_Z13Handle_NoteOnhhh+0x258>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	833b      	strh	r3, [r7, #24]
        config2.val[1] = velo_CV;  // 12-bit DAC value for channel B
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	b29b      	uxth	r3, r3
 800204e:	81bb      	strh	r3, [r7, #12]
        DACx60SW(&hi2c1, config, 1);
 8002050:	2301      	movs	r3, #1
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205a:	4849      	ldr	r0, [pc, #292]	@ (8002180 <_Z13Handle_NoteOnhhh+0x248>)
 800205c:	f000 fe66 	bl	8002d2c <DACx60SW>
        DACx61SW(&hi2c1, config2, 1);
 8002060:	2301      	movs	r3, #1
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206a:	4845      	ldr	r0, [pc, #276]	@ (8002180 <_Z13Handle_NoteOnhhh+0x248>)
 800206c:	f000 feb8 	bl	8002de0 <DACx61SW>
        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_SET);  // Indicate second note is on via gate2_Pin
 8002070:	2201      	movs	r2, #1
 8002072:	2102      	movs	r1, #2
 8002074:	4843      	ldr	r0, [pc, #268]	@ (8002184 <_Z13Handle_NoteOnhhh+0x24c>)
 8002076:	f002 fac7 	bl	8004608 <HAL_GPIO_WritePin>
        second_note_active = true;  // Second note is now active
 800207a:	4b44      	ldr	r3, [pc, #272]	@ (800218c <_Z13Handle_NoteOnhhh+0x254>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
        second_note = note;  // Store the note value
 8002080:	4a45      	ldr	r2, [pc, #276]	@ (8002198 <_Z13Handle_NoteOnhhh+0x260>)
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	7013      	strb	r3, [r2, #0]
}
 8002086:	e061      	b.n	800214c <_Z13Handle_NoteOnhhh+0x214>
    } else if (!third_note_active) {
 8002088:	4b44      	ldr	r3, [pc, #272]	@ (800219c <_Z13Handle_NoteOnhhh+0x264>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d029      	beq.n	80020ea <_Z13Handle_NoteOnhhh+0x1b2>
        pitch3_CV = pitch_CV;
 8002096:	4a42      	ldr	r2, [pc, #264]	@ (80021a0 <_Z13Handle_NoteOnhhh+0x268>)
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	6013      	str	r3, [r2, #0]
        ADSR_SetGateSignal(&envelopes[2], 1);
 800209c:	2101      	movs	r1, #1
 800209e:	4841      	ldr	r0, [pc, #260]	@ (80021a4 <_Z13Handle_NoteOnhhh+0x26c>)
 80020a0:	f7ff ff1a 	bl	8001ed8 <ADSR_SetGateSignal>
        config.val[2] = pitch3_CV; // 12-bit DAC value for channel A
 80020a4:	4b3e      	ldr	r3, [pc, #248]	@ (80021a0 <_Z13Handle_NoteOnhhh+0x268>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	837b      	strh	r3, [r7, #26]
        config2.val[2] = velo_CV;  // 12-bit DAC value for channel B
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	81fb      	strh	r3, [r7, #14]
        DACx60SW(&hi2c1, config, 2);
 80020b2:	2302      	movs	r3, #2
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020bc:	4830      	ldr	r0, [pc, #192]	@ (8002180 <_Z13Handle_NoteOnhhh+0x248>)
 80020be:	f000 fe35 	bl	8002d2c <DACx60SW>
        DACx61SW(&hi2c1, config2, 2);
 80020c2:	2302      	movs	r3, #2
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020cc:	482c      	ldr	r0, [pc, #176]	@ (8002180 <_Z13Handle_NoteOnhhh+0x248>)
 80020ce:	f000 fe87 	bl	8002de0 <DACx61SW>
        HAL_GPIO_WritePin(GPIOB, gate3_Pin, GPIO_PIN_SET);  // Indicate third note is on via gate1_Pin
 80020d2:	2201      	movs	r2, #1
 80020d4:	2104      	movs	r1, #4
 80020d6:	482b      	ldr	r0, [pc, #172]	@ (8002184 <_Z13Handle_NoteOnhhh+0x24c>)
 80020d8:	f002 fa96 	bl	8004608 <HAL_GPIO_WritePin>
        third_note_active = true;  // Third note is now active
 80020dc:	4b2f      	ldr	r3, [pc, #188]	@ (800219c <_Z13Handle_NoteOnhhh+0x264>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
        third_note = note;  // Store the note value
 80020e2:	4a31      	ldr	r2, [pc, #196]	@ (80021a8 <_Z13Handle_NoteOnhhh+0x270>)
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	7013      	strb	r3, [r2, #0]
}
 80020e8:	e030      	b.n	800214c <_Z13Handle_NoteOnhhh+0x214>
    } else if (!fourth_note_active) {
 80020ea:	4b30      	ldr	r3, [pc, #192]	@ (80021ac <_Z13Handle_NoteOnhhh+0x274>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d029      	beq.n	800214c <_Z13Handle_NoteOnhhh+0x214>
        pitch4_CV = pitch_CV;
 80020f8:	4a2d      	ldr	r2, [pc, #180]	@ (80021b0 <_Z13Handle_NoteOnhhh+0x278>)
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	6013      	str	r3, [r2, #0]
        ADSR_SetGateSignal(&envelopes[3], 1);
 80020fe:	2101      	movs	r1, #1
 8002100:	482c      	ldr	r0, [pc, #176]	@ (80021b4 <_Z13Handle_NoteOnhhh+0x27c>)
 8002102:	f7ff fee9 	bl	8001ed8 <ADSR_SetGateSignal>
        config.val[3] = pitch4_CV; // 12-bit DAC value for channel A
 8002106:	4b2a      	ldr	r3, [pc, #168]	@ (80021b0 <_Z13Handle_NoteOnhhh+0x278>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	83bb      	strh	r3, [r7, #28]
        config2.val[3] = velo_CV;  // 12-bit DAC value for channel B
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	b29b      	uxth	r3, r3
 8002112:	823b      	strh	r3, [r7, #16]
        DACx60SW(&hi2c1, config, 3);
 8002114:	2303      	movs	r3, #3
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211e:	4818      	ldr	r0, [pc, #96]	@ (8002180 <_Z13Handle_NoteOnhhh+0x248>)
 8002120:	f000 fe04 	bl	8002d2c <DACx60SW>
        DACx61SW(&hi2c1, config2, 3);
 8002124:	2303      	movs	r3, #3
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212e:	4814      	ldr	r0, [pc, #80]	@ (8002180 <_Z13Handle_NoteOnhhh+0x248>)
 8002130:	f000 fe56 	bl	8002de0 <DACx61SW>
        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_SET);  // Indicate fourth note is on via gate4_Pin
 8002134:	2201      	movs	r2, #1
 8002136:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800213a:	481f      	ldr	r0, [pc, #124]	@ (80021b8 <_Z13Handle_NoteOnhhh+0x280>)
 800213c:	f002 fa64 	bl	8004608 <HAL_GPIO_WritePin>
        fourth_note_active = true;  // Fourth note is now active
 8002140:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <_Z13Handle_NoteOnhhh+0x274>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
        fourth_note = note;  // Store the note value
 8002146:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <_Z13Handle_NoteOnhhh+0x284>)
 8002148:	79bb      	ldrb	r3, [r7, #6]
 800214a:	7013      	strb	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	@ 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	f3af 8000 	nop.w
 8002158:	e734d9b4 	.word	0xe734d9b4
 800215c:	3f4a680c 	.word	0x3f4a680c
 8002160:	00000000 	.word	0x00000000
 8002164:	405fc000 	.word	0x405fc000
 8002168:	00000000 	.word	0x00000000
 800216c:	40affe00 	.word	0x40affe00
 8002170:	3fd00000 	.word	0x3fd00000
 8002174:	2000035c 	.word	0x2000035c
 8002178:	20000360 	.word	0x20000360
 800217c:	20000374 	.word	0x20000374
 8002180:	20000054 	.word	0x20000054
 8002184:	48000400 	.word	0x48000400
 8002188:	20000370 	.word	0x20000370
 800218c:	2000035d 	.word	0x2000035d
 8002190:	20000364 	.word	0x20000364
 8002194:	20000390 	.word	0x20000390
 8002198:	20000371 	.word	0x20000371
 800219c:	2000035e 	.word	0x2000035e
 80021a0:	20000368 	.word	0x20000368
 80021a4:	200003ac 	.word	0x200003ac
 80021a8:	20000372 	.word	0x20000372
 80021ac:	2000035f 	.word	0x2000035f
 80021b0:	2000036c 	.word	0x2000036c
 80021b4:	200003c8 	.word	0x200003c8
 80021b8:	48001000 	.word	0x48001000
 80021bc:	20000373 	.word	0x20000373
 80021c0:	5530aed6 	.word	0x5530aed6
 80021c4:	3fb55555 	.word	0x3fb55555

080021c8 <_Z14Handle_NoteOffhhh>:

void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	460b      	mov	r3, r1
 80021d4:	71bb      	strb	r3, [r7, #6]
 80021d6:	4613      	mov	r3, r2
 80021d8:	717b      	strb	r3, [r7, #5]
    if (first_note_active && note == first_note) {
 80021da:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <_Z14Handle_NoteOffhhh+0xcc>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d011      	beq.n	8002206 <_Z14Handle_NoteOffhhh+0x3e>
 80021e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002298 <_Z14Handle_NoteOffhhh+0xd0>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	79ba      	ldrb	r2, [r7, #6]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d10c      	bne.n	8002206 <_Z14Handle_NoteOffhhh+0x3e>
        ADSR_SetGateSignal(&envelopes[0], 0);
 80021ec:	2100      	movs	r1, #0
 80021ee:	482b      	ldr	r0, [pc, #172]	@ (800229c <_Z14Handle_NoteOffhhh+0xd4>)
 80021f0:	f7ff fe72 	bl	8001ed8 <ADSR_SetGateSignal>

        HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PIN_RESET);  // PB2 Turn off gate for first note
 80021f4:	2200      	movs	r2, #0
 80021f6:	2101      	movs	r1, #1
 80021f8:	4829      	ldr	r0, [pc, #164]	@ (80022a0 <_Z14Handle_NoteOffhhh+0xd8>)
 80021fa:	f002 fa05 	bl	8004608 <HAL_GPIO_WritePin>
        first_note_active = false;  // First note is no longer active
 80021fe:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <_Z14Handle_NoteOffhhh+0xcc>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e042      	b.n	800228c <_Z14Handle_NoteOffhhh+0xc4>
    } else if (second_note_active && note == second_note) {
 8002206:	4b27      	ldr	r3, [pc, #156]	@ (80022a4 <_Z14Handle_NoteOffhhh+0xdc>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d011      	beq.n	8002232 <_Z14Handle_NoteOffhhh+0x6a>
 800220e:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <_Z14Handle_NoteOffhhh+0xe0>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	79ba      	ldrb	r2, [r7, #6]
 8002214:	429a      	cmp	r2, r3
 8002216:	d10c      	bne.n	8002232 <_Z14Handle_NoteOffhhh+0x6a>
        ADSR_SetGateSignal(&envelopes[1], 0);
 8002218:	2100      	movs	r1, #0
 800221a:	4824      	ldr	r0, [pc, #144]	@ (80022ac <_Z14Handle_NoteOffhhh+0xe4>)
 800221c:	f7ff fe5c 	bl	8001ed8 <ADSR_SetGateSignal>
        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_RESET);  // Turn off gate for second note
 8002220:	2200      	movs	r2, #0
 8002222:	2102      	movs	r1, #2
 8002224:	481e      	ldr	r0, [pc, #120]	@ (80022a0 <_Z14Handle_NoteOffhhh+0xd8>)
 8002226:	f002 f9ef 	bl	8004608 <HAL_GPIO_WritePin>
        second_note_active = false;  // Second note is no longer active
 800222a:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <_Z14Handle_NoteOffhhh+0xdc>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e02c      	b.n	800228c <_Z14Handle_NoteOffhhh+0xc4>
    } else if (third_note_active && note == third_note) {
 8002232:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <_Z14Handle_NoteOffhhh+0xe8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d011      	beq.n	800225e <_Z14Handle_NoteOffhhh+0x96>
 800223a:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <_Z14Handle_NoteOffhhh+0xec>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	79ba      	ldrb	r2, [r7, #6]
 8002240:	429a      	cmp	r2, r3
 8002242:	d10c      	bne.n	800225e <_Z14Handle_NoteOffhhh+0x96>
        ADSR_SetGateSignal(&envelopes[2], 0);
 8002244:	2100      	movs	r1, #0
 8002246:	481c      	ldr	r0, [pc, #112]	@ (80022b8 <_Z14Handle_NoteOffhhh+0xf0>)
 8002248:	f7ff fe46 	bl	8001ed8 <ADSR_SetGateSignal>
        HAL_GPIO_WritePin(GPIOB, gate3_Pin, GPIO_PIN_RESET);  // Turn off gate for third note
 800224c:	2200      	movs	r2, #0
 800224e:	2104      	movs	r1, #4
 8002250:	4813      	ldr	r0, [pc, #76]	@ (80022a0 <_Z14Handle_NoteOffhhh+0xd8>)
 8002252:	f002 f9d9 	bl	8004608 <HAL_GPIO_WritePin>
        third_note_active = false;  // Third note is no longer active
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <_Z14Handle_NoteOffhhh+0xe8>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e016      	b.n	800228c <_Z14Handle_NoteOffhhh+0xc4>
    } else if (fourth_note_active && note == fourth_note) {
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <_Z14Handle_NoteOffhhh+0xf4>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d012      	beq.n	800228c <_Z14Handle_NoteOffhhh+0xc4>
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <_Z14Handle_NoteOffhhh+0xf8>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	79ba      	ldrb	r2, [r7, #6]
 800226c:	429a      	cmp	r2, r3
 800226e:	d10d      	bne.n	800228c <_Z14Handle_NoteOffhhh+0xc4>
        ADSR_SetGateSignal(&envelopes[3], 0);
 8002270:	2100      	movs	r1, #0
 8002272:	4814      	ldr	r0, [pc, #80]	@ (80022c4 <_Z14Handle_NoteOffhhh+0xfc>)
 8002274:	f7ff fe30 	bl	8001ed8 <ADSR_SetGateSignal>
        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_RESET);  // Turn off gate for fourth note
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800227e:	4812      	ldr	r0, [pc, #72]	@ (80022c8 <_Z14Handle_NoteOffhhh+0x100>)
 8002280:	f002 f9c2 	bl	8004608 <HAL_GPIO_WritePin>
        fourth_note_active = false;  // Fourth note is no longer active
 8002284:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <_Z14Handle_NoteOffhhh+0xf4>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
    }
}
 800228a:	e7ff      	b.n	800228c <_Z14Handle_NoteOffhhh+0xc4>
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2000035c 	.word	0x2000035c
 8002298:	20000370 	.word	0x20000370
 800229c:	20000374 	.word	0x20000374
 80022a0:	48000400 	.word	0x48000400
 80022a4:	2000035d 	.word	0x2000035d
 80022a8:	20000371 	.word	0x20000371
 80022ac:	20000390 	.word	0x20000390
 80022b0:	2000035e 	.word	0x2000035e
 80022b4:	20000372 	.word	0x20000372
 80022b8:	200003ac 	.word	0x200003ac
 80022bc:	2000035f 	.word	0x2000035f
 80022c0:	20000373 	.word	0x20000373
 80022c4:	200003c8 	.word	0x200003c8
 80022c8:	48001000 	.word	0x48001000

080022cc <_Z21envelope_to_dac_valuef>:
//    if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK) {
//        // PWM start error handling
//    }
//}
// Convert envelope value (0.0 - 1.0) to DAC value (0 - 4095)
uint32_t envelope_to_dac_value(float envelope_value) {
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(envelope_value * 4095.0f);
 80022d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022da:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80022f8 <_Z21envelope_to_dac_valuef+0x2c>
 80022de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e6:	ee17 3a90 	vmov	r3, s15
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	457ff000 	.word	0x457ff000

080022fc <HAL_TIM_PeriodElapsedCallback>:
//    }
////        update_adsr_flag = false;
//    }
//
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
//    if (htim->Instance == TIM13) {
//        update_adsr_flag = true;  // Set the flag to update ADSR parameters
// //       oled("ADSR Flag = TRUE");
//    }

    if (htim->Instance == TIM7) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a23      	ldr	r2, [pc, #140]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d13f      	bne.n	800238e <HAL_TIM_PeriodElapsedCallback+0x92>
/*  ADSR kreivių formavimas naudojant laikmatį.  */
        // Update the first envelope
        ADSR_UpdateEnvelope(&envelopes[0]);
 800230e:	4823      	ldr	r0, [pc, #140]	@ (800239c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002310:	f7ff fd60 	bl	8001dd4 <ADSR_UpdateEnvelope>
        uint32_t dac_value1 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[0]));
 8002314:	4821      	ldr	r0, [pc, #132]	@ (800239c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002316:	f7ff fdfa 	bl	8001f0e <ADSR_GetEnvelopeValue>
 800231a:	eef0 7a40 	vmov.f32	s15, s0
 800231e:	eeb0 0a67 	vmov.f32	s0, s15
 8002322:	f7ff ffd3 	bl	80022cc <_Z21envelope_to_dac_valuef>
 8002326:	6178      	str	r0, [r7, #20]
        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value1);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	481c      	ldr	r0, [pc, #112]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002330:	f001 fcf7 	bl	8003d22 <HAL_DAC_SetValue>
        // Update the second envelope
        ADSR_UpdateEnvelope(&envelopes[1]);
 8002334:	481b      	ldr	r0, [pc, #108]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002336:	f7ff fd4d 	bl	8001dd4 <ADSR_UpdateEnvelope>
        uint32_t dac_value2 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[1]));
 800233a:	481a      	ldr	r0, [pc, #104]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800233c:	f7ff fde7 	bl	8001f0e <ADSR_GetEnvelopeValue>
 8002340:	eef0 7a40 	vmov.f32	s15, s0
 8002344:	eeb0 0a67 	vmov.f32	s0, s15
 8002348:	f7ff ffc0 	bl	80022cc <_Z21envelope_to_dac_valuef>
 800234c:	6138      	str	r0, [r7, #16]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value2);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2200      	movs	r2, #0
 8002352:	2110      	movs	r1, #16
 8002354:	4814      	ldr	r0, [pc, #80]	@ (80023a8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002356:	f001 fce4 	bl	8003d22 <HAL_DAC_SetValue>
        //
        ADSR_UpdateEnvelope(&envelopes[2]);
 800235a:	4814      	ldr	r0, [pc, #80]	@ (80023ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800235c:	f7ff fd3a 	bl	8001dd4 <ADSR_UpdateEnvelope>
        uint32_t dac_value3 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[2]));
 8002360:	4812      	ldr	r0, [pc, #72]	@ (80023ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002362:	f7ff fdd4 	bl	8001f0e <ADSR_GetEnvelopeValue>
 8002366:	eef0 7a40 	vmov.f32	s15, s0
 800236a:	eeb0 0a67 	vmov.f32	s0, s15
 800236e:	f7ff ffad 	bl	80022cc <_Z21envelope_to_dac_valuef>
 8002372:	60f8      	str	r0, [r7, #12]
        //
        ADSR_UpdateEnvelope(&envelopes[3]);
 8002374:	480e      	ldr	r0, [pc, #56]	@ (80023b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002376:	f7ff fd2d 	bl	8001dd4 <ADSR_UpdateEnvelope>
        uint32_t dac_value4 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[3]));
 800237a:	480d      	ldr	r0, [pc, #52]	@ (80023b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800237c:	f7ff fdc7 	bl	8001f0e <ADSR_GetEnvelopeValue>
 8002380:	eef0 7a40 	vmov.f32	s15, s0
 8002384:	eeb0 0a67 	vmov.f32	s0, s15
 8002388:	f7ff ffa0 	bl	80022cc <_Z21envelope_to_dac_valuef>
 800238c:	60b8      	str	r0, [r7, #8]
//        if (ramp_counter > 4095) {
//            ramp_counter = 0;
//        }
//        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ramp_counter);
//    }
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40001400 	.word	0x40001400
 800239c:	20000374 	.word	0x20000374
 80023a0:	20000040 	.word	0x20000040
 80023a4:	20000390 	.word	0x20000390
 80023a8:	2000002c 	.word	0x2000002c
 80023ac:	200003ac 	.word	0x200003ac
 80023b0:	200003c8 	.word	0x200003c8

080023b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b08d      	sub	sp, #52	@ 0x34
 80023b8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char tekstas[] = "LOST MY SHIT";
 80023ba:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <main+0xe0>)
 80023bc:	f107 0418 	add.w	r4, r7, #24
 80023c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c2:	c407      	stmia	r4!, {r0, r1, r2}
 80023c4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023c6:	f001 faef 	bl	80039a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ca:	f000 f87f 	bl	80024cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ce:	f000 fb8b 	bl	8002ae8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80023d2:	f000 fb6b 	bl	8002aac <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 80023d6:	f000 fb35 	bl	8002a44 <_ZL19MX_USART1_UART_Initv>
  MX_DAC1_Init();
 80023da:	f000 f8e7 	bl	80025ac <_ZL12MX_DAC1_Initv>
  MX_DAC2_Init();
 80023de:	f000 f929 	bl	8002634 <_ZL12MX_DAC2_Initv>
  MX_SPI2_Init();
 80023e2:	f000 f9f7 	bl	80027d4 <_ZL12MX_SPI2_Initv>
  MX_I2C1_Init();
 80023e6:	f000 f959 	bl	800269c <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80023ea:	f000 f9a5 	bl	8002738 <_ZL12MX_I2C2_Initv>
  MX_TIM7_Init();
 80023ee:	f000 fa99 	bl	8002924 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 80023f2:	f000 fad7 	bl	80029a4 <_ZL13MX_TIM13_Initv>
  MX_TIM2_Init();
 80023f6:	f000 fa2f 	bl	8002858 <_ZL12MX_TIM2_Initv>
  MX_TIM14_Init();
 80023fa:	f000 fafb 	bl	80029f4 <_ZL13MX_TIM14_Initv>
  /* USER CODE BEGIN 2 */
	Port.begin(1, &huart1, &huart1);
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <main+0xe4>)
 8002400:	4a25      	ldr	r2, [pc, #148]	@ (8002498 <main+0xe4>)
 8002402:	2101      	movs	r1, #1
 8002404:	4825      	ldr	r0, [pc, #148]	@ (800249c <main+0xe8>)
 8002406:	f7fe fbd6 	bl	8000bb6 <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>

	Port.setHandleClock(Handle_Clock);
 800240a:	4925      	ldr	r1, [pc, #148]	@ (80024a0 <main+0xec>)
 800240c:	4823      	ldr	r0, [pc, #140]	@ (800249c <main+0xe8>)
 800240e:	f7ff f90c 	bl	800162a <_ZN13MidiInterface14setHandleClockEPFvvE>
	Port.setHandleStart(Handle_Start);
 8002412:	4924      	ldr	r1, [pc, #144]	@ (80024a4 <main+0xf0>)
 8002414:	4821      	ldr	r0, [pc, #132]	@ (800249c <main+0xe8>)
 8002416:	f7ff f916 	bl	8001646 <_ZN13MidiInterface14setHandleStartEPFvvE>
	Port.setHandleStop(Handle_Stop);
 800241a:	4923      	ldr	r1, [pc, #140]	@ (80024a8 <main+0xf4>)
 800241c:	481f      	ldr	r0, [pc, #124]	@ (800249c <main+0xe8>)
 800241e:	f7ff f920 	bl	8001662 <_ZN13MidiInterface13setHandleStopEPFvvE>
	Port.setHandleNoteOn(Handle_NoteOn);
 8002422:	4922      	ldr	r1, [pc, #136]	@ (80024ac <main+0xf8>)
 8002424:	481d      	ldr	r0, [pc, #116]	@ (800249c <main+0xe8>)
 8002426:	f7ff f8f2 	bl	800160e <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>
	Port.setHandleNoteOff(Handle_NoteOff);
 800242a:	4921      	ldr	r1, [pc, #132]	@ (80024b0 <main+0xfc>)
 800242c:	481b      	ldr	r0, [pc, #108]	@ (800249c <main+0xe8>)
 800242e:	f7ff f8e0 	bl	80015f2 <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>
//	Port.setHandleControlChange(Handle_CC16);
//	Port.setHandleControlChange(ADSR_HandleCC);

//	 printf("Great Succes!\n\r");

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002432:	2100      	movs	r1, #0
 8002434:	481f      	ldr	r0, [pc, #124]	@ (80024b4 <main+0x100>)
 8002436:	f001 fc99 	bl	8003d6c <HAL_DAC_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800243a:	2110      	movs	r1, #16
 800243c:	481d      	ldr	r0, [pc, #116]	@ (80024b4 <main+0x100>)
 800243e:	f001 fc95 	bl	8003d6c <HAL_DAC_Start>
    HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8002442:	2100      	movs	r1, #0
 8002444:	481c      	ldr	r0, [pc, #112]	@ (80024b8 <main+0x104>)
 8002446:	f001 fc91 	bl	8003d6c <HAL_DAC_Start>
    HAL_SPI_Init(&hspi2);
 800244a:	481c      	ldr	r0, [pc, #112]	@ (80024bc <main+0x108>)
 800244c:	f005 fe94 	bl	8008178 <HAL_SPI_Init>

    ChannelConfig config;
    ChannelConfig_2 config2;
    dac_init(&config, &config2);
 8002450:	463a      	mov	r2, r7
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fc19 	bl	8002c90 <dac_init>

    ssd1306_Init();
 800245e:	f000 fd53 	bl	8002f08 <ssd1306_Init>
    ssd1306_SetCursor(5, 50);
 8002462:	2132      	movs	r1, #50	@ 0x32
 8002464:	2005      	movs	r0, #5
 8002466:	f000 ff03 	bl	8003270 <ssd1306_SetCursor>
    ssd1306_WriteString(tekstas, Font_7x10, White);
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <main+0x10c>)
 800246c:	f107 0018 	add.w	r0, r7, #24
 8002470:	2201      	movs	r2, #1
 8002472:	9200      	str	r2, [sp, #0]
 8002474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002476:	f000 fed5 	bl	8003224 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800247a:	f000 fdc7 	bl	800300c <ssd1306_UpdateScreen>

    HAL_TIM_Base_Start_IT(&htim7);
 800247e:	4811      	ldr	r0, [pc, #68]	@ (80024c4 <main+0x110>)
 8002480:	f006 f888 	bl	8008594 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim13);
    //HAL_TIM_Base_Start(&htim2);
    //HAL_TIM_Base_Start(&htim14);
    ADSR_Init(envelopes, NUM_ENVELOPES);
 8002484:	2104      	movs	r1, #4
 8002486:	4810      	ldr	r0, [pc, #64]	@ (80024c8 <main+0x114>)
 8002488:	f7ff fc52 	bl	8001d30 <ADSR_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Port.read();
 800248c:	4803      	ldr	r0, [pc, #12]	@ (800249c <main+0xe8>)
 800248e:	f7fe fd3f 	bl	8000f10 <_ZN13MidiInterface4readEv>
 8002492:	e7fb      	b.n	800248c <main+0xd8>
 8002494:	0800a13c 	.word	0x0800a13c
 8002498:	200002d4 	.word	0x200002d4
 800249c:	200003e4 	.word	0x200003e4
 80024a0:	08001cd5 	.word	0x08001cd5
 80024a4:	08001d09 	.word	0x08001d09
 80024a8:	08001d21 	.word	0x08001d21
 80024ac:	08001f39 	.word	0x08001f39
 80024b0:	080021c9 	.word	0x080021c9
 80024b4:	2000002c 	.word	0x2000002c
 80024b8:	20000040 	.word	0x20000040
 80024bc:	20000140 	.word	0x20000140
 80024c0:	0800aab8 	.word	0x0800aab8
 80024c4:	200001f0 	.word	0x200001f0
 80024c8:	20000374 	.word	0x20000374

080024cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b09a      	sub	sp, #104	@ 0x68
 80024d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024d6:	2228      	movs	r2, #40	@ 0x28
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f007 fde7 	bl	800a0ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024f0:	463b      	mov	r3, r7
 80024f2:	222c      	movs	r2, #44	@ 0x2c
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f007 fdd9 	bl	800a0ae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80024fc:	2303      	movs	r3, #3
 80024fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002504:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800250a:	2301      	movs	r3, #1
 800250c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800250e:	2310      	movs	r3, #16
 8002510:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002512:	2302      	movs	r3, #2
 8002514:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002516:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800251a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800251c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002520:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002522:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002526:	4618      	mov	r0, r3
 8002528:	f004 fa54 	bl	80069d4 <HAL_RCC_OscConfig>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 800253c:	f000 fb70 	bl	8002c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002540:	230f      	movs	r3, #15
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002544:	2302      	movs	r3, #2
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002548:	2300      	movs	r3, #0
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800254c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002550:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002552:	2300      	movs	r3, #0
 8002554:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002556:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800255a:	2102      	movs	r1, #2
 800255c:	4618      	mov	r0, r3
 800255e:	f005 fa77 	bl	8007a50 <HAL_RCC_ClockConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8002572:	f000 fb55 	bl	8002c20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002576:	2361      	movs	r3, #97	@ 0x61
 8002578:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800257a:	2301      	movs	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002586:	463b      	mov	r3, r7
 8002588:	4618      	mov	r0, r3
 800258a:	f005 fc81 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800259e:	f000 fb3f 	bl	8002c20 <Error_Handler>
  }
}
 80025a2:	bf00      	nop
 80025a4:	3768      	adds	r7, #104	@ 0x68
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <_ZL12MX_DAC1_Initv+0x80>)
 80025be:	4a1c      	ldr	r2, [pc, #112]	@ (8002630 <_ZL12MX_DAC1_Initv+0x84>)
 80025c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80025c2:	481a      	ldr	r0, [pc, #104]	@ (800262c <_ZL12MX_DAC1_Initv+0x80>)
 80025c4:	f001 fb8b 	bl	8003cde <HAL_DAC_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <_ZL12MX_DAC1_Initv+0x30>
  {
    Error_Handler();
 80025d8:	f000 fb22 	bl	8002c20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80025dc:	2300      	movs	r3, #0
 80025de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2200      	movs	r2, #0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4810      	ldr	r0, [pc, #64]	@ (800262c <_ZL12MX_DAC1_Initv+0x80>)
 80025ec:	f001 fc09 	bl	8003e02 <HAL_DAC_ConfigChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <_ZL12MX_DAC1_Initv+0x58>
  {
    Error_Handler();
 8002600:	f000 fb0e 	bl	8002c20 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2210      	movs	r2, #16
 8002608:	4619      	mov	r1, r3
 800260a:	4808      	ldr	r0, [pc, #32]	@ (800262c <_ZL12MX_DAC1_Initv+0x80>)
 800260c:	f001 fbf9 	bl	8003e02 <HAL_DAC_ConfigChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <_ZL12MX_DAC1_Initv+0x78>
  {
    Error_Handler();
 8002620:	f000 fafe 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000002c 	.word	0x2000002c
 8002630:	40007400 	.word	0x40007400

08002634 <_ZL12MX_DAC2_Initv>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8002644:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <_ZL12MX_DAC2_Initv+0x60>)
 8002646:	4a14      	ldr	r2, [pc, #80]	@ (8002698 <_ZL12MX_DAC2_Initv+0x64>)
 8002648:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800264a:	4812      	ldr	r0, [pc, #72]	@ (8002694 <_ZL12MX_DAC2_Initv+0x60>)
 800264c:	f001 fb47 	bl	8003cde <HAL_DAC_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <_ZL12MX_DAC2_Initv+0x30>
  {
    Error_Handler();
 8002660:	f000 fade 	bl	8002c20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002664:	2300      	movs	r3, #0
 8002666:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	4808      	ldr	r0, [pc, #32]	@ (8002694 <_ZL12MX_DAC2_Initv+0x60>)
 8002674:	f001 fbc5 	bl	8003e02 <HAL_DAC_ConfigChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <_ZL12MX_DAC2_Initv+0x58>
  {
    Error_Handler();
 8002688:	f000 faca 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000040 	.word	0x20000040
 8002698:	40009800 	.word	0x40009800

0800269c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026a0:	4b22      	ldr	r3, [pc, #136]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026a2:	4a23      	ldr	r2, [pc, #140]	@ (8002730 <_ZL12MX_I2C1_Initv+0x94>)
 80026a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80026a6:	4b21      	ldr	r3, [pc, #132]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026a8:	4a22      	ldr	r2, [pc, #136]	@ (8002734 <_ZL12MX_I2C1_Initv+0x98>)
 80026aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026b8:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026be:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ca:	4b18      	ldr	r3, [pc, #96]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026d0:	4b16      	ldr	r3, [pc, #88]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026d6:	4815      	ldr	r0, [pc, #84]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026d8:	f001 ffc8 	bl	800466c <HAL_I2C_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80026ec:	f000 fa98 	bl	8002c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026f0:	2100      	movs	r1, #0
 80026f2:	480e      	ldr	r0, [pc, #56]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 80026f4:	f004 f8d6 	bl	80068a4 <HAL_I2CEx_ConfigAnalogFilter>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002708:	f000 fa8a 	bl	8002c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800270c:	2100      	movs	r1, #0
 800270e:	4807      	ldr	r0, [pc, #28]	@ (800272c <_ZL12MX_I2C1_Initv+0x90>)
 8002710:	f004 f913 	bl	800693a <HAL_I2CEx_ConfigDigitalFilter>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf14      	ite	ne
 800271a:	2301      	movne	r3, #1
 800271c:	2300      	moveq	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002724:	f000 fa7c 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000054 	.word	0x20000054
 8002730:	40005400 	.word	0x40005400
 8002734:	00201d2b 	.word	0x00201d2b

08002738 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800273c:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 800273e:	4a23      	ldr	r2, [pc, #140]	@ (80027cc <_ZL12MX_I2C2_Initv+0x94>)
 8002740:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010020A;
 8002742:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 8002744:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <_ZL12MX_I2C2_Initv+0x98>)
 8002746:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002748:	4b1f      	ldr	r3, [pc, #124]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800274e:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 8002750:	2201      	movs	r2, #1
 8002752:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002754:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 800275c:	2200      	movs	r2, #0
 800275e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002760:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002766:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 8002768:	2200      	movs	r2, #0
 800276a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 800276e:	2200      	movs	r2, #0
 8002770:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002772:	4815      	ldr	r0, [pc, #84]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 8002774:	f001 ff7a 	bl	800466c <HAL_I2C_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8002788:	f000 fa4a 	bl	8002c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800278c:	2100      	movs	r1, #0
 800278e:	480e      	ldr	r0, [pc, #56]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 8002790:	f004 f888 	bl	80068a4 <HAL_I2CEx_ConfigAnalogFilter>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 80027a4:	f000 fa3c 	bl	8002c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80027a8:	2100      	movs	r1, #0
 80027aa:	4807      	ldr	r0, [pc, #28]	@ (80027c8 <_ZL12MX_I2C2_Initv+0x90>)
 80027ac:	f004 f8c5 	bl	800693a <HAL_I2CEx_ConfigDigitalFilter>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf14      	ite	ne
 80027b6:	2301      	movne	r3, #1
 80027b8:	2300      	moveq	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 80027c0:	f000 fa2e 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200000a8 	.word	0x200000a8
 80027cc:	40005800 	.word	0x40005800
 80027d0:	0010020a 	.word	0x0010020a

080027d4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 80027da:	4a1e      	ldr	r2, [pc, #120]	@ (8002854 <_ZL12MX_SPI2_Initv+0x80>)
 80027dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027de:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 80027e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80027ec:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 80027ee:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80027f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80027f4:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 80027f6:	2202      	movs	r2, #2
 80027f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027fa:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 8002802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002806:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002814:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281a:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 8002822:	2207      	movs	r2, #7
 8002824:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 800282e:	2208      	movs	r2, #8
 8002830:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002832:	4807      	ldr	r0, [pc, #28]	@ (8002850 <_ZL12MX_SPI2_Initv+0x7c>)
 8002834:	f005 fca0 	bl	8008178 <HAL_SPI_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8002848:	f000 f9ea 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000140 	.word	0x20000140
 8002854:	40003800 	.word	0x40003800

08002858 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285e:	f107 0320 	add.w	r3, r7, #32
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800287a:	4b29      	ldr	r3, [pc, #164]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 800287c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002882:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002888:	4b25      	ldr	r3, [pc, #148]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800288e:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 8002890:	2200      	movs	r2, #0
 8002892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002894:	4b22      	ldr	r3, [pc, #136]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289a:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028a0:	481f      	ldr	r0, [pc, #124]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 80028a2:	f005 fedf 	bl	8008664 <HAL_TIM_PWM_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 80028b6:	f000 f9b3 	bl	8002c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c2:	f107 0320 	add.w	r3, r7, #32
 80028c6:	4619      	mov	r1, r3
 80028c8:	4815      	ldr	r0, [pc, #84]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 80028ca:	f006 faf5 	bl	8008eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 80028de:	f000 f99f 	bl	8002c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028e2:	2360      	movs	r3, #96	@ 0x60
 80028e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	4619      	mov	r1, r3
 80028f8:	4809      	ldr	r0, [pc, #36]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 80028fa:	f005 fff3 	bl	80088e4 <HAL_TIM_PWM_ConfigChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 800290e:	f000 f987 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002912:	4803      	ldr	r0, [pc, #12]	@ (8002920 <_ZL12MX_TIM2_Initv+0xc8>)
 8002914:	f000 ff16 	bl	8003744 <HAL_TIM_MspPostInit>

}
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	@ 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	200001a4 	.word	0x200001a4

08002924 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292a:	463b      	mov	r3, r7
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002932:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <_ZL12MX_TIM7_Initv+0x78>)
 8002934:	4a1a      	ldr	r2, [pc, #104]	@ (80029a0 <_ZL12MX_TIM7_Initv+0x7c>)
 8002936:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8002938:	4b18      	ldr	r3, [pc, #96]	@ (800299c <_ZL12MX_TIM7_Initv+0x78>)
 800293a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800293e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002940:	4b16      	ldr	r3, [pc, #88]	@ (800299c <_ZL12MX_TIM7_Initv+0x78>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <_ZL12MX_TIM7_Initv+0x78>)
 8002948:	2201      	movs	r2, #1
 800294a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <_ZL12MX_TIM7_Initv+0x78>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002952:	4812      	ldr	r0, [pc, #72]	@ (800299c <_ZL12MX_TIM7_Initv+0x78>)
 8002954:	f005 fdcf 	bl	80084f6 <HAL_TIM_Base_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8002968:	f000 f95a 	bl	8002c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002974:	463b      	mov	r3, r7
 8002976:	4619      	mov	r1, r3
 8002978:	4808      	ldr	r0, [pc, #32]	@ (800299c <_ZL12MX_TIM7_Initv+0x78>)
 800297a:	f006 fa9d 	bl	8008eb8 <HAL_TIMEx_MasterConfigSynchronization>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 800298e:	f000 f947 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200001f0 	.word	0x200001f0
 80029a0:	40001400 	.word	0x40001400

080029a4 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <_ZL13MX_TIM13_Initv+0x48>)
 80029aa:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <_ZL13MX_TIM13_Initv+0x4c>)
 80029ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80029ae:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <_ZL13MX_TIM13_Initv+0x48>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <_ZL13MX_TIM13_Initv+0x48>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 80029ba:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <_ZL13MX_TIM13_Initv+0x48>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c0:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <_ZL13MX_TIM13_Initv+0x48>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c6:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <_ZL13MX_TIM13_Initv+0x48>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80029cc:	4807      	ldr	r0, [pc, #28]	@ (80029ec <_ZL13MX_TIM13_Initv+0x48>)
 80029ce:	f005 fd92 	bl	80084f6 <HAL_TIM_Base_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <_ZL13MX_TIM13_Initv+0x42>
  {
    Error_Handler();
 80029e2:	f000 f91d 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000023c 	.word	0x2000023c
 80029f0:	40001c00 	.word	0x40001c00

080029f4 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <_ZL13MX_TIM14_Initv+0x48>)
 80029fa:	4a11      	ldr	r2, [pc, #68]	@ (8002a40 <_ZL13MX_TIM14_Initv+0x4c>)
 80029fc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <_ZL13MX_TIM14_Initv+0x48>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <_ZL13MX_TIM14_Initv+0x48>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <_ZL13MX_TIM14_Initv+0x48>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <_ZL13MX_TIM14_Initv+0x48>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a16:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <_ZL13MX_TIM14_Initv+0x48>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a1c:	4807      	ldr	r0, [pc, #28]	@ (8002a3c <_ZL13MX_TIM14_Initv+0x48>)
 8002a1e:	f005 fd6a 	bl	80084f6 <HAL_TIM_Base_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf14      	ite	ne
 8002a28:	2301      	movne	r3, #1
 8002a2a:	2300      	moveq	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <_ZL13MX_TIM14_Initv+0x42>
  {
    Error_Handler();
 8002a32:	f000 f8f5 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000288 	.word	0x20000288
 8002a40:	40002000 	.word	0x40002000

08002a44 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a4a:	4a17      	ldr	r2, [pc, #92]	@ (8002aa8 <_ZL19MX_USART1_UART_Initv+0x64>)
 8002a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8002a4e:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a50:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8002a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002a68:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a86:	4807      	ldr	r0, [pc, #28]	@ (8002aa4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a88:	f006 fa9e 	bl	8008fc8 <HAL_UART_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002a9c:	f000 f8c0 	bl	8002c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200002d4 	.word	0x200002d4
 8002aa8:	40013800 	.word	0x40013800

08002aac <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <_ZL11MX_DMA_Initv+0x38>)
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae4 <_ZL11MX_DMA_Initv+0x38>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6153      	str	r3, [r2, #20]
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <_ZL11MX_DMA_Initv+0x38>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	2010      	movs	r0, #16
 8002ad0:	f001 f8cf 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002ad4:	2010      	movs	r0, #16
 8002ad6:	f001 f8e8 	bl	8003caa <HAL_NVIC_EnableIRQ>

}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08c      	sub	sp, #48	@ 0x30
 8002aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afe:	4b44      	ldr	r3, [pc, #272]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4a43      	ldr	r2, [pc, #268]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b08:	6153      	str	r3, [r2, #20]
 8002b0a:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b16:	4b3e      	ldr	r3, [pc, #248]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b20:	6153      	str	r3, [r2, #20]
 8002b22:	4b3b      	ldr	r3, [pc, #236]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	4b38      	ldr	r3, [pc, #224]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	4a37      	ldr	r2, [pc, #220]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b38:	6153      	str	r3, [r2, #20]
 8002b3a:	4b35      	ldr	r3, [pc, #212]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	4b32      	ldr	r3, [pc, #200]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	4a31      	ldr	r2, [pc, #196]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b50:	6153      	str	r3, [r2, #20]
 8002b52:	4b2f      	ldr	r3, [pc, #188]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4a2b      	ldr	r2, [pc, #172]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b68:	6153      	str	r3, [r2, #20]
 8002b6a:	4b29      	ldr	r3, [pc, #164]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b76:	4b26      	ldr	r3, [pc, #152]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4a25      	ldr	r2, [pc, #148]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b80:	6153      	str	r3, [r2, #20]
 8002b82:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <_ZL12MX_GPIO_Initv+0x128>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b94:	481f      	ldr	r0, [pc, #124]	@ (8002c14 <_ZL12MX_GPIO_Initv+0x12c>)
 8002b96:	f001 fd37 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, gate1_Pin|gate2_Pin|gate3_Pin, GPIO_PIN_RESET);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2107      	movs	r1, #7
 8002b9e:	481e      	ldr	r0, [pc, #120]	@ (8002c18 <_ZL12MX_GPIO_Initv+0x130>)
 8002ba0:	f001 fd32 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, gate4_Pin|All_trig_Pin, GPIO_PIN_RESET);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002baa:	481c      	ldr	r0, [pc, #112]	@ (8002c1c <_ZL12MX_GPIO_Initv+0x134>)
 8002bac:	f001 fd2c 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4812      	ldr	r0, [pc, #72]	@ (8002c14 <_ZL12MX_GPIO_Initv+0x12c>)
 8002bca:	f001 fba3 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : gate1_Pin gate2_Pin gate3_Pin */
  GPIO_InitStruct.Pin = gate1_Pin|gate2_Pin|gate3_Pin;
 8002bce:	2307      	movs	r3, #7
 8002bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <_ZL12MX_GPIO_Initv+0x130>)
 8002be6:	f001 fb95 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : gate4_Pin All_trig_Pin */
  GPIO_InitStruct.Pin = gate4_Pin|All_trig_Pin;
 8002bea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	4619      	mov	r1, r3
 8002c02:	4806      	ldr	r0, [pc, #24]	@ (8002c1c <_ZL12MX_GPIO_Initv+0x134>)
 8002c04:	f001 fb86 	bl	8004314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c08:	bf00      	nop
 8002c0a:	3730      	adds	r7, #48	@ 0x30
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	48000800 	.word	0x48000800
 8002c18:	48000400 	.word	0x48000400
 8002c1c:	48001000 	.word	0x48001000

08002c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c24:	b672      	cpsid	i
}
 8002c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <Error_Handler+0x8>

08002c2c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d102      	bne.n	8002c4c <_Z41__static_initialization_and_destruction_0ii+0x20>
MidiInterface Port;
 8002c46:	4809      	ldr	r0, [pc, #36]	@ (8002c6c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002c48:	f7fd fef2 	bl	8000a30 <_ZN13MidiInterfaceC1Ev>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d102      	bne.n	8002c62 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002c5c:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002c5e:	f7fd ff9f 	bl	8000ba0 <_ZN13MidiInterfaceD1Ev>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200003e4 	.word	0x200003e4

08002c70 <_GLOBAL__sub_I_hdac1>:
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7ff ffd7 	bl	8002c2c <_Z41__static_initialization_and_destruction_0ii>
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_GLOBAL__sub_D_hdac1>:
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7ff ffcf 	bl	8002c2c <_Z41__static_initialization_and_destruction_0ii>
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <dac_init>:
 */

#include <mcp4728_mod.h>


void dac_init(ChannelConfig *config ,ChannelConfig_2 *config2) {
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
    config->vref = 0x0;  // Use VDD as reference voltage
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
    config->gain = 0x1;  // Gain of 1x
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	705a      	strb	r2, [r3, #1]
    config->val[0] = 0;  // 12-bit DAC value for channel A
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	805a      	strh	r2, [r3, #2]
    config->val[1] = 0;  // 12-bit DAC value for channel B
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	809a      	strh	r2, [r3, #4]
    config->val[2] = 0;  // 12-bit DAC value for channel C
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	80da      	strh	r2, [r3, #6]
    config->val[3] = 0;  // 12-bit DAC value for channel D
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	811a      	strh	r2, [r3, #8]


    config2->vref = 0x0;  // Use VDD as reference voltage
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
    config2->gain = 0x1;  // Gain of 1x
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	705a      	strb	r2, [r3, #1]
    config2->val[0] = 0;  // 12-bit DAC value for channel A
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	805a      	strh	r2, [r3, #2]
    config2->val[1] = 0;  // 12-bit DAC value for channel B
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	809a      	strh	r2, [r3, #4]
    config2->val[2] = 0;  // 12-bit DAC value for channel C
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	80da      	strh	r2, [r3, #6]
    config2->val[3] = 0;  // 12-bit DAC value for channel D
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	811a      	strh	r2, [r3, #8]

}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <mcp4728_generalCall>:
//HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
//    // Transmit the general call command
//    return HAL_I2C_Master_Transmit(i2cHandler, 0x00, &command, 1, HAL_MAX_DELAY);
//}

HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	70fb      	strb	r3, [r7, #3]
    // Transmit the general call command
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, 0x00, &command, 1);
 8002cfa:	1cfa      	adds	r2, r7, #3
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	2100      	movs	r1, #0
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f001 fd4f 	bl	80047a4 <HAL_I2C_Master_Transmit_DMA>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <mcp4728_generalCall+0x26>
        return ret;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	e007      	b.n	8002d24 <mcp4728_generalCall+0x36>
    }

    // Wait for the DMA transfer to complete
    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 8002d14:	bf00      	nop
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f001 ffee 	bl	8004cf8 <HAL_I2C_GetState>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d1f9      	bne.n	8002d16 <mcp4728_generalCall+0x28>

    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <DACx60SW>:
 * @param i2cHandler Pointer to the I2C handler.
 * @param config Configuration structure containing the DAC value and configuration for the channel.
 * @param channel The channel to be updated (0 for A, 1 for B, 2 for C, 3 for D).
 * @return HAL_StatusTypeDef HAL status indicating success or failure.
 */
HAL_StatusTypeDef DACx60SW(I2C_HandleTypeDef *i2cHandler, ChannelConfig config, uint8_t channel) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4638      	mov	r0, r7
 8002d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[3];
    buf[0] = MCP4728_SINGLE_WRITE | (channel << 1); // Command and channel
 8002d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	753b      	strb	r3, [r7, #20]
    buf[1] = ((config.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8002d4c:	783b      	ldrb	r3, [r7, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d54:	fa42 f303 	asr.w	r3, r2, r3
 8002d58:	01db      	lsls	r3, r3, #7
 8002d5a:	b25a      	sxtb	r2, r3
             ((config.gain & (1 << channel)) ? 0x10 : 0) | // Gain bit (4th bit)
 8002d5c:	787b      	ldrb	r3, [r7, #1]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d64:	fa41 f303 	asr.w	r3, r1, r3
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	b25b      	sxtb	r3, r3
    buf[1] = ((config.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b25a      	sxtb	r2, r3
             (config.val[channel] >> 8); // Upper 8 bits of the 12-bit DAC value
 8002d76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	443b      	add	r3, r7
 8002d80:	f833 3c16 	ldrh.w	r3, [r3, #-22]
             ((config.gain & (1 << channel)) ? 0x10 : 0) | // Gain bit (4th bit)
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
    buf[1] = ((config.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8002d90:	757b      	strb	r3, [r7, #21]
    buf[2] = config.val[channel] & 0xFF; // Lower 8 bits of the 12-bit DAC value
 8002d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	3318      	adds	r3, #24
 8002d9a:	443b      	add	r3, r7
 8002d9c:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	75bb      	strb	r3, [r7, #22]

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, dac1, buf, sizeof(buf));
 8002da4:	f107 0214 	add.w	r2, r7, #20
 8002da8:	2303      	movs	r3, #3
 8002daa:	21c0      	movs	r1, #192	@ 0xc0
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f001 fcf9 	bl	80047a4 <HAL_I2C_Master_Transmit_DMA>
 8002db2:	4603      	mov	r3, r0
 8002db4:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <DACx60SW+0x94>
        return ret;
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	e00b      	b.n	8002dd8 <DACx60SW+0xac>
    }

    // Wait for the DMA transfer to complete and then send the general call command
    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 8002dc0:	bf00      	nop
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f001 ff98 	bl	8004cf8 <HAL_I2C_GetState>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d1f9      	bne.n	8002dc2 <DACx60SW+0x96>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 8002dce:	2108      	movs	r1, #8
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff ff8c 	bl	8002cee <mcp4728_generalCall>
 8002dd6:	4603      	mov	r3, r0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <DACx61SW>:



HAL_StatusTypeDef DACx61SW(I2C_HandleTypeDef *i2cHandler, ChannelConfig_2 config_0x61, uint8_t channel) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	4638      	mov	r0, r7
 8002dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[3];
    buf[0] = MCP4728_SINGLE_WRITE | (channel << 1); // Command and channel
 8002dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	753b      	strb	r3, [r7, #20]
    buf[1] = ((config_0x61.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8002e00:	783b      	ldrb	r3, [r7, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e08:	fa42 f303 	asr.w	r3, r2, r3
 8002e0c:	01db      	lsls	r3, r3, #7
 8002e0e:	b25a      	sxtb	r2, r3
             ((config_0x61.gain & (1 << channel)) ? 0x10 : 0) | // Gain bit (4th bit)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	4619      	mov	r1, r3
 8002e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e18:	fa41 f303 	asr.w	r3, r1, r3
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	b25b      	sxtb	r3, r3
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	b25b      	sxtb	r3, r3
    buf[1] = ((config_0x61.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b25a      	sxtb	r2, r3
             (config_0x61.val[channel] >> 8); // Upper 8 bits of the 12-bit DAC value
 8002e2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	3318      	adds	r3, #24
 8002e32:	443b      	add	r3, r7
 8002e34:	f833 3c16 	ldrh.w	r3, [r3, #-22]
             ((config_0x61.gain & (1 << channel)) ? 0x10 : 0) | // Gain bit (4th bit)
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
    buf[1] = ((config_0x61.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8002e44:	757b      	strb	r3, [r7, #21]
    buf[2] = config_0x61.val[channel] & 0xFF; // Lower 8 bits of the 12-bit DAC value
 8002e46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	443b      	add	r3, r7
 8002e50:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	75bb      	strb	r3, [r7, #22]

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, dac2, buf, sizeof(buf));
 8002e58:	f107 0214 	add.w	r2, r7, #20
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	21c2      	movs	r1, #194	@ 0xc2
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f001 fc9f 	bl	80047a4 <HAL_I2C_Master_Transmit_DMA>
 8002e66:	4603      	mov	r3, r0
 8002e68:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <DACx61SW+0x94>
        return ret;
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	e00b      	b.n	8002e8c <DACx61SW+0xac>
    }

    // Wait for the DMA transfer to complete and then send the general call command
    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 8002e74:	bf00      	nop
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f001 ff3e 	bl	8004cf8 <HAL_I2C_GetState>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d1f9      	bne.n	8002e76 <DACx61SW+0x96>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 8002e82:	2108      	movs	r1, #8
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7ff ff32 	bl	8002cee <mcp4728_generalCall>
 8002e8a:	4603      	mov	r3, r0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <ssd1306_Reset>:
#include "ssd1306_fonts.h"


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af04      	add	r7, sp, #16
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	9302      	str	r3, [sp, #8]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	1dfb      	adds	r3, r7, #7
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2178      	movs	r1, #120	@ 0x78
 8002ec2:	4803      	ldr	r0, [pc, #12]	@ (8002ed0 <ssd1306_WriteCommand+0x2c>)
 8002ec4:	f001 fd82 	bl	80049cc <HAL_I2C_Mem_Write>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	200000a8 	.word	0x200000a8

08002ed4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af04      	add	r7, sp, #16
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee6:	9202      	str	r2, [sp, #8]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	2240      	movs	r2, #64	@ 0x40
 8002ef2:	2178      	movs	r1, #120	@ 0x78
 8002ef4:	4803      	ldr	r0, [pc, #12]	@ (8002f04 <ssd1306_WriteData+0x30>)
 8002ef6:	f001 fd69 	bl	80049cc <HAL_I2C_Mem_Write>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200000a8 	.word	0x200000a8

08002f08 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002f0c:	f7ff ffc2 	bl	8002e94 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002f10:	2064      	movs	r0, #100	@ 0x64
 8002f12:	f000 fdaf 	bl	8003a74 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002f16:	2000      	movs	r0, #0
 8002f18:	f000 f9d6 	bl	80032c8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002f1c:	2020      	movs	r0, #32
 8002f1e:	f7ff ffc1 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7ff ffbe 	bl	8002ea4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002f28:	20b0      	movs	r0, #176	@ 0xb0
 8002f2a:	f7ff ffbb 	bl	8002ea4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002f2e:	20c8      	movs	r0, #200	@ 0xc8
 8002f30:	f7ff ffb8 	bl	8002ea4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff ffb5 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f7ff ffb2 	bl	8002ea4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002f40:	2040      	movs	r0, #64	@ 0x40
 8002f42:	f7ff ffaf 	bl	8002ea4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002f46:	20ff      	movs	r0, #255	@ 0xff
 8002f48:	f000 f9aa 	bl	80032a0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002f4c:	20a1      	movs	r0, #161	@ 0xa1
 8002f4e:	f7ff ffa9 	bl	8002ea4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002f52:	20a6      	movs	r0, #166	@ 0xa6
 8002f54:	f7ff ffa6 	bl	8002ea4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002f58:	20a8      	movs	r0, #168	@ 0xa8
 8002f5a:	f7ff ffa3 	bl	8002ea4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002f5e:	203f      	movs	r0, #63	@ 0x3f
 8002f60:	f7ff ffa0 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f64:	20a4      	movs	r0, #164	@ 0xa4
 8002f66:	f7ff ff9d 	bl	8002ea4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002f6a:	20d3      	movs	r0, #211	@ 0xd3
 8002f6c:	f7ff ff9a 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7ff ff97 	bl	8002ea4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f76:	20d5      	movs	r0, #213	@ 0xd5
 8002f78:	f7ff ff94 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002f7c:	20f0      	movs	r0, #240	@ 0xf0
 8002f7e:	f7ff ff91 	bl	8002ea4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002f82:	20d9      	movs	r0, #217	@ 0xd9
 8002f84:	f7ff ff8e 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002f88:	2022      	movs	r0, #34	@ 0x22
 8002f8a:	f7ff ff8b 	bl	8002ea4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002f8e:	20da      	movs	r0, #218	@ 0xda
 8002f90:	f7ff ff88 	bl	8002ea4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002f94:	2012      	movs	r0, #18
 8002f96:	f7ff ff85 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002f9a:	20db      	movs	r0, #219	@ 0xdb
 8002f9c:	f7ff ff82 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002fa0:	2020      	movs	r0, #32
 8002fa2:	f7ff ff7f 	bl	8002ea4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002fa6:	208d      	movs	r0, #141	@ 0x8d
 8002fa8:	f7ff ff7c 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002fac:	2014      	movs	r0, #20
 8002fae:	f7ff ff79 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f000 f988 	bl	80032c8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f000 f80f 	bl	8002fdc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002fbe:	f000 f825 	bl	800300c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <ssd1306_Init+0xd0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <ssd1306_Init+0xd0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002fce:	4b02      	ldr	r3, [pc, #8]	@ (8002fd8 <ssd1306_Init+0xd0>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	711a      	strb	r2, [r3, #4]
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000954 	.word	0x20000954

08002fdc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <ssd1306_Fill+0x14>
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <ssd1306_Fill+0x16>
 8002ff0:	23ff      	movs	r3, #255	@ 0xff
 8002ff2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4803      	ldr	r0, [pc, #12]	@ (8003008 <ssd1306_Fill+0x2c>)
 8002ffa:	f007 f858 	bl	800a0ae <memset>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000554 	.word	0x20000554

0800300c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003012:	2300      	movs	r3, #0
 8003014:	71fb      	strb	r3, [r7, #7]
 8003016:	e016      	b.n	8003046 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	3b50      	subs	r3, #80	@ 0x50
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff40 	bl	8002ea4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003024:	2000      	movs	r0, #0
 8003026:	f7ff ff3d 	bl	8002ea4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800302a:	2010      	movs	r0, #16
 800302c:	f7ff ff3a 	bl	8002ea4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	01db      	lsls	r3, r3, #7
 8003034:	4a08      	ldr	r2, [pc, #32]	@ (8003058 <ssd1306_UpdateScreen+0x4c>)
 8003036:	4413      	add	r3, r2
 8003038:	2180      	movs	r1, #128	@ 0x80
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff4a 	bl	8002ed4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	3301      	adds	r3, #1
 8003044:	71fb      	strb	r3, [r7, #7]
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b07      	cmp	r3, #7
 800304a:	d9e5      	bls.n	8003018 <ssd1306_UpdateScreen+0xc>
    }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000554 	.word	0x20000554

0800305c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
 8003066:	460b      	mov	r3, r1
 8003068:	71bb      	strb	r3, [r7, #6]
 800306a:	4613      	mov	r3, r2
 800306c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db3d      	blt.n	80030f2 <ssd1306_DrawPixel+0x96>
 8003076:	79bb      	ldrb	r3, [r7, #6]
 8003078:	2b3f      	cmp	r3, #63	@ 0x3f
 800307a:	d83a      	bhi.n	80030f2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800307c:	797b      	ldrb	r3, [r7, #5]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d11a      	bne.n	80030b8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003082:	79fa      	ldrb	r2, [r7, #7]
 8003084:	79bb      	ldrb	r3, [r7, #6]
 8003086:	08db      	lsrs	r3, r3, #3
 8003088:	b2d8      	uxtb	r0, r3
 800308a:	4603      	mov	r3, r0
 800308c:	01db      	lsls	r3, r3, #7
 800308e:	4413      	add	r3, r2
 8003090:	4a1b      	ldr	r2, [pc, #108]	@ (8003100 <ssd1306_DrawPixel+0xa4>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	b25a      	sxtb	r2, r3
 8003096:	79bb      	ldrb	r3, [r7, #6]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	4313      	orrs	r3, r2
 80030a6:	b259      	sxtb	r1, r3
 80030a8:	79fa      	ldrb	r2, [r7, #7]
 80030aa:	4603      	mov	r3, r0
 80030ac:	01db      	lsls	r3, r3, #7
 80030ae:	4413      	add	r3, r2
 80030b0:	b2c9      	uxtb	r1, r1
 80030b2:	4a13      	ldr	r2, [pc, #76]	@ (8003100 <ssd1306_DrawPixel+0xa4>)
 80030b4:	54d1      	strb	r1, [r2, r3]
 80030b6:	e01d      	b.n	80030f4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80030b8:	79fa      	ldrb	r2, [r7, #7]
 80030ba:	79bb      	ldrb	r3, [r7, #6]
 80030bc:	08db      	lsrs	r3, r3, #3
 80030be:	b2d8      	uxtb	r0, r3
 80030c0:	4603      	mov	r3, r0
 80030c2:	01db      	lsls	r3, r3, #7
 80030c4:	4413      	add	r3, r2
 80030c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003100 <ssd1306_DrawPixel+0xa4>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	b25a      	sxtb	r2, r3
 80030cc:	79bb      	ldrb	r3, [r7, #6]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	4013      	ands	r3, r2
 80030e0:	b259      	sxtb	r1, r3
 80030e2:	79fa      	ldrb	r2, [r7, #7]
 80030e4:	4603      	mov	r3, r0
 80030e6:	01db      	lsls	r3, r3, #7
 80030e8:	4413      	add	r3, r2
 80030ea:	b2c9      	uxtb	r1, r1
 80030ec:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <ssd1306_DrawPixel+0xa4>)
 80030ee:	54d1      	strb	r1, [r2, r3]
 80030f0:	e000      	b.n	80030f4 <ssd1306_DrawPixel+0x98>
        return;
 80030f2:	bf00      	nop
    }
}
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000554 	.word	0x20000554

08003104 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	4604      	mov	r4, r0
 800310c:	4638      	mov	r0, r7
 800310e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003112:	4623      	mov	r3, r4
 8003114:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b1f      	cmp	r3, #31
 800311a:	d902      	bls.n	8003122 <ssd1306_WriteChar+0x1e>
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b7e      	cmp	r3, #126	@ 0x7e
 8003120:	d901      	bls.n	8003126 <ssd1306_WriteChar+0x22>
        return 0;
 8003122:	2300      	movs	r3, #0
 8003124:	e077      	b.n	8003216 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003126:	4b3e      	ldr	r3, [pc, #248]	@ (8003220 <ssd1306_WriteChar+0x11c>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	783b      	ldrb	r3, [r7, #0]
 800312e:	4413      	add	r3, r2
 8003130:	2b80      	cmp	r3, #128	@ 0x80
 8003132:	dc06      	bgt.n	8003142 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003134:	4b3a      	ldr	r3, [pc, #232]	@ (8003220 <ssd1306_WriteChar+0x11c>)
 8003136:	885b      	ldrh	r3, [r3, #2]
 8003138:	461a      	mov	r2, r3
 800313a:	787b      	ldrb	r3, [r7, #1]
 800313c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800313e:	2b40      	cmp	r3, #64	@ 0x40
 8003140:	dd01      	ble.n	8003146 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8003142:	2300      	movs	r3, #0
 8003144:	e067      	b.n	8003216 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e04e      	b.n	80031ea <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3b20      	subs	r3, #32
 8003152:	7879      	ldrb	r1, [r7, #1]
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4619      	mov	r1, r3
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	440b      	add	r3, r1
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e036      	b.n	80031da <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <ssd1306_WriteChar+0x11c>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4413      	add	r3, r2
 8003188:	b2d8      	uxtb	r0, r3
 800318a:	4b25      	ldr	r3, [pc, #148]	@ (8003220 <ssd1306_WriteChar+0x11c>)
 800318c:	885b      	ldrh	r3, [r3, #2]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4413      	add	r3, r2
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800319c:	4619      	mov	r1, r3
 800319e:	f7ff ff5d 	bl	800305c <ssd1306_DrawPixel>
 80031a2:	e017      	b.n	80031d4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80031a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <ssd1306_WriteChar+0x11c>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	b2d8      	uxtb	r0, r3
 80031b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <ssd1306_WriteChar+0x11c>)
 80031b4:	885b      	ldrh	r3, [r3, #2]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4413      	add	r3, r2
 80031be:	b2d9      	uxtb	r1, r3
 80031c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	f7ff ff44 	bl	800305c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	3301      	adds	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	783b      	ldrb	r3, [r7, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d3c3      	bcc.n	800316c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3301      	adds	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	787b      	ldrb	r3, [r7, #1]
 80031ec:	461a      	mov	r2, r3
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d3ab      	bcc.n	800314c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <ssd1306_WriteChar+0x11c>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d005      	beq.n	800320a <ssd1306_WriteChar+0x106>
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	3a20      	subs	r2, #32
 8003204:	440a      	add	r2, r1
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	e000      	b.n	800320c <ssd1306_WriteChar+0x108>
 800320a:	783a      	ldrb	r2, [r7, #0]
 800320c:	4413      	add	r3, r2
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <ssd1306_WriteChar+0x11c>)
 8003212:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	@ 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	bf00      	nop
 8003220:	20000954 	.word	0x20000954

08003224 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	4638      	mov	r0, r7
 800322e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003232:	e013      	b.n	800325c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	7818      	ldrb	r0, [r3, #0]
 8003238:	7e3b      	ldrb	r3, [r7, #24]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	463b      	mov	r3, r7
 800323e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003240:	f7ff ff60 	bl	8003104 <ssd1306_WriteChar>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d002      	beq.n	8003256 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	e008      	b.n	8003268 <ssd1306_WriteString+0x44>
        }
        str++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3301      	adds	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e7      	bne.n	8003234 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	781b      	ldrb	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	460a      	mov	r2, r1
 800327a:	71fb      	strb	r3, [r7, #7]
 800327c:	4613      	mov	r3, r2
 800327e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	b29a      	uxth	r2, r3
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <ssd1306_SetCursor+0x2c>)
 8003286:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003288:	79bb      	ldrb	r3, [r7, #6]
 800328a:	b29a      	uxth	r2, r3
 800328c:	4b03      	ldr	r3, [pc, #12]	@ (800329c <ssd1306_SetCursor+0x2c>)
 800328e:	805a      	strh	r2, [r3, #2]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	20000954 	.word	0x20000954

080032a0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80032aa:	2381      	movs	r3, #129	@ 0x81
 80032ac:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fdf7 	bl	8002ea4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fdf3 	bl	8002ea4 <ssd1306_WriteCommand>
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80032d8:	23af      	movs	r3, #175	@ 0xaf
 80032da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <ssd1306_SetDisplayOn+0x38>)
 80032de:	2201      	movs	r2, #1
 80032e0:	715a      	strb	r2, [r3, #5]
 80032e2:	e004      	b.n	80032ee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80032e4:	23ae      	movs	r3, #174	@ 0xae
 80032e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <ssd1306_SetDisplayOn+0x38>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fdd7 	bl	8002ea4 <ssd1306_WriteCommand>
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000954 	.word	0x20000954

08003304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330a:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <HAL_MspInit+0x44>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	4a0e      	ldr	r2, [pc, #56]	@ (8003348 <HAL_MspInit+0x44>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6193      	str	r3, [r2, #24]
 8003316:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <HAL_MspInit+0x44>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_MspInit+0x44>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <HAL_MspInit+0x44>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332c:	61d3      	str	r3, [r2, #28]
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_MspInit+0x44>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	@ 0x30
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2b      	ldr	r2, [pc, #172]	@ (8003418 <HAL_DAC_MspInit+0xcc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d125      	bne.n	80033ba <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800336e:	4b2b      	ldr	r3, [pc, #172]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a2a      	ldr	r2, [pc, #168]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 8003374:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b28      	ldr	r3, [pc, #160]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	4b25      	ldr	r3, [pc, #148]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	4a24      	ldr	r2, [pc, #144]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 800338c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003390:	6153      	str	r3, [r2, #20]
 8003392:	4b22      	ldr	r3, [pc, #136]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800339e:	2330      	movs	r3, #48	@ 0x30
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a2:	2303      	movs	r3, #3
 80033a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 031c 	add.w	r3, r7, #28
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033b4:	f000 ffae 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80033b8:	e029      	b.n	800340e <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <HAL_DAC_MspInit+0xd4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d124      	bne.n	800340e <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80033c4:	4b15      	ldr	r3, [pc, #84]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	4a14      	ldr	r2, [pc, #80]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 80033ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033ce:	61d3      	str	r3, [r2, #28]
 80033d0:	4b12      	ldr	r3, [pc, #72]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033dc:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	4a0e      	ldr	r2, [pc, #56]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e6:	6153      	str	r3, [r2, #20]
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <HAL_DAC_MspInit+0xd0>)
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033f4:	2340      	movs	r3, #64	@ 0x40
 80033f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f8:	2303      	movs	r3, #3
 80033fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003400:	f107 031c 	add.w	r3, r7, #28
 8003404:	4619      	mov	r1, r3
 8003406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800340a:	f000 ff83 	bl	8004314 <HAL_GPIO_Init>
}
 800340e:	bf00      	nop
 8003410:	3730      	adds	r7, #48	@ 0x30
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40007400 	.word	0x40007400
 800341c:	40021000 	.word	0x40021000
 8003420:	40009800 	.word	0x40009800

08003424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	@ 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a45      	ldr	r2, [pc, #276]	@ (8003558 <HAL_I2C_MspInit+0x134>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d157      	bne.n	80034f6 <HAL_I2C_MspInit+0xd2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	4b45      	ldr	r3, [pc, #276]	@ (800355c <HAL_I2C_MspInit+0x138>)
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	4a44      	ldr	r2, [pc, #272]	@ (800355c <HAL_I2C_MspInit+0x138>)
 800344c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003450:	6153      	str	r3, [r2, #20]
 8003452:	4b42      	ldr	r3, [pc, #264]	@ (800355c <HAL_I2C_MspInit+0x138>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800345e:	23c0      	movs	r3, #192	@ 0xc0
 8003460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003462:	2312      	movs	r3, #18
 8003464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800346e:	2304      	movs	r3, #4
 8003470:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003472:	f107 031c 	add.w	r3, r7, #28
 8003476:	4619      	mov	r1, r3
 8003478:	4839      	ldr	r0, [pc, #228]	@ (8003560 <HAL_I2C_MspInit+0x13c>)
 800347a:	f000 ff4b 	bl	8004314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800347e:	4b37      	ldr	r3, [pc, #220]	@ (800355c <HAL_I2C_MspInit+0x138>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a36      	ldr	r2, [pc, #216]	@ (800355c <HAL_I2C_MspInit+0x138>)
 8003484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003488:	61d3      	str	r3, [r2, #28]
 800348a:	4b34      	ldr	r3, [pc, #208]	@ (800355c <HAL_I2C_MspInit+0x138>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8003496:	4b33      	ldr	r3, [pc, #204]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 8003498:	4a33      	ldr	r2, [pc, #204]	@ (8003568 <HAL_I2C_MspInit+0x144>)
 800349a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800349c:	4b31      	ldr	r3, [pc, #196]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 800349e:	2210      	movs	r2, #16
 80034a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a2:	4b30      	ldr	r3, [pc, #192]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034aa:	2280      	movs	r2, #128	@ 0x80
 80034ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80034ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80034c0:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80034c8:	4826      	ldr	r0, [pc, #152]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034ca:	f000 fce7 	bl	8003e9c <HAL_DMA_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 80034d4:	f7ff fba4 	bl	8002c20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a22      	ldr	r2, [pc, #136]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80034de:	4a21      	ldr	r2, [pc, #132]	@ (8003564 <HAL_I2C_MspInit+0x140>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	2100      	movs	r1, #0
 80034e8:	201f      	movs	r0, #31
 80034ea:	f000 fbc2 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80034ee:	201f      	movs	r0, #31
 80034f0:	f000 fbdb 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034f4:	e02c      	b.n	8003550 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1c      	ldr	r2, [pc, #112]	@ (800356c <HAL_I2C_MspInit+0x148>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d127      	bne.n	8003550 <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003500:	4b16      	ldr	r3, [pc, #88]	@ (800355c <HAL_I2C_MspInit+0x138>)
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	4a15      	ldr	r2, [pc, #84]	@ (800355c <HAL_I2C_MspInit+0x138>)
 8003506:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800350a:	6153      	str	r3, [r2, #20]
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <HAL_I2C_MspInit+0x138>)
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003518:	23c0      	movs	r3, #192	@ 0xc0
 800351a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800351c:	2312      	movs	r3, #18
 800351e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003528:	2304      	movs	r3, #4
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	4619      	mov	r1, r3
 8003532:	480f      	ldr	r0, [pc, #60]	@ (8003570 <HAL_I2C_MspInit+0x14c>)
 8003534:	f000 feee 	bl	8004314 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <HAL_I2C_MspInit+0x138>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	4a07      	ldr	r2, [pc, #28]	@ (800355c <HAL_I2C_MspInit+0x138>)
 800353e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003542:	61d3      	str	r3, [r2, #28]
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_I2C_MspInit+0x138>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	bf00      	nop
 8003552:	3730      	adds	r7, #48	@ 0x30
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40005400 	.word	0x40005400
 800355c:	40021000 	.word	0x40021000
 8003560:	48000400 	.word	0x48000400
 8003564:	200000fc 	.word	0x200000fc
 8003568:	4002006c 	.word	0x4002006c
 800356c:	40005800 	.word	0x40005800
 8003570:	48001400 	.word	0x48001400

08003574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	@ 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2a      	ldr	r2, [pc, #168]	@ (800363c <HAL_SPI_MspInit+0xc8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d14d      	bne.n	8003632 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003596:	4b2a      	ldr	r3, [pc, #168]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4a29      	ldr	r2, [pc, #164]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 800359c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035a0:	61d3      	str	r3, [r2, #28]
 80035a2:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	4b24      	ldr	r3, [pc, #144]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4a23      	ldr	r2, [pc, #140]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b8:	6153      	str	r3, [r2, #20]
 80035ba:	4b21      	ldr	r3, [pc, #132]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 80035cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035d0:	6153      	str	r3, [r2, #20]
 80035d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003640 <HAL_SPI_MspInit+0xcc>)
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PD8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80035de:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80035e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035f0:	2305      	movs	r3, #5
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	4812      	ldr	r0, [pc, #72]	@ (8003644 <HAL_SPI_MspInit+0xd0>)
 80035fc:	f000 fe8a 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800360e:	2303      	movs	r3, #3
 8003610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003612:	2305      	movs	r3, #5
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	4619      	mov	r1, r3
 800361c:	480a      	ldr	r0, [pc, #40]	@ (8003648 <HAL_SPI_MspInit+0xd4>)
 800361e:	f000 fe79 	bl	8004314 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	2100      	movs	r1, #0
 8003626:	2024      	movs	r0, #36	@ 0x24
 8003628:	f000 fb23 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800362c:	2024      	movs	r0, #36	@ 0x24
 800362e:	f000 fb3c 	bl	8003caa <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003632:	bf00      	nop
 8003634:	3728      	adds	r7, #40	@ 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40003800 	.word	0x40003800
 8003640:	40021000 	.word	0x40021000
 8003644:	48000400 	.word	0x48000400
 8003648:	48000c00 	.word	0x48000c00

0800364c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d10b      	bne.n	8003676 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800365e:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <HAL_TIM_PWM_MspInit+0x38>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <HAL_TIM_PWM_MspInit+0x38>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	61d3      	str	r3, [r2, #28]
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_TIM_PWM_MspInit+0x38>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a27      	ldr	r2, [pc, #156]	@ (8003734 <HAL_TIM_Base_MspInit+0xac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d114      	bne.n	80036c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800369a:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a26      	ldr	r2, [pc, #152]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 80036a0:	f043 0320 	orr.w	r3, r3, #32
 80036a4:	61d3      	str	r3, [r2, #28]
 80036a6:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	2037      	movs	r0, #55	@ 0x37
 80036b8:	f000 fadb 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80036bc:	2037      	movs	r0, #55	@ 0x37
 80036be:	f000 faf4 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80036c2:	e032      	b.n	800372a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM13)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1c      	ldr	r2, [pc, #112]	@ (800373c <HAL_TIM_Base_MspInit+0xb4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d114      	bne.n	80036f8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80036ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 80036d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d8:	61d3      	str	r3, [r2, #28]
 80036da:	4b17      	ldr	r3, [pc, #92]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM13_IRQn, 0, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	202c      	movs	r0, #44	@ 0x2c
 80036ec:	f000 fac1 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM13_IRQn);
 80036f0:	202c      	movs	r0, #44	@ 0x2c
 80036f2:	f000 fada 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 80036f6:	e018      	b.n	800372a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM14)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a10      	ldr	r2, [pc, #64]	@ (8003740 <HAL_TIM_Base_MspInit+0xb8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d113      	bne.n	800372a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4a0c      	ldr	r2, [pc, #48]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370c:	61d3      	str	r3, [r2, #28]
 800370e:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <HAL_TIM_Base_MspInit+0xb0>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	2100      	movs	r1, #0
 800371e:	202d      	movs	r0, #45	@ 0x2d
 8003720:	f000 faa7 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003724:	202d      	movs	r0, #45	@ 0x2d
 8003726:	f000 fac0 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40001400 	.word	0x40001400
 8003738:	40021000 	.word	0x40021000
 800373c:	40001c00 	.word	0x40001c00
 8003740:	40002000 	.word	0x40002000

08003744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003764:	d11c      	bne.n	80037a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <HAL_TIM_MspPostInit+0x64>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	4a0f      	ldr	r2, [pc, #60]	@ (80037a8 <HAL_TIM_MspPostInit+0x64>)
 800376c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003770:	6153      	str	r3, [r2, #20]
 8003772:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <HAL_TIM_MspPostInit+0x64>)
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800377e:	2301      	movs	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003786:	2302      	movs	r3, #2
 8003788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800378e:	2301      	movs	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003792:	f107 030c 	add.w	r3, r7, #12
 8003796:	4619      	mov	r1, r3
 8003798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800379c:	f000 fdba 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80037a0:	bf00      	nop
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	@ (800383c <HAL_UART_MspInit+0x90>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d131      	bne.n	8003832 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003840 <HAL_UART_MspInit+0x94>)
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003840 <HAL_UART_MspInit+0x94>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d8:	6193      	str	r3, [r2, #24]
 80037da:	4b19      	ldr	r3, [pc, #100]	@ (8003840 <HAL_UART_MspInit+0x94>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	4b16      	ldr	r3, [pc, #88]	@ (8003840 <HAL_UART_MspInit+0x94>)
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4a15      	ldr	r2, [pc, #84]	@ (8003840 <HAL_UART_MspInit+0x94>)
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f0:	6153      	str	r3, [r2, #20]
 80037f2:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <HAL_UART_MspInit+0x94>)
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800380c:	2303      	movs	r3, #3
 800380e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003810:	2307      	movs	r3, #7
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	4619      	mov	r1, r3
 800381a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800381e:	f000 fd79 	bl	8004314 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	2100      	movs	r1, #0
 8003826:	2025      	movs	r0, #37	@ 0x25
 8003828:	f000 fa23 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800382c:	2025      	movs	r0, #37	@ 0x25
 800382e:	f000 fa3c 	bl	8003caa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003832:	bf00      	nop
 8003834:	3728      	adds	r7, #40	@ 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40013800 	.word	0x40013800
 8003840:	40021000 	.word	0x40021000

08003844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <NMI_Handler+0x4>

0800384c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <HardFault_Handler+0x4>

08003854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <MemManage_Handler+0x4>

0800385c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <BusFault_Handler+0x4>

08003864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <UsageFault_Handler+0x4>

0800386c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800389a:	f000 f8cb 	bl	8003a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80038a8:	4802      	ldr	r0, [pc, #8]	@ (80038b4 <DMA1_Channel6_IRQHandler+0x10>)
 80038aa:	f000 fc19 	bl	80040e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200000fc 	.word	0x200000fc

080038b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80038bc:	4802      	ldr	r0, [pc, #8]	@ (80038c8 <I2C1_EV_IRQHandler+0x10>)
 80038be:	f001 f999 	bl	8004bf4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000054 	.word	0x20000054

080038cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80038d0:	4802      	ldr	r0, [pc, #8]	@ (80038dc <SPI2_IRQHandler+0x10>)
 80038d2:	f004 fcfd 	bl	80082d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000140 	.word	0x20000140

080038e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038e4:	4802      	ldr	r0, [pc, #8]	@ (80038f0 <USART1_IRQHandler+0x10>)
 80038e6:	f005 fcfd 	bl	80092e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200002d4 	.word	0x200002d4

080038f4 <TIM13_IRQHandler>:

/**
  * @brief This function handles TIM13 global interrupt.
  */
void TIM13_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM13_IRQn 0 */

  /* USER CODE END TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80038f8:	4802      	ldr	r0, [pc, #8]	@ (8003904 <TIM13_IRQHandler+0x10>)
 80038fa:	f004 ff02 	bl	8008702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM13_IRQn 1 */

  /* USER CODE END TIM13_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2000023c 	.word	0x2000023c

08003908 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800390c:	4802      	ldr	r0, [pc, #8]	@ (8003918 <TIM14_IRQHandler+0x10>)
 800390e:	f004 fef8 	bl	8008702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000288 	.word	0x20000288

0800391c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003920:	4802      	ldr	r0, [pc, #8]	@ (800392c <TIM7_IRQHandler+0x10>)
 8003922:	f004 feee 	bl	8008702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	200001f0 	.word	0x200001f0

08003930 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <SystemInit+0x20>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <SystemInit+0x20>)
 800393c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800398c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003958:	f7ff ffea 	bl	8003930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800395c:	480c      	ldr	r0, [pc, #48]	@ (8003990 <LoopForever+0x6>)
  ldr r1, =_edata
 800395e:	490d      	ldr	r1, [pc, #52]	@ (8003994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003960:	4a0d      	ldr	r2, [pc, #52]	@ (8003998 <LoopForever+0xe>)
  movs r3, #0
 8003962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003964:	e002      	b.n	800396c <LoopCopyDataInit>

08003966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396a:	3304      	adds	r3, #4

0800396c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800396c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800396e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003970:	d3f9      	bcc.n	8003966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003972:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003974:	4c0a      	ldr	r4, [pc, #40]	@ (80039a0 <LoopForever+0x16>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003978:	e001      	b.n	800397e <LoopFillZerobss>

0800397a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800397c:	3204      	adds	r2, #4

0800397e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800397e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003980:	d3fb      	bcc.n	800397a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003982:	f006 fb9d 	bl	800a0c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003986:	f7fe fd15 	bl	80023b4 <main>

0800398a <LoopForever>:

LoopForever:
    b LoopForever
 800398a:	e7fe      	b.n	800398a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800398c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003998:	0800ab0c 	.word	0x0800ab0c
  ldr r2, =_sbss
 800399c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80039a0:	20000960 	.word	0x20000960

080039a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039a4:	e7fe      	b.n	80039a4 <ADC1_IRQHandler>
	...

080039a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039ac:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <HAL_Init+0x28>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a07      	ldr	r2, [pc, #28]	@ (80039d0 <HAL_Init+0x28>)
 80039b2:	f043 0310 	orr.w	r3, r3, #16
 80039b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b8:	2003      	movs	r0, #3
 80039ba:	f000 f94f 	bl	8003c5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039be:	200f      	movs	r0, #15
 80039c0:	f000 f808 	bl	80039d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c4:	f7ff fc9e 	bl	8003304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000

080039d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039dc:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <HAL_InitTick+0x54>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <HAL_InitTick+0x58>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4619      	mov	r1, r3
 80039e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f967 	bl	8003cc6 <HAL_SYSTICK_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e00e      	b.n	8003a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b0f      	cmp	r3, #15
 8003a06:	d80a      	bhi.n	8003a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	f000 f92f 	bl	8003c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a14:	4a06      	ldr	r2, [pc, #24]	@ (8003a30 <HAL_InitTick+0x5c>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000008 	.word	0x20000008
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a38:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <HAL_IncTick+0x20>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_IncTick+0x24>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4413      	add	r3, r2
 8003a44:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <HAL_IncTick+0x24>)
 8003a46:	6013      	str	r3, [r2, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000008 	.word	0x20000008
 8003a58:	2000095c 	.word	0x2000095c

08003a5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003a60:	4b03      	ldr	r3, [pc, #12]	@ (8003a70 <HAL_GetTick+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	2000095c 	.word	0x2000095c

08003a74 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7ff ffee 	bl	8003a5c <HAL_GetTick>
 8003a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d005      	beq.n	8003a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <HAL_Delay+0x44>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003a9a:	bf00      	nop
 8003a9c:	f7ff ffde 	bl	8003a5c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d8f7      	bhi.n	8003a9c <HAL_Delay+0x28>
  {
  }
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000008 	.word	0x20000008

08003abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003acc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aee:	4a04      	ldr	r2, [pc, #16]	@ (8003b00 <__NVIC_SetPriorityGrouping+0x44>)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	60d3      	str	r3, [r2, #12]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b08:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <__NVIC_GetPriorityGrouping+0x18>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	f003 0307 	and.w	r3, r3, #7
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	db0b      	blt.n	8003b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4907      	ldr	r1, [pc, #28]	@ (8003b58 <__NVIC_EnableIRQ+0x38>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2001      	movs	r0, #1
 8003b42:	fa00 f202 	lsl.w	r2, r0, r2
 8003b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000e100 	.word	0xe000e100

08003b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db0a      	blt.n	8003b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	490c      	ldr	r1, [pc, #48]	@ (8003ba8 <__NVIC_SetPriority+0x4c>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b84:	e00a      	b.n	8003b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4908      	ldr	r1, [pc, #32]	@ (8003bac <__NVIC_SetPriority+0x50>)
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	3b04      	subs	r3, #4
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	440b      	add	r3, r1
 8003b9a:	761a      	strb	r2, [r3, #24]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000e100 	.word	0xe000e100
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	@ 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f1c3 0307 	rsb	r3, r3, #7
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	bf28      	it	cs
 8003bce:	2304      	movcs	r3, #4
 8003bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d902      	bls.n	8003be0 <NVIC_EncodePriority+0x30>
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3b03      	subs	r3, #3
 8003bde:	e000      	b.n	8003be2 <NVIC_EncodePriority+0x32>
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43d9      	mvns	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	4313      	orrs	r3, r2
         );
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	@ 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c28:	d301      	bcc.n	8003c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00f      	b.n	8003c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <SysTick_Config+0x40>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c36:	210f      	movs	r1, #15
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	f7ff ff8e 	bl	8003b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <SysTick_Config+0x40>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c46:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <SysTick_Config+0x40>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff29 	bl	8003abc <__NVIC_SetPriorityGrouping>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c84:	f7ff ff3e 	bl	8003b04 <__NVIC_GetPriorityGrouping>
 8003c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff ff8e 	bl	8003bb0 <NVIC_EncodePriority>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff5d 	bl	8003b5c <__NVIC_SetPriority>
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff31 	bl	8003b20 <__NVIC_EnableIRQ>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ffa2 	bl	8003c18 <SysTick_Config>
 8003cd4:	4603      	mov	r3, r0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e014      	b.n	8003d1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	791b      	ldrb	r3, [r3, #4]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fb23 	bl	800334c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003d22:	b480      	push	{r7}
 8003d24:	b087      	sub	sp, #28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	3308      	adds	r3, #8
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e004      	b.n	8003d56 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	3314      	adds	r3, #20
 8003d54:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	795b      	ldrb	r3, [r3, #5]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_DAC_Start+0x16>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e039      	b.n	8003df6 <HAL_DAC_Start+0x8a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6819      	ldr	r1, [r3, #0]
 8003d94:	2201      	movs	r2, #1
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003db2:	2b3c      	cmp	r3, #60	@ 0x3c
 8003db4:	d118      	bne.n	8003de8 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	e00f      	b.n	8003de8 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003dd2:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8003dd6:	d107      	bne.n	8003de8 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0202 	orr.w	r2, r2, #2
 8003de6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b087      	sub	sp, #28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	795b      	ldrb	r3, [r3, #5]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_DAC_ConfigChannel+0x20>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e036      	b.n	8003e90 <HAL_DAC_ConfigChannel+0x8e>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003e36:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4013      	ands	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	22c0      	movs	r2, #192	@ 0xc0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	400a      	ands	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e037      	b.n	8003f22 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ec8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003ecc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f9c9 	bl	800429c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_DMA_Start_IT+0x20>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e04a      	b.n	8003fe0 <HAL_DMA_Start_IT+0xb6>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d13a      	bne.n	8003fd2 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f95d 	bl	8004240 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 020e 	orr.w	r2, r2, #14
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e00f      	b.n	8003fc0 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 020a 	orr.w	r2, r2, #10
 8003fae:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0204 	bic.w	r2, r2, #4
 8003fbe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e005      	b.n	8003fde <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e02e      	b.n	8004058 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004000:	2b02      	cmp	r3, #2
 8004002:	d008      	beq.n	8004016 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2204      	movs	r2, #4
 8004008:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e020      	b.n	8004058 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 020e 	bic.w	r2, r2, #14
 8004024:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403e:	2101      	movs	r1, #1
 8004040:	fa01 f202 	lsl.w	r2, r1, r2
 8004044:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004076:	2b02      	cmp	r3, #2
 8004078:	d005      	beq.n	8004086 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2204      	movs	r2, #4
 800407e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e027      	b.n	80040d6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020e 	bic.w	r2, r2, #14
 8004094:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	2101      	movs	r1, #1
 80040b0:	fa01 f202 	lsl.w	r2, r1, r2
 80040b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
    }
  }
  return status;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	2204      	movs	r2, #4
 80040fe:	409a      	lsls	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d024      	beq.n	8004152 <HAL_DMA_IRQHandler+0x72>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01f      	beq.n	8004152 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0204 	bic.w	r2, r2, #4
 800412e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004138:	2104      	movs	r1, #4
 800413a:	fa01 f202 	lsl.w	r2, r1, r2
 800413e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d06a      	beq.n	800421e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004150:	e065      	b.n	800421e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	2202      	movs	r2, #2
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4013      	ands	r3, r2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d02c      	beq.n	80041bc <HAL_DMA_IRQHandler+0xdc>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d027      	beq.n	80041bc <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10b      	bne.n	8004192 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 020a 	bic.w	r2, r2, #10
 8004188:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	2102      	movs	r1, #2
 800419c:	fa01 f202 	lsl.w	r2, r1, r2
 80041a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d035      	beq.n	800421e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041ba:	e030      	b.n	800421e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	2208      	movs	r2, #8
 80041c2:	409a      	lsls	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d028      	beq.n	800421e <HAL_DMA_IRQHandler+0x13e>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d023      	beq.n	800421e <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 020e 	bic.w	r2, r2, #14
 80041e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	2101      	movs	r1, #1
 80041f0:	fa01 f202 	lsl.w	r2, r1, r2
 80041f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
    }
  }
}
 800421c:	e7ff      	b.n	800421e <HAL_DMA_IRQHandler+0x13e>
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b10      	cmp	r3, #16
 800426c:	d108      	bne.n	8004280 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800427e:	e007      	b.n	8004290 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <DMA_CalcBaseAndBitshift+0x60>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d80f      	bhi.n	80042d0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <DMA_CalcBaseAndBitshift+0x64>)
 80042b8:	4413      	add	r3, r2
 80042ba:	4a12      	ldr	r2, [pc, #72]	@ (8004304 <DMA_CalcBaseAndBitshift+0x68>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	009a      	lsls	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004308 <DMA_CalcBaseAndBitshift+0x6c>)
 80042cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80042ce:	e00e      	b.n	80042ee <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <DMA_CalcBaseAndBitshift+0x70>)
 80042d8:	4413      	add	r3, r2
 80042da:	4a0a      	ldr	r2, [pc, #40]	@ (8004304 <DMA_CalcBaseAndBitshift+0x68>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	009a      	lsls	r2, r3, #2
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a09      	ldr	r2, [pc, #36]	@ (8004310 <DMA_CalcBaseAndBitshift+0x74>)
 80042ec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40020407 	.word	0x40020407
 8004300:	bffdfff8 	.word	0xbffdfff8
 8004304:	cccccccd 	.word	0xcccccccd
 8004308:	40020000 	.word	0x40020000
 800430c:	bffdfbf8 	.word	0xbffdfbf8
 8004310:	40020400 	.word	0x40020400

08004314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004322:	e154      	b.n	80045ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2101      	movs	r1, #1
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	4013      	ands	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8146 	beq.w	80045c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d005      	beq.n	8004354 <HAL_GPIO_Init+0x40>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d130      	bne.n	80043b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2203      	movs	r2, #3
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800438a:	2201      	movs	r2, #1
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 0201 	and.w	r2, r3, #1
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d017      	beq.n	80043f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d123      	bne.n	8004446 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	08da      	lsrs	r2, r3, #3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3208      	adds	r2, #8
 8004406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	220f      	movs	r2, #15
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4013      	ands	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	08da      	lsrs	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3208      	adds	r2, #8
 8004440:	6939      	ldr	r1, [r7, #16]
 8004442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	2203      	movs	r2, #3
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 0203 	and.w	r2, r3, #3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80a0 	beq.w	80045c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004488:	4b58      	ldr	r3, [pc, #352]	@ (80045ec <HAL_GPIO_Init+0x2d8>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	4a57      	ldr	r2, [pc, #348]	@ (80045ec <HAL_GPIO_Init+0x2d8>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6193      	str	r3, [r2, #24]
 8004494:	4b55      	ldr	r3, [pc, #340]	@ (80045ec <HAL_GPIO_Init+0x2d8>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044a0:	4a53      	ldr	r2, [pc, #332]	@ (80045f0 <HAL_GPIO_Init+0x2dc>)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	3302      	adds	r3, #2
 80044a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	220f      	movs	r2, #15
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044ca:	d019      	beq.n	8004500 <HAL_GPIO_Init+0x1ec>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a49      	ldr	r2, [pc, #292]	@ (80045f4 <HAL_GPIO_Init+0x2e0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_GPIO_Init+0x1e8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a48      	ldr	r2, [pc, #288]	@ (80045f8 <HAL_GPIO_Init+0x2e4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00d      	beq.n	80044f8 <HAL_GPIO_Init+0x1e4>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a47      	ldr	r2, [pc, #284]	@ (80045fc <HAL_GPIO_Init+0x2e8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <HAL_GPIO_Init+0x1e0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a46      	ldr	r2, [pc, #280]	@ (8004600 <HAL_GPIO_Init+0x2ec>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_GPIO_Init+0x1dc>
 80044ec:	2304      	movs	r3, #4
 80044ee:	e008      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044f0:	2305      	movs	r3, #5
 80044f2:	e006      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044f4:	2303      	movs	r3, #3
 80044f6:	e004      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e002      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 8004500:	2300      	movs	r3, #0
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	f002 0203 	and.w	r2, r2, #3
 8004508:	0092      	lsls	r2, r2, #2
 800450a:	4093      	lsls	r3, r2
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004512:	4937      	ldr	r1, [pc, #220]	@ (80045f0 <HAL_GPIO_Init+0x2dc>)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	3302      	adds	r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004520:	4b38      	ldr	r3, [pc, #224]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	43db      	mvns	r3, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004544:	4a2f      	ldr	r2, [pc, #188]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800454a:	4b2e      	ldr	r3, [pc, #184]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800456e:	4a25      	ldr	r2, [pc, #148]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004574:	4b23      	ldr	r3, [pc, #140]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004598:	4a1a      	ldr	r2, [pc, #104]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800459e:	4b19      	ldr	r3, [pc, #100]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045c2:	4a10      	ldr	r2, [pc, #64]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3301      	adds	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f47f aea3 	bne.w	8004324 <HAL_GPIO_Init+0x10>
  }
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40010000 	.word	0x40010000
 80045f4:	48000400 	.word	0x48000400
 80045f8:	48000800 	.word	0x48000800
 80045fc:	48000c00 	.word	0x48000c00
 8004600:	48001000 	.word	0x48001000
 8004604:	40010400 	.word	0x40010400

08004608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
 8004614:	4613      	mov	r3, r2
 8004616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004618:	787b      	ldrb	r3, [r7, #1]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004624:	e002      	b.n	800462c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4013      	ands	r3, r2
 8004650:	041a      	lsls	r2, r3, #16
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	43d9      	mvns	r1, r3
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	400b      	ands	r3, r1
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	619a      	str	r2, [r3, #24]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e08d      	b.n	800479a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fe fec6 	bl	8003424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	@ 0x24
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	e006      	b.n	80046f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d108      	bne.n	800470e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	e007      	b.n	800471e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800471c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69d9      	ldr	r1, [r3, #28]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08a      	sub	sp, #40	@ 0x28
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	461a      	mov	r2, r3
 80047b0:	460b      	mov	r3, r1
 80047b2:	817b      	strh	r3, [r7, #10]
 80047b4:	4613      	mov	r3, r2
 80047b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	f040 80ef 	bne.w	80049a8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d8:	d101      	bne.n	80047de <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80047da:	2302      	movs	r3, #2
 80047dc:	e0e5      	b.n	80049aa <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_I2C_Master_Transmit_DMA+0x48>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e0de      	b.n	80049aa <HAL_I2C_Master_Transmit_DMA+0x206>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2221      	movs	r2, #33	@ 0x21
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2210      	movs	r2, #16
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	893a      	ldrh	r2, [r7, #8]
 8004814:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a66      	ldr	r2, [pc, #408]	@ (80049b4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800481a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a66      	ldr	r2, [pc, #408]	@ (80049b8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004820:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	2bff      	cmp	r3, #255	@ 0xff
 800482a:	d906      	bls.n	800483a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22ff      	movs	r2, #255	@ 0xff
 8004830:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004832:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	e007      	b.n	800484a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004844:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004848:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01a      	beq.n	8004888 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	d074      	beq.n	800497a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d022      	beq.n	80048de <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489c:	4a47      	ldr	r2, [pc, #284]	@ (80049bc <HAL_I2C_Master_Transmit_DMA+0x218>)
 800489e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	4a46      	ldr	r2, [pc, #280]	@ (80049c0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	2200      	movs	r2, #0
 80048ae:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	2200      	movs	r2, #0
 80048b6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80048c8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80048ce:	f7ff fb2c 	bl	8003f2a <HAL_DMA_Start_IT>
 80048d2:	4603      	mov	r3, r0
 80048d4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d13a      	bne.n	8004952 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80048dc:	e013      	b.n	8004906 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e051      	b.n	80049aa <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490a:	b2db      	uxtb	r3, r3
 800490c:	3301      	adds	r3, #1
 800490e:	b2da      	uxtb	r2, r3
 8004910:	8979      	ldrh	r1, [r7, #10]
 8004912:	4b2c      	ldr	r3, [pc, #176]	@ (80049c4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f001 feaf 	bl	800667c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004938:	2110      	movs	r1, #16
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f001 fed0 	bl	80066e0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e028      	b.n	80049a4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0210 	orr.w	r2, r3, #16
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e017      	b.n	80049aa <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a12      	ldr	r2, [pc, #72]	@ (80049c8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800497e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	8979      	ldrh	r1, [r7, #10]
 8004986:	4b0f      	ldr	r3, [pc, #60]	@ (80049c4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f001 fe74 	bl	800667c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800499c:	2101      	movs	r1, #1
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f001 fe9e 	bl	80066e0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e000      	b.n	80049aa <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	ffff0000 	.word	0xffff0000
 80049b8:	08005171 	.word	0x08005171
 80049bc:	080061f7 	.word	0x080061f7
 80049c0:	0800628d 	.word	0x0800628d
 80049c4:	80002000 	.word	0x80002000
 80049c8:	08004d15 	.word	0x08004d15

080049cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	461a      	mov	r2, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	460b      	mov	r3, r1
 80049e0:	813b      	strh	r3, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	f040 80f9 	bne.w	8004be6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x34>
 80049fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0ed      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_I2C_Mem_Write+0x4e>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e0e6      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a22:	f7ff f81b 	bl	8003a5c <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2319      	movs	r3, #25
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f001 fc5e 	bl	80062f6 <I2C_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0d1      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2221      	movs	r2, #33	@ 0x21
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2240      	movs	r2, #64	@ 0x40
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a6c:	88f8      	ldrh	r0, [r7, #6]
 8004a6e:	893a      	ldrh	r2, [r7, #8]
 8004a70:	8979      	ldrh	r1, [r7, #10]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fe8d 	bl	800579c <I2C_RequestMemoryWrite>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0a9      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2bff      	cmp	r3, #255	@ 0xff
 8004a9c:	d90e      	bls.n	8004abc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	@ 0xff
 8004aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	8979      	ldrh	r1, [r7, #10]
 8004aac:	2300      	movs	r3, #0
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f001 fde1 	bl	800667c <I2C_TransferConfig>
 8004aba:	e00f      	b.n	8004adc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	8979      	ldrh	r1, [r7, #10]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f001 fdd0 	bl	800667c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f001 fc61 	bl	80063a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e07b      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d034      	beq.n	8004b94 <HAL_I2C_Mem_Write+0x1c8>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d130      	bne.n	8004b94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2180      	movs	r1, #128	@ 0x80
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f001 fbda 	bl	80062f6 <I2C_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e04d      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2bff      	cmp	r3, #255	@ 0xff
 8004b54:	d90e      	bls.n	8004b74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	22ff      	movs	r2, #255	@ 0xff
 8004b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	8979      	ldrh	r1, [r7, #10]
 8004b64:	2300      	movs	r3, #0
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f001 fd85 	bl	800667c <I2C_TransferConfig>
 8004b72:	e00f      	b.n	8004b94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	8979      	ldrh	r1, [r7, #10]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f001 fd74 	bl	800667c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d19e      	bne.n	8004adc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f001 fc47 	bl	8006436 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e01a      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6859      	ldr	r1, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <HAL_I2C_Mem_Write+0x224>)
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
  }
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	fe00e800 	.word	0xfe00e800

08004bf4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
  }
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
 8004c84:	4613      	mov	r3, r2
 8004c86:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d06:	b2db      	uxtb	r3, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <I2C_Master_ISR_IT+0x1e>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e121      	b.n	8004f76 <I2C_Master_ISR_IT+0x262>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d012      	beq.n	8004d6a <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00d      	beq.n	8004d6a <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2210      	movs	r2, #16
 8004d54:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f043 0204 	orr.w	r2, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f001 fa23 	bl	80061ae <I2C_Flush_TXDR>
 8004d68:	e0f2      	b.n	8004f50 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d022      	beq.n	8004dba <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01d      	beq.n	8004dba <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004db8:	e0ca      	b.n	8004f50 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d128      	bne.n	8004e16 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d023      	beq.n	8004e16 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80b6 	beq.w	8004f50 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004e14:	e09c      	b.n	8004f50 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d06a      	beq.n	8004ef6 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d065      	beq.n	8004ef6 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d04e      	beq.n	8004ed2 <I2C_Master_ISR_IT+0x1be>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d14a      	bne.n	8004ed2 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e48:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2bff      	cmp	r3, #255	@ 0xff
 8004e52:	d91c      	bls.n	8004e8e <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d103      	bne.n	8004e70 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004e6e:	e002      	b.n	8004e76 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	22ff      	movs	r2, #255	@ 0xff
 8004e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	8a79      	ldrh	r1, [r7, #18]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f001 fbf8 	bl	800667c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e8c:	e032      	b.n	8004ef4 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ea0:	d00b      	beq.n	8004eba <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004eac:	8a79      	ldrh	r1, [r7, #18]
 8004eae:	2000      	movs	r0, #0
 8004eb0:	9000      	str	r0, [sp, #0]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f001 fbe2 	bl	800667c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eb8:	e01c      	b.n	8004ef4 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	8a79      	ldrh	r1, [r7, #18]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f001 fbd6 	bl	800667c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ed0:	e010      	b.n	8004ef4 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ee0:	d003      	beq.n	8004eea <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fd32 	bl	800594c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ee8:	e032      	b.n	8004f50 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004eea:	2140      	movs	r1, #64	@ 0x40
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f001 f847 	bl	8005f80 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ef2:	e02d      	b.n	8004f50 <I2C_Master_ISR_IT+0x23c>
 8004ef4:	e02c      	b.n	8004f50 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d027      	beq.n	8004f50 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d022      	beq.n	8004f50 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d119      	bne.n	8004f48 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f22:	d015      	beq.n	8004f50 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f2c:	d108      	bne.n	8004f40 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	e007      	b.n	8004f50 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fd03 	bl	800594c <I2C_ITMasterSeqCplt>
 8004f46:	e003      	b.n	8004f50 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004f48:	2140      	movs	r1, #64	@ 0x40
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f001 f818 	bl	8005f80 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fd8a 	bl	8005a80 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b086      	sub	sp, #24
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <I2C_Slave_ISR_IT+0x24>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e0e2      	b.n	8005168 <I2C_Slave_ISR_IT+0x1ea>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004fbe:	6939      	ldr	r1, [r7, #16]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fe25 	bl	8005c10 <I2C_ITSlaveCplt>
 8004fc6:	e0ca      	b.n	800515e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d04b      	beq.n	800506a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d046      	beq.n	800506a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d128      	bne.n	8005038 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b28      	cmp	r3, #40	@ 0x28
 8004ff0:	d108      	bne.n	8005004 <I2C_Slave_ISR_IT+0x86>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ff8:	d104      	bne.n	8005004 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ffa:	6939      	ldr	r1, [r7, #16]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 ff6b 	bl	8005ed8 <I2C_ITListenCplt>
 8005002:	e031      	b.n	8005068 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b29      	cmp	r3, #41	@ 0x29
 800500e:	d10e      	bne.n	800502e <I2C_Slave_ISR_IT+0xb0>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005016:	d00a      	beq.n	800502e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2210      	movs	r2, #16
 800501e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f001 f8c4 	bl	80061ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fccd 	bl	80059c6 <I2C_ITSlaveSeqCplt>
 800502c:	e01c      	b.n	8005068 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2210      	movs	r2, #16
 8005034:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005036:	e08f      	b.n	8005158 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2210      	movs	r2, #16
 800503e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005044:	f043 0204 	orr.w	r2, r3, #4
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <I2C_Slave_ISR_IT+0xdc>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005058:	d17e      	bne.n	8005158 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505e:	4619      	mov	r1, r3
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 ff8d 	bl	8005f80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005066:	e077      	b.n	8005158 <I2C_Slave_ISR_IT+0x1da>
 8005068:	e076      	b.n	8005158 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02f      	beq.n	80050d4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800507a:	2b00      	cmp	r3, #0
 800507c:	d02a      	beq.n	80050d4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d018      	beq.n	80050ba <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d14b      	bne.n	800515c <I2C_Slave_ISR_IT+0x1de>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050ca:	d047      	beq.n	800515c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fc7a 	bl	80059c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80050d2:	e043      	b.n	800515c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 fbaa 	bl	8005844 <I2C_ITAddrCplt>
 80050f0:	e035      	b.n	800515e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d030      	beq.n	800515e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02b      	beq.n	800515e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d018      	beq.n	8005142 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005140:	e00d      	b.n	800515e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005148:	d002      	beq.n	8005150 <I2C_Slave_ISR_IT+0x1d2>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fc38 	bl	80059c6 <I2C_ITSlaveSeqCplt>
 8005156:	e002      	b.n	800515e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005158:	bf00      	nop
 800515a:	e000      	b.n	800515e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800515c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <I2C_Master_ISR_DMA+0x1a>
 8005186:	2302      	movs	r3, #2
 8005188:	e0e7      	b.n	800535a <I2C_Master_ISR_DMA+0x1ea>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d016      	beq.n	80051ca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d011      	beq.n	80051ca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2210      	movs	r2, #16
 80051ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b2:	f043 0204 	orr.w	r2, r3, #4
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80051ba:	2120      	movs	r1, #32
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f001 fa8f 	bl	80066e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fff3 	bl	80061ae <I2C_Flush_TXDR>
 80051c8:	e0c2      	b.n	8005350 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d07f      	beq.n	80052d4 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d07a      	beq.n	80052d4 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05c      	beq.n	80052b2 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005204:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2bff      	cmp	r3, #255	@ 0xff
 800520e:	d914      	bls.n	800523a <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d103      	bne.n	800522c <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	851a      	strh	r2, [r3, #40]	@ 0x28
 800522a:	e002      	b.n	8005232 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	22ff      	movs	r2, #255	@ 0xff
 8005230:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e010      	b.n	800525c <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800524c:	d003      	beq.n	8005256 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e002      	b.n	800525c <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800525a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005260:	b2da      	uxtb	r2, r3
 8005262:	8a79      	ldrh	r1, [r7, #18]
 8005264:	2300      	movs	r3, #0
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f001 fa06 	bl	800667c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b22      	cmp	r3, #34	@ 0x22
 800528c:	d108      	bne.n	80052a0 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800529c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800529e:	e057      	b.n	8005350 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80052b0:	e04e      	b.n	8005350 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052c0:	d003      	beq.n	80052ca <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fb42 	bl	800594c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80052c8:	e042      	b.n	8005350 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80052ca:	2140      	movs	r1, #64	@ 0x40
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fe57 	bl	8005f80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80052d2:	e03d      	b.n	8005350 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d028      	beq.n	8005330 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d119      	bne.n	8005326 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005300:	d025      	beq.n	800534e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800530a:	d108      	bne.n	800531e <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800531a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800531c:	e017      	b.n	800534e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fb14 	bl	800594c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005324:	e013      	b.n	800534e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005326:	2140      	movs	r1, #64	@ 0x40
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 fe29 	bl	8005f80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800532e:	e00e      	b.n	800534e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fb9a 	bl	8005a80 <I2C_ITMasterCplt>
 800534c:	e000      	b.n	8005350 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800534e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005370:	4b90      	ldr	r3, [pc, #576]	@ (80055b4 <I2C_Mem_ISR_DMA+0x250>)
 8005372:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <I2C_Mem_ISR_DMA+0x1e>
 800537e:	2302      	movs	r3, #2
 8005380:	e12f      	b.n	80055e2 <I2C_Mem_ISR_DMA+0x27e>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800539a:	2b00      	cmp	r3, #0
 800539c:	d011      	beq.n	80053c2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2210      	movs	r2, #16
 80053a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	f043 0204 	orr.w	r2, r3, #4
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80053b2:	2120      	movs	r1, #32
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f001 f993 	bl	80066e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fef7 	bl	80061ae <I2C_Flush_TXDR>
 80053c0:	e10a      	b.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00e      	beq.n	80053ea <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295
 80053e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80053e8:	e0f6      	b.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d06d      	beq.n	80054d0 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d068      	beq.n	80054d0 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80053fe:	2101      	movs	r1, #1
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f001 f9f1 	bl	80067e8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005406:	2110      	movs	r1, #16
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f001 f969 	bl	80066e0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d056      	beq.n	80054c6 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	2bff      	cmp	r3, #255	@ 0xff
 8005420:	d91e      	bls.n	8005460 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d103      	bne.n	800543e <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800543c:	e002      	b.n	8005444 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	22ff      	movs	r2, #255	@ 0xff
 8005442:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005448:	b299      	uxth	r1, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800544e:	b2da      	uxtb	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 f90f 	bl	800667c <I2C_TransferConfig>
 800545e:	e011      	b.n	8005484 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546e:	b299      	uxth	r1, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005474:	b2da      	uxtb	r2, r3
 8005476:	2300      	movs	r3, #0
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f001 f8fc 	bl	800667c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b22      	cmp	r3, #34	@ 0x22
 80054a0:	d108      	bne.n	80054b4 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80054b2:	e091      	b.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80054c4:	e088      	b.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80054c6:	2140      	movs	r1, #64	@ 0x40
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fd59 	bl	8005f80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80054ce:	e083      	b.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d070      	beq.n	80055bc <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d06b      	beq.n	80055bc <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80054e4:	2101      	movs	r1, #1
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f001 f97e 	bl	80067e8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80054ec:	2110      	movs	r1, #16
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f001 f8f6 	bl	80066e0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b22      	cmp	r3, #34	@ 0x22
 80054fe:	d101      	bne.n	8005504 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8005500:	4b2d      	ldr	r3, [pc, #180]	@ (80055b8 <I2C_Mem_ISR_DMA+0x254>)
 8005502:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	2bff      	cmp	r3, #255	@ 0xff
 800550c:	d91e      	bls.n	800554c <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b01      	cmp	r3, #1
 8005520:	d103      	bne.n	800552a <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005528:	e002      	b.n	8005530 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	22ff      	movs	r2, #255	@ 0xff
 800552e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005534:	b299      	uxth	r1, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553a:	b2da      	uxtb	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f001 f899 	bl	800667c <I2C_TransferConfig>
 800554a:	e011      	b.n	8005570 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555a:	b299      	uxth	r1, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005560:	b2da      	uxtb	r2, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f001 f886 	bl	800667c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b22      	cmp	r3, #34	@ 0x22
 800558c:	d108      	bne.n	80055a0 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800559c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800559e:	e01b      	b.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055ae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055b0:	e012      	b.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
 80055b2:	bf00      	nop
 80055b4:	80002000 	.word	0x80002000
 80055b8:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fa54 	bl	8005a80 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop

080055ec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <I2C_Slave_ISR_DMA+0x24>
 800560c:	2302      	movs	r3, #2
 800560e:	e0c0      	b.n	8005792 <I2C_Slave_ISR_DMA+0x1a6>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 faee 	bl	8005c10 <I2C_ITSlaveCplt>
 8005634:	e0a8      	b.n	8005788 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8095 	beq.w	800576c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 808f 	beq.w	800576c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800565e:	2b00      	cmp	r3, #0
 8005660:	d07d      	beq.n	800575e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8005680:	2301      	movs	r3, #1
 8005682:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80056a2:	2301      	movs	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d128      	bne.n	80056fe <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b28      	cmp	r3, #40	@ 0x28
 80056b6:	d108      	bne.n	80056ca <I2C_Slave_ISR_DMA+0xde>
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056be:	d104      	bne.n	80056ca <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fc08 	bl	8005ed8 <I2C_ITListenCplt>
 80056c8:	e048      	b.n	800575c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b29      	cmp	r3, #41	@ 0x29
 80056d4:	d10e      	bne.n	80056f4 <I2C_Slave_ISR_DMA+0x108>
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056dc:	d00a      	beq.n	80056f4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2210      	movs	r2, #16
 80056e4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fd61 	bl	80061ae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f96a 	bl	80059c6 <I2C_ITSlaveSeqCplt>
 80056f2:	e033      	b.n	800575c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2210      	movs	r2, #16
 80056fa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80056fc:	e034      	b.n	8005768 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2210      	movs	r2, #16
 8005704:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005718:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <I2C_Slave_ISR_DMA+0x13c>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005726:	d11f      	bne.n	8005768 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b21      	cmp	r3, #33	@ 0x21
 800572c:	d002      	beq.n	8005734 <I2C_Slave_ISR_DMA+0x148>
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	2b29      	cmp	r3, #41	@ 0x29
 8005732:	d103      	bne.n	800573c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2221      	movs	r2, #33	@ 0x21
 8005738:	631a      	str	r2, [r3, #48]	@ 0x30
 800573a:	e008      	b.n	800574e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	2b22      	cmp	r3, #34	@ 0x22
 8005740:	d002      	beq.n	8005748 <I2C_Slave_ISR_DMA+0x15c>
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	2b2a      	cmp	r3, #42	@ 0x2a
 8005746:	d102      	bne.n	800574e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2222      	movs	r2, #34	@ 0x22
 800574c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005752:	4619      	mov	r1, r3
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fc13 	bl	8005f80 <I2C_ITError>
      if (treatdmanack == 1U)
 800575a:	e005      	b.n	8005768 <I2C_Slave_ISR_DMA+0x17c>
 800575c:	e004      	b.n	8005768 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2210      	movs	r2, #16
 8005764:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005766:	e00f      	b.n	8005788 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8005768:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800576a:	e00d      	b.n	8005788 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f85e 	bl	8005844 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	817b      	strh	r3, [r7, #10]
 80057ae:	460b      	mov	r3, r1
 80057b0:	813b      	strh	r3, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	8979      	ldrh	r1, [r7, #10]
 80057bc:	4b20      	ldr	r3, [pc, #128]	@ (8005840 <I2C_RequestMemoryWrite+0xa4>)
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 ff59 	bl	800667c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fdea 	bl	80063a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e02c      	b.n	8005838 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057e4:	893b      	ldrh	r3, [r7, #8]
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80057ee:	e015      	b.n	800581c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057f0:	893b      	ldrh	r3, [r7, #8]
 80057f2:	0a1b      	lsrs	r3, r3, #8
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	69b9      	ldr	r1, [r7, #24]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fdd0 	bl	80063a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e012      	b.n	8005838 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005812:	893b      	ldrh	r3, [r7, #8]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2200      	movs	r2, #0
 8005824:	2180      	movs	r1, #128	@ 0x80
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fd65 	bl	80062f6 <I2C_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	80002000 	.word	0x80002000

08005844 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800585a:	2b28      	cmp	r3, #40	@ 0x28
 800585c:	d16a      	bne.n	8005934 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	b29b      	uxth	r3, r3
 8005878:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800587c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800588a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005898:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d138      	bne.n	8005914 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80058a2:	897b      	ldrh	r3, [r7, #10]
 80058a4:	09db      	lsrs	r3, r3, #7
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	89bb      	ldrh	r3, [r7, #12]
 80058aa:	4053      	eors	r3, r2
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f003 0306 	and.w	r3, r3, #6
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11c      	bne.n	80058f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80058b6:	897b      	ldrh	r3, [r7, #10]
 80058b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d13b      	bne.n	8005944 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2208      	movs	r2, #8
 80058d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058e2:	89ba      	ldrh	r2, [r7, #12]
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff f9c5 	bl	8004c78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058ee:	e029      	b.n	8005944 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80058f0:	893b      	ldrh	r3, [r7, #8]
 80058f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80058f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 ff75 	bl	80067e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005906:	89ba      	ldrh	r2, [r7, #12]
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff f9b3 	bl	8004c78 <HAL_I2C_AddrCallback>
}
 8005912:	e017      	b.n	8005944 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 ff65 	bl	80067e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005926:	89ba      	ldrh	r2, [r7, #12]
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff f9a3 	bl	8004c78 <HAL_I2C_AddrCallback>
}
 8005932:	e007      	b.n	8005944 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2208      	movs	r2, #8
 800593a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b21      	cmp	r3, #33	@ 0x21
 8005966:	d115      	bne.n	8005994 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2211      	movs	r2, #17
 8005974:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800597c:	2101      	movs	r1, #1
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 ff32 	bl	80067e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff f94b 	bl	8004c28 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005992:	e014      	b.n	80059be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2212      	movs	r2, #18
 80059a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80059a8:	2102      	movs	r1, #2
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 ff1c 	bl	80067e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff f93f 	bl	8004c3c <HAL_I2C_MasterRxCpltCallback>
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e00c      	b.n	8005a14 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a12:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b29      	cmp	r3, #41	@ 0x29
 8005a1e:	d112      	bne.n	8005a46 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2228      	movs	r2, #40	@ 0x28
 8005a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2221      	movs	r2, #33	@ 0x21
 8005a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a2e:	2101      	movs	r1, #1
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fed9 	bl	80067e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff f906 	bl	8004c50 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a44:	e017      	b.n	8005a76 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a50:	d111      	bne.n	8005a76 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2228      	movs	r2, #40	@ 0x28
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2222      	movs	r2, #34	@ 0x22
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a60:	2102      	movs	r1, #2
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fec0 	bl	80067e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff f8f7 	bl	8004c64 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2220      	movs	r2, #32
 8005a94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b21      	cmp	r3, #33	@ 0x21
 8005aa0:	d107      	bne.n	8005ab2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fe9f 	bl	80067e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2211      	movs	r2, #17
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ab0:	e00c      	b.n	8005acc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b22      	cmp	r3, #34	@ 0x22
 8005abc:	d106      	bne.n	8005acc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005abe:	2102      	movs	r1, #2
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fe91 	bl	80067e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2212      	movs	r2, #18
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6859      	ldr	r1, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8005c08 <I2C_ITMasterCplt+0x188>)
 8005ad8:	400b      	ands	r3, r1
 8005ada:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a49      	ldr	r2, [pc, #292]	@ (8005c0c <I2C_ITMasterCplt+0x18c>)
 8005ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2210      	movs	r2, #16
 8005af8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	f043 0204 	orr.w	r2, r3, #4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b60      	cmp	r3, #96	@ 0x60
 8005b10:	d10a      	bne.n	8005b28 <I2C_ITMasterCplt+0xa8>
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005b26:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fb40 	bl	80061ae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b60      	cmp	r3, #96	@ 0x60
 8005b3e:	d002      	beq.n	8005b46 <I2C_ITMasterCplt+0xc6>
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d006      	beq.n	8005b54 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fa17 	bl	8005f80 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b52:	e054      	b.n	8005bfe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b21      	cmp	r3, #33	@ 0x21
 8005b5e:	d124      	bne.n	8005baa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b40      	cmp	r3, #64	@ 0x40
 8005b78:	d10b      	bne.n	8005b92 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff f88c 	bl	8004ca8 <HAL_I2C_MemTxCpltCallback>
}
 8005b90:	e035      	b.n	8005bfe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff f840 	bl	8004c28 <HAL_I2C_MasterTxCpltCallback>
}
 8005ba8:	e029      	b.n	8005bfe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b22      	cmp	r3, #34	@ 0x22
 8005bb4:	d123      	bne.n	8005bfe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d10b      	bne.n	8005be8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff f86b 	bl	8004cbc <HAL_I2C_MemRxCpltCallback>
}
 8005be6:	e00a      	b.n	8005bfe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff f81f 	bl	8004c3c <HAL_I2C_MasterRxCpltCallback>
}
 8005bfe:	bf00      	nop
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	fe00e800 	.word	0xfe00e800
 8005c0c:	ffff0000 	.word	0xffff0000

08005c10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c32:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	2b21      	cmp	r3, #33	@ 0x21
 8005c40:	d002      	beq.n	8005c48 <I2C_ITSlaveCplt+0x38>
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	2b29      	cmp	r3, #41	@ 0x29
 8005c46:	d108      	bne.n	8005c5a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c48:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fdcb 	bl	80067e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2221      	movs	r2, #33	@ 0x21
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c58:	e019      	b.n	8005c8e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	2b22      	cmp	r3, #34	@ 0x22
 8005c5e:	d002      	beq.n	8005c66 <I2C_ITSlaveCplt+0x56>
 8005c60:	7afb      	ldrb	r3, [r7, #11]
 8005c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c64:	d108      	bne.n	8005c78 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c66:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fdbc 	bl	80067e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2222      	movs	r2, #34	@ 0x22
 8005c74:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c76:	e00a      	b.n	8005c8e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005c78:	7afb      	ldrb	r3, [r7, #11]
 8005c7a:	2b28      	cmp	r3, #40	@ 0x28
 8005c7c:	d107      	bne.n	8005c8e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005c7e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fdb0 	bl	80067e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c9c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6859      	ldr	r1, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b89      	ldr	r3, [pc, #548]	@ (8005ed0 <I2C_ITSlaveCplt+0x2c0>)
 8005caa:	400b      	ands	r3, r1
 8005cac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa7d 	bl	80061ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d013      	beq.n	8005ce6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ccc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01f      	beq.n	8005d16 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ce4:	e017      	b.n	8005d16 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d012      	beq.n	8005d16 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cfe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d006      	beq.n	8005d16 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d020      	beq.n	8005d62 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0304 	bic.w	r3, r3, #4
 8005d26:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d70:	f043 0204 	orr.w	r2, r3, #4
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d049      	beq.n	8005e16 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d044      	beq.n	8005e16 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d128      	bne.n	8005de8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b28      	cmp	r3, #40	@ 0x28
 8005da0:	d108      	bne.n	8005db4 <I2C_ITSlaveCplt+0x1a4>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005da8:	d104      	bne.n	8005db4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f893 	bl	8005ed8 <I2C_ITListenCplt>
 8005db2:	e030      	b.n	8005e16 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b29      	cmp	r3, #41	@ 0x29
 8005dbe:	d10e      	bne.n	8005dde <I2C_ITSlaveCplt+0x1ce>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dc6:	d00a      	beq.n	8005dde <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2210      	movs	r2, #16
 8005dce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f9ec 	bl	80061ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fdf5 	bl	80059c6 <I2C_ITSlaveSeqCplt>
 8005ddc:	e01b      	b.n	8005e16 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2210      	movs	r2, #16
 8005de4:	61da      	str	r2, [r3, #28]
 8005de6:	e016      	b.n	8005e16 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2210      	movs	r2, #16
 8005dee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df4:	f043 0204 	orr.w	r2, r3, #4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <I2C_ITSlaveCplt+0x1fa>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e08:	d105      	bne.n	8005e16 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8b5 	bl	8005f80 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d010      	beq.n	8005e4e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f8a4 	bl	8005f80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b28      	cmp	r3, #40	@ 0x28
 8005e42:	d141      	bne.n	8005ec8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e44:	6979      	ldr	r1, [r7, #20]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f846 	bl	8005ed8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e4c:	e03c      	b.n	8005ec8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e56:	d014      	beq.n	8005e82 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fdb4 	bl	80059c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed4 <I2C_ITSlaveCplt+0x2c4>)
 8005e62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fe ff0a 	bl	8004c94 <HAL_I2C_ListenCpltCallback>
}
 8005e80:	e022      	b.n	8005ec8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b22      	cmp	r3, #34	@ 0x22
 8005e8c:	d10e      	bne.n	8005eac <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fe fedd 	bl	8004c64 <HAL_I2C_SlaveRxCpltCallback>
}
 8005eaa:	e00d      	b.n	8005ec8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fe fec4 	bl	8004c50 <HAL_I2C_SlaveTxCpltCallback>
}
 8005ec8:	bf00      	nop
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	fe00e800 	.word	0xfe00e800
 8005ed4:	ffff0000 	.word	0xffff0000

08005ed8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a25      	ldr	r2, [pc, #148]	@ (8005f7c <I2C_ITListenCplt+0xa4>)
 8005ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d022      	beq.n	8005f54 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d012      	beq.n	8005f54 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4c:	f043 0204 	orr.w	r2, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f54:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fc45 	bl	80067e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2210      	movs	r2, #16
 8005f64:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fe fe90 	bl	8004c94 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	ffff0000 	.word	0xffff0000

08005f80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f90:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a6d      	ldr	r2, [pc, #436]	@ (8006154 <I2C_ITError+0x1d4>)
 8005f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b28      	cmp	r3, #40	@ 0x28
 8005fb6:	d005      	beq.n	8005fc4 <I2C_ITError+0x44>
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b29      	cmp	r3, #41	@ 0x29
 8005fbc:	d002      	beq.n	8005fc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc2:	d10b      	bne.n	8005fdc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fc4:	2103      	movs	r1, #3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fc0e 	bl	80067e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2228      	movs	r2, #40	@ 0x28
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a60      	ldr	r2, [pc, #384]	@ (8006158 <I2C_ITError+0x1d8>)
 8005fd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005fda:	e030      	b.n	800603e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fdc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fc01 	bl	80067e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f8e1 	bl	80061ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b60      	cmp	r3, #96	@ 0x60
 8005ff6:	d01f      	beq.n	8006038 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b20      	cmp	r3, #32
 800600c:	d114      	bne.n	8006038 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b10      	cmp	r3, #16
 800601a:	d109      	bne.n	8006030 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2210      	movs	r2, #16
 8006022:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006028:	f043 0204 	orr.w	r2, r3, #4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2220      	movs	r2, #32
 8006036:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	d039      	beq.n	80060c0 <I2C_ITError+0x140>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b11      	cmp	r3, #17
 8006050:	d002      	beq.n	8006058 <I2C_ITError+0xd8>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b21      	cmp	r3, #33	@ 0x21
 8006056:	d133      	bne.n	80060c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006062:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006066:	d107      	bne.n	8006078 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006076:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	4618      	mov	r0, r3
 800607e:	f7fe f8d2 	bl	8004226 <HAL_DMA_GetState>
 8006082:	4603      	mov	r3, r0
 8006084:	2b01      	cmp	r3, #1
 8006086:	d017      	beq.n	80060b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	4a33      	ldr	r2, [pc, #204]	@ (800615c <I2C_ITError+0x1dc>)
 800608e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	4618      	mov	r0, r3
 800609e:	f7fd ffe1 	bl	8004064 <HAL_DMA_Abort_IT>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d04d      	beq.n	8006144 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80060b2:	4610      	mov	r0, r2
 80060b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060b6:	e045      	b.n	8006144 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f851 	bl	8006160 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060be:	e041      	b.n	8006144 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d039      	beq.n	800613c <I2C_ITError+0x1bc>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b12      	cmp	r3, #18
 80060cc:	d002      	beq.n	80060d4 <I2C_ITError+0x154>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b22      	cmp	r3, #34	@ 0x22
 80060d2:	d133      	bne.n	800613c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e2:	d107      	bne.n	80060f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe f894 	bl	8004226 <HAL_DMA_GetState>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b01      	cmp	r3, #1
 8006102:	d017      	beq.n	8006134 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006108:	4a14      	ldr	r2, [pc, #80]	@ (800615c <I2C_ITError+0x1dc>)
 800610a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	4618      	mov	r0, r3
 800611a:	f7fd ffa3 	bl	8004064 <HAL_DMA_Abort_IT>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d011      	beq.n	8006148 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800612e:	4610      	mov	r0, r2
 8006130:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006132:	e009      	b.n	8006148 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f813 	bl	8006160 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800613a:	e005      	b.n	8006148 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f80f 	bl	8006160 <I2C_TreatErrorCallback>
  }
}
 8006142:	e002      	b.n	800614a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006144:	bf00      	nop
 8006146:	e000      	b.n	800614a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006148:	bf00      	nop
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	ffff0000 	.word	0xffff0000
 8006158:	08004f7f 	.word	0x08004f7f
 800615c:	080062bb 	.word	0x080062bb

08006160 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b60      	cmp	r3, #96	@ 0x60
 8006172:	d10e      	bne.n	8006192 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fe fdaa 	bl	8004ce4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006190:	e009      	b.n	80061a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fe fd95 	bl	8004cd0 <HAL_I2C_ErrorCallback>
}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d103      	bne.n	80061cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d007      	beq.n	80061ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	619a      	str	r2, [r3, #24]
  }
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006212:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800621e:	2120      	movs	r1, #32
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fa5d 	bl	80066e0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006226:	e02d      	b.n	8006284 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006230:	441a      	add	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	2bff      	cmp	r3, #255	@ 0xff
 800623e:	d903      	bls.n	8006248 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	22ff      	movs	r2, #255	@ 0xff
 8006244:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006246:	e004      	b.n	8006252 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	4619      	mov	r1, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3328      	adds	r3, #40	@ 0x28
 8006262:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006268:	f7fd fe5f 	bl	8003f2a <HAL_DMA_Start_IT>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006272:	2110      	movs	r1, #16
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff fe83 	bl	8005f80 <I2C_ITError>
}
 800627a:	e003      	b.n	8006284 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800627c:	2140      	movs	r1, #64	@ 0x40
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 fa2e 	bl	80066e0 <I2C_Enable_IRQ>
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062a8:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80062aa:	2110      	movs	r1, #16
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fe67 	bl	8005f80 <I2C_ITError>
}
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d4:	2200      	movs	r2, #0
 80062d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e4:	2200      	movs	r2, #0
 80062e6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff ff39 	bl	8006160 <I2C_TreatErrorCallback>
}
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006306:	e03b      	b.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f8d5 	bl	80064bc <I2C_IsErrorOccurred>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e041      	b.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d02d      	beq.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006324:	f7fd fb9a 	bl	8003a5c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d302      	bcc.n	800633a <I2C_WaitOnFlagUntilTimeout+0x44>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d122      	bne.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699a      	ldr	r2, [r3, #24]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	bf0c      	ite	eq
 800634a:	2301      	moveq	r3, #1
 800634c:	2300      	movne	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	429a      	cmp	r2, r3
 8006356:	d113      	bne.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635c:	f043 0220 	orr.w	r2, r3, #32
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e00f      	b.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4013      	ands	r3, r2
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	bf0c      	ite	eq
 8006390:	2301      	moveq	r3, #1
 8006392:	2300      	movne	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	429a      	cmp	r2, r3
 800639c:	d0b4      	beq.n	8006308 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063b4:	e033      	b.n	800641e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f87e 	bl	80064bc <I2C_IsErrorOccurred>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e031      	b.n	800642e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d025      	beq.n	800641e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fd fb43 	bl	8003a5c <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11a      	bne.n	800641e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d013      	beq.n	800641e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f043 0220 	orr.w	r2, r3, #32
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e007      	b.n	800642e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b02      	cmp	r3, #2
 800642a:	d1c4      	bne.n	80063b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006442:	e02f      	b.n	80064a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f837 	bl	80064bc <I2C_IsErrorOccurred>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e02d      	b.n	80064b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006458:	f7fd fb00 	bl	8003a5c <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	d302      	bcc.n	800646e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11a      	bne.n	80064a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b20      	cmp	r3, #32
 800647a:	d013      	beq.n	80064a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006480:	f043 0220 	orr.w	r2, r3, #32
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e007      	b.n	80064b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d1c8      	bne.n	8006444 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	@ 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d068      	beq.n	80065ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2210      	movs	r2, #16
 80064ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064f0:	e049      	b.n	8006586 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d045      	beq.n	8006586 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064fa:	f7fd faaf 	bl	8003a5c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	429a      	cmp	r2, r3
 8006508:	d302      	bcc.n	8006510 <I2C_IsErrorOccurred+0x54>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d13a      	bne.n	8006586 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800651a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006522:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006532:	d121      	bne.n	8006578 <I2C_IsErrorOccurred+0xbc>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800653a:	d01d      	beq.n	8006578 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	2b20      	cmp	r3, #32
 8006540:	d01a      	beq.n	8006578 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006550:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006552:	f7fd fa83 	bl	8003a5c <HAL_GetTick>
 8006556:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006558:	e00e      	b.n	8006578 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800655a:	f7fd fa7f 	bl	8003a5c <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b19      	cmp	r3, #25
 8006566:	d907      	bls.n	8006578 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	f043 0320 	orr.w	r3, r3, #32
 800656e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006576:	e006      	b.n	8006586 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b20      	cmp	r3, #32
 8006584:	d1e9      	bne.n	800655a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b20      	cmp	r3, #32
 8006592:	d003      	beq.n	800659c <I2C_IsErrorOccurred+0xe0>
 8006594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0aa      	beq.n	80064f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800659c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d103      	bne.n	80065ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2220      	movs	r2, #32
 80065aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	f043 0304 	orr.w	r3, r3, #4
 80065b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	f043 0308 	orr.w	r3, r3, #8
 80065f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	f043 0302 	orr.w	r3, r3, #2
 8006616:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006620:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01c      	beq.n	800666a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7ff fdbc 	bl	80061ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6859      	ldr	r1, [r3, #4]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	4b0d      	ldr	r3, [pc, #52]	@ (8006678 <I2C_IsErrorOccurred+0x1bc>)
 8006642:	400b      	ands	r3, r1
 8006644:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	431a      	orrs	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800666a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800666e:	4618      	mov	r0, r3
 8006670:	3728      	adds	r7, #40	@ 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	fe00e800 	.word	0xfe00e800

0800667c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	607b      	str	r3, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	817b      	strh	r3, [r7, #10]
 800668a:	4613      	mov	r3, r2
 800668c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800668e:	897b      	ldrh	r3, [r7, #10]
 8006690:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006694:	7a7b      	ldrb	r3, [r7, #9]
 8006696:	041b      	lsls	r3, r3, #16
 8006698:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800669c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	0d5b      	lsrs	r3, r3, #21
 80066b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80066ba:	4b08      	ldr	r3, [pc, #32]	@ (80066dc <I2C_TransferConfig+0x60>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	43db      	mvns	r3, r3
 80066c0:	ea02 0103 	and.w	r1, r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	03ff63ff 	.word	0x03ff63ff

080066e0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f4:	4a39      	ldr	r2, [pc, #228]	@ (80067dc <I2C_Enable_IRQ+0xfc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d032      	beq.n	8006760 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80066fe:	4a38      	ldr	r2, [pc, #224]	@ (80067e0 <I2C_Enable_IRQ+0x100>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d02d      	beq.n	8006760 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006708:	4a36      	ldr	r2, [pc, #216]	@ (80067e4 <I2C_Enable_IRQ+0x104>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d028      	beq.n	8006760 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800670e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da03      	bge.n	800671e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800671c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800671e:	887b      	ldrh	r3, [r7, #2]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800672e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006730:	887b      	ldrh	r3, [r7, #2]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006740:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006742:	887b      	ldrh	r3, [r7, #2]
 8006744:	2b10      	cmp	r3, #16
 8006746:	d103      	bne.n	8006750 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800674e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006750:	887b      	ldrh	r3, [r7, #2]
 8006752:	2b20      	cmp	r3, #32
 8006754:	d133      	bne.n	80067be <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f043 0320 	orr.w	r3, r3, #32
 800675c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800675e:	e02e      	b.n	80067be <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006760:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006764:	2b00      	cmp	r3, #0
 8006766:	da03      	bge.n	8006770 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800676e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006770:	887b      	ldrh	r3, [r7, #2]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006780:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006782:	887b      	ldrh	r3, [r7, #2]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006792:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	2b10      	cmp	r3, #16
 8006798:	d103      	bne.n	80067a2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80067a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80067a2:	887b      	ldrh	r3, [r7, #2]
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d103      	bne.n	80067b0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80067b0:	887b      	ldrh	r3, [r7, #2]
 80067b2:	2b40      	cmp	r3, #64	@ 0x40
 80067b4:	d103      	bne.n	80067be <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067bc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6819      	ldr	r1, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	601a      	str	r2, [r3, #0]
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	08005171 	.word	0x08005171
 80067e0:	080055ed 	.word	0x080055ed
 80067e4:	08005365 	.word	0x08005365

080067e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80067f8:	887b      	ldrh	r3, [r7, #2]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00f      	beq.n	8006822 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006808:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006816:	2b28      	cmp	r3, #40	@ 0x28
 8006818:	d003      	beq.n	8006822 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006820:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006822:	887b      	ldrh	r3, [r7, #2]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00f      	beq.n	800684c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006832:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006840:	2b28      	cmp	r3, #40	@ 0x28
 8006842:	d003      	beq.n	800684c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800684a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800684c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006850:	2b00      	cmp	r3, #0
 8006852:	da03      	bge.n	800685c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800685a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800685c:	887b      	ldrh	r3, [r7, #2]
 800685e:	2b10      	cmp	r3, #16
 8006860:	d103      	bne.n	800686a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006868:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800686a:	887b      	ldrh	r3, [r7, #2]
 800686c:	2b20      	cmp	r3, #32
 800686e:	d103      	bne.n	8006878 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f043 0320 	orr.w	r3, r3, #32
 8006876:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006878:	887b      	ldrh	r3, [r7, #2]
 800687a:	2b40      	cmp	r3, #64	@ 0x40
 800687c:	d103      	bne.n	8006886 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006884:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6819      	ldr	r1, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	43da      	mvns	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	400a      	ands	r2, r1
 8006896:	601a      	str	r2, [r3, #0]
}
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	d138      	bne.n	800692c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e032      	b.n	800692e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2224      	movs	r2, #36	@ 0x24
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0201 	bic.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6819      	ldr	r1, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b20      	cmp	r3, #32
 800694e:	d139      	bne.n	80069c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800695a:	2302      	movs	r3, #2
 800695c:	e033      	b.n	80069c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2224      	movs	r2, #36	@ 0x24
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0201 	bic.w	r2, r2, #1
 800697c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800698c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80069da:	af00      	add	r7, sp, #0
 80069dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f001 b823 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 817d 	beq.w	8006d0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006a10:	4bbc      	ldr	r3, [pc, #752]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 030c 	and.w	r3, r3, #12
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d00c      	beq.n	8006a36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a1c:	4bb9      	ldr	r3, [pc, #740]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d15c      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x10e>
 8006a28:	4bb6      	ldr	r3, [pc, #728]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a34:	d155      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x10e>
 8006a36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a3a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8006a42:	fa93 f3a3 	rbit	r3, r3
 8006a46:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a4e:	fab3 f383 	clz	r3, r3
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f043 0301 	orr.w	r3, r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d102      	bne.n	8006a68 <HAL_RCC_OscConfig+0x94>
 8006a62:	4ba8      	ldr	r3, [pc, #672]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	e015      	b.n	8006a94 <HAL_RCC_OscConfig+0xc0>
 8006a68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a6c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8006a74:	fa93 f3a3 	rbit	r3, r3
 8006a78:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8006a7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a80:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8006a84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8006a88:	fa93 f3a3 	rbit	r3, r3
 8006a8c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8006a90:	4b9c      	ldr	r3, [pc, #624]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006a98:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8006a9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8006aa0:	fa92 f2a2 	rbit	r2, r2
 8006aa4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8006aa8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8006aac:	fab2 f282 	clz	r2, r2
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	f042 0220 	orr.w	r2, r2, #32
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	f002 021f 	and.w	r2, r2, #31
 8006abc:	2101      	movs	r1, #1
 8006abe:	fa01 f202 	lsl.w	r2, r1, r2
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 811f 	beq.w	8006d08 <HAL_RCC_OscConfig+0x334>
 8006aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ace:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 8116 	bne.w	8006d08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f000 bfaf 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ae6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af2:	d106      	bne.n	8006b02 <HAL_RCC_OscConfig+0x12e>
 8006af4:	4b83      	ldr	r3, [pc, #524]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a82      	ldr	r2, [pc, #520]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	e036      	b.n	8006b70 <HAL_RCC_OscConfig+0x19c>
 8006b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCC_OscConfig+0x158>
 8006b12:	4b7c      	ldr	r3, [pc, #496]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7b      	ldr	r2, [pc, #492]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	4b79      	ldr	r3, [pc, #484]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a78      	ldr	r2, [pc, #480]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e021      	b.n	8006b70 <HAL_RCC_OscConfig+0x19c>
 8006b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b3c:	d10c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x184>
 8006b3e:	4b71      	ldr	r3, [pc, #452]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a70      	ldr	r2, [pc, #448]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a6d      	ldr	r2, [pc, #436]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	e00b      	b.n	8006b70 <HAL_RCC_OscConfig+0x19c>
 8006b58:	4b6a      	ldr	r3, [pc, #424]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a69      	ldr	r2, [pc, #420]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	4b67      	ldr	r3, [pc, #412]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a66      	ldr	r2, [pc, #408]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b70:	4b64      	ldr	r3, [pc, #400]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	f023 020f 	bic.w	r2, r3, #15
 8006b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	495f      	ldr	r1, [pc, #380]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d059      	beq.n	8006c4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9a:	f7fc ff5f 	bl	8003a5c <HAL_GetTick>
 8006b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	e00a      	b.n	8006bba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ba4:	f7fc ff5a 	bl	8003a5c <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b64      	cmp	r3, #100	@ 0x64
 8006bb2:	d902      	bls.n	8006bba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	f000 bf43 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>
 8006bba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006bbe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8006bc6:	fa93 f3a3 	rbit	r3, r3
 8006bca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8006bce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd2:	fab3 f383 	clz	r3, r3
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	095b      	lsrs	r3, r3, #5
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	f043 0301 	orr.w	r3, r3, #1
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d102      	bne.n	8006bec <HAL_RCC_OscConfig+0x218>
 8006be6:	4b47      	ldr	r3, [pc, #284]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	e015      	b.n	8006c18 <HAL_RCC_OscConfig+0x244>
 8006bec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006bf0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8006bf8:	fa93 f3a3 	rbit	r3, r3
 8006bfc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006c00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006c04:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8006c08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8006c0c:	fa93 f3a3 	rbit	r3, r3
 8006c10:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8006c14:	4b3b      	ldr	r3, [pc, #236]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006c1c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8006c20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8006c24:	fa92 f2a2 	rbit	r2, r2
 8006c28:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8006c2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8006c30:	fab2 f282 	clz	r2, r2
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	f042 0220 	orr.w	r2, r2, #32
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	f002 021f 	and.w	r2, r2, #31
 8006c40:	2101      	movs	r1, #1
 8006c42:	fa01 f202 	lsl.w	r2, r1, r2
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0ab      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x1d0>
 8006c4c:	e05d      	b.n	8006d0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4e:	f7fc ff05 	bl	8003a5c <HAL_GetTick>
 8006c52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c56:	e00a      	b.n	8006c6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c58:	f7fc ff00 	bl	8003a5c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b64      	cmp	r3, #100	@ 0x64
 8006c66:	d902      	bls.n	8006c6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	f000 bee9 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>
 8006c6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006c72:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8006c7a:	fa93 f3a3 	rbit	r3, r3
 8006c7e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8006c82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	fab3 f383 	clz	r3, r3
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f043 0301 	orr.w	r3, r3, #1
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d102      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x2cc>
 8006c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	e015      	b.n	8006ccc <HAL_RCC_OscConfig+0x2f8>
 8006ca0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ca4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8006cac:	fa93 f3a3 	rbit	r3, r3
 8006cb0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8006cb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006cb8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8006cbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8006cc0:	fa93 f3a3 	rbit	r3, r3
 8006cc4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d04 <HAL_RCC_OscConfig+0x330>)
 8006cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ccc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006cd0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8006cd4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8006cd8:	fa92 f2a2 	rbit	r2, r2
 8006cdc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8006ce0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8006ce4:	fab2 f282 	clz	r2, r2
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	f042 0220 	orr.w	r2, r2, #32
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	f002 021f 	and.w	r2, r2, #31
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1ab      	bne.n	8006c58 <HAL_RCC_OscConfig+0x284>
 8006d00:	e003      	b.n	8006d0a <HAL_RCC_OscConfig+0x336>
 8006d02:	bf00      	nop
 8006d04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 817d 	beq.w	800701a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006d20:	4ba6      	ldr	r3, [pc, #664]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f003 030c 	and.w	r3, r3, #12
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006d2c:	4ba3      	ldr	r3, [pc, #652]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f003 030c 	and.w	r3, r3, #12
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d172      	bne.n	8006e1e <HAL_RCC_OscConfig+0x44a>
 8006d38:	4ba0      	ldr	r3, [pc, #640]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d16c      	bne.n	8006e1e <HAL_RCC_OscConfig+0x44a>
 8006d44:	2302      	movs	r3, #2
 8006d46:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8006d4e:	fa93 f3a3 	rbit	r3, r3
 8006d52:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8006d56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d5a:	fab3 f383 	clz	r3, r3
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f043 0301 	orr.w	r3, r3, #1
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d102      	bne.n	8006d74 <HAL_RCC_OscConfig+0x3a0>
 8006d6e:	4b93      	ldr	r3, [pc, #588]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	e013      	b.n	8006d9c <HAL_RCC_OscConfig+0x3c8>
 8006d74:	2302      	movs	r3, #2
 8006d76:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8006d7e:	fa93 f3a3 	rbit	r3, r3
 8006d82:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8006d86:	2302      	movs	r3, #2
 8006d88:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006d8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d90:	fa93 f3a3 	rbit	r3, r3
 8006d94:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8006d98:	4b88      	ldr	r3, [pc, #544]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8006da2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8006da6:	fa92 f2a2 	rbit	r2, r2
 8006daa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8006dae:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8006db2:	fab2 f282 	clz	r2, r2
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	f042 0220 	orr.w	r2, r2, #32
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	f002 021f 	and.w	r2, r2, #31
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_RCC_OscConfig+0x410>
 8006dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d002      	beq.n	8006de4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f000 be2e 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de4:	4b75      	ldr	r3, [pc, #468]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006df0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	21f8      	movs	r1, #248	@ 0xf8
 8006dfa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8006e02:	fa91 f1a1 	rbit	r1, r1
 8006e06:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8006e0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8006e0e:	fab1 f181 	clz	r1, r1
 8006e12:	b2c9      	uxtb	r1, r1
 8006e14:	408b      	lsls	r3, r1
 8006e16:	4969      	ldr	r1, [pc, #420]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1c:	e0fd      	b.n	800701a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 8088 	beq.w	8006f40 <HAL_RCC_OscConfig+0x56c>
 8006e30:	2301      	movs	r3, #1
 8006e32:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e36:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8006e3a:	fa93 f3a3 	rbit	r3, r3
 8006e3e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8006e42:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e46:	fab3 f383 	clz	r3, r3
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006e50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	461a      	mov	r2, r3
 8006e58:	2301      	movs	r3, #1
 8006e5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5c:	f7fc fdfe 	bl	8003a5c <HAL_GetTick>
 8006e60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e64:	e00a      	b.n	8006e7c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e66:	f7fc fdf9 	bl	8003a5c <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d902      	bls.n	8006e7c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	f000 bde2 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e82:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8006e86:	fa93 f3a3 	rbit	r3, r3
 8006e8a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8006e8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e92:	fab3 f383 	clz	r3, r3
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d102      	bne.n	8006eac <HAL_RCC_OscConfig+0x4d8>
 8006ea6:	4b45      	ldr	r3, [pc, #276]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	e013      	b.n	8006ed4 <HAL_RCC_OscConfig+0x500>
 8006eac:	2302      	movs	r3, #2
 8006eae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8006eb6:	fa93 f3a3 	rbit	r3, r3
 8006eba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8006ec4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8006ec8:	fa93 f3a3 	rbit	r3, r3
 8006ecc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8006ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8006eda:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8006ede:	fa92 f2a2 	rbit	r2, r2
 8006ee2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8006ee6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8006eea:	fab2 f282 	clz	r2, r2
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	f042 0220 	orr.w	r2, r2, #32
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	f002 021f 	and.w	r2, r2, #31
 8006efa:	2101      	movs	r1, #1
 8006efc:	fa01 f202 	lsl.w	r2, r1, r2
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0af      	beq.n	8006e66 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f06:	4b2d      	ldr	r3, [pc, #180]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	21f8      	movs	r1, #248	@ 0xf8
 8006f1c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f20:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006f24:	fa91 f1a1 	rbit	r1, r1
 8006f28:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006f2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006f30:	fab1 f181 	clz	r1, r1
 8006f34:	b2c9      	uxtb	r1, r1
 8006f36:	408b      	lsls	r3, r1
 8006f38:	4920      	ldr	r1, [pc, #128]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]
 8006f3e:	e06c      	b.n	800701a <HAL_RCC_OscConfig+0x646>
 8006f40:	2301      	movs	r3, #1
 8006f42:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f46:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006f4a:	fa93 f3a3 	rbit	r3, r3
 8006f4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8006f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f56:	fab3 f383 	clz	r3, r3
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006f60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	461a      	mov	r2, r3
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f6c:	f7fc fd76 	bl	8003a5c <HAL_GetTick>
 8006f70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f74:	e00a      	b.n	8006f8c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f76:	f7fc fd71 	bl	8003a5c <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d902      	bls.n	8006f8c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	f000 bd5a 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f96:	fa93 f3a3 	rbit	r3, r3
 8006f9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8006f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fa2:	fab3 f383 	clz	r3, r3
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f043 0301 	orr.w	r3, r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d104      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x5ec>
 8006fb6:	4b01      	ldr	r3, [pc, #4]	@ (8006fbc <HAL_RCC_OscConfig+0x5e8>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	e015      	b.n	8006fe8 <HAL_RCC_OscConfig+0x614>
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fca:	fa93 f3a3 	rbit	r3, r3
 8006fce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006fd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006fdc:	fa93 f3a3 	rbit	r3, r3
 8006fe0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006fe4:	4bc8      	ldr	r3, [pc, #800]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe8:	2202      	movs	r2, #2
 8006fea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8006fee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006ff2:	fa92 f2a2 	rbit	r2, r2
 8006ff6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8006ffa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006ffe:	fab2 f282 	clz	r2, r2
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	f042 0220 	orr.w	r2, r2, #32
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	f002 021f 	and.w	r2, r2, #31
 800700e:	2101      	movs	r1, #1
 8007010:	fa01 f202 	lsl.w	r2, r1, r2
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1ad      	bne.n	8006f76 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800701a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800701e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8110 	beq.w	8007250 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007034:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d079      	beq.n	8007134 <HAL_RCC_OscConfig+0x760>
 8007040:	2301      	movs	r3, #1
 8007042:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007046:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800704a:	fa93 f3a3 	rbit	r3, r3
 800704e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8007052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007056:	fab3 f383 	clz	r3, r3
 800705a:	b2db      	uxtb	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	4bab      	ldr	r3, [pc, #684]	@ (800730c <HAL_RCC_OscConfig+0x938>)
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	461a      	mov	r2, r3
 8007066:	2301      	movs	r3, #1
 8007068:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800706a:	f7fc fcf7 	bl	8003a5c <HAL_GetTick>
 800706e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007072:	e00a      	b.n	800708a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007074:	f7fc fcf2 	bl	8003a5c <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d902      	bls.n	800708a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	f000 bcdb 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>
 800708a:	2302      	movs	r3, #2
 800708c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007090:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007094:	fa93 f3a3 	rbit	r3, r3
 8007098:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800709c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80070a4:	2202      	movs	r2, #2
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	fa93 f2a3 	rbit	r2, r3
 80070b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c8:	2202      	movs	r2, #2
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	fa93 f2a3 	rbit	r2, r3
 80070da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80070e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070e4:	4b88      	ldr	r3, [pc, #544]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 80070e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80070f0:	2102      	movs	r1, #2
 80070f2:	6019      	str	r1, [r3, #0]
 80070f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	fa93 f1a3 	rbit	r1, r3
 8007102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007106:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800710a:	6019      	str	r1, [r3, #0]
  return result;
 800710c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007110:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	fab3 f383 	clz	r3, r3
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	2101      	movs	r1, #1
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	4013      	ands	r3, r2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0a0      	beq.n	8007074 <HAL_RCC_OscConfig+0x6a0>
 8007132:	e08d      	b.n	8007250 <HAL_RCC_OscConfig+0x87c>
 8007134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007138:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800713c:	2201      	movs	r2, #1
 800713e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007144:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	fa93 f2a3 	rbit	r2, r3
 800714e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007152:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007156:	601a      	str	r2, [r3, #0]
  return result;
 8007158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800715c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007160:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007162:	fab3 f383 	clz	r3, r3
 8007166:	b2db      	uxtb	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	4b68      	ldr	r3, [pc, #416]	@ (800730c <HAL_RCC_OscConfig+0x938>)
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	461a      	mov	r2, r3
 8007172:	2300      	movs	r3, #0
 8007174:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007176:	f7fc fc71 	bl	8003a5c <HAL_GetTick>
 800717a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800717e:	e00a      	b.n	8007196 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007180:	f7fc fc6c 	bl	8003a5c <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d902      	bls.n	8007196 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	f000 bc55 	b.w	8007a40 <HAL_RCC_OscConfig+0x106c>
 8007196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800719a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800719e:	2202      	movs	r2, #2
 80071a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	fa93 f2a3 	rbit	r2, r3
 80071b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80071c2:	2202      	movs	r2, #2
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	fa93 f2a3 	rbit	r2, r3
 80071d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80071e6:	2202      	movs	r2, #2
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	fa93 f2a3 	rbit	r2, r3
 80071f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007200:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007202:	4b41      	ldr	r3, [pc, #260]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 8007204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800720a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800720e:	2102      	movs	r1, #2
 8007210:	6019      	str	r1, [r3, #0]
 8007212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007216:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	fa93 f1a3 	rbit	r1, r3
 8007220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007224:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007228:	6019      	str	r1, [r3, #0]
  return result;
 800722a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800722e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	fab3 f383 	clz	r3, r3
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800723e:	b2db      	uxtb	r3, r3
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	2101      	movs	r1, #1
 8007246:	fa01 f303 	lsl.w	r3, r1, r3
 800724a:	4013      	ands	r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d197      	bne.n	8007180 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 81a1 	beq.w	80075a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007266:	2300      	movs	r3, #0
 8007268:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800726c:	4b26      	ldr	r3, [pc, #152]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d116      	bne.n	80072a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007278:	4b23      	ldr	r3, [pc, #140]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	4a22      	ldr	r2, [pc, #136]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 800727e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007282:	61d3      	str	r3, [r2, #28]
 8007284:	4b20      	ldr	r3, [pc, #128]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800728c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007290:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800729a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800729e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007310 <HAL_RCC_OscConfig+0x93c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d11a      	bne.n	80072e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072b2:	4b17      	ldr	r3, [pc, #92]	@ (8007310 <HAL_RCC_OscConfig+0x93c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a16      	ldr	r2, [pc, #88]	@ (8007310 <HAL_RCC_OscConfig+0x93c>)
 80072b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072be:	f7fc fbcd 	bl	8003a5c <HAL_GetTick>
 80072c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c6:	e009      	b.n	80072dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c8:	f7fc fbc8 	bl	8003a5c <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b64      	cmp	r3, #100	@ 0x64
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e3b1      	b.n	8007a40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007310 <HAL_RCC_OscConfig+0x93c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0ef      	beq.n	80072c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d10d      	bne.n	8007314 <HAL_RCC_OscConfig+0x940>
 80072f8:	4b03      	ldr	r3, [pc, #12]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	4a02      	ldr	r2, [pc, #8]	@ (8007308 <HAL_RCC_OscConfig+0x934>)
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	6213      	str	r3, [r2, #32]
 8007304:	e03c      	b.n	8007380 <HAL_RCC_OscConfig+0x9ac>
 8007306:	bf00      	nop
 8007308:	40021000 	.word	0x40021000
 800730c:	10908120 	.word	0x10908120
 8007310:	40007000 	.word	0x40007000
 8007314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007318:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10c      	bne.n	800733e <HAL_RCC_OscConfig+0x96a>
 8007324:	4bc1      	ldr	r3, [pc, #772]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	4ac0      	ldr	r2, [pc, #768]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 800732a:	f023 0301 	bic.w	r3, r3, #1
 800732e:	6213      	str	r3, [r2, #32]
 8007330:	4bbe      	ldr	r3, [pc, #760]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	4abd      	ldr	r2, [pc, #756]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007336:	f023 0304 	bic.w	r3, r3, #4
 800733a:	6213      	str	r3, [r2, #32]
 800733c:	e020      	b.n	8007380 <HAL_RCC_OscConfig+0x9ac>
 800733e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007342:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2b05      	cmp	r3, #5
 800734c:	d10c      	bne.n	8007368 <HAL_RCC_OscConfig+0x994>
 800734e:	4bb7      	ldr	r3, [pc, #732]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	4ab6      	ldr	r2, [pc, #728]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007354:	f043 0304 	orr.w	r3, r3, #4
 8007358:	6213      	str	r3, [r2, #32]
 800735a:	4bb4      	ldr	r3, [pc, #720]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	4ab3      	ldr	r2, [pc, #716]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	6213      	str	r3, [r2, #32]
 8007366:	e00b      	b.n	8007380 <HAL_RCC_OscConfig+0x9ac>
 8007368:	4bb0      	ldr	r3, [pc, #704]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	4aaf      	ldr	r2, [pc, #700]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	6213      	str	r3, [r2, #32]
 8007374:	4bad      	ldr	r3, [pc, #692]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	4aac      	ldr	r2, [pc, #688]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 800737a:	f023 0304 	bic.w	r3, r3, #4
 800737e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007384:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8081 	beq.w	8007494 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007392:	f7fc fb63 	bl	8003a5c <HAL_GetTick>
 8007396:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800739a:	e00b      	b.n	80073b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800739c:	f7fc fb5e 	bl	8003a5c <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e345      	b.n	8007a40 <HAL_RCC_OscConfig+0x106c>
 80073b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80073bc:	2202      	movs	r2, #2
 80073be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	fa93 f2a3 	rbit	r2, r3
 80073ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80073e0:	2202      	movs	r2, #2
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	fa93 f2a3 	rbit	r2, r3
 80073f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80073fa:	601a      	str	r2, [r3, #0]
  return result;
 80073fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007400:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8007404:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007406:	fab3 f383 	clz	r3, r3
 800740a:	b2db      	uxtb	r3, r3
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f043 0302 	orr.w	r3, r3, #2
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d102      	bne.n	8007420 <HAL_RCC_OscConfig+0xa4c>
 800741a:	4b84      	ldr	r3, [pc, #528]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	e013      	b.n	8007448 <HAL_RCC_OscConfig+0xa74>
 8007420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007424:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8007428:	2202      	movs	r2, #2
 800742a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007430:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	fa93 f2a3 	rbit	r2, r3
 800743a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800743e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	4b79      	ldr	r3, [pc, #484]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007448:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800744c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8007450:	2102      	movs	r1, #2
 8007452:	6011      	str	r1, [r2, #0]
 8007454:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007458:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	fa92 f1a2 	rbit	r1, r2
 8007462:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007466:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800746a:	6011      	str	r1, [r2, #0]
  return result;
 800746c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007470:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8007474:	6812      	ldr	r2, [r2, #0]
 8007476:	fab2 f282 	clz	r2, r2
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	f002 021f 	and.w	r2, r2, #31
 8007486:	2101      	movs	r1, #1
 8007488:	fa01 f202 	lsl.w	r2, r1, r2
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d084      	beq.n	800739c <HAL_RCC_OscConfig+0x9c8>
 8007492:	e07f      	b.n	8007594 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007494:	f7fc fae2 	bl	8003a5c <HAL_GetTick>
 8007498:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800749c:	e00b      	b.n	80074b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fc fadd 	bl	8003a5c <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e2c4      	b.n	8007a40 <HAL_RCC_OscConfig+0x106c>
 80074b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80074be:	2202      	movs	r2, #2
 80074c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074c6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	fa93 f2a3 	rbit	r2, r3
 80074d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80074e2:	2202      	movs	r2, #2
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074ea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	fa93 f2a3 	rbit	r2, r3
 80074f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80074fc:	601a      	str	r2, [r3, #0]
  return result;
 80074fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007502:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007506:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007508:	fab3 f383 	clz	r3, r3
 800750c:	b2db      	uxtb	r3, r3
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f043 0302 	orr.w	r3, r3, #2
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d102      	bne.n	8007522 <HAL_RCC_OscConfig+0xb4e>
 800751c:	4b43      	ldr	r3, [pc, #268]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	e013      	b.n	800754a <HAL_RCC_OscConfig+0xb76>
 8007522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007526:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800752a:	2202      	movs	r2, #2
 800752c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800752e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007532:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	fa93 f2a3 	rbit	r2, r3
 800753c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007540:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	4b39      	ldr	r3, [pc, #228]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800754e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8007552:	2102      	movs	r1, #2
 8007554:	6011      	str	r1, [r2, #0]
 8007556:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800755a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	fa92 f1a2 	rbit	r1, r2
 8007564:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007568:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800756c:	6011      	str	r1, [r2, #0]
  return result;
 800756e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007572:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8007576:	6812      	ldr	r2, [r2, #0]
 8007578:	fab2 f282 	clz	r2, r2
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	f002 021f 	and.w	r2, r2, #31
 8007588:	2101      	movs	r1, #1
 800758a:	fa01 f202 	lsl.w	r2, r1, r2
 800758e:	4013      	ands	r3, r2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d184      	bne.n	800749e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007594:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8007598:	2b01      	cmp	r3, #1
 800759a:	d105      	bne.n	80075a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800759c:	4b23      	ldr	r3, [pc, #140]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	4a22      	ldr	r2, [pc, #136]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 80075a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80075ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8242 	beq.w	8007a3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075ba:	4b1c      	ldr	r3, [pc, #112]	@ (800762c <HAL_RCC_OscConfig+0xc58>)
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f003 030c 	and.w	r3, r3, #12
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	f000 8213 	beq.w	80079ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80075cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	f040 8162 	bne.w	800789e <HAL_RCC_OscConfig+0xeca>
 80075da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80075de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80075e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80075ec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	fa93 f2a3 	rbit	r2, r3
 80075f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80075fa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80075fe:	601a      	str	r2, [r3, #0]
  return result;
 8007600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007604:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8007608:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800760a:	fab3 f383 	clz	r3, r3
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007614:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	461a      	mov	r2, r3
 800761c:	2300      	movs	r3, #0
 800761e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007620:	f7fc fa1c 	bl	8003a5c <HAL_GetTick>
 8007624:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007628:	e00c      	b.n	8007644 <HAL_RCC_OscConfig+0xc70>
 800762a:	bf00      	nop
 800762c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007630:	f7fc fa14 	bl	8003a5c <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d901      	bls.n	8007644 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e1fd      	b.n	8007a40 <HAL_RCC_OscConfig+0x106c>
 8007644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007648:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800764c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007656:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	fa93 f2a3 	rbit	r2, r3
 8007660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007664:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007668:	601a      	str	r2, [r3, #0]
  return result;
 800766a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800766e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007672:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007674:	fab3 f383 	clz	r3, r3
 8007678:	b2db      	uxtb	r3, r3
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	b2db      	uxtb	r3, r3
 800767e:	f043 0301 	orr.w	r3, r3, #1
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	d102      	bne.n	800768e <HAL_RCC_OscConfig+0xcba>
 8007688:	4bb0      	ldr	r3, [pc, #704]	@ (800794c <HAL_RCC_OscConfig+0xf78>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	e027      	b.n	80076de <HAL_RCC_OscConfig+0xd0a>
 800768e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007692:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007696:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800769a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80076a0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	fa93 f2a3 	rbit	r2, r3
 80076aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80076ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80076b8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80076bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80076c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	fa93 f2a3 	rbit	r2, r3
 80076d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80076d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	4b9c      	ldr	r3, [pc, #624]	@ (800794c <HAL_RCC_OscConfig+0xf78>)
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80076e2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80076e6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80076ea:	6011      	str	r1, [r2, #0]
 80076ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80076f0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	fa92 f1a2 	rbit	r1, r2
 80076fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80076fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8007702:	6011      	str	r1, [r2, #0]
  return result;
 8007704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007708:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	fab2 f282 	clz	r2, r2
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	f042 0220 	orr.w	r2, r2, #32
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	f002 021f 	and.w	r2, r2, #31
 800771e:	2101      	movs	r1, #1
 8007720:	fa01 f202 	lsl.w	r2, r1, r2
 8007724:	4013      	ands	r3, r2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d182      	bne.n	8007630 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800772a:	4b88      	ldr	r3, [pc, #544]	@ (800794c <HAL_RCC_OscConfig+0xf78>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007736:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800773e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	430b      	orrs	r3, r1
 800774c:	497f      	ldr	r1, [pc, #508]	@ (800794c <HAL_RCC_OscConfig+0xf78>)
 800774e:	4313      	orrs	r3, r2
 8007750:	604b      	str	r3, [r1, #4]
 8007752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007756:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800775a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800775e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007764:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	fa93 f2a3 	rbit	r2, r3
 800776e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007772:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8007776:	601a      	str	r2, [r3, #0]
  return result;
 8007778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800777c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8007780:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007782:	fab3 f383 	clz	r3, r3
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800778c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	461a      	mov	r2, r3
 8007794:	2301      	movs	r3, #1
 8007796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007798:	f7fc f960 	bl	8003a5c <HAL_GetTick>
 800779c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077a0:	e009      	b.n	80077b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077a2:	f7fc f95b 	bl	8003a5c <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e144      	b.n	8007a40 <HAL_RCC_OscConfig+0x106c>
 80077b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80077ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80077be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80077c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80077c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	fa93 f2a3 	rbit	r2, r3
 80077d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80077d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80077da:	601a      	str	r2, [r3, #0]
  return result;
 80077dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80077e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80077e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077e6:	fab3 f383 	clz	r3, r3
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d102      	bne.n	8007800 <HAL_RCC_OscConfig+0xe2c>
 80077fa:	4b54      	ldr	r3, [pc, #336]	@ (800794c <HAL_RCC_OscConfig+0xf78>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	e027      	b.n	8007850 <HAL_RCC_OscConfig+0xe7c>
 8007800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007804:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8007808:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800780c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007812:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	fa93 f2a3 	rbit	r2, r3
 800781c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007820:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800782a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800782e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007838:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	fa93 f2a3 	rbit	r2, r3
 8007842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007846:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	4b3f      	ldr	r3, [pc, #252]	@ (800794c <HAL_RCC_OscConfig+0xf78>)
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007854:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8007858:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800785c:	6011      	str	r1, [r2, #0]
 800785e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007862:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	fa92 f1a2 	rbit	r1, r2
 800786c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007870:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007874:	6011      	str	r1, [r2, #0]
  return result;
 8007876:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800787a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	fab2 f282 	clz	r2, r2
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	f042 0220 	orr.w	r2, r2, #32
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	f002 021f 	and.w	r2, r2, #31
 8007890:	2101      	movs	r1, #1
 8007892:	fa01 f202 	lsl.w	r2, r1, r2
 8007896:	4013      	ands	r3, r2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d082      	beq.n	80077a2 <HAL_RCC_OscConfig+0xdce>
 800789c:	e0cf      	b.n	8007a3e <HAL_RCC_OscConfig+0x106a>
 800789e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80078a2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80078a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80078aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80078b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	fa93 f2a3 	rbit	r2, r3
 80078ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80078be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80078c2:	601a      	str	r2, [r3, #0]
  return result;
 80078c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80078c8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80078cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ce:	fab3 f383 	clz	r3, r3
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80078d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	461a      	mov	r2, r3
 80078e0:	2300      	movs	r3, #0
 80078e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e4:	f7fc f8ba 	bl	8003a5c <HAL_GetTick>
 80078e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078ec:	e009      	b.n	8007902 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ee:	f7fc f8b5 	bl	8003a5c <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e09e      	b.n	8007a40 <HAL_RCC_OscConfig+0x106c>
 8007902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007906:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800790a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800790e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007914:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	fa93 f2a3 	rbit	r2, r3
 800791e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007922:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007926:	601a      	str	r2, [r3, #0]
  return result;
 8007928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800792c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007932:	fab3 f383 	clz	r3, r3
 8007936:	b2db      	uxtb	r3, r3
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f043 0301 	orr.w	r3, r3, #1
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b01      	cmp	r3, #1
 8007944:	d104      	bne.n	8007950 <HAL_RCC_OscConfig+0xf7c>
 8007946:	4b01      	ldr	r3, [pc, #4]	@ (800794c <HAL_RCC_OscConfig+0xf78>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	e029      	b.n	80079a0 <HAL_RCC_OscConfig+0xfcc>
 800794c:	40021000 	.word	0x40021000
 8007950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007954:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007958:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800795c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800795e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007962:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	fa93 f2a3 	rbit	r2, r3
 800796c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007970:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800797a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800797e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007988:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	fa93 f2a3 	rbit	r2, r3
 8007992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007996:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a4c <HAL_RCC_OscConfig+0x1078>)
 800799e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80079a4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80079a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80079ac:	6011      	str	r1, [r2, #0]
 80079ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80079b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	fa92 f1a2 	rbit	r1, r2
 80079bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80079c0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80079c4:	6011      	str	r1, [r2, #0]
  return result;
 80079c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80079ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	fab2 f282 	clz	r2, r2
 80079d4:	b2d2      	uxtb	r2, r2
 80079d6:	f042 0220 	orr.w	r2, r2, #32
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	f002 021f 	and.w	r2, r2, #31
 80079e0:	2101      	movs	r1, #1
 80079e2:	fa01 f202 	lsl.w	r2, r1, r2
 80079e6:	4013      	ands	r3, r2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d180      	bne.n	80078ee <HAL_RCC_OscConfig+0xf1a>
 80079ec:	e027      	b.n	8007a3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80079f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d101      	bne.n	8007a02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e01e      	b.n	8007a40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a02:	4b12      	ldr	r3, [pc, #72]	@ (8007a4c <HAL_RCC_OscConfig+0x1078>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007a0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8007a0e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007a16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d10b      	bne.n	8007a3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007a22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8007a26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007a2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d001      	beq.n	8007a3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40021000 	.word	0x40021000

08007a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b09e      	sub	sp, #120	@ 0x78
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e162      	b.n	8007d2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a68:	4b90      	ldr	r3, [pc, #576]	@ (8007cac <HAL_RCC_ClockConfig+0x25c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d910      	bls.n	8007a98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a76:	4b8d      	ldr	r3, [pc, #564]	@ (8007cac <HAL_RCC_ClockConfig+0x25c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f023 0207 	bic.w	r2, r3, #7
 8007a7e:	498b      	ldr	r1, [pc, #556]	@ (8007cac <HAL_RCC_ClockConfig+0x25c>)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a86:	4b89      	ldr	r3, [pc, #548]	@ (8007cac <HAL_RCC_ClockConfig+0x25c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d001      	beq.n	8007a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e14a      	b.n	8007d2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aa4:	4b82      	ldr	r3, [pc, #520]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	497f      	ldr	r1, [pc, #508]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80dc 	beq.w	8007c7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d13c      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xf6>
 8007acc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007ad0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ad4:	fa93 f3a3 	rbit	r3, r3
 8007ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007adc:	fab3 f383 	clz	r3, r3
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d102      	bne.n	8007af6 <HAL_RCC_ClockConfig+0xa6>
 8007af0:	4b6f      	ldr	r3, [pc, #444]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	e00f      	b.n	8007b16 <HAL_RCC_ClockConfig+0xc6>
 8007af6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007afa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007afc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007afe:	fa93 f3a3 	rbit	r3, r3
 8007b02:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007b08:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b0c:	fa93 f3a3 	rbit	r3, r3
 8007b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b12:	4b67      	ldr	r3, [pc, #412]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007b1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b1e:	fa92 f2a2 	rbit	r2, r2
 8007b22:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8007b24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b26:	fab2 f282 	clz	r2, r2
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	f042 0220 	orr.w	r2, r2, #32
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	f002 021f 	and.w	r2, r2, #31
 8007b36:	2101      	movs	r1, #1
 8007b38:	fa01 f202 	lsl.w	r2, r1, r2
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d17b      	bne.n	8007c3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e0f3      	b.n	8007d2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d13c      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0x178>
 8007b4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b56:	fa93 f3a3 	rbit	r3, r3
 8007b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b5e:	fab3 f383 	clz	r3, r3
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	f043 0301 	orr.w	r3, r3, #1
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d102      	bne.n	8007b78 <HAL_RCC_ClockConfig+0x128>
 8007b72:	4b4f      	ldr	r3, [pc, #316]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	e00f      	b.n	8007b98 <HAL_RCC_ClockConfig+0x148>
 8007b78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b80:	fa93 f3a3 	rbit	r3, r3
 8007b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b8e:	fa93 f3a3 	rbit	r3, r3
 8007b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b94:	4b46      	ldr	r3, [pc, #280]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007b9c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ba0:	fa92 f2a2 	rbit	r2, r2
 8007ba4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8007ba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ba8:	fab2 f282 	clz	r2, r2
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	f042 0220 	orr.w	r2, r2, #32
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	f002 021f 	and.w	r2, r2, #31
 8007bb8:	2101      	movs	r1, #1
 8007bba:	fa01 f202 	lsl.w	r2, r1, r2
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d13a      	bne.n	8007c3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e0b2      	b.n	8007d2e <HAL_RCC_ClockConfig+0x2de>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	fa93 f3a3 	rbit	r3, r3
 8007bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bd6:	fab3 f383 	clz	r3, r3
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d102      	bne.n	8007bf0 <HAL_RCC_ClockConfig+0x1a0>
 8007bea:	4b31      	ldr	r3, [pc, #196]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	e00d      	b.n	8007c0c <HAL_RCC_ClockConfig+0x1bc>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	fa93 f3a3 	rbit	r3, r3
 8007bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	623b      	str	r3, [r7, #32]
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	fa93 f3a3 	rbit	r3, r3
 8007c06:	61fb      	str	r3, [r7, #28]
 8007c08:	4b29      	ldr	r3, [pc, #164]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	61ba      	str	r2, [r7, #24]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	fa92 f2a2 	rbit	r2, r2
 8007c16:	617a      	str	r2, [r7, #20]
  return result;
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	fab2 f282 	clz	r2, r2
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	f042 0220 	orr.w	r2, r2, #32
 8007c24:	b2d2      	uxtb	r2, r2
 8007c26:	f002 021f 	and.w	r2, r2, #31
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8007c30:	4013      	ands	r3, r2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e079      	b.n	8007d2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f023 0203 	bic.w	r2, r3, #3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	491a      	ldr	r1, [pc, #104]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c4c:	f7fb ff06 	bl	8003a5c <HAL_GetTick>
 8007c50:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c52:	e00a      	b.n	8007c6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c54:	f7fb ff02 	bl	8003a5c <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e061      	b.n	8007d2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c6a:	4b11      	ldr	r3, [pc, #68]	@ (8007cb0 <HAL_RCC_ClockConfig+0x260>)
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f003 020c 	and.w	r2, r3, #12
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d1eb      	bne.n	8007c54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007cac <HAL_RCC_ClockConfig+0x25c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d214      	bcs.n	8007cb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c8a:	4b08      	ldr	r3, [pc, #32]	@ (8007cac <HAL_RCC_ClockConfig+0x25c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f023 0207 	bic.w	r2, r3, #7
 8007c92:	4906      	ldr	r1, [pc, #24]	@ (8007cac <HAL_RCC_ClockConfig+0x25c>)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c9a:	4b04      	ldr	r3, [pc, #16]	@ (8007cac <HAL_RCC_ClockConfig+0x25c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e040      	b.n	8007d2e <HAL_RCC_ClockConfig+0x2de>
 8007cac:	40022000 	.word	0x40022000
 8007cb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d38 <HAL_RCC_ClockConfig+0x2e8>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	491a      	ldr	r1, [pc, #104]	@ (8007d38 <HAL_RCC_ClockConfig+0x2e8>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cde:	4b16      	ldr	r3, [pc, #88]	@ (8007d38 <HAL_RCC_ClockConfig+0x2e8>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	4912      	ldr	r1, [pc, #72]	@ (8007d38 <HAL_RCC_ClockConfig+0x2e8>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007cf2:	f000 f829 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d38 <HAL_RCC_ClockConfig+0x2e8>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d00:	22f0      	movs	r2, #240	@ 0xf0
 8007d02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	fa92 f2a2 	rbit	r2, r2
 8007d0a:	60fa      	str	r2, [r7, #12]
  return result;
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	fab2 f282 	clz	r2, r2
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	40d3      	lsrs	r3, r2
 8007d16:	4a09      	ldr	r2, [pc, #36]	@ (8007d3c <HAL_RCC_ClockConfig+0x2ec>)
 8007d18:	5cd3      	ldrb	r3, [r2, r3]
 8007d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8007d1e:	4a08      	ldr	r2, [pc, #32]	@ (8007d40 <HAL_RCC_ClockConfig+0x2f0>)
 8007d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007d22:	4b08      	ldr	r3, [pc, #32]	@ (8007d44 <HAL_RCC_ClockConfig+0x2f4>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fb fe54 	bl	80039d4 <HAL_InitTick>
  
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3778      	adds	r7, #120	@ 0x78
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	0800aac4 	.word	0x0800aac4
 8007d40:	20000000 	.word	0x20000000
 8007d44:	20000004 	.word	0x20000004

08007d48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	2300      	movs	r3, #0
 8007d54:	60bb      	str	r3, [r7, #8]
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007d62:	4b1e      	ldr	r3, [pc, #120]	@ (8007ddc <HAL_RCC_GetSysClockFreq+0x94>)
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 030c 	and.w	r3, r3, #12
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d002      	beq.n	8007d78 <HAL_RCC_GetSysClockFreq+0x30>
 8007d72:	2b08      	cmp	r3, #8
 8007d74:	d003      	beq.n	8007d7e <HAL_RCC_GetSysClockFreq+0x36>
 8007d76:	e026      	b.n	8007dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d78:	4b19      	ldr	r3, [pc, #100]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d7a:	613b      	str	r3, [r7, #16]
      break;
 8007d7c:	e026      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	0c9b      	lsrs	r3, r3, #18
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	4a17      	ldr	r2, [pc, #92]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007d88:	5cd3      	ldrb	r3, [r2, r3]
 8007d8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8007d8c:	4b13      	ldr	r3, [pc, #76]	@ (8007ddc <HAL_RCC_GetSysClockFreq+0x94>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	4a14      	ldr	r2, [pc, #80]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007d96:	5cd3      	ldrb	r3, [r2, r3]
 8007d98:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007da4:	4a0e      	ldr	r2, [pc, #56]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	e004      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a0c      	ldr	r2, [pc, #48]	@ (8007dec <HAL_RCC_GetSysClockFreq+0xa4>)
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	613b      	str	r3, [r7, #16]
      break;
 8007dc4:	e002      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007dc6:	4b06      	ldr	r3, [pc, #24]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007dc8:	613b      	str	r3, [r7, #16]
      break;
 8007dca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dcc:	693b      	ldr	r3, [r7, #16]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40021000 	.word	0x40021000
 8007de0:	007a1200 	.word	0x007a1200
 8007de4:	0800aadc 	.word	0x0800aadc
 8007de8:	0800aaec 	.word	0x0800aaec
 8007dec:	003d0900 	.word	0x003d0900

08007df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007df4:	4b03      	ldr	r3, [pc, #12]	@ (8007e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8007df6:	681b      	ldr	r3, [r3, #0]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000000 	.word	0x20000000

08007e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007e0e:	f7ff ffef 	bl	8007df0 <HAL_RCC_GetHCLKFreq>
 8007e12:	4601      	mov	r1, r0
 8007e14:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e1c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007e20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	fa92 f2a2 	rbit	r2, r2
 8007e28:	603a      	str	r2, [r7, #0]
  return result;
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	fab2 f282 	clz	r2, r2
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	40d3      	lsrs	r3, r2
 8007e34:	4a04      	ldr	r2, [pc, #16]	@ (8007e48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007e36:	5cd3      	ldrb	r3, [r2, r3]
 8007e38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	40021000 	.word	0x40021000
 8007e48:	0800aad4 	.word	0x0800aad4

08007e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007e52:	f7ff ffcd 	bl	8007df0 <HAL_RCC_GetHCLKFreq>
 8007e56:	4601      	mov	r1, r0
 8007e58:	4b0b      	ldr	r3, [pc, #44]	@ (8007e88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007e60:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007e64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	fa92 f2a2 	rbit	r2, r2
 8007e6c:	603a      	str	r2, [r7, #0]
  return result;
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	fab2 f282 	clz	r2, r2
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	40d3      	lsrs	r3, r2
 8007e78:	4a04      	ldr	r2, [pc, #16]	@ (8007e8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8007e7a:	5cd3      	ldrb	r3, [r2, r3]
 8007e7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	0800aad4 	.word	0x0800aad4

08007e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b092      	sub	sp, #72	@ 0x48
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 80d4 	beq.w	800805c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10e      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eca:	61d3      	str	r3, [r2, #28]
 8007ecc:	4b48      	ldr	r3, [pc, #288]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ede:	4b45      	ldr	r3, [pc, #276]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d118      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007eea:	4b42      	ldr	r3, [pc, #264]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a41      	ldr	r2, [pc, #260]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ef6:	f7fb fdb1 	bl	8003a5c <HAL_GetTick>
 8007efa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007efc:	e008      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007efe:	f7fb fdad 	bl	8003a5c <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b64      	cmp	r3, #100	@ 0x64
 8007f0a:	d901      	bls.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e12d      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f10:	4b38      	ldr	r3, [pc, #224]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0f0      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f1c:	4b34      	ldr	r3, [pc, #208]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 8084 	beq.w	8008036 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d07c      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4e:	fa93 f3a3 	rbit	r3, r3
 8007f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f56:	fab3 f383 	clz	r3, r3
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4b26      	ldr	r3, [pc, #152]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	461a      	mov	r2, r3
 8007f66:	2301      	movs	r3, #1
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	fa93 f3a3 	rbit	r3, r3
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f7a:	fab3 f383 	clz	r3, r3
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	461a      	mov	r2, r3
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007f8e:	4a18      	ldr	r2, [pc, #96]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f92:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d04b      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f9e:	f7fb fd5d 	bl	8003a5c <HAL_GetTick>
 8007fa2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fa4:	e00a      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fa6:	f7fb fd59 	bl	8003a5c <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d901      	bls.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e0d7      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	fa93 f3a3 	rbit	r3, r3
 8007fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fc8:	2302      	movs	r3, #2
 8007fca:	623b      	str	r3, [r7, #32]
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	fa93 f3a3 	rbit	r3, r3
 8007fd2:	61fb      	str	r3, [r7, #28]
  return result;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd6:	fab3 f383 	clz	r3, r3
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f043 0302 	orr.w	r3, r3, #2
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d108      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007fea:	4b01      	ldr	r3, [pc, #4]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	e00d      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007ff0:	40021000 	.word	0x40021000
 8007ff4:	40007000 	.word	0x40007000
 8007ff8:	10908100 	.word	0x10908100
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	fa93 f3a3 	rbit	r3, r3
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	4b5a      	ldr	r3, [pc, #360]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800800a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800c:	2202      	movs	r2, #2
 800800e:	613a      	str	r2, [r7, #16]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	fa92 f2a2 	rbit	r2, r2
 8008016:	60fa      	str	r2, [r7, #12]
  return result;
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	fab2 f282 	clz	r2, r2
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	f002 021f 	and.w	r2, r2, #31
 800802a:	2101      	movs	r1, #1
 800802c:	fa01 f202 	lsl.w	r2, r1, r2
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0b7      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008036:	4b4f      	ldr	r3, [pc, #316]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	494c      	ldr	r1, [pc, #304]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008044:	4313      	orrs	r3, r2
 8008046:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008048:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800804c:	2b01      	cmp	r3, #1
 800804e:	d105      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008050:	4b48      	ldr	r3, [pc, #288]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	4a47      	ldr	r2, [pc, #284]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800805a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d008      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008068:	4b42      	ldr	r3, [pc, #264]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800806a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806c:	f023 0203 	bic.w	r2, r3, #3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	493f      	ldr	r1, [pc, #252]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008076:	4313      	orrs	r3, r2
 8008078:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d008      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008086:	4b3b      	ldr	r3, [pc, #236]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	4938      	ldr	r1, [pc, #224]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008094:	4313      	orrs	r3, r2
 8008096:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d008      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080a4:	4b33      	ldr	r3, [pc, #204]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80080a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	4930      	ldr	r1, [pc, #192]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080c2:	4b2c      	ldr	r3, [pc, #176]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c6:	f023 0210 	bic.w	r2, r3, #16
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	4929      	ldr	r1, [pc, #164]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d008      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80080e0:	4b24      	ldr	r3, [pc, #144]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	4921      	ldr	r1, [pc, #132]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008102:	f023 0220 	bic.w	r2, r3, #32
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	491a      	ldr	r1, [pc, #104]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800810c:	4313      	orrs	r3, r2
 800810e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008118:	2b00      	cmp	r3, #0
 800811a:	d008      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800811c:	4b15      	ldr	r3, [pc, #84]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	4912      	ldr	r1, [pc, #72]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800812a:	4313      	orrs	r3, r2
 800812c:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008136:	2b00      	cmp	r3, #0
 8008138:	d008      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800813a:	4b0e      	ldr	r3, [pc, #56]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	490b      	ldr	r1, [pc, #44]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008148:	4313      	orrs	r3, r2
 800814a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008158:	4b06      	ldr	r3, [pc, #24]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800815a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008164:	4903      	ldr	r1, [pc, #12]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008166:	4313      	orrs	r3, r2
 8008168:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3748      	adds	r7, #72	@ 0x48
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40021000 	.word	0x40021000

08008178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e09d      	b.n	80082c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	d108      	bne.n	80081a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800819a:	d009      	beq.n	80081b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	61da      	str	r2, [r3, #28]
 80081a2:	e005      	b.n	80081b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7fb f9d2 	bl	8003574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081f0:	d902      	bls.n	80081f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	e002      	b.n	80081fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80081f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008206:	d007      	beq.n	8008218 <HAL_SPI_Init+0xa0>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008210:	d002      	beq.n	8008218 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	431a      	orrs	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008250:	431a      	orrs	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825a:	ea42 0103 	orr.w	r1, r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008262:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	0c1b      	lsrs	r3, r3, #16
 8008274:	f003 0204 	and.w	r2, r3, #4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008294:	ea42 0103 	orr.w	r1, r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69da      	ldr	r2, [r3, #28]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10e      	bne.n	8008310 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d009      	beq.n	8008310 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008302:	2b00      	cmp	r3, #0
 8008304:	d004      	beq.n	8008310 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
    return;
 800830e:	e0ce      	b.n	80084ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <HAL_SPI_IRQHandler+0x5e>
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
    return;
 800832c:	e0bf      	b.n	80084ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	f003 0320 	and.w	r3, r3, #32
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <HAL_SPI_IRQHandler+0x7e>
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 80b0 	beq.w	80084ae <HAL_SPI_IRQHandler+0x1de>
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80aa 	beq.w	80084ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d023      	beq.n	80083ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b03      	cmp	r3, #3
 800836e:	d011      	beq.n	8008394 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008374:	f043 0204 	orr.w	r2, r3, #4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800837c:	2300      	movs	r3, #0
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	e00b      	b.n	80083ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008394:	2300      	movs	r3, #0
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	613b      	str	r3, [r7, #16]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	693b      	ldr	r3, [r7, #16]
        return;
 80083aa:	e080      	b.n	80084ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d014      	beq.n	80083e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ba:	f043 0201 	orr.w	r2, r3, #1
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00c      	beq.n	8008404 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ee:	f043 0208 	orr.w	r2, r3, #8
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80083f6:	2300      	movs	r3, #0
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008408:	2b00      	cmp	r3, #0
 800840a:	d04f      	beq.n	80084ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800841a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <HAL_SPI_IRQHandler+0x168>
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d034      	beq.n	80084a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0203 	bic.w	r2, r2, #3
 8008446:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800844c:	2b00      	cmp	r3, #0
 800844e:	d011      	beq.n	8008474 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008454:	4a17      	ldr	r2, [pc, #92]	@ (80084b4 <HAL_SPI_IRQHandler+0x1e4>)
 8008456:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845c:	4618      	mov	r0, r3
 800845e:	f7fb fe01 	bl	8004064 <HAL_DMA_Abort_IT>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800846c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008478:	2b00      	cmp	r3, #0
 800847a:	d016      	beq.n	80084aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008480:	4a0c      	ldr	r2, [pc, #48]	@ (80084b4 <HAL_SPI_IRQHandler+0x1e4>)
 8008482:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008488:	4618      	mov	r0, r3
 800848a:	f7fb fdeb 	bl	8004064 <HAL_DMA_Abort_IT>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008498:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80084a0:	e003      	b.n	80084aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f808 	bl	80084b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80084a8:	e000      	b.n	80084ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80084aa:	bf00      	nop
    return;
 80084ac:	bf00      	nop
  }
}
 80084ae:	3720      	adds	r7, #32
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	080084cd 	.word	0x080084cd

080084b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff ffe5 	bl	80084b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e041      	b.n	800858c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d106      	bne.n	8008522 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fb f8b3 	bl	8003688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3304      	adds	r3, #4
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f000 fabf 	bl	8008ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d001      	beq.n	80085ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e049      	b.n	8008640 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0201 	orr.w	r2, r2, #1
 80085c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085cc:	d01d      	beq.n	800860a <HAL_TIM_Base_Start_IT+0x76>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1e      	ldr	r2, [pc, #120]	@ (800864c <HAL_TIM_Base_Start_IT+0xb8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d018      	beq.n	800860a <HAL_TIM_Base_Start_IT+0x76>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008650 <HAL_TIM_Base_Start_IT+0xbc>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d013      	beq.n	800860a <HAL_TIM_Base_Start_IT+0x76>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008654 <HAL_TIM_Base_Start_IT+0xc0>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00e      	beq.n	800860a <HAL_TIM_Base_Start_IT+0x76>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a19      	ldr	r2, [pc, #100]	@ (8008658 <HAL_TIM_Base_Start_IT+0xc4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d009      	beq.n	800860a <HAL_TIM_Base_Start_IT+0x76>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a18      	ldr	r2, [pc, #96]	@ (800865c <HAL_TIM_Base_Start_IT+0xc8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d004      	beq.n	800860a <HAL_TIM_Base_Start_IT+0x76>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a16      	ldr	r2, [pc, #88]	@ (8008660 <HAL_TIM_Base_Start_IT+0xcc>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d111      	bne.n	800862e <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b06      	cmp	r3, #6
 800861a:	d010      	beq.n	800863e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0201 	orr.w	r2, r2, #1
 800862a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800862c:	e007      	b.n	800863e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f042 0201 	orr.w	r2, r2, #1
 800863c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	40000400 	.word	0x40000400
 8008650:	40000800 	.word	0x40000800
 8008654:	40000c00 	.word	0x40000c00
 8008658:	40001800 	.word	0x40001800
 800865c:	40014000 	.word	0x40014000
 8008660:	40015c00 	.word	0x40015c00

08008664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e041      	b.n	80086fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fa ffde 	bl	800364c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3304      	adds	r3, #4
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f000 fa08 	bl	8008ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d020      	beq.n	8008766 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01b      	beq.n	8008766 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f06f 0202 	mvn.w	r2, #2
 8008736:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	f003 0303 	and.w	r3, r3, #3
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f995 	bl	8008a7c <HAL_TIM_IC_CaptureCallback>
 8008752:	e005      	b.n	8008760 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f987 	bl	8008a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f998 	bl	8008a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b00      	cmp	r3, #0
 800876e:	d020      	beq.n	80087b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01b      	beq.n	80087b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f06f 0204 	mvn.w	r2, #4
 8008782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f96f 	bl	8008a7c <HAL_TIM_IC_CaptureCallback>
 800879e:	e005      	b.n	80087ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f961 	bl	8008a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f972 	bl	8008a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d020      	beq.n	80087fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d01b      	beq.n	80087fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f06f 0208 	mvn.w	r2, #8
 80087ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2204      	movs	r2, #4
 80087d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	f003 0303 	and.w	r3, r3, #3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f949 	bl	8008a7c <HAL_TIM_IC_CaptureCallback>
 80087ea:	e005      	b.n	80087f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f93b 	bl	8008a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f94c 	bl	8008a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f003 0310 	and.w	r3, r3, #16
 8008804:	2b00      	cmp	r3, #0
 8008806:	d020      	beq.n	800884a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	2b00      	cmp	r3, #0
 8008810:	d01b      	beq.n	800884a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f06f 0210 	mvn.w	r2, #16
 800881a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2208      	movs	r2, #8
 8008820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f923 	bl	8008a7c <HAL_TIM_IC_CaptureCallback>
 8008836:	e005      	b.n	8008844 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f915 	bl	8008a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f926 	bl	8008a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00c      	beq.n	800886e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f06f 0201 	mvn.w	r2, #1
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7f9 fd47 	bl	80022fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00c      	beq.n	8008892 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800887e:	2b00      	cmp	r3, #0
 8008880:	d007      	beq.n	8008892 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800888a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fb91 	bl	8008fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00c      	beq.n	80088b6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d007      	beq.n	80088b6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f8f7 	bl	8008aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00c      	beq.n	80088da <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f06f 0220 	mvn.w	r2, #32
 80088d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fb63 	bl	8008fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088fe:	2302      	movs	r3, #2
 8008900:	e0ae      	b.n	8008a60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b0c      	cmp	r3, #12
 800890e:	f200 809f 	bhi.w	8008a50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008912:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	0800894d 	.word	0x0800894d
 800891c:	08008a51 	.word	0x08008a51
 8008920:	08008a51 	.word	0x08008a51
 8008924:	08008a51 	.word	0x08008a51
 8008928:	0800898d 	.word	0x0800898d
 800892c:	08008a51 	.word	0x08008a51
 8008930:	08008a51 	.word	0x08008a51
 8008934:	08008a51 	.word	0x08008a51
 8008938:	080089cf 	.word	0x080089cf
 800893c:	08008a51 	.word	0x08008a51
 8008940:	08008a51 	.word	0x08008a51
 8008944:	08008a51 	.word	0x08008a51
 8008948:	08008a0f 	.word	0x08008a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f956 	bl	8008c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0208 	orr.w	r2, r2, #8
 8008966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0204 	bic.w	r2, r2, #4
 8008976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6999      	ldr	r1, [r3, #24]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	691a      	ldr	r2, [r3, #16]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	619a      	str	r2, [r3, #24]
      break;
 800898a:	e064      	b.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f9b0 	bl	8008cf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6999      	ldr	r1, [r3, #24]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	021a      	lsls	r2, r3, #8
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	619a      	str	r2, [r3, #24]
      break;
 80089cc:	e043      	b.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68b9      	ldr	r1, [r7, #8]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 f9f1 	bl	8008dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0208 	orr.w	r2, r2, #8
 80089e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0204 	bic.w	r2, r2, #4
 80089f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69d9      	ldr	r1, [r3, #28]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	61da      	str	r2, [r3, #28]
      break;
 8008a0c:	e023      	b.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fa0f 	bl	8008e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69d9      	ldr	r1, [r3, #28]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	021a      	lsls	r2, r3, #8
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	61da      	str	r2, [r3, #28]
      break;
 8008a4e:	e002      	b.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	75fb      	strb	r3, [r7, #23]
      break;
 8008a54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ace:	d00f      	beq.n	8008af0 <TIM_Base_SetConfig+0x38>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a42      	ldr	r2, [pc, #264]	@ (8008bdc <TIM_Base_SetConfig+0x124>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d00b      	beq.n	8008af0 <TIM_Base_SetConfig+0x38>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a41      	ldr	r2, [pc, #260]	@ (8008be0 <TIM_Base_SetConfig+0x128>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d007      	beq.n	8008af0 <TIM_Base_SetConfig+0x38>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a40      	ldr	r2, [pc, #256]	@ (8008be4 <TIM_Base_SetConfig+0x12c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d003      	beq.n	8008af0 <TIM_Base_SetConfig+0x38>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a3f      	ldr	r2, [pc, #252]	@ (8008be8 <TIM_Base_SetConfig+0x130>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d108      	bne.n	8008b02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b08:	d027      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a33      	ldr	r2, [pc, #204]	@ (8008bdc <TIM_Base_SetConfig+0x124>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d023      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a32      	ldr	r2, [pc, #200]	@ (8008be0 <TIM_Base_SetConfig+0x128>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d01f      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a31      	ldr	r2, [pc, #196]	@ (8008be4 <TIM_Base_SetConfig+0x12c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01b      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a31      	ldr	r2, [pc, #196]	@ (8008bec <TIM_Base_SetConfig+0x134>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d017      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a30      	ldr	r2, [pc, #192]	@ (8008bf0 <TIM_Base_SetConfig+0x138>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d013      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a2f      	ldr	r2, [pc, #188]	@ (8008bf4 <TIM_Base_SetConfig+0x13c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00f      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8008bf8 <TIM_Base_SetConfig+0x140>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a2d      	ldr	r2, [pc, #180]	@ (8008bfc <TIM_Base_SetConfig+0x144>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d007      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008c00 <TIM_Base_SetConfig+0x148>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_Base_SetConfig+0xa2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a24      	ldr	r2, [pc, #144]	@ (8008be8 <TIM_Base_SetConfig+0x130>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d108      	bne.n	8008b6c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a19      	ldr	r2, [pc, #100]	@ (8008bf8 <TIM_Base_SetConfig+0x140>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d007      	beq.n	8008ba8 <TIM_Base_SetConfig+0xf0>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a18      	ldr	r2, [pc, #96]	@ (8008bfc <TIM_Base_SetConfig+0x144>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d003      	beq.n	8008ba8 <TIM_Base_SetConfig+0xf0>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a17      	ldr	r2, [pc, #92]	@ (8008c00 <TIM_Base_SetConfig+0x148>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d103      	bne.n	8008bb0 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d105      	bne.n	8008bce <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f023 0201 	bic.w	r2, r3, #1
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	611a      	str	r2, [r3, #16]
  }
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40000800 	.word	0x40000800
 8008be4:	40000c00 	.word	0x40000c00
 8008be8:	40015c00 	.word	0x40015c00
 8008bec:	40001800 	.word	0x40001800
 8008bf0:	40001c00 	.word	0x40001c00
 8008bf4:	40002000 	.word	0x40002000
 8008bf8:	40014000 	.word	0x40014000
 8008bfc:	40014400 	.word	0x40014400
 8008c00:	40014800 	.word	0x40014800

08008c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f023 0201 	bic.w	r2, r3, #1
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f023 0302 	bic.w	r3, r3, #2
 8008c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a24      	ldr	r2, [pc, #144]	@ (8008cec <TIM_OC1_SetConfig+0xe8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d007      	beq.n	8008c70 <TIM_OC1_SetConfig+0x6c>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a23      	ldr	r2, [pc, #140]	@ (8008cf0 <TIM_OC1_SetConfig+0xec>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d003      	beq.n	8008c70 <TIM_OC1_SetConfig+0x6c>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a22      	ldr	r2, [pc, #136]	@ (8008cf4 <TIM_OC1_SetConfig+0xf0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10c      	bne.n	8008c8a <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f023 0308 	bic.w	r3, r3, #8
 8008c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 0304 	bic.w	r3, r3, #4
 8008c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a17      	ldr	r2, [pc, #92]	@ (8008cec <TIM_OC1_SetConfig+0xe8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d007      	beq.n	8008ca2 <TIM_OC1_SetConfig+0x9e>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a16      	ldr	r2, [pc, #88]	@ (8008cf0 <TIM_OC1_SetConfig+0xec>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d003      	beq.n	8008ca2 <TIM_OC1_SetConfig+0x9e>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a15      	ldr	r2, [pc, #84]	@ (8008cf4 <TIM_OC1_SetConfig+0xf0>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d111      	bne.n	8008cc6 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	621a      	str	r2, [r3, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	40014400 	.word	0x40014400
 8008cf4:	40014800 	.word	0x40014800

08008cf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	f023 0210 	bic.w	r2, r3, #16
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	021b      	lsls	r3, r3, #8
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f023 0320 	bic.w	r3, r3, #32
 8008d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	011b      	lsls	r3, r3, #4
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a17      	ldr	r2, [pc, #92]	@ (8008db0 <TIM_OC2_SetConfig+0xb8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d007      	beq.n	8008d68 <TIM_OC2_SetConfig+0x70>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a16      	ldr	r2, [pc, #88]	@ (8008db4 <TIM_OC2_SetConfig+0xbc>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d003      	beq.n	8008d68 <TIM_OC2_SetConfig+0x70>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a15      	ldr	r2, [pc, #84]	@ (8008db8 <TIM_OC2_SetConfig+0xc0>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d10f      	bne.n	8008d88 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d6e:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	621a      	str	r2, [r3, #32]
}
 8008da2:	bf00      	nop
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800

08008dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0303 	bic.w	r3, r3, #3
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	021b      	lsls	r3, r3, #8
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	621a      	str	r2, [r3, #32]
}
 8008e2c:	bf00      	nop
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	031b      	lsls	r3, r3, #12
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	621a      	str	r2, [r3, #32]
}
 8008eaa:	bf00      	nop
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
	...

08008eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d101      	bne.n	8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e055      	b.n	8008f7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f12:	d01d      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1b      	ldr	r2, [pc, #108]	@ (8008f88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d018      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a1a      	ldr	r2, [pc, #104]	@ (8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a18      	ldr	r2, [pc, #96]	@ (8008f90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00e      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a17      	ldr	r2, [pc, #92]	@ (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d009      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a15      	ldr	r2, [pc, #84]	@ (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d004      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a14      	ldr	r2, [pc, #80]	@ (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d10c      	bne.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	40000400 	.word	0x40000400
 8008f8c:	40000800 	.word	0x40000800
 8008f90:	40000c00 	.word	0x40000c00
 8008f94:	40001800 	.word	0x40001800
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40015c00 	.word	0x40015c00

08008fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e040      	b.n	800905c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7fa fbde 	bl	80037ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2224      	movs	r2, #36	@ 0x24
 8008ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 0201 	bic.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fde8 	bl	8009be4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fc6b 	bl	80098f0 <UART_SetConfig>
 800901a:	4603      	mov	r3, r0
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e01b      	b.n	800905c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fe67 	bl	8009d28 <UART_CheckIdleState>
 800905a:	4603      	mov	r3, r0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08a      	sub	sp, #40	@ 0x28
 8009068:	af02      	add	r7, sp, #8
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009078:	2b20      	cmp	r3, #32
 800907a:	d177      	bne.n	800916c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <HAL_UART_Transmit+0x24>
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e070      	b.n	800916e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2221      	movs	r2, #33	@ 0x21
 8009098:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800909a:	f7fa fcdf 	bl	8003a5c <HAL_GetTick>
 800909e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	88fa      	ldrh	r2, [r7, #6]
 80090ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090b8:	d108      	bne.n	80090cc <HAL_UART_Transmit+0x68>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d104      	bne.n	80090cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	61bb      	str	r3, [r7, #24]
 80090ca:	e003      	b.n	80090d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090d0:	2300      	movs	r3, #0
 80090d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090d4:	e02f      	b.n	8009136 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2200      	movs	r2, #0
 80090de:	2180      	movs	r1, #128	@ 0x80
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 fec9 	bl	8009e78 <UART_WaitOnFlagUntilTimeout>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d004      	beq.n	80090f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2220      	movs	r2, #32
 80090f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e03b      	b.n	800916e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10b      	bne.n	8009114 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	881a      	ldrh	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009108:	b292      	uxth	r2, r2
 800910a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	3302      	adds	r3, #2
 8009110:	61bb      	str	r3, [r7, #24]
 8009112:	e007      	b.n	8009124 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	3301      	adds	r3, #1
 8009122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1c9      	bne.n	80090d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2200      	movs	r2, #0
 800914a:	2140      	movs	r1, #64	@ 0x40
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fe93 	bl	8009e78 <UART_WaitOnFlagUntilTimeout>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d004      	beq.n	8009162 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2220      	movs	r2, #32
 800915c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e005      	b.n	800916e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e000      	b.n	800916e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800916c:	2302      	movs	r3, #2
  }
}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b08a      	sub	sp, #40	@ 0x28
 800917a:	af02      	add	r7, sp, #8
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	4613      	mov	r3, r2
 8009184:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800918c:	2b20      	cmp	r3, #32
 800918e:	f040 80a3 	bne.w	80092d8 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <HAL_UART_Receive+0x28>
 8009198:	88fb      	ldrh	r3, [r7, #6]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e09b      	b.n	80092da <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2222      	movs	r2, #34	@ 0x22
 80091ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091b8:	f7fa fc50 	bl	8003a5c <HAL_GetTick>
 80091bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	88fa      	ldrh	r2, [r7, #6]
 80091c2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	88fa      	ldrh	r2, [r7, #6]
 80091ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091d6:	d10e      	bne.n	80091f6 <HAL_UART_Receive+0x80>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d105      	bne.n	80091ec <HAL_UART_Receive+0x76>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80091e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80091ea:	e01a      	b.n	8009222 <HAL_UART_Receive+0xac>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	22ff      	movs	r2, #255	@ 0xff
 80091f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80091f4:	e015      	b.n	8009222 <HAL_UART_Receive+0xac>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10d      	bne.n	800921a <HAL_UART_Receive+0xa4>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d104      	bne.n	8009210 <HAL_UART_Receive+0x9a>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	22ff      	movs	r2, #255	@ 0xff
 800920a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800920e:	e008      	b.n	8009222 <HAL_UART_Receive+0xac>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	227f      	movs	r2, #127	@ 0x7f
 8009214:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009218:	e003      	b.n	8009222 <HAL_UART_Receive+0xac>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009228:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009232:	d108      	bne.n	8009246 <HAL_UART_Receive+0xd0>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	61bb      	str	r3, [r7, #24]
 8009244:	e003      	b.n	800924e <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800924e:	e037      	b.n	80092c0 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2200      	movs	r2, #0
 8009258:	2120      	movs	r1, #32
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fe0c 	bl	8009e78 <UART_WaitOnFlagUntilTimeout>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d005      	beq.n	8009272 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2220      	movs	r2, #32
 800926a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e033      	b.n	80092da <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10c      	bne.n	8009292 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800927e:	b29a      	uxth	r2, r3
 8009280:	8a7b      	ldrh	r3, [r7, #18]
 8009282:	4013      	ands	r3, r2
 8009284:	b29a      	uxth	r2, r3
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	3302      	adds	r3, #2
 800928e:	61bb      	str	r3, [r7, #24]
 8009290:	e00d      	b.n	80092ae <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009298:	b29b      	uxth	r3, r3
 800929a:	b2da      	uxtb	r2, r3
 800929c:	8a7b      	ldrh	r3, [r7, #18]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	4013      	ands	r3, r2
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	3301      	adds	r3, #1
 80092ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1c1      	bne.n	8009250 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	e000      	b.n	80092da <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 80092d8:	2302      	movs	r3, #2
  }
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3720      	adds	r7, #32
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b0ba      	sub	sp, #232	@ 0xe8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800930a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800930e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009312:	4013      	ands	r3, r2
 8009314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d115      	bne.n	800934c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00f      	beq.n	800934c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d009      	beq.n	800934c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 82ab 	beq.w	8009898 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
      }
      return;
 800934a:	e2a5      	b.n	8009898 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800934c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 8117 	beq.w	8009584 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009366:	4b85      	ldr	r3, [pc, #532]	@ (800957c <HAL_UART_IRQHandler+0x298>)
 8009368:	4013      	ands	r3, r2
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 810a 	beq.w	8009584 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d011      	beq.n	80093a0 <HAL_UART_IRQHandler+0xbc>
 800937c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2201      	movs	r2, #1
 800938e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009396:	f043 0201 	orr.w	r2, r3, #1
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d011      	beq.n	80093d0 <HAL_UART_IRQHandler+0xec>
 80093ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00b      	beq.n	80093d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2202      	movs	r2, #2
 80093be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093c6:	f043 0204 	orr.w	r2, r3, #4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d011      	beq.n	8009400 <HAL_UART_IRQHandler+0x11c>
 80093dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2204      	movs	r2, #4
 80093ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093f6:	f043 0202 	orr.w	r2, r3, #2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009404:	f003 0308 	and.w	r3, r3, #8
 8009408:	2b00      	cmp	r3, #0
 800940a:	d017      	beq.n	800943c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d105      	bne.n	8009424 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800941c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2208      	movs	r2, #8
 800942a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009432:	f043 0208 	orr.w	r2, r3, #8
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800943c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009444:	2b00      	cmp	r3, #0
 8009446:	d012      	beq.n	800946e <HAL_UART_IRQHandler+0x18a>
 8009448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800944c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00c      	beq.n	800946e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800945c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009464:	f043 0220 	orr.w	r2, r3, #32
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 8211 	beq.w	800989c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800947a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00d      	beq.n	80094a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b6:	2b40      	cmp	r3, #64	@ 0x40
 80094b8:	d005      	beq.n	80094c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d04f      	beq.n	8009566 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fd43 	bl	8009f52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d6:	2b40      	cmp	r3, #64	@ 0x40
 80094d8:	d141      	bne.n	800955e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3308      	adds	r3, #8
 80094e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009506:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800950a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800951e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1d9      	bne.n	80094da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800952a:	2b00      	cmp	r3, #0
 800952c:	d013      	beq.n	8009556 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009532:	4a13      	ldr	r2, [pc, #76]	@ (8009580 <HAL_UART_IRQHandler+0x29c>)
 8009534:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800953a:	4618      	mov	r0, r3
 800953c:	f7fa fd92 	bl	8004064 <HAL_DMA_Abort_IT>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d017      	beq.n	8009576 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800954a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009550:	4610      	mov	r0, r2
 8009552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009554:	e00f      	b.n	8009576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f9b4 	bl	80098c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800955c:	e00b      	b.n	8009576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f9b0 	bl	80098c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009564:	e007      	b.n	8009576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f9ac 	bl	80098c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009574:	e192      	b.n	800989c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009576:	bf00      	nop
    return;
 8009578:	e190      	b.n	800989c <HAL_UART_IRQHandler+0x5b8>
 800957a:	bf00      	nop
 800957c:	04000120 	.word	0x04000120
 8009580:	0800a01b 	.word	0x0800a01b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009588:	2b01      	cmp	r3, #1
 800958a:	f040 814b 	bne.w	8009824 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800958e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 8144 	beq.w	8009824 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800959c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095a0:	f003 0310 	and.w	r3, r3, #16
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 813d 	beq.w	8009824 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2210      	movs	r2, #16
 80095b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095bc:	2b40      	cmp	r3, #64	@ 0x40
 80095be:	f040 80b5 	bne.w	800972c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 8164 	beq.w	80098a0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80095de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095e2:	429a      	cmp	r2, r3
 80095e4:	f080 815c 	bcs.w	80098a0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	f000 8086 	beq.w	800970a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009616:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800961a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009628:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800962c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009634:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1da      	bne.n	80095fe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009652:	e853 3f00 	ldrex	r3, [r3]
 8009656:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800965a:	f023 0301 	bic.w	r3, r3, #1
 800965e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3308      	adds	r3, #8
 8009668:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800966c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009670:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009674:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009678:	e841 2300 	strex	r3, r2, [r1]
 800967c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800967e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e1      	bne.n	8009648 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800969a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80096a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80096ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e3      	bne.n	8009684 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096da:	f023 0310 	bic.w	r3, r3, #16
 80096de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e4      	bne.n	80096ca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009704:	4618      	mov	r0, r3
 8009706:	f7fa fc6f 	bl	8003fe8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2202      	movs	r2, #2
 800970e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800971c:	b29b      	uxth	r3, r3
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	b29b      	uxth	r3, r3
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f8d7 	bl	80098d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800972a:	e0b9      	b.n	80098a0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009738:	b29b      	uxth	r3, r3
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009746:	b29b      	uxth	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 80ab 	beq.w	80098a4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800974e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80a6 	beq.w	80098a4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800976c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800977a:	647b      	str	r3, [r7, #68]	@ 0x44
 800977c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e4      	bne.n	8009758 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3308      	adds	r3, #8
 8009794:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009798:	e853 3f00 	ldrex	r3, [r3]
 800979c:	623b      	str	r3, [r7, #32]
   return(result);
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	f023 0301 	bic.w	r3, r3, #1
 80097a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3308      	adds	r3, #8
 80097ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80097b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80097b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ba:	e841 2300 	strex	r3, r2, [r1]
 80097be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e3      	bne.n	800978e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2220      	movs	r2, #32
 80097ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0310 	bic.w	r3, r3, #16
 80097ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097fc:	61fb      	str	r3, [r7, #28]
 80097fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	69b9      	ldr	r1, [r7, #24]
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	e841 2300 	strex	r3, r2, [r1]
 8009808:	617b      	str	r3, [r7, #20]
   return(result);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e4      	bne.n	80097da <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2202      	movs	r2, #2
 8009814:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f85b 	bl	80098d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009822:	e03f      	b.n	80098a4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00e      	beq.n	800984e <HAL_UART_IRQHandler+0x56a>
 8009830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d008      	beq.n	800984e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fc27 	bl	800a09a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800984c:	e02d      	b.n	80098aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800984e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00e      	beq.n	8009878 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800985a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800985e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009862:	2b00      	cmp	r3, #0
 8009864:	d008      	beq.n	8009878 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d01c      	beq.n	80098a8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	4798      	blx	r3
    }
    return;
 8009876:	e017      	b.n	80098a8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800987c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009880:	2b00      	cmp	r3, #0
 8009882:	d012      	beq.n	80098aa <HAL_UART_IRQHandler+0x5c6>
 8009884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00c      	beq.n	80098aa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fbd8 	bl	800a046 <UART_EndTransmit_IT>
    return;
 8009896:	e008      	b.n	80098aa <HAL_UART_IRQHandler+0x5c6>
      return;
 8009898:	bf00      	nop
 800989a:	e006      	b.n	80098aa <HAL_UART_IRQHandler+0x5c6>
    return;
 800989c:	bf00      	nop
 800989e:	e004      	b.n	80098aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80098a0:	bf00      	nop
 80098a2:	e002      	b.n	80098aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80098a4:	bf00      	nop
 80098a6:	e000      	b.n	80098aa <HAL_UART_IRQHandler+0x5c6>
    return;
 80098a8:	bf00      	nop
  }

}
 80098aa:	37e8      	adds	r7, #232	@ 0xe8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	431a      	orrs	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	4313      	orrs	r3, r2
 8009912:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800991e:	f023 030c 	bic.w	r3, r3, #12
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	6979      	ldr	r1, [r7, #20]
 8009928:	430b      	orrs	r3, r1
 800992a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	430a      	orrs	r2, r1
 8009964:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a99      	ldr	r2, [pc, #612]	@ (8009bd0 <UART_SetConfig+0x2e0>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d120      	bne.n	80099b2 <UART_SetConfig+0xc2>
 8009970:	4b98      	ldr	r3, [pc, #608]	@ (8009bd4 <UART_SetConfig+0x2e4>)
 8009972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	2b03      	cmp	r3, #3
 800997a:	d817      	bhi.n	80099ac <UART_SetConfig+0xbc>
 800997c:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <UART_SetConfig+0x94>)
 800997e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009982:	bf00      	nop
 8009984:	08009995 	.word	0x08009995
 8009988:	080099a1 	.word	0x080099a1
 800998c:	080099a7 	.word	0x080099a7
 8009990:	0800999b 	.word	0x0800999b
 8009994:	2301      	movs	r3, #1
 8009996:	77fb      	strb	r3, [r7, #31]
 8009998:	e061      	b.n	8009a5e <UART_SetConfig+0x16e>
 800999a:	2302      	movs	r3, #2
 800999c:	77fb      	strb	r3, [r7, #31]
 800999e:	e05e      	b.n	8009a5e <UART_SetConfig+0x16e>
 80099a0:	2304      	movs	r3, #4
 80099a2:	77fb      	strb	r3, [r7, #31]
 80099a4:	e05b      	b.n	8009a5e <UART_SetConfig+0x16e>
 80099a6:	2308      	movs	r3, #8
 80099a8:	77fb      	strb	r3, [r7, #31]
 80099aa:	e058      	b.n	8009a5e <UART_SetConfig+0x16e>
 80099ac:	2310      	movs	r3, #16
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	e055      	b.n	8009a5e <UART_SetConfig+0x16e>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a88      	ldr	r2, [pc, #544]	@ (8009bd8 <UART_SetConfig+0x2e8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d124      	bne.n	8009a06 <UART_SetConfig+0x116>
 80099bc:	4b85      	ldr	r3, [pc, #532]	@ (8009bd4 <UART_SetConfig+0x2e4>)
 80099be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80099c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099c8:	d011      	beq.n	80099ee <UART_SetConfig+0xfe>
 80099ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099ce:	d817      	bhi.n	8009a00 <UART_SetConfig+0x110>
 80099d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099d4:	d011      	beq.n	80099fa <UART_SetConfig+0x10a>
 80099d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099da:	d811      	bhi.n	8009a00 <UART_SetConfig+0x110>
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <UART_SetConfig+0xf8>
 80099e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099e4:	d006      	beq.n	80099f4 <UART_SetConfig+0x104>
 80099e6:	e00b      	b.n	8009a00 <UART_SetConfig+0x110>
 80099e8:	2300      	movs	r3, #0
 80099ea:	77fb      	strb	r3, [r7, #31]
 80099ec:	e037      	b.n	8009a5e <UART_SetConfig+0x16e>
 80099ee:	2302      	movs	r3, #2
 80099f0:	77fb      	strb	r3, [r7, #31]
 80099f2:	e034      	b.n	8009a5e <UART_SetConfig+0x16e>
 80099f4:	2304      	movs	r3, #4
 80099f6:	77fb      	strb	r3, [r7, #31]
 80099f8:	e031      	b.n	8009a5e <UART_SetConfig+0x16e>
 80099fa:	2308      	movs	r3, #8
 80099fc:	77fb      	strb	r3, [r7, #31]
 80099fe:	e02e      	b.n	8009a5e <UART_SetConfig+0x16e>
 8009a00:	2310      	movs	r3, #16
 8009a02:	77fb      	strb	r3, [r7, #31]
 8009a04:	e02b      	b.n	8009a5e <UART_SetConfig+0x16e>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a74      	ldr	r2, [pc, #464]	@ (8009bdc <UART_SetConfig+0x2ec>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d124      	bne.n	8009a5a <UART_SetConfig+0x16a>
 8009a10:	4b70      	ldr	r3, [pc, #448]	@ (8009bd4 <UART_SetConfig+0x2e4>)
 8009a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a14:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009a18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009a1c:	d011      	beq.n	8009a42 <UART_SetConfig+0x152>
 8009a1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009a22:	d817      	bhi.n	8009a54 <UART_SetConfig+0x164>
 8009a24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a28:	d011      	beq.n	8009a4e <UART_SetConfig+0x15e>
 8009a2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a2e:	d811      	bhi.n	8009a54 <UART_SetConfig+0x164>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <UART_SetConfig+0x14c>
 8009a34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a38:	d006      	beq.n	8009a48 <UART_SetConfig+0x158>
 8009a3a:	e00b      	b.n	8009a54 <UART_SetConfig+0x164>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	77fb      	strb	r3, [r7, #31]
 8009a40:	e00d      	b.n	8009a5e <UART_SetConfig+0x16e>
 8009a42:	2302      	movs	r3, #2
 8009a44:	77fb      	strb	r3, [r7, #31]
 8009a46:	e00a      	b.n	8009a5e <UART_SetConfig+0x16e>
 8009a48:	2304      	movs	r3, #4
 8009a4a:	77fb      	strb	r3, [r7, #31]
 8009a4c:	e007      	b.n	8009a5e <UART_SetConfig+0x16e>
 8009a4e:	2308      	movs	r3, #8
 8009a50:	77fb      	strb	r3, [r7, #31]
 8009a52:	e004      	b.n	8009a5e <UART_SetConfig+0x16e>
 8009a54:	2310      	movs	r3, #16
 8009a56:	77fb      	strb	r3, [r7, #31]
 8009a58:	e001      	b.n	8009a5e <UART_SetConfig+0x16e>
 8009a5a:	2310      	movs	r3, #16
 8009a5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a66:	d15a      	bne.n	8009b1e <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8009a68:	7ffb      	ldrb	r3, [r7, #31]
 8009a6a:	2b08      	cmp	r3, #8
 8009a6c:	d827      	bhi.n	8009abe <UART_SetConfig+0x1ce>
 8009a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0x184>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009aa1 	.word	0x08009aa1
 8009a7c:	08009aa9 	.word	0x08009aa9
 8009a80:	08009abf 	.word	0x08009abf
 8009a84:	08009aaf 	.word	0x08009aaf
 8009a88:	08009abf 	.word	0x08009abf
 8009a8c:	08009abf 	.word	0x08009abf
 8009a90:	08009abf 	.word	0x08009abf
 8009a94:	08009ab7 	.word	0x08009ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a98:	f7fe f9b6 	bl	8007e08 <HAL_RCC_GetPCLK1Freq>
 8009a9c:	61b8      	str	r0, [r7, #24]
        break;
 8009a9e:	e013      	b.n	8009ac8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aa0:	f7fe f9d4 	bl	8007e4c <HAL_RCC_GetPCLK2Freq>
 8009aa4:	61b8      	str	r0, [r7, #24]
        break;
 8009aa6:	e00f      	b.n	8009ac8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8009be0 <UART_SetConfig+0x2f0>)
 8009aaa:	61bb      	str	r3, [r7, #24]
        break;
 8009aac:	e00c      	b.n	8009ac8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aae:	f7fe f94b 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 8009ab2:	61b8      	str	r0, [r7, #24]
        break;
 8009ab4:	e008      	b.n	8009ac8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aba:	61bb      	str	r3, [r7, #24]
        break;
 8009abc:	e004      	b.n	8009ac8 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	77bb      	strb	r3, [r7, #30]
        break;
 8009ac6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d074      	beq.n	8009bb8 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	005a      	lsls	r2, r3, #1
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	085b      	lsrs	r3, r3, #1
 8009ad8:	441a      	add	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	2b0f      	cmp	r3, #15
 8009ae8:	d916      	bls.n	8009b18 <UART_SetConfig+0x228>
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009af0:	d212      	bcs.n	8009b18 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f023 030f 	bic.w	r3, r3, #15
 8009afa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	085b      	lsrs	r3, r3, #1
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	89fb      	ldrh	r3, [r7, #14]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	89fa      	ldrh	r2, [r7, #14]
 8009b14:	60da      	str	r2, [r3, #12]
 8009b16:	e04f      	b.n	8009bb8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	77bb      	strb	r3, [r7, #30]
 8009b1c:	e04c      	b.n	8009bb8 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b1e:	7ffb      	ldrb	r3, [r7, #31]
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d828      	bhi.n	8009b76 <UART_SetConfig+0x286>
 8009b24:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <UART_SetConfig+0x23c>)
 8009b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2a:	bf00      	nop
 8009b2c:	08009b51 	.word	0x08009b51
 8009b30:	08009b59 	.word	0x08009b59
 8009b34:	08009b61 	.word	0x08009b61
 8009b38:	08009b77 	.word	0x08009b77
 8009b3c:	08009b67 	.word	0x08009b67
 8009b40:	08009b77 	.word	0x08009b77
 8009b44:	08009b77 	.word	0x08009b77
 8009b48:	08009b77 	.word	0x08009b77
 8009b4c:	08009b6f 	.word	0x08009b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b50:	f7fe f95a 	bl	8007e08 <HAL_RCC_GetPCLK1Freq>
 8009b54:	61b8      	str	r0, [r7, #24]
        break;
 8009b56:	e013      	b.n	8009b80 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b58:	f7fe f978 	bl	8007e4c <HAL_RCC_GetPCLK2Freq>
 8009b5c:	61b8      	str	r0, [r7, #24]
        break;
 8009b5e:	e00f      	b.n	8009b80 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b60:	4b1f      	ldr	r3, [pc, #124]	@ (8009be0 <UART_SetConfig+0x2f0>)
 8009b62:	61bb      	str	r3, [r7, #24]
        break;
 8009b64:	e00c      	b.n	8009b80 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b66:	f7fe f8ef 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 8009b6a:	61b8      	str	r0, [r7, #24]
        break;
 8009b6c:	e008      	b.n	8009b80 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b72:	61bb      	str	r3, [r7, #24]
        break;
 8009b74:	e004      	b.n	8009b80 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	77bb      	strb	r3, [r7, #30]
        break;
 8009b7e:	bf00      	nop
    }

    if (pclk != 0U)
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d018      	beq.n	8009bb8 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	085a      	lsrs	r2, r3, #1
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	441a      	add	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	2b0f      	cmp	r3, #15
 8009b9e:	d909      	bls.n	8009bb4 <UART_SetConfig+0x2c4>
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ba6:	d205      	bcs.n	8009bb4 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60da      	str	r2, [r3, #12]
 8009bb2:	e001      	b.n	8009bb8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009bc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3720      	adds	r7, #32
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	40013800 	.word	0x40013800
 8009bd4:	40021000 	.word	0x40021000
 8009bd8:	40004400 	.word	0x40004400
 8009bdc:	40004800 	.word	0x40004800
 8009be0:	007a1200 	.word	0x007a1200

08009be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf0:	f003 0308 	and.w	r3, r3, #8
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00a      	beq.n	8009c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c56:	f003 0304 	and.w	r3, r3, #4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	430a      	orrs	r2, r1
 8009c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c78:	f003 0310 	and.w	r3, r3, #16
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9a:	f003 0320 	and.w	r3, r3, #32
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d01a      	beq.n	8009cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ce2:	d10a      	bne.n	8009cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	430a      	orrs	r2, r1
 8009cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	605a      	str	r2, [r3, #4]
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b098      	sub	sp, #96	@ 0x60
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d38:	f7f9 fe90 	bl	8003a5c <HAL_GetTick>
 8009d3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d12e      	bne.n	8009daa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d54:	2200      	movs	r2, #0
 8009d56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f88c 	bl	8009e78 <UART_WaitOnFlagUntilTimeout>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d021      	beq.n	8009daa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6e:	e853 3f00 	ldrex	r3, [r3]
 8009d72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	461a      	mov	r2, r3
 8009d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e6      	bne.n	8009d66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e062      	b.n	8009e70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d149      	bne.n	8009e4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009db8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f856 	bl	8009e78 <UART_WaitOnFlagUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d03c      	beq.n	8009e4c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dda:	e853 3f00 	ldrex	r3, [r3]
 8009dde:	623b      	str	r3, [r7, #32]
   return(result);
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	461a      	mov	r2, r3
 8009dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009df8:	e841 2300 	strex	r3, r2, [r1]
 8009dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e6      	bne.n	8009dd2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3308      	adds	r3, #8
 8009e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3308      	adds	r3, #8
 8009e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e24:	61fa      	str	r2, [r7, #28]
 8009e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	69b9      	ldr	r1, [r7, #24]
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	e841 2300 	strex	r3, r2, [r1]
 8009e30:	617b      	str	r3, [r7, #20]
   return(result);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e5      	bne.n	8009e04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e011      	b.n	8009e70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2220      	movs	r2, #32
 8009e50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2220      	movs	r2, #32
 8009e56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3758      	adds	r7, #88	@ 0x58
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	4613      	mov	r3, r2
 8009e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e88:	e04f      	b.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d04b      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e92:	f7f9 fde3 	bl	8003a5c <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d302      	bcc.n	8009ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e04e      	b.n	8009f4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0304 	and.w	r3, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d037      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b80      	cmp	r3, #128	@ 0x80
 8009ebe:	d034      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2b40      	cmp	r3, #64	@ 0x40
 8009ec4:	d031      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d110      	bne.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2208      	movs	r2, #8
 8009eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f838 	bl	8009f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2208      	movs	r2, #8
 8009ee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e029      	b.n	8009f4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f04:	d111      	bne.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f81e 	bl	8009f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e00f      	b.n	8009f4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	69da      	ldr	r2, [r3, #28]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4013      	ands	r3, r2
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	bf0c      	ite	eq
 8009f3a:	2301      	moveq	r3, #1
 8009f3c:	2300      	movne	r3, #0
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	79fb      	ldrb	r3, [r7, #7]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d0a0      	beq.n	8009e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b095      	sub	sp, #84	@ 0x54
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e6      	bne.n	8009f5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	f023 0301 	bic.w	r3, r3, #1
 8009fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e5      	bne.n	8009f8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d118      	bne.n	8009ffa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f023 0310 	bic.w	r3, r3, #16
 8009fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fe6:	61bb      	str	r3, [r7, #24]
 8009fe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	6979      	ldr	r1, [r7, #20]
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e6      	bne.n	8009fc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a00e:	bf00      	nop
 800a010:	3754      	adds	r7, #84	@ 0x54
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff fc43 	bl	80098c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b088      	sub	sp, #32
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	e853 3f00 	ldrex	r3, [r3]
 800a05a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	461a      	mov	r2, r3
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	61bb      	str	r3, [r7, #24]
 800a06e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a070:	6979      	ldr	r1, [r7, #20]
 800a072:	69ba      	ldr	r2, [r7, #24]
 800a074:	e841 2300 	strex	r3, r2, [r1]
 800a078:	613b      	str	r3, [r7, #16]
   return(result);
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e6      	bne.n	800a04e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2220      	movs	r2, #32
 800a084:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff fc0f 	bl	80098b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a092:	bf00      	nop
 800a094:	3720      	adds	r7, #32
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <memset>:
 800a0ae:	4402      	add	r2, r0
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d100      	bne.n	800a0b8 <memset+0xa>
 800a0b6:	4770      	bx	lr
 800a0b8:	f803 1b01 	strb.w	r1, [r3], #1
 800a0bc:	e7f9      	b.n	800a0b2 <memset+0x4>
	...

0800a0c0 <__libc_init_array>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	4d0d      	ldr	r5, [pc, #52]	@ (800a0f8 <__libc_init_array+0x38>)
 800a0c4:	4c0d      	ldr	r4, [pc, #52]	@ (800a0fc <__libc_init_array+0x3c>)
 800a0c6:	1b64      	subs	r4, r4, r5
 800a0c8:	10a4      	asrs	r4, r4, #2
 800a0ca:	2600      	movs	r6, #0
 800a0cc:	42a6      	cmp	r6, r4
 800a0ce:	d109      	bne.n	800a0e4 <__libc_init_array+0x24>
 800a0d0:	4d0b      	ldr	r5, [pc, #44]	@ (800a100 <__libc_init_array+0x40>)
 800a0d2:	4c0c      	ldr	r4, [pc, #48]	@ (800a104 <__libc_init_array+0x44>)
 800a0d4:	f000 f826 	bl	800a124 <_init>
 800a0d8:	1b64      	subs	r4, r4, r5
 800a0da:	10a4      	asrs	r4, r4, #2
 800a0dc:	2600      	movs	r6, #0
 800a0de:	42a6      	cmp	r6, r4
 800a0e0:	d105      	bne.n	800a0ee <__libc_init_array+0x2e>
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}
 800a0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e8:	4798      	blx	r3
 800a0ea:	3601      	adds	r6, #1
 800a0ec:	e7ee      	b.n	800a0cc <__libc_init_array+0xc>
 800a0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f2:	4798      	blx	r3
 800a0f4:	3601      	adds	r6, #1
 800a0f6:	e7f2      	b.n	800a0de <__libc_init_array+0x1e>
 800a0f8:	0800aafc 	.word	0x0800aafc
 800a0fc:	0800aafc 	.word	0x0800aafc
 800a100:	0800aafc 	.word	0x0800aafc
 800a104:	0800ab04 	.word	0x0800ab04

0800a108 <memcpy>:
 800a108:	440a      	add	r2, r1
 800a10a:	4291      	cmp	r1, r2
 800a10c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a110:	d100      	bne.n	800a114 <memcpy+0xc>
 800a112:	4770      	bx	lr
 800a114:	b510      	push	{r4, lr}
 800a116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a11a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a11e:	4291      	cmp	r1, r2
 800a120:	d1f9      	bne.n	800a116 <memcpy+0xe>
 800a122:	bd10      	pop	{r4, pc}

0800a124 <_init>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr

0800a130 <_fini>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr
