
STM32 MIDI2CV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc0  08008340  08008340  00009340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f00  08008f00  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000000  08008f00  08008f00  0000a00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f00  08008f00  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f00  08008f00  00009f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08008f08  08008f08  00009f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008f10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  2000000c  08008f1c  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  08008f1c  0000a898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1b2  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c21  00000000  00000000  000271ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0002ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e7  00000000  00000000  0002c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d7a  00000000  00000000  0002d977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dee6  00000000  00000000  0004e6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b06f1  00000000  00000000  0006c5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ccc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006954  00000000  00000000  0011cd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00123660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008328 	.word	0x08008328

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008328 	.word	0x08008328

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <_ZN8mMessage12getSysExSizeEv>:
	Channel channel = 0;
	uint8_t data1 = 0;
	uint8_t data2 = 0;

	uint8_t SysExMaxSize;
	 unsigned getSysExSize()  {
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
		 unsigned size = unsigned(data2) << 8 | data1;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	78d2      	ldrb	r2, [r2, #3]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
		return size > SysExMaxSize ? SysExMaxSize : size;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	795b      	ldrb	r3, [r3, #5]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4293      	cmp	r3, r2
 80009c4:	bf28      	it	cs
 80009c6:	4613      	movcs	r3, r2
	}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_ZN9mSettingsC1Ev>:
	uint8_t sysexArray[];
};

struct mSettings {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2201      	movs	r2, #1
 80009e6:	705a      	strb	r2, [r3, #1]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	709a      	strb	r2, [r3, #2]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_ZN8mMessageC1Ev>:
struct mMessage {
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	709a      	strb	r2, [r3, #2]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	70da      	strb	r2, [r3, #3]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	711a      	strb	r2, [r3, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_ZN13MidiInterfaceC1Ev>:
 *
 */

#include "MIDI.h"
#include "stm32f3xx_hal.h"
MidiInterface::MidiInterface() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f203 1365 	addw	r3, r3, #357	@ 0x165
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffc8 	bl	80009d4 <_ZN9mSettingsC1Ev>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ffd6 	bl	80009fc <_ZN8mMessageC1Ev>
	mRunningStatus_TX = InvalidType;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	mRunningStatus_RX = InvalidType;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159

	mPendingMessageIndex = 0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mPendingMessageExpectedLenght = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

	mCurrentRpnNumber = 0xffff;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a76:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	mCurrentNrpnNumber = 0xffff;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a80:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162

	mMessage.valid = false;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
	mMessage.type = InvalidType;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
	mMessage.channel = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
	mMessage.data1 = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
	mMessage.data2 = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
	mMessage.SysExMaxSize = Settings.SysExMaxSize;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
	mThruFilterMode = Thru::Full;
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000aba:	2101      	movs	r1, #1
 8000abc:	f361 0347 	bfi	r3, r1, #1, #7
 8000ac0:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mThruActivated = true;
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164

	mInputChannel = 0;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
	mRunningStatus_RX = InvalidType;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
	mRunningStatus_TX = InvalidType;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	mPendingMessageExpectedLenght = 0;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
	mPendingMessageIndex = 0;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mCurrentRpnNumber = 0xffff;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b00:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	mCurrentNrpnNumber = 0xffff;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0a:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
	mThruActivated = false;
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000b14:	f36f 0300 	bfc	r3, #0, #1
 8000b18:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mThruFilterMode = Thru::Off;
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000b22:	f36f 0347 	bfc	r3, #1, #7
 8000b26:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mNoteOffCallback = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
	mNoteOnCallback = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
	mAfterTouchPolyCallback = 0;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
	mControlChangeCallback = 0;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
	mProgramChangeCallback = 0;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
	mAfterTouchChannelCallback = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
	mPitchBendCallback = 0;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
	mSystemExclusiveCallback = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
	mTimeCodeQuarterFrameCallback = 0;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
	mSongPositionCallback = 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
	mSongSelectCallback = 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	@ 0x28
	mTuneRequestCallback = 0;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
	mClockCallback = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	631a      	str	r2, [r3, #48]	@ 0x30
	mStartCallback = 0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	635a      	str	r2, [r3, #52]	@ 0x34
	mContinueCallback = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	639a      	str	r2, [r3, #56]	@ 0x38
	mStopCallback = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	63da      	str	r2, [r3, #60]	@ 0x3c
	mActiveSensingCallback = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	641a      	str	r2, [r3, #64]	@ 0x40
	mSystemResetCallback = 0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZN13MidiInterfaceD1Ev>:
MidiInterface::~MidiInterface() {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
}
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>:
 - Input channel set to 1 if no value is specified

 */

void MidiInterface::begin(Channel inChannel, UART_HandleTypeDef *huart_in,
		UART_HandleTypeDef *huart_out) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	72fb      	strb	r3, [r7, #11]
	serial_in = *huart_in;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	33d0      	adds	r3, #208	@ 0xd0
 8000bcc:	4611      	mov	r1, r2
 8000bce:	2288      	movs	r2, #136	@ 0x88
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 fb9b 	bl	800830c <memcpy>
	serial_out = *huart_out;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	3348      	adds	r3, #72	@ 0x48
 8000bdc:	4611      	mov	r1, r2
 8000bde:	2288      	movs	r2, #136	@ 0x88
 8000be0:	4618      	mov	r0, r3
 8000be2:	f007 fb93 	bl	800830c <memcpy>
	mInputChannel = inChannel;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	7afa      	ldrb	r2, [r7, #11]
 8000bea:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158

}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>:
 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */

void MidiInterface::send(MidiType inType, DataByte inData1, DataByte inData2,
		Channel inChannel) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	4608      	mov	r0, r1
 8000c00:	4611      	mov	r1, r2
 8000c02:	461a      	mov	r2, r3
 8000c04:	4603      	mov	r3, r0
 8000c06:	70fb      	strb	r3, [r7, #3]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70bb      	strb	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
	// Then test if channel is valid
	if (inChannel >= MIDI_CHANNEL_OFF || inChannel == MIDI_CHANNEL_OMNI
 8000c10:	7e3b      	ldrb	r3, [r7, #24]
 8000c12:	2b10      	cmp	r3, #16
 8000c14:	d85e      	bhi.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
 8000c16:	7e3b      	ldrb	r3, [r7, #24]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d05b      	beq.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
			|| inType < 0x80) {
 8000c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	da57      	bge.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
		return; // Don't send anything
	}

	if (inType <= PitchBend)  // Channel messages
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2be0      	cmp	r3, #224	@ 0xe0
 8000c28:	d84b      	bhi.n	8000cc2 <_ZN13MidiInterface4sendE8MidiTypehhh+0xcc>
			{
// Protection: remove MSBs on data
		inData1 &= 0x7f;
 8000c2a:	78bb      	ldrb	r3, [r7, #2]
 8000c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	70bb      	strb	r3, [r7, #2]
		inData2 &= 0x7f;
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	707b      	strb	r3, [r7, #1]

		StatusByte status = getStatus(inType, inChannel);
 8000c3e:	7e3a      	ldrb	r2, [r7, #24]
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	4619      	mov	r1, r3
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 f949 	bl	8000edc <_ZN13MidiInterface9getStatusE8MidiTypeh>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]

		if (Settings.UseRunningStatus) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d014      	beq.n	8000c82 <_ZN13MidiInterface4sendE8MidiTypehhh+0x8c>
			if (mRunningStatus_TX != status) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 215a 	ldrb.w	r2, [r3, #346]	@ 0x15a
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d017      	beq.n	8000c94 <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
// New message, memorise and send header
				mRunningStatus_TX = status;
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
				HAL_UART_Transmit(&serial_out, &mRunningStatus_TX, 1,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f503 71ad 	add.w	r1, r3, #346	@ 0x15a
 8000c78:	230a      	movs	r3, #10
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f006 faf4 	bl	8007268 <HAL_UART_Transmit>
 8000c80:	e008      	b.n	8000c94 <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
				MidiTimeout);
			}
		} else {
			// Don't care about running status, send the status byte.
			HAL_UART_Transmit(&serial_out, &status, 1, MidiTimeout);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c88:	f107 010f 	add.w	r1, r7, #15
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f006 faea 	bl	8007268 <HAL_UART_Transmit>
		}

// Then send data
		HAL_UART_Transmit(&serial_out, &inData1, 1, MidiTimeout);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c9a:	1cb9      	adds	r1, r7, #2
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f006 fae2 	bl	8007268 <HAL_UART_Transmit>
		if (inType != ProgramChange && inType != AfterTouchChannel) {
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2bc0      	cmp	r3, #192	@ 0xc0
 8000ca8:	d015      	beq.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	2bd0      	cmp	r3, #208	@ 0xd0
 8000cae:	d012      	beq.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
			HAL_UART_Transmit(&serial_out, &inData2, 1, MidiTimeout);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000cb6:	1c79      	adds	r1, r7, #1
 8000cb8:	230a      	movs	r3, #10
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f006 fad4 	bl	8007268 <HAL_UART_Transmit>
 8000cc0:	e009      	b.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		}
	} else if (inType >= Clock && inType <= SystemReset) {
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	2bf7      	cmp	r3, #247	@ 0xf7
 8000cc6:	d906      	bls.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		sendRealTime(inType); // System Real-time and 1 byte.
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f8db 	bl	8000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>
 8000cd2:	e000      	b.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		return; // Don't send anything
 8000cd4:	bf00      	nop
	}
}
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZN13MidiInterface9sendSysExEhPhb>:
 default value for ArrayContainsBoundaries is set to 'false' for compatibility
 with previous versions of the library.
 */

void MidiInterface::sendSysEx(uint8_t inLength, byte *inArray,
		bool inArrayContainsBoundaries) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	72fb      	strb	r3, [r7, #11]
 8000cec:	4613      	mov	r3, r2
 8000cee:	72bb      	strb	r3, [r7, #10]
	bool writeBeginEndBytes = !inArrayContainsBoundaries;
 8000cf0:	7abb      	ldrb	r3, [r7, #10]
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	75fb      	strb	r3, [r7, #23]
	uint8_t StartByte = 0xf0;
 8000cf8:	23f0      	movs	r3, #240	@ 0xf0
 8000cfa:	75bb      	strb	r3, [r7, #22]
	uint8_t EndByte = 0xf7;
 8000cfc:	23f7      	movs	r3, #247	@ 0xf7
 8000cfe:	757b      	strb	r3, [r7, #21]
	if (writeBeginEndBytes) {
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d008      	beq.n	8000d18 <_ZN13MidiInterface9sendSysExEhPhb+0x3c>
		HAL_UART_Transmit(&serial_out, &StartByte, 1, MidiTimeout);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d0c:	f107 0116 	add.w	r1, r7, #22
 8000d10:	230a      	movs	r3, #10
 8000d12:	2201      	movs	r2, #1
 8000d14:	f006 faa8 	bl	8007268 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&serial_out, inArray, sizeof(inLength), MidiTimeout);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d1e:	230a      	movs	r3, #10
 8000d20:	2201      	movs	r2, #1
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f006 faa0 	bl	8007268 <HAL_UART_Transmit>

	if (writeBeginEndBytes) {
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <_ZN13MidiInterface9sendSysExEhPhb+0x64>
		HAL_UART_Transmit(&serial_out, &EndByte, 1, MidiTimeout);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d34:	f107 0115 	add.w	r1, r7, #21
 8000d38:	230a      	movs	r3, #10
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f006 fa94 	bl	8007268 <HAL_UART_Transmit>
	}

	if (Settings.UseRunningStatus) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <_ZN13MidiInterface9sendSysExEhPhb+0x76>
		mRunningStatus_TX = InvalidType;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>:
 \param inValuesNibble    MTC data
 See MIDI Specification for more information.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
		DataByte inValuesNibble) {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
 8000d66:	4613      	mov	r3, r2
 8000d68:	70bb      	strb	r3, [r7, #2]
	byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000d74:	b25a      	sxtb	r2, r3
 8000d76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	73fb      	strb	r3, [r7, #15]
	sendTimeCodeQuarterFrame(data);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f804 	bl	8000d98 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>:
 See MIDI Specification for more information.
 \param inData  if you want to encode directly the nibbles in your program,
 you can send the byte here.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inData) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
	uint8_t TimeCodeMessage[] = { TimeCodeQuarterFrame, inData };
 8000da4:	2300      	movs	r3, #0
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	23f1      	movs	r3, #241	@ 0xf1
 8000daa:	733b      	strb	r3, [r7, #12]
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, TimeCodeMessage, 2, MidiTimeout);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000db6:	f107 010c 	add.w	r1, r7, #12
 8000dba:	230a      	movs	r3, #10
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	f006 fa53 	bl	8007268 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh+0x3c>
		mRunningStatus_TX = InvalidType;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZN13MidiInterface16sendSongPositionEj>:

/*! \brief Send a Song Position Pointer message.
 \param inBeats    The number of beats since the start of the song.
 */

void MidiInterface::sendSongPosition(unsigned inBeats) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	uint8_t SongPositionMessage[] = { SongPosition, (uint8_t) (inBeats & 0x7f),
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2100      	movs	r1, #0
 8000dec:	460a      	mov	r2, r1
 8000dee:	801a      	strh	r2, [r3, #0]
 8000df0:	460a      	mov	r2, r1
 8000df2:	709a      	strb	r2, [r3, #2]
 8000df4:	23f2      	movs	r3, #242	@ 0xf2
 8000df6:	733b      	strb	r3, [r7, #12]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e00:	b2db      	uxtb	r3, r3
			(uint8_t) ((inBeats >> 7) & 0x7f) };
 8000e02:	737b      	strb	r3, [r7, #13]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	09db      	lsrs	r3, r3, #7
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&serial_out, SongPositionMessage, 3, MidiTimeout);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	2203      	movs	r2, #3
 8000e20:	f006 fa22 	bl	8007268 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <_ZN13MidiInterface16sendSongPositionEj+0x5a>
		mRunningStatus_TX = InvalidType;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_ZN13MidiInterface14sendSongSelectEh>:

/*! \brief Send a Song Select message */

void MidiInterface::sendSongSelect(DataByte inSongNumber) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	70fb      	strb	r3, [r7, #3]
	uint8_t SongSelectMessage[] =
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	81bb      	strh	r3, [r7, #12]
 8000e4e:	23f3      	movs	r3, #243	@ 0xf3
 8000e50:	733b      	strb	r3, [r7, #12]
			{ SongSelect, (uint8_t) (inSongNumber & 0x7f) };
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, SongSelectMessage, 2, MidiTimeout);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000e62:	f107 010c 	add.w	r1, r7, #12
 8000e66:	230a      	movs	r3, #10
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f006 f9fd 	bl	8007268 <HAL_UART_Transmit>
	if (Settings.UseRunningStatus) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <_ZN13MidiInterface14sendSongSelectEh+0x42>
		mRunningStatus_TX = InvalidType;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>:
 \param inType    The available Real Time types are:
 Start, Stop, Continue, Clock, ActiveSensing and SystemReset.
 @see MidiType
 */

void MidiInterface::sendRealTime(MidiType inType) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
	// Do not invalidate Running Status for real-time messages
	// as they can be interleaved within any message.
	uint8_t RealTimeMessage;
	switch (inType) {
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	3bf8      	subs	r3, #248	@ 0xf8
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	bf8c      	ite	hi
 8000e9c:	2201      	movhi	r2, #1
 8000e9e:	2200      	movls	r2, #0
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d115      	bne.n	8000ed2 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
 8000ea6:	22dd      	movs	r2, #221	@ 0xdd
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf14      	ite	ne
 8000eb4:	2301      	movne	r3, #1
 8000eb6:	2300      	moveq	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d009      	beq.n	8000ed2 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
	case Start:
	case Stop:
	case Continue:
	case ActiveSensing:
	case SystemReset:
		HAL_UART_Transmit(&serial_out, &RealTimeMessage, 1, MidiTimeout);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000ec4:	f107 010f 	add.w	r1, r7, #15
 8000ec8:	230a      	movs	r3, #10
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f006 f9cc 	bl	8007268 <HAL_UART_Transmit>
		break;
 8000ed0:	e000      	b.n	8000ed4 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4c>
	default:
// Invalid Real Time marker
		break;
 8000ed2:	bf00      	nop
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN13MidiInterface9getStatusE8MidiTypeh>:
	mCurrentNrpnNumber = 0xffff;
}

/*! @} */ // End of doc group MIDI Output
// -----------------------------------------------------------------------------
StatusByte MidiInterface::getStatus(MidiType inType, Channel inChannel) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	70bb      	strb	r3, [r7, #2]
	return ((byte) inType | ((inChannel - 1) & 0x0f));
 8000eec:	78bb      	ldrb	r3, [r7, #2]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_ZN13MidiInterface4readEv>:
 If the Thru is enabled and the message matches the filter,
 it is sent back on the MIDI output.
 @see see setInputChannel()
 */

bool MidiInterface::read() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	return read(mInputChannel);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f805 	bl	8000f30 <_ZN13MidiInterface4readEh>
 8000f26:	4603      	mov	r3, r0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN13MidiInterface4readEh>:

/*! \brief Read messages on a specified channel.
 */

bool MidiInterface::read(Channel inChannel) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	if (inChannel >= MIDI_CHANNEL_OFF)
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b10      	cmp	r3, #16
 8000f40:	d901      	bls.n	8000f46 <_ZN13MidiInterface4readEh+0x16>
		return false; // MIDI Input disabled.
 8000f42:	2300      	movs	r3, #0
 8000f44:	e020      	b.n	8000f88 <_ZN13MidiInterface4readEh+0x58>

	if (!parse())
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f822 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f083 0301 	eor.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <_ZN13MidiInterface4readEh+0x2c>
		return false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e015      	b.n	8000f88 <_ZN13MidiInterface4readEh+0x58>

	handleNullVelocityNoteOnAsNoteOff();
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fa5b 	bl	8001418 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>
	bool channelMatch = inputFilter(inChannel);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fa78 	bl	800145c <_ZN13MidiInterface11inputFilterEh>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]

	if (channelMatch) {
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <_ZN13MidiInterface4readEh+0x4c>
		launchCallback();
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fb90 	bl	800169c <_ZN13MidiInterface14launchCallbackEv>
	}

	thruFilter(inChannel);
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fdc3 	bl	8001b0c <_ZN13MidiInterface10thruFilterEh>

	return channelMatch;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZN13MidiInterface5parseEv>:
		break;
	}
}
// Private method: MIDI parser

bool MidiInterface::parse() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	byte extracted;
	if (HAL_UART_Receive(&serial_in, &extracted, 1, MidiTimeout) != HAL_OK) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8000f9e:	f107 010f 	add.w	r1, r7, #15
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f006 f9e8 	bl	800737a <HAL_UART_Receive>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZN13MidiInterface5parseEv+0x2e>
		return false;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e228      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
	// Ignore Undefined




	if (extracted == 0xf9 || extracted == 0xfd) {
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	2bf9      	cmp	r3, #249	@ 0xf9
 8000fc2:	d002      	beq.n	8000fca <_ZN13MidiInterface5parseEv+0x3a>
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2bfd      	cmp	r3, #253	@ 0xfd
 8000fc8:	d10b      	bne.n	8000fe2 <_ZN13MidiInterface5parseEv+0x52>
		if (Settings.Use1ByteParsing) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZN13MidiInterface5parseEv+0x48>
			return false;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e21b      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			return parse();
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffd9 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e216      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		}
	}

	if (mPendingMessageIndex == 0) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f040 80f9 	bne.w	80011e0 <_ZN13MidiInterface5parseEv+0x250>
// Start a new pending message
		mPendingMessage[0] = extracted;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b

// Check for running status first
		if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fa9e 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001002:	4603      	mov	r3, r0
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fad1 	bl	80015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d011      	beq.n	8001034 <_ZN13MidiInterface5parseEv+0xa4>
			// Only these types allow Running Status

			// If the status byte is not received, prepend it
			// to the pending message
			if (extracted < 0x80) {
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0d      	blt.n	8001034 <_ZN13MidiInterface5parseEv+0xa4>
				mPendingMessage[0] = mRunningStatus_RX;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 2159 	ldrb.w	r2, [r3, #345]	@ 0x159
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
				mPendingMessage[1] = extracted;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
				mPendingMessageIndex = 1;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f





		switch (getTypeFromStatusByte(mPendingMessage[0])) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fa7f 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001040:	4603      	mov	r3, r0
 8001042:	2bff      	cmp	r3, #255	@ 0xff
 8001044:	dc7b      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001046:	2bf1      	cmp	r3, #241	@ 0xf1
 8001048:	da1c      	bge.n	8001084 <_ZN13MidiInterface5parseEv+0xf4>
 800104a:	2bf0      	cmp	r3, #240	@ 0xf0
 800104c:	d06a      	beq.n	8001124 <_ZN13MidiInterface5parseEv+0x194>
 800104e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001050:	dc75      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001052:	2be0      	cmp	r3, #224	@ 0xe0
 8001054:	d061      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001056:	2be0      	cmp	r3, #224	@ 0xe0
 8001058:	dc71      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800105a:	2bd0      	cmp	r3, #208	@ 0xd0
 800105c:	d058      	beq.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 800105e:	2bd0      	cmp	r3, #208	@ 0xd0
 8001060:	dc6d      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001062:	2bc0      	cmp	r3, #192	@ 0xc0
 8001064:	d054      	beq.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 8001066:	2bc0      	cmp	r3, #192	@ 0xc0
 8001068:	dc69      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800106a:	2bb0      	cmp	r3, #176	@ 0xb0
 800106c:	d055      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 800106e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001070:	dc65      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001072:	2ba0      	cmp	r3, #160	@ 0xa0
 8001074:	d051      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001076:	2ba0      	cmp	r3, #160	@ 0xa0
 8001078:	dc61      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800107a:	2b80      	cmp	r3, #128	@ 0x80
 800107c:	d04d      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 800107e:	2b90      	cmp	r3, #144	@ 0x90
 8001080:	d04b      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001082:	e05c      	b.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001084:	3bf1      	subs	r3, #241	@ 0xf1
 8001086:	2201      	movs	r2, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	f646 62a0 	movw	r2, #28320	@ 0x6ea0
 8001090:	401a      	ands	r2, r3
 8001092:	2a00      	cmp	r2, #0
 8001094:	bf14      	ite	ne
 8001096:	2201      	movne	r2, #1
 8001098:	2200      	moveq	r2, #0
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	2a00      	cmp	r2, #0
 800109e:	d112      	bne.n	80010c6 <_ZN13MidiInterface5parseEv+0x136>
 80010a0:	f003 0205 	and.w	r2, r3, #5
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2201      	movne	r2, #1
 80010aa:	2200      	moveq	r2, #0
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d12e      	bne.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d12a      	bne.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 80010c4:	e03b      	b.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
		case Clock:
		case ActiveSensing:
		case SystemReset:
		case TuneRequest:
			// Handle the message type directly here.
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fa36 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
			mMessage.channel = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
			mMessage.data1 = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
			mMessage.data2 = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
			mMessage.valid = true;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

			// Do not reset all input attributes, Running Status must remain unchanged.
			// We still need to reset these
			mPendingMessageIndex = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

			return true;
 800110c:	2301      	movs	r3, #1
 800110e:	e17f      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			// 2 bytes messages
		case ProgramChange:
		case AfterTouchChannel:
		case TimeCodeQuarterFrame:
		case SongSelect:
			mPendingMessageExpectedLenght = 2;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			break;
 8001118:	e016      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>
		case NoteOff:
		case ControlChange:
		case PitchBend:
		case AfterTouchPoly:
		case SongPosition:
			mPendingMessageExpectedLenght = 3;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2203      	movs	r2, #3
 800111e:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			break;
 8001122:	e011      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>

		case SystemExclusive:
			// The message can be any lenght
			// between 3 and Settings.SysExMaxSize bytes
			mPendingMessageExpectedLenght = Settings.SysExMaxSize;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			mRunningStatus_RX = InvalidType;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
			mMessage.sysexArray[0] = SystemExclusive;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	22f0      	movs	r2, #240	@ 0xf0
 8001138:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
			break;
 800113c:	e004      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>

		case InvalidType:
		default:
			// This is obviously wrong. Let's get the hell out'a here.
			resetInput();
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f9b1 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
			return false;
 8001144:	2300      	movs	r3, #0
 8001146:	e163      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			break;
		}

		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
 8001156:	3b01      	subs	r3, #1
 8001158:	429a      	cmp	r2, r3
 800115a:	db2d      	blt.n	80011b8 <_ZN13MidiInterface5parseEv+0x228>
			// Reception complete
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f9eb 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
			mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fa06 	bl	800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
			mMessage.data1 = mPendingMessage[1];
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 215c 	ldrb.w	r2, [r3, #348]	@ 0x15c
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
			mMessage.data2 = 0;			// Completed new message has 1 data byte
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

			mPendingMessageIndex = 0;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			mMessage.valid = true;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
			return true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e12b      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Waiting for more data
			mPendingMessageIndex++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
		}

		if (Settings.Use1ByteParsing) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <_ZN13MidiInterface5parseEv+0x246>
			// Message is not complete.
			return false;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e11c      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Call the parser recursively
			// to parse the rest of the message.
			return parse();
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff feda 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 80011dc:	4603      	mov	r3, r0
 80011de:	e117      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		}
	} else {
// First, test if this is a status byte
		if (extracted >= 0x80) {
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da67      	bge.n	80012b8 <_ZN13MidiInterface5parseEv+0x328>
			// Reception of status bytes in the middle of an uncompleted message
			// are allowed only for interleaved Real Time message or EOX
			switch (extracted) {
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3bf7      	subs	r3, #247	@ 0xf7
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d862      	bhi.n	80012b6 <_ZN13MidiInterface5parseEv+0x326>
 80011f0:	a201      	add	r2, pc, #4	@ (adr r2, 80011f8 <_ZN13MidiInterface5parseEv+0x268>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001249 	.word	0x08001249
 80011fc:	0800121d 	.word	0x0800121d
 8001200:	080012b7 	.word	0x080012b7
 8001204:	0800121d 	.word	0x0800121d
 8001208:	0800121d 	.word	0x0800121d
 800120c:	0800121d 	.word	0x0800121d
 8001210:	080012b7 	.word	0x080012b7
 8001214:	0800121d 	.word	0x0800121d
 8001218:	0800121d 	.word	0x0800121d
// the MIDI class, and recompose the message it was
// interleaved into. Oh, and without killing the running status..
// This is done by leaving the pending message as is,
// it will be completed on next calls.

				mMessage.type = (MidiType) extracted;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
				mMessage.data1 = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
				mMessage.data2 = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
				mMessage.channel = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
				mMessage.valid = true;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
				return true;
 8001244:	2301      	movs	r3, #1
 8001246:	e0e3      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>

// End of Exclusive
			case 0xf7:
				if (mMessage.sysexArray[0] == SystemExclusive) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 800124e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001250:	d12c      	bne.n	80012ac <_ZN13MidiInterface5parseEv+0x31c>
					// Store the last byte (EOX)
					mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	b2d1      	uxtb	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	f882 115f 	strb.w	r1, [r2, #351]	@ 0x15f
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	22f7      	movs	r2, #247	@ 0xf7
 800126a:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
					mMessage.type = SystemExclusive;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	22f0      	movs	r2, #240	@ 0xf0
 8001272:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169

					// Get length
					mMessage.data1 = mPendingMessageIndex & 0xff;		// LSB
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 215f 	ldrb.w	r2, [r3, #351]	@ 0x15f
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
					mMessage.data2 = mPendingMessageIndex >> 8;			// MSB
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8001288:	121b      	asrs	r3, r3, #8
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
					mMessage.channel = 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
					mMessage.valid = true;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

					resetInput();
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f8ff 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
					return true;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b1      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
				} else {
					// Well well well.. error.
					resetInput();
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8fa 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
					return false;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e0ac      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
				}

			default:
				break; // LCOV_EXCL_LINE - Coverage blind spot
 80012b6:	bf00      	nop
			}
		}

// Add extracted data byte to pending message
		if (mPendingMessage[0] == SystemExclusive)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 80012be:	2bf0      	cmp	r3, #240	@ 0xf0
 80012c0:	d109      	bne.n	80012d6 <_ZN13MidiInterface5parseEv+0x346>
			mMessage.sysexArray[mPendingMessageIndex] = extracted;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012c8:	4619      	mov	r1, r3
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
 80012d4:	e008      	b.n	80012e8 <_ZN13MidiInterface5parseEv+0x358>
		else
			mPendingMessage[mPendingMessageIndex] = extracted;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012dc:	4619      	mov	r1, r3
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b

// Now we are going to check if we have reached the end of the message
		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
 80012f6:	3b01      	subs	r3, #1
 80012f8:	429a      	cmp	r2, r3
 80012fa:	db75      	blt.n	80013e8 <_ZN13MidiInterface5parseEv+0x458>
			// "FML" case: fall down here with an overflown SysEx..
			// This means we received the last possible data byte that can fit
			// the buffer. If this happens, try increasing Settings.SysExMaxSize.
			if (mPendingMessage[0] == SystemExclusive) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001302:	2bf0      	cmp	r3, #240	@ 0xf0
 8001304:	d104      	bne.n	8001310 <_ZN13MidiInterface5parseEv+0x380>
				resetInput();
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8cd 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
				return false;
 800130c:	2300      	movs	r3, #0
 800130e:	e07f      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			}

			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f911 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169

			if (isChannelMessage(mMessage.type))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f93d 	bl	80015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <_ZN13MidiInterface5parseEv+0x3c0>
				mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f923 	bl	800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
 800134e:	e003      	b.n	8001358 <_ZN13MidiInterface5parseEv+0x3c8>
			else
				mMessage.channel = 0;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a

			mMessage.data1 = mPendingMessage[1];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 215c 	ldrb.w	r2, [r3, #348]	@ 0x15c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b

			// Save data2 only if applicable
			mMessage.data2 =
					mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
			mMessage.data2 =
 800136a:	2b03      	cmp	r3, #3
 800136c:	d103      	bne.n	8001376 <_ZN13MidiInterface5parseEv+0x3e6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 215d 	ldrb.w	r2, [r3, #349]	@ 0x15d
 8001374:	e000      	b.n	8001378 <_ZN13MidiInterface5parseEv+0x3e8>
 8001376:	2200      	movs	r2, #0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

			// Reset local variables
			mPendingMessageIndex = 0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

			mMessage.valid = true;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

			// Activate running status (if enabled for the received type)
			switch (mMessage.type) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800139c:	2be0      	cmp	r3, #224	@ 0xe0
 800139e:	d015      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013a0:	2be0      	cmp	r3, #224	@ 0xe0
 80013a2:	dc1a      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013a4:	2bd0      	cmp	r3, #208	@ 0xd0
 80013a6:	d011      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013a8:	2bd0      	cmp	r3, #208	@ 0xd0
 80013aa:	dc16      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80013ae:	d00d      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80013b2:	dc12      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013b4:	2bb0      	cmp	r3, #176	@ 0xb0
 80013b6:	d009      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013b8:	2bb0      	cmp	r3, #176	@ 0xb0
 80013ba:	dc0e      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80013be:	d005      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80013c2:	dc0a      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013c4:	2b80      	cmp	r3, #128	@ 0x80
 80013c6:	d001      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013c8:	2b90      	cmp	r3, #144	@ 0x90
 80013ca:	d106      	bne.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
			case ControlChange:
			case ProgramChange:
			case AfterTouchChannel:
			case PitchBend:
// Running status enabled: store it from received message
				mRunningStatus_RX = mPendingMessage[0];
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 215b 	ldrb.w	r2, [r3, #347]	@ 0x15b
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
				break;
 80013d8:	e004      	b.n	80013e4 <_ZN13MidiInterface5parseEv+0x454>

			default:
// No running status
				mRunningStatus_RX = InvalidType;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
				break;
 80013e2:	bf00      	nop
			}
			return true;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e013      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Then update the index of the pending message.
			mPendingMessageIndex++;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f

			if (Settings.Use1ByteParsing) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <_ZN13MidiInterface5parseEv+0x476>
// Message is not complete.
				return false;
 8001402:	2300      	movs	r3, #0
 8001404:	e004      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			} else {
// Call the parser recursively to parse the rest of the message.
				return parse();
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fdc2 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 800140c:	4603      	mov	r3, r0
 800140e:	bf00      	nop
			}
		}
	}
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>:

void MidiInterface::handleNullVelocityNoteOnAsNoteOff() {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
			&& getData2() == 0) {
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00d      	beq.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f851 	bl	80014d2 <_ZN13MidiInterface7getTypeEv>
 8001430:	4603      	mov	r3, r0
 8001432:	2b90      	cmp	r3, #144	@ 0x90
 8001434:	d107      	bne.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
			&& getData2() == 0) {
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f858 	bl	80014ec <_ZN13MidiInterface8getData2Ev>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x30>
 8001446:	2300      	movs	r3, #0
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x3c>
		mMessage.type = NoteOff;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
	}
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN13MidiInterface11inputFilterEh>:

// Private method: check if the received message is on the listened channel

bool MidiInterface::inputFilter(Channel inChannel) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	// This method handles recognition of channel
	// (to know if the message is destinated to the Arduino)

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800146e:	b25b      	sxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	da11      	bge.n	8001498 <_ZN13MidiInterface11inputFilterEh+0x3c>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800147a:	2be0      	cmp	r3, #224	@ 0xe0
 800147c:	d80c      	bhi.n	8001498 <_ZN13MidiInterface11inputFilterEh+0x3c>
// Then we need to know if we listen to it
		if ((mMessage.channel == inChannel)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	429a      	cmp	r2, r3
 8001488:	d002      	beq.n	8001490 <_ZN13MidiInterface11inputFilterEh+0x34>
				|| (inChannel == MIDI_CHANNEL_OMNI)) {
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <_ZN13MidiInterface11inputFilterEh+0x38>
			return true;
 8001490:	2301      	movs	r3, #1
 8001492:	e002      	b.n	800149a <_ZN13MidiInterface11inputFilterEh+0x3e>
		} else {
			// We don't listen to this channel
			return false;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <_ZN13MidiInterface11inputFilterEh+0x3e>
		}
	} else {
// System messages are always received
		return true;
 8001498:	2301      	movs	r3, #1
	}
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZN13MidiInterface10resetInputEv>:

// Private method: reset input attributes

void MidiInterface::resetInput() {
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	mPendingMessageIndex = 0;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mPendingMessageExpectedLenght = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
	mRunningStatus_RX = InvalidType;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_ZN13MidiInterface7getTypeEv>:
/*! \brief Get the last received message's type

 Returns an enumerated type. @see MidiType
 */

MidiType MidiInterface::getType() {
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	return mMessage.type;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_ZN13MidiInterface8getData2Ev>:
	return mMessage.data1;
}

/*! \brief Get the second data byte of the last received message. */

DataByte MidiInterface::getData2() {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	return mMessage.data2;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_ZN13MidiInterface13getSysExArrayEv>:
/*! \brief Get the System Exclusive byte array.

 @see getSysExArrayLength to get the array's length in bytes.
 */

byte* MidiInterface::getSysExArray() {
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	return mMessage.sysexArray;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f503 73b7 	add.w	r3, r3, #366	@ 0x16e
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZN13MidiInterface19getSysExArrayLengthEv>:

 It is coded using data1 as LSB and data2 as MSB.
 \return The array's length, in bytes.
 */

unsigned MidiInterface::getSysExArrayLength() {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	return mMessage.getSysExSize();
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fa38 	bl	80009a4 <_ZN8mMessage12getSysExSizeEv>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>:
 This is a utility static method, used internally,
 made public so you can handle MidiTypes more easily.
 */

MidiType MidiInterface::getTypeFromStatusByte(
byte inStatus) {
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
	if ((inStatus < 0x80) || (inStatus == 0xf4) || (inStatus == 0xf5)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	da0b      	bge.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2bf4      	cmp	r3, #244	@ 0xf4
 8001554:	d008      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2bf5      	cmp	r3, #245	@ 0xf5
 800155a:	d005      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
			|| (inStatus == 0xf9) || (inStatus == 0xfD)) {
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001560:	d002      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2bfd      	cmp	r3, #253	@ 0xfd
 8001566:	d101      	bne.n	800156c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2e>
// Data bytes and undefined.
		return InvalidType;
 8001568:	2300      	movs	r3, #0
 800156a:	e008      	b.n	800157e <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}
	if (inStatus < 0xf0) {
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2bef      	cmp	r3, #239	@ 0xef
 8001570:	d804      	bhi.n	800157c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x3e>
// Channel message, remove channel nibble.
		return MidiType(inStatus & 0xf0);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e000      	b.n	800157e <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}

	return MidiType(inStatus);
 800157c:	79fb      	ldrb	r3, [r7, #7]
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>:

/*! \brief Returns channel in the range 1-16
 */

Channel MidiInterface::getChannelFromStatusByte(
byte inStatus) {
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
	return (inStatus & 0x0f) + 1;
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3301      	adds	r3, #1
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>:

bool MidiInterface::isChannelMessage(MidiType inType) {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
			|| inType == PitchBend || inType == ProgramChange);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b80      	cmp	r3, #128	@ 0x80
 80015ba:	d011      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b90      	cmp	r3, #144	@ 0x90
 80015c0:	d00e      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80015c6:	d00b      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80015cc:	d008      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2bd0      	cmp	r3, #208	@ 0xd0
 80015d2:	d005      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == PitchBend || inType == ProgramChange);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2be0      	cmp	r3, #224	@ 0xe0
 80015d8:	d002      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80015de:	d101      	bne.n	80015e4 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x38>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x3a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>:

void MidiInterface::setHandleNoteOff(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	mNoteOffCallback = fptr;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>:
void MidiInterface::setHandleNoteOn(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	mNoteOnCallback = fptr;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	605a      	str	r2, [r3, #4]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_ZN13MidiInterface22setHandleControlChangeEPFvhhhE>:
void MidiInterface::setHandleAfterTouchPoly(
		void (*fptr)(byte channel, byte note, byte pressure)) {
	mAfterTouchPolyCallback = fptr;
}
void MidiInterface::setHandleControlChange(
		void (*fptr)(byte channel, byte number, byte value)) {
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	mControlChangeCallback = fptr;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	60da      	str	r2, [r3, #12]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_ZN13MidiInterface14setHandleClockEPFvvE>:
	mSongSelectCallback = fptr;
}
void MidiInterface::setHandleTuneRequest(void (*fptr)(void)) {
	mTuneRequestCallback = fptr;
}
void MidiInterface::setHandleClock(void (*fptr)(void)) {
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
	mClockCallback = fptr;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_ZN13MidiInterface14setHandleStartEPFvvE>:
void MidiInterface::setHandleStart(void (*fptr)(void)) {
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	mStartCallback = fptr;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_ZN13MidiInterface13setHandleStopEPFvvE>:
void MidiInterface::setHandleContinue(void (*fptr)(void)) {
	mContinueCallback = fptr;
}
void MidiInterface::setHandleStop(void (*fptr)(void)) {
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
	mStopCallback = fptr;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <_ZN13MidiInterface14launchCallbackEv>:
	}
}

/*! @} */ // End of doc group MIDI Callbacks
// Private - launch callback function based on received type.
void MidiInterface::launchCallback() {
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	// The order is mixed to allow frequent messages to trigger their callback faster.
	switch (mMessage.type) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 80016aa:	3b80      	subs	r3, #128	@ 0x80
 80016ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80016ae:	f200 8203 	bhi.w	8001ab8 <_ZN13MidiInterface14launchCallbackEv+0x41c>
 80016b2:	a201      	add	r2, pc, #4	@ (adr r2, 80016b8 <_ZN13MidiInterface14launchCallbackEv+0x1c>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	080018b9 	.word	0x080018b9
 80016bc:	08001ab9 	.word	0x08001ab9
 80016c0:	08001ab9 	.word	0x08001ab9
 80016c4:	08001ab9 	.word	0x08001ab9
 80016c8:	08001ab9 	.word	0x08001ab9
 80016cc:	08001ab9 	.word	0x08001ab9
 80016d0:	08001ab9 	.word	0x08001ab9
 80016d4:	08001ab9 	.word	0x08001ab9
 80016d8:	08001ab9 	.word	0x08001ab9
 80016dc:	08001ab9 	.word	0x08001ab9
 80016e0:	08001ab9 	.word	0x08001ab9
 80016e4:	08001ab9 	.word	0x08001ab9
 80016e8:	08001ab9 	.word	0x08001ab9
 80016ec:	08001ab9 	.word	0x08001ab9
 80016f0:	08001ab9 	.word	0x08001ab9
 80016f4:	08001ab9 	.word	0x08001ab9
 80016f8:	080018dd 	.word	0x080018dd
 80016fc:	08001ab9 	.word	0x08001ab9
 8001700:	08001ab9 	.word	0x08001ab9
 8001704:	08001ab9 	.word	0x08001ab9
 8001708:	08001ab9 	.word	0x08001ab9
 800170c:	08001ab9 	.word	0x08001ab9
 8001710:	08001ab9 	.word	0x08001ab9
 8001714:	08001ab9 	.word	0x08001ab9
 8001718:	08001ab9 	.word	0x08001ab9
 800171c:	08001ab9 	.word	0x08001ab9
 8001720:	08001ab9 	.word	0x08001ab9
 8001724:	08001ab9 	.word	0x08001ab9
 8001728:	08001ab9 	.word	0x08001ab9
 800172c:	08001ab9 	.word	0x08001ab9
 8001730:	08001ab9 	.word	0x08001ab9
 8001734:	08001ab9 	.word	0x08001ab9
 8001738:	080019b5 	.word	0x080019b5
 800173c:	08001ab9 	.word	0x08001ab9
 8001740:	08001ab9 	.word	0x08001ab9
 8001744:	08001ab9 	.word	0x08001ab9
 8001748:	08001ab9 	.word	0x08001ab9
 800174c:	08001ab9 	.word	0x08001ab9
 8001750:	08001ab9 	.word	0x08001ab9
 8001754:	08001ab9 	.word	0x08001ab9
 8001758:	08001ab9 	.word	0x08001ab9
 800175c:	08001ab9 	.word	0x08001ab9
 8001760:	08001ab9 	.word	0x08001ab9
 8001764:	08001ab9 	.word	0x08001ab9
 8001768:	08001ab9 	.word	0x08001ab9
 800176c:	08001ab9 	.word	0x08001ab9
 8001770:	08001ab9 	.word	0x08001ab9
 8001774:	08001ab9 	.word	0x08001ab9
 8001778:	0800195b 	.word	0x0800195b
 800177c:	08001ab9 	.word	0x08001ab9
 8001780:	08001ab9 	.word	0x08001ab9
 8001784:	08001ab9 	.word	0x08001ab9
 8001788:	08001ab9 	.word	0x08001ab9
 800178c:	08001ab9 	.word	0x08001ab9
 8001790:	08001ab9 	.word	0x08001ab9
 8001794:	08001ab9 	.word	0x08001ab9
 8001798:	08001ab9 	.word	0x08001ab9
 800179c:	08001ab9 	.word	0x08001ab9
 80017a0:	08001ab9 	.word	0x08001ab9
 80017a4:	08001ab9 	.word	0x08001ab9
 80017a8:	08001ab9 	.word	0x08001ab9
 80017ac:	08001ab9 	.word	0x08001ab9
 80017b0:	08001ab9 	.word	0x08001ab9
 80017b4:	08001ab9 	.word	0x08001ab9
 80017b8:	080019f9 	.word	0x080019f9
 80017bc:	08001ab9 	.word	0x08001ab9
 80017c0:	08001ab9 	.word	0x08001ab9
 80017c4:	08001ab9 	.word	0x08001ab9
 80017c8:	08001ab9 	.word	0x08001ab9
 80017cc:	08001ab9 	.word	0x08001ab9
 80017d0:	08001ab9 	.word	0x08001ab9
 80017d4:	08001ab9 	.word	0x08001ab9
 80017d8:	08001ab9 	.word	0x08001ab9
 80017dc:	08001ab9 	.word	0x08001ab9
 80017e0:	08001ab9 	.word	0x08001ab9
 80017e4:	08001ab9 	.word	0x08001ab9
 80017e8:	08001ab9 	.word	0x08001ab9
 80017ec:	08001ab9 	.word	0x08001ab9
 80017f0:	08001ab9 	.word	0x08001ab9
 80017f4:	08001ab9 	.word	0x08001ab9
 80017f8:	080019d9 	.word	0x080019d9
 80017fc:	08001ab9 	.word	0x08001ab9
 8001800:	08001ab9 	.word	0x08001ab9
 8001804:	08001ab9 	.word	0x08001ab9
 8001808:	08001ab9 	.word	0x08001ab9
 800180c:	08001ab9 	.word	0x08001ab9
 8001810:	08001ab9 	.word	0x08001ab9
 8001814:	08001ab9 	.word	0x08001ab9
 8001818:	08001ab9 	.word	0x08001ab9
 800181c:	08001ab9 	.word	0x08001ab9
 8001820:	08001ab9 	.word	0x08001ab9
 8001824:	08001ab9 	.word	0x08001ab9
 8001828:	08001ab9 	.word	0x08001ab9
 800182c:	08001ab9 	.word	0x08001ab9
 8001830:	08001ab9 	.word	0x08001ab9
 8001834:	08001ab9 	.word	0x08001ab9
 8001838:	0800197f 	.word	0x0800197f
 800183c:	08001ab9 	.word	0x08001ab9
 8001840:	08001ab9 	.word	0x08001ab9
 8001844:	08001ab9 	.word	0x08001ab9
 8001848:	08001ab9 	.word	0x08001ab9
 800184c:	08001ab9 	.word	0x08001ab9
 8001850:	08001ab9 	.word	0x08001ab9
 8001854:	08001ab9 	.word	0x08001ab9
 8001858:	08001ab9 	.word	0x08001ab9
 800185c:	08001ab9 	.word	0x08001ab9
 8001860:	08001ab9 	.word	0x08001ab9
 8001864:	08001ab9 	.word	0x08001ab9
 8001868:	08001ab9 	.word	0x08001ab9
 800186c:	08001ab9 	.word	0x08001ab9
 8001870:	08001ab9 	.word	0x08001ab9
 8001874:	08001ab9 	.word	0x08001ab9
 8001878:	08001a17 	.word	0x08001a17
 800187c:	08001a3f 	.word	0x08001a3f
 8001880:	08001a57 	.word	0x08001a57
 8001884:	08001a81 	.word	0x08001a81
 8001888:	08001ab9 	.word	0x08001ab9
 800188c:	08001ab9 	.word	0x08001ab9
 8001890:	08001a99 	.word	0x08001a99
 8001894:	08001ab9 	.word	0x08001ab9
 8001898:	08001901 	.word	0x08001901
 800189c:	08001ab9 	.word	0x08001ab9
 80018a0:	08001913 	.word	0x08001913
 80018a4:	08001925 	.word	0x08001925
 80018a8:	08001937 	.word	0x08001937
 80018ac:	08001ab9 	.word	0x08001ab9
 80018b0:	08001949 	.word	0x08001949
 80018b4:	08001aa9 	.word	0x08001aa9
	// Notes
	case NoteOff:
		if (mNoteOffCallback != 0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80fd 	beq.w	8001abc <_ZN13MidiInterface14launchCallbackEv+0x420>
			mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80018d8:	4798      	blx	r3
		break;
 80018da:	e0ef      	b.n	8001abc <_ZN13MidiInterface14launchCallbackEv+0x420>
	case NoteOn:
		if (mNoteOnCallback != 0)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80ed 	beq.w	8001ac0 <_ZN13MidiInterface14launchCallbackEv+0x424>
			mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80018fc:	4798      	blx	r3
		break;
 80018fe:	e0df      	b.n	8001ac0 <_ZN13MidiInterface14launchCallbackEv+0x424>

// Real-time messages
	case Clock:
		if (mClockCallback != 0)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80dd 	beq.w	8001ac4 <_ZN13MidiInterface14launchCallbackEv+0x428>
			mClockCallback();
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4798      	blx	r3
		break;
 8001910:	e0d8      	b.n	8001ac4 <_ZN13MidiInterface14launchCallbackEv+0x428>
	case Start:
		if (mStartCallback != 0)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80d6 	beq.w	8001ac8 <_ZN13MidiInterface14launchCallbackEv+0x42c>
			mStartCallback();
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	4798      	blx	r3
		break;
 8001922:	e0d1      	b.n	8001ac8 <_ZN13MidiInterface14launchCallbackEv+0x42c>
	case Continue:
		if (mContinueCallback != 0)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80cf 	beq.w	8001acc <_ZN13MidiInterface14launchCallbackEv+0x430>
			mContinueCallback();
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001932:	4798      	blx	r3
		break;
 8001934:	e0ca      	b.n	8001acc <_ZN13MidiInterface14launchCallbackEv+0x430>
	case Stop:
		if (mStopCallback != 0)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80c8 	beq.w	8001ad0 <_ZN13MidiInterface14launchCallbackEv+0x434>
			mStopCallback();
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001944:	4798      	blx	r3
		break;
 8001946:	e0c3      	b.n	8001ad0 <_ZN13MidiInterface14launchCallbackEv+0x434>
	case ActiveSensing:
		if (mActiveSensingCallback != 0)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80c1 	beq.w	8001ad4 <_ZN13MidiInterface14launchCallbackEv+0x438>
			mActiveSensingCallback();
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4798      	blx	r3
		break;
 8001958:	e0bc      	b.n	8001ad4 <_ZN13MidiInterface14launchCallbackEv+0x438>

// Continuous controllers
	case ControlChange:
		if (mControlChangeCallback != 0)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80ba 	beq.w	8001ad8 <_ZN13MidiInterface14launchCallbackEv+0x43c>
			mControlChangeCallback(mMessage.channel, mMessage.data1,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 800197a:	4798      	blx	r3
					mMessage.data2);
		break;
 800197c:	e0ac      	b.n	8001ad8 <_ZN13MidiInterface14launchCallbackEv+0x43c>
	case PitchBend:
		if (mPitchBendCallback != 0)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80aa 	beq.w	8001adc <_ZN13MidiInterface14launchCallbackEv+0x440>
			mPitchBendCallback(mMessage.channel,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
					(int) ((mMessage.data1 & 0x7f)
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001998:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
							| ((mMessage.data2 & 0x7f) << 7))
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80019a2:	01d2      	lsls	r2, r2, #7
 80019a4:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 80019a8:	430a      	orrs	r2, r1
			mPitchBendCallback(mMessage.channel,
 80019aa:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
 80019ae:	4611      	mov	r1, r2
 80019b0:	4798      	blx	r3
							+ MIDI_PITCHBEND_MIN);
		break;
 80019b2:	e093      	b.n	8001adc <_ZN13MidiInterface14launchCallbackEv+0x440>
	case AfterTouchPoly:
		if (mAfterTouchPolyCallback != 0)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8091 	beq.w	8001ae0 <_ZN13MidiInterface14launchCallbackEv+0x444>
			mAfterTouchPolyCallback(mMessage.channel, mMessage.data1,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80019d4:	4798      	blx	r3
					mMessage.data2);
		break;
 80019d6:	e083      	b.n	8001ae0 <_ZN13MidiInterface14launchCallbackEv+0x444>
	case AfterTouchChannel:
		if (mAfterTouchChannelCallback != 0)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8081 	beq.w	8001ae4 <_ZN13MidiInterface14launchCallbackEv+0x448>
			mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 80019f2:	4611      	mov	r1, r2
 80019f4:	4798      	blx	r3
		break;
 80019f6:	e075      	b.n	8001ae4 <_ZN13MidiInterface14launchCallbackEv+0x448>

	case ProgramChange:
		if (mProgramChangeCallback != 0)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d073      	beq.n	8001ae8 <_ZN13MidiInterface14launchCallbackEv+0x44c>
			mProgramChangeCallback(mMessage.channel, mMessage.data1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a10:	4611      	mov	r1, r2
 8001a12:	4798      	blx	r3
		break;
 8001a14:	e068      	b.n	8001ae8 <_ZN13MidiInterface14launchCallbackEv+0x44c>
	case SystemExclusive:
		if (mSystemExclusiveCallback != 0)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d066      	beq.n	8001aec <_ZN13MidiInterface14launchCallbackEv+0x450>
			mSystemExclusiveCallback(mMessage.sysexArray,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69dc      	ldr	r4, [r3, #28]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f503 75b7 	add.w	r5, r3, #366	@ 0x16e
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe ffb8 	bl	80009a4 <_ZN8mMessage12getSysExSizeEv>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4619      	mov	r1, r3
 8001a38:	4628      	mov	r0, r5
 8001a3a:	47a0      	blx	r4
					mMessage.getSysExSize());
		break;
 8001a3c:	e056      	b.n	8001aec <_ZN13MidiInterface14launchCallbackEv+0x450>

// Occasional messages
	case TimeCodeQuarterFrame:
		if (mTimeCodeQuarterFrameCallback != 0)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d054      	beq.n	8001af0 <_ZN13MidiInterface14launchCallbackEv+0x454>
			mTimeCodeQuarterFrameCallback(mMessage.data1);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a50:	4610      	mov	r0, r2
 8001a52:	4798      	blx	r3
		break;
 8001a54:	e04c      	b.n	8001af0 <_ZN13MidiInterface14launchCallbackEv+0x454>
	case SongPosition:
		if (mSongPositionCallback != 0)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d04a      	beq.n	8001af4 <_ZN13MidiInterface14launchCallbackEv+0x458>
			mSongPositionCallback(
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
					(mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a68:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 8001a72:	01d2      	lsls	r2, r2, #7
 8001a74:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001a78:	430a      	orrs	r2, r1
			mSongPositionCallback(
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4798      	blx	r3
		break;
 8001a7e:	e039      	b.n	8001af4 <_ZN13MidiInterface14launchCallbackEv+0x458>
	case SongSelect:
		if (mSongSelectCallback != 0)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d037      	beq.n	8001af8 <_ZN13MidiInterface14launchCallbackEv+0x45c>
			mSongSelectCallback(mMessage.data1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a92:	4610      	mov	r0, r2
 8001a94:	4798      	blx	r3
		break;
 8001a96:	e02f      	b.n	8001af8 <_ZN13MidiInterface14launchCallbackEv+0x45c>
	case TuneRequest:
		if (mTuneRequestCallback != 0)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02d      	beq.n	8001afc <_ZN13MidiInterface14launchCallbackEv+0x460>
			mTuneRequestCallback();
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	4798      	blx	r3
		break;
 8001aa6:	e029      	b.n	8001afc <_ZN13MidiInterface14launchCallbackEv+0x460>

	case SystemReset:
		if (mSystemResetCallback != 0)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d027      	beq.n	8001b00 <_ZN13MidiInterface14launchCallbackEv+0x464>
			mSystemResetCallback();
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	4798      	blx	r3
		break;
 8001ab6:	e023      	b.n	8001b00 <_ZN13MidiInterface14launchCallbackEv+0x464>

	case InvalidType:
	default:
		break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001ab8:	bf00      	nop
 8001aba:	e022      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001abc:	bf00      	nop
 8001abe:	e020      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac0:	bf00      	nop
 8001ac2:	e01e      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac4:	bf00      	nop
 8001ac6:	e01c      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac8:	bf00      	nop
 8001aca:	e01a      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001acc:	bf00      	nop
 8001ace:	e018      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad0:	bf00      	nop
 8001ad2:	e016      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad4:	bf00      	nop
 8001ad6:	e014      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad8:	bf00      	nop
 8001ada:	e012      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001adc:	bf00      	nop
 8001ade:	e010      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ae0:	bf00      	nop
 8001ae2:	e00e      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ae4:	bf00      	nop
 8001ae6:	e00c      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ae8:	bf00      	nop
 8001aea:	e00a      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001aec:	bf00      	nop
 8001aee:	e008      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001af0:	bf00      	nop
 8001af2:	e006      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001af4:	bf00      	nop
 8001af6:	e004      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001af8:	bf00      	nop
 8001afa:	e002      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001afc:	bf00      	nop
 8001afe:	e000      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001b00:	bf00      	nop
	}
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	bf00      	nop

08001b0c <_ZN13MidiInterface10thruFilterEh>:

void MidiInterface::thruFilter(Channel inChannel) {
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
	// If the feature is disabled, don't do anything.
	if (!mThruActivated || (mThruFilterMode == Thru::Off))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 80da 	bne.w	8001ce4 <_ZN13MidiInterface10thruFilterEh+0x1d8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80d1 	beq.w	8001ce4 <_ZN13MidiInterface10thruFilterEh+0x1d8>
		return;

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da65      	bge.n	8001c1a <_ZN13MidiInterface10thruFilterEh+0x10e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001b54:	2be0      	cmp	r3, #224	@ 0xe0
 8001b56:	d860      	bhi.n	8001c1a <_ZN13MidiInterface10thruFilterEh+0x10e>
		bool filter_condition = ((mMessage.channel == inChannel)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
				|| (inChannel == MIDI_CHANNEL_OMNI));
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d002      	beq.n	8001b6a <_ZN13MidiInterface10thruFilterEh+0x5e>
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <_ZN13MidiInterface10thruFilterEh+0x62>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZN13MidiInterface10thruFilterEh+0x64>
 8001b6e:	2300      	movs	r3, #0
		bool filter_condition = ((mMessage.channel == inChannel)
 8001b70:	73fb      	strb	r3, [r7, #15]

		// Now let's pass it to the output
		switch (mThruFilterMode) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b78:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d02d      	beq.n	8001bde <_ZN13MidiInterface10thruFilterEh+0xd2>
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	dc43      	bgt.n	8001c0e <_ZN13MidiInterface10thruFilterEh+0x102>
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d002      	beq.n	8001b90 <_ZN13MidiInterface10thruFilterEh+0x84>
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d012      	beq.n	8001bb4 <_ZN13MidiInterface10thruFilterEh+0xa8>
						mMessage.channel);
			}
			break;

		default:
			break;
 8001b8e:	e03e      	b.n	8001c0e <_ZN13MidiInterface10thruFilterEh+0x102>
			send(mMessage.type, mMessage.data1, mMessage.data2,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4603      	mov	r3, r0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff f822 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001bb2:	e031      	b.n	8001c18 <_ZN13MidiInterface10thruFilterEh+0x10c>
			if (filter_condition) {
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d02b      	beq.n	8001c12 <_ZN13MidiInterface10thruFilterEh+0x106>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff f80d 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001bdc:	e019      	b.n	8001c12 <_ZN13MidiInterface10thruFilterEh+0x106>
			if (!filter_condition) {
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <_ZN13MidiInterface10thruFilterEh+0x10a>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4603      	mov	r3, r0
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7fe fff5 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001c0c:	e003      	b.n	8001c16 <_ZN13MidiInterface10thruFilterEh+0x10a>
			break;
 8001c0e:	bf00      	nop
 8001c10:	e06b      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001c12:	bf00      	nop
 8001c14:	e069      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001c16:	bf00      	nop
		}
	} else {
 8001c18:	e067      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
		// Send the message to the output
		switch (mMessage.type) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001c20:	2bff      	cmp	r3, #255	@ 0xff
 8001c22:	dc61      	bgt.n	8001ce8 <_ZN13MidiInterface10thruFilterEh+0x1dc>
 8001c24:	2bf2      	cmp	r3, #242	@ 0xf2
 8001c26:	da04      	bge.n	8001c32 <_ZN13MidiInterface10thruFilterEh+0x126>
 8001c28:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c2a:	d02b      	beq.n	8001c84 <_ZN13MidiInterface10thruFilterEh+0x178>
 8001c2c:	2bf1      	cmp	r3, #241	@ 0xf1
 8001c2e:	d04e      	beq.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1c2>
		case TimeCodeQuarterFrame:
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
			break;

		default:
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001c30:	e05a      	b.n	8001ce8 <_ZN13MidiInterface10thruFilterEh+0x1dc>
		switch (mMessage.type) {
 8001c32:	3bf2      	subs	r3, #242	@ 0xf2
 8001c34:	2201      	movs	r2, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001c3e:	401a      	ands	r2, r3
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	bf14      	ite	ne
 8001c44:	2201      	movne	r2, #1
 8001c46:	2200      	moveq	r2, #0
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d112      	bne.n	8001c74 <_ZN13MidiInterface10thruFilterEh+0x168>
 8001c4e:	f003 0201 	and.w	r2, r3, #1
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2201      	movne	r2, #1
 8001c58:	2200      	moveq	r2, #0
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	d128      	bne.n	8001cb2 <_ZN13MidiInterface10thruFilterEh+0x1a6>
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d117      	bne.n	8001ca2 <_ZN13MidiInterface10thruFilterEh+0x196>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001c72:	e039      	b.n	8001ce8 <_ZN13MidiInterface10thruFilterEh+0x1dc>
			sendRealTime(mMessage.type);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff f903 	bl	8000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>
			break;
 8001c82:	e032      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSysEx(getSysExArrayLength(), getSysExArray(), true);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fc4b 	bl	8001520 <_ZN13MidiInterface19getSysExArrayLengthEv>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b2dc      	uxtb	r4, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fc39 	bl	8001506 <_ZN13MidiInterface13getSysExArrayEv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	2301      	movs	r3, #1
 8001c98:	4621      	mov	r1, r4
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff f81e 	bl	8000cdc <_ZN13MidiInterface9sendSysExEhPhb>
			break;
 8001ca0:	e023      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongSelect(mMessage.data1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff f8c7 	bl	8000e3e <_ZN13MidiInterface14sendSongSelectEh>
			break;
 8001cb0:	e01b      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongPosition(mMessage.data1 | ((unsigned) mMessage.data2 << 7));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8001cc0:	01db      	lsls	r3, r3, #7
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff f888 	bl	8000ddc <_ZN13MidiInterface16sendSongPositionEj>
			break;
 8001ccc:	e00d      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 116b 	ldrb.w	r1, [r3, #363]	@ 0x16b
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8001cda:	461a      	mov	r2, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff f83c 	bl	8000d5a <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>
			break;
 8001ce2:	e002      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
		return;
 8001ce4:	bf00      	nop
 8001ce6:	e000      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001ce8:	bf00      	nop
		}
	}
}
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}

08001cf0 <_Z12Handle_Clockv>:

#include "MidiHandlers.h"
#include "stm32f3xx_hal.h"
int i;
int u;
void Handle_Clock() {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	i++;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <_Z12Handle_Clockv+0x2c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <_Z12Handle_Clockv+0x2c>)
 8001cfc:	6013      	str	r3, [r2, #0]
	if (i / 12 == 1) {
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <_Z12Handle_Clockv+0x2c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3b0c      	subs	r3, #12
 8001d04:	2b0b      	cmp	r3, #11
 8001d06:	d807      	bhi.n	8001d18 <_Z12Handle_Clockv+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d0c:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <_Z12Handle_Clockv+0x30>)
 8001d0e:	f002 f945 	bl	8003f9c <HAL_GPIO_TogglePin>
		i = 0;
 8001d12:	4b02      	ldr	r3, [pc, #8]	@ (8001d1c <_Z12Handle_Clockv+0x2c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000028 	.word	0x20000028
 8001d20:	48000800 	.word	0x48000800

08001d24 <_Z12Handle_Startv>:

void Handle_Start() {
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	i = 0;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <_Z12Handle_Startv+0x14>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_SET);
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	20000028 	.word	0x20000028

08001d3c <_Z11Handle_Stopv>:
void Handle_Stop() {
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_RESET);
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <ADSR_Init>:

#include "adsr.h"
//#include "MIDI.h"

// Initializes an individual ADSR instance
void ADSR_Init(ADSR_t *adsr) {
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
//    adsr->decay_rate = 0.001f;
//    adsr->sustain_level = 0.8f;
//    adsr->release_rate = 0.001f;
//    adsr->gate_signal = 0;
//    adsr->amplitude = 1.0f;      // Default amplitude is 1.0 (full volume)
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <ADSR_UpdateEnvelope>:

// Updates the envelope for a specific ADSR instance
void ADSR_UpdateEnvelope(ADSR_t *adsr) {
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    switch (adsr->state) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7e1b      	ldrb	r3, [r3, #24]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d871      	bhi.n	8001e56 <ADSR_UpdateEnvelope+0xf6>
 8001d72:	a201      	add	r2, pc, #4	@ (adr r2, 8001d78 <ADSR_UpdateEnvelope+0x18>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d8d 	.word	0x08001d8d
 8001d7c:	08001dc9 	.word	0x08001dc9
 8001d80:	08001e07 	.word	0x08001e07
 8001d84:	08001e19 	.word	0x08001e19
 8001d88:	08001e51 	.word	0x08001e51
        case ATTACK:
            adsr->envelope_value += adsr->attack_rate;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value >= 1.0f) {
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001da8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	da00      	bge.n	8001db8 <ADSR_UpdateEnvelope+0x58>
                adsr->envelope_value = 1.0f;
                adsr->state = DECAY;
            }
            break;
 8001db6:	e04e      	b.n	8001e56 <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 1.0f;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001dbe:	615a      	str	r2, [r3, #20]
                adsr->state = DECAY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	761a      	strb	r2, [r3, #24]
            break;
 8001dc6:	e046      	b.n	8001e56 <ADSR_UpdateEnvelope+0xf6>

        case DECAY:
            adsr->envelope_value -= adsr->decay_rate;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= adsr->sustain_level) {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d900      	bls.n	8001df6 <ADSR_UpdateEnvelope+0x96>
                adsr->envelope_value = adsr->sustain_level;
                adsr->state = SUSTAIN;
            }
            break;
 8001df4:	e02f      	b.n	8001e56 <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = adsr->sustain_level;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	615a      	str	r2, [r3, #20]
                adsr->state = SUSTAIN;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	761a      	strb	r2, [r3, #24]
            break;
 8001e04:	e027      	b.n	8001e56 <ADSR_UpdateEnvelope+0xf6>

        case SUSTAIN:
            if (!adsr->gate_signal) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e5b      	ldrb	r3, [r3, #25]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d121      	bne.n	8001e54 <ADSR_UpdateEnvelope+0xf4>
                adsr->state = RELEASE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	761a      	strb	r2, [r3, #24]
            }
            break;
 8001e16:	e01d      	b.n	8001e54 <ADSR_UpdateEnvelope+0xf4>

        case RELEASE:
            adsr->envelope_value -= adsr->release_rate;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= 0.0f) {
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	d900      	bls.n	8001e40 <ADSR_UpdateEnvelope+0xe0>
                adsr->envelope_value = 0.0f;
                adsr->state = IDLE;
            }
            break;
 8001e3e:	e00a      	b.n	8001e56 <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 0.0f;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
                adsr->state = IDLE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	761a      	strb	r2, [r3, #24]
            break;
 8001e4e:	e002      	b.n	8001e56 <ADSR_UpdateEnvelope+0xf6>

        case IDLE:
            // Do nothing
            break;
 8001e50:	bf00      	nop
 8001e52:	e000      	b.n	8001e56 <ADSR_UpdateEnvelope+0xf6>
            break;
 8001e54:	bf00      	nop
    }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop

08001e64 <ADSR_SetGateSignal>:

// Sets the gate signal for a specific ADSR instance
void ADSR_SetGateSignal(ADSR_t *adsr, uint8_t gate_signal_value) {
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
    adsr->gate_signal = gate_signal_value;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	765a      	strb	r2, [r3, #25]
    if (adsr->gate_signal) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7e5b      	ldrb	r3, [r3, #25]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <ADSR_SetGateSignal+0x24>
        adsr->state = ATTACK;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	761a      	strb	r2, [r3, #24]
    } else {
        adsr->state = RELEASE;
    }
}
 8001e86:	e002      	b.n	8001e8e <ADSR_SetGateSignal+0x2a>
        adsr->state = RELEASE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	761a      	strb	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <ADSR_GetEnvelopeValue>:
    }
    adsr->amplitude = amplitude;
}

// Returns the envelope value (scaled by the amplitude) for a specific ADSR instance
float ADSR_GetEnvelopeValue(const ADSR_t *adsr) {
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
    return adsr->envelope_value * adsr->amplitude;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_Z8setupPWMm>:


//	HAL_TIM_Base_Start_IT(&htim16);
    // Additional configuration code

void setupPWM(uint32_t frequency) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    uint32_t period = (SystemCoreClock / frequency) - 1;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <_Z8setupPWMm+0x4c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]

    // Update the timer period
    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <_Z8setupPWMm+0x50>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ede:	4a0c      	ldr	r2, [pc, #48]	@ (8001f10 <_Z8setupPWMm+0x50>)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, period / 2); // 50% duty cycle
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <_Z8setupPWMm+0x50>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	0852      	lsrs	r2, r2, #1
 8001eec:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset counter
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <_Z8setupPWMm+0x50>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24

    // Start PWM if not already started
    if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK) {
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <_Z8setupPWMm+0x50>)
 8001efa:	f004 fc17 	bl	800672c <HAL_TIM_PWM_Start>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
        // PWM start error handling
    }
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000160 	.word	0x20000160

08001f14 <_Z21envelope_to_dac_valuef>:

// Convert envelope value (0.0 - 1.0) to DAC value (0 - 4095)
uint32_t envelope_to_dac_value(float envelope_value) {
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(envelope_value * 4095.0f);
 8001f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f22:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001f40 <_Z21envelope_to_dac_valuef+0x2c>
 8001f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2e:	ee17 3a90 	vmov	r3, s15
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	457ff000 	.word	0x457ff000

08001f44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
//    if (htim->Instance == TIM13) {
//        update_adsr_flag = true;  // Set the flag to update ADSR parameters
// //       oled("ADSR Flag = TRUE");
//    }

    if (htim->Instance == TIM7) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1e      	ldr	r2, [pc, #120]	@ (8001fcc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d136      	bne.n	8001fc4 <HAL_TIM_PeriodElapsedCallback+0x80>
        // Update each ADSR envelope
        for (int i = 0; i < NUM_ENVELOPES; i++) {
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e030      	b.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x7a>
            ADSR_UpdateEnvelope(&envelopes[i]);
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fef8 	bl	8001d60 <ADSR_UpdateEnvelope>

            // Output each envelope value to a DAC channel

            uint32_t dac_value = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[i]));
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4a15      	ldr	r2, [pc, #84]	@ (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff8b 	bl	8001e9a <ADSR_GetEnvelopeValue>
 8001f84:	eef0 7a40 	vmov.f32	s15, s0
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	f7ff ffc2 	bl	8001f14 <_Z21envelope_to_dac_valuef>
 8001f90:	60b8      	str	r0, [r7, #8]
            if (i == 0) {
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d106      	bne.n	8001fa6 <HAL_TIM_PeriodElapsedCallback+0x62>
                // Output to DAC Channel 1
                HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001fa0:	f001 fd31 	bl	8003a06 <HAL_DAC_SetValue>
 8001fa4:	e008      	b.n	8001fb8 <HAL_TIM_PeriodElapsedCallback+0x74>
            } else if (i == 1) {
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_TIM_PeriodElapsedCallback+0x74>
                // Output to DAC Channel 2 (if available)
                HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001fb4:	f001 fd27 	bl	8003a06 <HAL_DAC_SetValue>
        for (int i = 0; i < NUM_ENVELOPES; i++) {
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	ddcb      	ble.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x18>
        }
    }
    if (htim->Instance == TIM2) {
        // Handle TIM2 period elapsed interrupt
    }
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40001400 	.word	0x40001400
 8001fd0:	200002d8 	.word	0x200002d8
 8001fd4:	2000002c 	.word	0x2000002c

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b08f      	sub	sp, #60	@ 0x3c
 8001fdc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char tekstas[] = "LOST MY SHIT";
 8001fde:	4b7a      	ldr	r3, [pc, #488]	@ (80021c8 <main+0x1f0>)
 8001fe0:	f107 041c 	add.w	r4, r7, #28
 8001fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe6:	c407      	stmia	r4!, {r0, r1, r2}
 8001fe8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fea:	f001 fb4f 	bl	800368c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fee:	f000 f90f 	bl	8002210 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff2:	f000 fbd5 	bl	80027a0 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001ff6:	f000 fb9f 	bl	8002738 <_ZL19MX_USART1_UART_Initv>
  MX_DAC1_Init();
 8001ffa:	f000 f979 	bl	80022f0 <_ZL12MX_DAC1_Initv>
  MX_DAC2_Init();
 8001ffe:	f000 f9bb 	bl	8002378 <_ZL12MX_DAC2_Initv>
  MX_SPI2_Init();
 8002002:	f000 fa89 	bl	8002518 <_ZL12MX_SPI2_Initv>
  MX_I2C1_Init();
 8002006:	f000 f9eb 	bl	80023e0 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 800200a:	f000 fa37 	bl	800247c <_ZL12MX_I2C2_Initv>
  MX_TIM7_Init();
 800200e:	f000 fb2b 	bl	8002668 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 8002012:	f000 fb69 	bl	80026e8 <_ZL13MX_TIM13_Initv>
  MX_TIM2_Init();
 8002016:	f000 fac1 	bl	800259c <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
	Port.begin(1, &huart1, &huart1);
 800201a:	4b6c      	ldr	r3, [pc, #432]	@ (80021cc <main+0x1f4>)
 800201c:	4a6b      	ldr	r2, [pc, #428]	@ (80021cc <main+0x1f4>)
 800201e:	2101      	movs	r1, #1
 8002020:	486b      	ldr	r0, [pc, #428]	@ (80021d0 <main+0x1f8>)
 8002022:	f7fe fdc8 	bl	8000bb6 <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>

	Port.setHandleClock(Handle_Clock);
 8002026:	496b      	ldr	r1, [pc, #428]	@ (80021d4 <main+0x1fc>)
 8002028:	4869      	ldr	r0, [pc, #420]	@ (80021d0 <main+0x1f8>)
 800202a:	f7ff fb0c 	bl	8001646 <_ZN13MidiInterface14setHandleClockEPFvvE>
	Port.setHandleStart(Handle_Start);
 800202e:	496a      	ldr	r1, [pc, #424]	@ (80021d8 <main+0x200>)
 8002030:	4867      	ldr	r0, [pc, #412]	@ (80021d0 <main+0x1f8>)
 8002032:	f7ff fb16 	bl	8001662 <_ZN13MidiInterface14setHandleStartEPFvvE>
	Port.setHandleStop(Handle_Stop);
 8002036:	4969      	ldr	r1, [pc, #420]	@ (80021dc <main+0x204>)
 8002038:	4865      	ldr	r0, [pc, #404]	@ (80021d0 <main+0x1f8>)
 800203a:	f7ff fb20 	bl	800167e <_ZN13MidiInterface13setHandleStopEPFvvE>
	Port.setHandleNoteOn(Handle_NoteOn);
 800203e:	4968      	ldr	r1, [pc, #416]	@ (80021e0 <main+0x208>)
 8002040:	4863      	ldr	r0, [pc, #396]	@ (80021d0 <main+0x1f8>)
 8002042:	f7ff fae4 	bl	800160e <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>
	Port.setHandleNoteOff(Handle_NoteOff);
 8002046:	4967      	ldr	r1, [pc, #412]	@ (80021e4 <main+0x20c>)
 8002048:	4861      	ldr	r0, [pc, #388]	@ (80021d0 <main+0x1f8>)
 800204a:	f7ff fad2 	bl	80015f2 <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>
//	Port.setHandleControlChange(Handle_CC);
//	Port.setHandleControlChange(Handle_CC16);
	Port.setHandleControlChange(ADSR_HandleCC);
 800204e:	4966      	ldr	r1, [pc, #408]	@ (80021e8 <main+0x210>)
 8002050:	485f      	ldr	r0, [pc, #380]	@ (80021d0 <main+0x1f8>)
 8002052:	f7ff faea 	bl	800162a <_ZN13MidiInterface22setHandleControlChangeEPFvhhhE>

//	 printf("Great Succes!\n\r");

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002056:	2100      	movs	r1, #0
 8002058:	4864      	ldr	r0, [pc, #400]	@ (80021ec <main+0x214>)
 800205a:	f001 fcf9 	bl	8003a50 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800205e:	2110      	movs	r1, #16
 8002060:	4862      	ldr	r0, [pc, #392]	@ (80021ec <main+0x214>)
 8002062:	f001 fcf5 	bl	8003a50 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8002066:	2100      	movs	r1, #0
 8002068:	4861      	ldr	r0, [pc, #388]	@ (80021f0 <main+0x218>)
 800206a:	f001 fcf1 	bl	8003a50 <HAL_DAC_Start>
    HAL_SPI_Init(&hspi2);
 800206e:	4861      	ldr	r0, [pc, #388]	@ (80021f4 <main+0x21c>)
 8002070:	f004 f836 	bl	80060e0 <HAL_SPI_Init>

    ChannelConfig config;
    ChannelConfig_2 config2;
    dac_init(&config, &config2);
 8002074:	1d3a      	adds	r2, r7, #4
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fdb9 	bl	8002bf4 <dac_init>

    ssd1306_Init();
 8002082:	f000 fe1f 	bl	8002cc4 <ssd1306_Init>
    ssd1306_SetCursor(5, 50);
 8002086:	2132      	movs	r1, #50	@ 0x32
 8002088:	2005      	movs	r0, #5
 800208a:	f000 ffcf 	bl	800302c <ssd1306_SetCursor>
    ssd1306_WriteString(tekstas, Font_7x10, White);
 800208e:	4b5a      	ldr	r3, [pc, #360]	@ (80021f8 <main+0x220>)
 8002090:	f107 001c 	add.w	r0, r7, #28
 8002094:	2201      	movs	r2, #1
 8002096:	9200      	str	r2, [sp, #0]
 8002098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209a:	f000 ffa1 	bl	8002fe0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800209e:	f000 fe93 	bl	8002dc8 <ssd1306_UpdateScreen>

    HAL_TIM_Base_Start_IT(&htim7);
 80020a2:	4856      	ldr	r0, [pc, #344]	@ (80021fc <main+0x224>)
 80020a4:	f004 fa8a 	bl	80065bc <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim13);
 80020a8:	4855      	ldr	r0, [pc, #340]	@ (8002200 <main+0x228>)
 80020aa:	f004 fa87 	bl	80065bc <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2);
 80020ae:	4855      	ldr	r0, [pc, #340]	@ (8002204 <main+0x22c>)
 80020b0:	f004 fa24 	bl	80064fc <HAL_TIM_Base_Start>

    // Initialize each ADSR envelope and set the default MIDI values
    for (int i = 0; i < NUM_ENVELOPES; i++) {
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020b8:	e07d      	b.n	80021b6 <main+0x1de>
        ADSR_Init(&envelopes[i]);
 80020ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4a50      	ldr	r2, [pc, #320]	@ (8002208 <main+0x230>)
 80020c6:	4413      	add	r3, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fe3e 	bl	8001d4a <ADSR_Init>

        // Initialize CC values to some default values (you can use defaults or assume MIDI will update)
        cc_values[i].attack_value = 64;  // Default to a middle value for attack, you can choose another default
 80020ce:	494f      	ldr	r1, [pc, #316]	@ (800220c <main+0x234>)
 80020d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	440b      	add	r3, r1
 80020da:	2240      	movs	r2, #64	@ 0x40
 80020dc:	701a      	strb	r2, [r3, #0]
        cc_values[i].decay_value = 64;
 80020de:	494b      	ldr	r1, [pc, #300]	@ (800220c <main+0x234>)
 80020e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	3301      	adds	r3, #1
 80020ec:	2240      	movs	r2, #64	@ 0x40
 80020ee:	701a      	strb	r2, [r3, #0]
        cc_values[i].sustain_value = 64;
 80020f0:	4946      	ldr	r1, [pc, #280]	@ (800220c <main+0x234>)
 80020f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	3302      	adds	r3, #2
 80020fe:	2240      	movs	r2, #64	@ 0x40
 8002100:	701a      	strb	r2, [r3, #0]
        cc_values[i].release_value = 64;
 8002102:	4942      	ldr	r1, [pc, #264]	@ (800220c <main+0x234>)
 8002104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	440b      	add	r3, r1
 800210e:	3303      	adds	r3, #3
 8002110:	2240      	movs	r2, #64	@ 0x40
 8002112:	701a      	strb	r2, [r3, #0]
        cc_values[i].amplitude_value = 127;  // Max volume by default
 8002114:	493d      	ldr	r1, [pc, #244]	@ (800220c <main+0x234>)
 8002116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	440b      	add	r3, r1
 8002120:	3304      	adds	r3, #4
 8002122:	227f      	movs	r2, #127	@ 0x7f
 8002124:	701a      	strb	r2, [r3, #0]

        // Apply the stored MIDI values to initialize ADSR settings
        ADSR_HandleCC(i, ATTACK_CC, cc_values[i].attack_value);
 8002126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002128:	b2d8      	uxtb	r0, r3
 800212a:	4938      	ldr	r1, [pc, #224]	@ (800220c <main+0x234>)
 800212c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	440b      	add	r3, r1
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	214a      	movs	r1, #74	@ 0x4a
 800213c:	f000 fc82 	bl	8002a44 <_Z13ADSR_HandleCChhh>
        ADSR_HandleCC(i, DECAY_CC, cc_values[i].decay_value);
 8002140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002142:	b2d8      	uxtb	r0, r3
 8002144:	4931      	ldr	r1, [pc, #196]	@ (800220c <main+0x234>)
 8002146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	440b      	add	r3, r1
 8002150:	3301      	adds	r3, #1
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	2147      	movs	r1, #71	@ 0x47
 8002158:	f000 fc74 	bl	8002a44 <_Z13ADSR_HandleCChhh>
        ADSR_HandleCC(i, SUSTAIN_CC, cc_values[i].sustain_value);
 800215c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215e:	b2d8      	uxtb	r0, r3
 8002160:	492a      	ldr	r1, [pc, #168]	@ (800220c <main+0x234>)
 8002162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	440b      	add	r3, r1
 800216c:	3302      	adds	r3, #2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	2148      	movs	r1, #72	@ 0x48
 8002174:	f000 fc66 	bl	8002a44 <_Z13ADSR_HandleCChhh>
        ADSR_HandleCC(i, RELEASE_CC, cc_values[i].release_value);
 8002178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217a:	b2d8      	uxtb	r0, r3
 800217c:	4923      	ldr	r1, [pc, #140]	@ (800220c <main+0x234>)
 800217e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	440b      	add	r3, r1
 8002188:	3303      	adds	r3, #3
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	2149      	movs	r1, #73	@ 0x49
 8002190:	f000 fc58 	bl	8002a44 <_Z13ADSR_HandleCChhh>
        ADSR_HandleCC(i, AMPLITUDE_CC, cc_values[i].amplitude_value);
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	491c      	ldr	r1, [pc, #112]	@ (800220c <main+0x234>)
 800219a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	3304      	adds	r3, #4
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	2107      	movs	r1, #7
 80021ac:	f000 fc4a 	bl	8002a44 <_Z13ADSR_HandleCChhh>
    for (int i = 0; i < NUM_ENVELOPES; i++) {
 80021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b2:	3301      	adds	r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	f77f af7e 	ble.w	80020ba <main+0xe2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Port.read();
 80021be:	4804      	ldr	r0, [pc, #16]	@ (80021d0 <main+0x1f8>)
 80021c0:	f7fe fea6 	bl	8000f10 <_ZN13MidiInterface4readEv>
 80021c4:	e7fb      	b.n	80021be <main+0x1e6>
 80021c6:	bf00      	nop
 80021c8:	08008340 	.word	0x08008340
 80021cc:	20000244 	.word	0x20000244
 80021d0:	2000031c 	.word	0x2000031c
 80021d4:	08001cf1 	.word	0x08001cf1
 80021d8:	08001d25 	.word	0x08001d25
 80021dc:	08001d3d 	.word	0x08001d3d
 80021e0:	08002899 	.word	0x08002899
 80021e4:	080029e1 	.word	0x080029e1
 80021e8:	08002a45 	.word	0x08002a45
 80021ec:	2000002c 	.word	0x2000002c
 80021f0:	20000040 	.word	0x20000040
 80021f4:	200000fc 	.word	0x200000fc
 80021f8:	08008ebc 	.word	0x08008ebc
 80021fc:	200001ac 	.word	0x200001ac
 8002200:	200001f8 	.word	0x200001f8
 8002204:	20000160 	.word	0x20000160
 8002208:	200002d8 	.word	0x200002d8
 800220c:	20000310 	.word	0x20000310

08002210 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b09a      	sub	sp, #104	@ 0x68
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800221a:	2228      	movs	r2, #40	@ 0x28
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f006 f847 	bl	80082b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002234:	463b      	mov	r3, r7
 8002236:	222c      	movs	r2, #44	@ 0x2c
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f006 f839 	bl	80082b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002240:	2303      	movs	r3, #3
 8002242:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002248:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800224e:	2301      	movs	r3, #1
 8002250:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002252:	2310      	movs	r3, #16
 8002254:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002256:	2302      	movs	r3, #2
 8002258:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800225a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800225e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002260:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002264:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002266:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fb66 	bl	800493c <HAL_RCC_OscConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8002280:	f000 fc80 	bl	8002b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002284:	230f      	movs	r3, #15
 8002286:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002288:	2302      	movs	r3, #2
 800228a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002290:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002294:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002296:	2300      	movs	r3, #0
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800229a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800229e:	2102      	movs	r1, #2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fb89 	bl	80059b8 <HAL_RCC_ClockConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80022b6:	f000 fc65 	bl	8002b84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80022ba:	2361      	movs	r3, #97	@ 0x61
 80022bc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80022be:	2301      	movs	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ca:	463b      	mov	r3, r7
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fd93 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80022e2:	f000 fc4f 	bl	8002b84 <Error_Handler>
  }
}
 80022e6:	bf00      	nop
 80022e8:	3768      	adds	r7, #104	@ 0x68
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002300:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <_ZL12MX_DAC1_Initv+0x80>)
 8002302:	4a1c      	ldr	r2, [pc, #112]	@ (8002374 <_ZL12MX_DAC1_Initv+0x84>)
 8002304:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002306:	481a      	ldr	r0, [pc, #104]	@ (8002370 <_ZL12MX_DAC1_Initv+0x80>)
 8002308:	f001 fb5b 	bl	80039c2 <HAL_DAC_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <_ZL12MX_DAC1_Initv+0x30>
  {
    Error_Handler();
 800231c:	f000 fc32 	bl	8002b84 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	2200      	movs	r2, #0
 800232c:	4619      	mov	r1, r3
 800232e:	4810      	ldr	r0, [pc, #64]	@ (8002370 <_ZL12MX_DAC1_Initv+0x80>)
 8002330:	f001 fbd9 	bl	8003ae6 <HAL_DAC_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <_ZL12MX_DAC1_Initv+0x58>
  {
    Error_Handler();
 8002344:	f000 fc1e 	bl	8002b84 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	2210      	movs	r2, #16
 800234c:	4619      	mov	r1, r3
 800234e:	4808      	ldr	r0, [pc, #32]	@ (8002370 <_ZL12MX_DAC1_Initv+0x80>)
 8002350:	f001 fbc9 	bl	8003ae6 <HAL_DAC_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <_ZL12MX_DAC1_Initv+0x78>
  {
    Error_Handler();
 8002364:	f000 fc0e 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000002c 	.word	0x2000002c
 8002374:	40007400 	.word	0x40007400

08002378 <_ZL12MX_DAC2_Initv>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8002388:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <_ZL12MX_DAC2_Initv+0x60>)
 800238a:	4a14      	ldr	r2, [pc, #80]	@ (80023dc <_ZL12MX_DAC2_Initv+0x64>)
 800238c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800238e:	4812      	ldr	r0, [pc, #72]	@ (80023d8 <_ZL12MX_DAC2_Initv+0x60>)
 8002390:	f001 fb17 	bl	80039c2 <HAL_DAC_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <_ZL12MX_DAC2_Initv+0x30>
  {
    Error_Handler();
 80023a4:	f000 fbee 	bl	8002b84 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	4619      	mov	r1, r3
 80023b6:	4808      	ldr	r0, [pc, #32]	@ (80023d8 <_ZL12MX_DAC2_Initv+0x60>)
 80023b8:	f001 fb95 	bl	8003ae6 <HAL_DAC_ConfigChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf14      	ite	ne
 80023c2:	2301      	movne	r3, #1
 80023c4:	2300      	moveq	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <_ZL12MX_DAC2_Initv+0x58>
  {
    Error_Handler();
 80023cc:	f000 fbda 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000040 	.word	0x20000040
 80023dc:	40009800 	.word	0x40009800

080023e0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 80023e6:	4a23      	ldr	r2, [pc, #140]	@ (8002474 <_ZL12MX_I2C1_Initv+0x94>)
 80023e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80023ea:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 80023ec:	4a22      	ldr	r2, [pc, #136]	@ (8002478 <_ZL12MX_I2C1_Initv+0x98>)
 80023ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002402:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800240e:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800241a:	4815      	ldr	r0, [pc, #84]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 800241c:	f001 fdd8 	bl	8003fd0 <HAL_I2C_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8002430:	f000 fba8 	bl	8002b84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002434:	2100      	movs	r1, #0
 8002436:	480e      	ldr	r0, [pc, #56]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 8002438:	f002 f9e8 	bl	800480c <HAL_I2CEx_ConfigAnalogFilter>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800244c:	f000 fb9a 	bl	8002b84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002450:	2100      	movs	r1, #0
 8002452:	4807      	ldr	r0, [pc, #28]	@ (8002470 <_ZL12MX_I2C1_Initv+0x90>)
 8002454:	f002 fa25 	bl	80048a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002468:	f000 fb8c 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000054 	.word	0x20000054
 8002474:	40005400 	.word	0x40005400
 8002478:	00201d2b 	.word	0x00201d2b

0800247c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002480:	4b22      	ldr	r3, [pc, #136]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 8002482:	4a23      	ldr	r2, [pc, #140]	@ (8002510 <_ZL12MX_I2C2_Initv+0x94>)
 8002484:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010020A;
 8002486:	4b21      	ldr	r3, [pc, #132]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 8002488:	4a22      	ldr	r2, [pc, #136]	@ (8002514 <_ZL12MX_I2C2_Initv+0x98>)
 800248a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800248c:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002492:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 8002494:	2201      	movs	r2, #1
 8002496:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002498:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800249e:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024aa:	4b18      	ldr	r3, [pc, #96]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b0:	4b16      	ldr	r3, [pc, #88]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024b6:	4815      	ldr	r0, [pc, #84]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 80024b8:	f001 fd8a 	bl	8003fd0 <HAL_I2C_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 80024cc:	f000 fb5a 	bl	8002b84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024d0:	2100      	movs	r1, #0
 80024d2:	480e      	ldr	r0, [pc, #56]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 80024d4:	f002 f99a 	bl	800480c <HAL_I2CEx_ConfigAnalogFilter>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 80024e8:	f000 fb4c 	bl	8002b84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024ec:	2100      	movs	r1, #0
 80024ee:	4807      	ldr	r0, [pc, #28]	@ (800250c <_ZL12MX_I2C2_Initv+0x90>)
 80024f0:	f002 f9d7 	bl	80048a2 <HAL_I2CEx_ConfigDigitalFilter>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8002504:	f000 fb3e 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200000a8 	.word	0x200000a8
 8002510:	40005800 	.word	0x40005800
 8002514:	0010020a 	.word	0x0010020a

08002518 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 800251e:	4a1e      	ldr	r2, [pc, #120]	@ (8002598 <_ZL12MX_SPI2_Initv+0x80>)
 8002520:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002524:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002528:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002530:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002532:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002536:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002538:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 800253a:	2202      	movs	r2, #2
 800253c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800254a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002560:	2200      	movs	r2, #0
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002566:	2207      	movs	r2, #7
 8002568:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800256a:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002572:	2208      	movs	r2, #8
 8002574:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002576:	4807      	ldr	r0, [pc, #28]	@ (8002594 <_ZL12MX_SPI2_Initv+0x7c>)
 8002578:	f003 fdb2 	bl	80060e0 <HAL_SPI_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800258c:	f000 fafa 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200000fc 	.word	0x200000fc
 8002598:	40003800 	.word	0x40003800

0800259c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	@ 0x28
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a2:	f107 0320 	add.w	r3, r7, #32
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	611a      	str	r2, [r3, #16]
 80025ba:	615a      	str	r2, [r3, #20]
 80025bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025be:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 80025c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025de:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025e4:	481f      	ldr	r0, [pc, #124]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 80025e6:	f004 f851 	bl	800668c <HAL_TIM_PWM_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf14      	ite	ne
 80025f0:	2301      	movne	r3, #1
 80025f2:	2300      	moveq	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 80025fa:	f000 fac3 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002606:	f107 0320 	add.w	r3, r7, #32
 800260a:	4619      	mov	r1, r3
 800260c:	4815      	ldr	r0, [pc, #84]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 800260e:	f004 fd55 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8002622:	f000 faaf 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002626:	2360      	movs	r3, #96	@ 0x60
 8002628:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	2200      	movs	r2, #0
 800263a:	4619      	mov	r1, r3
 800263c:	4809      	ldr	r0, [pc, #36]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 800263e:	f004 fa2f 	bl	8006aa0 <HAL_TIM_PWM_ConfigChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 8002652:	f000 fa97 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002656:	4803      	ldr	r0, [pc, #12]	@ (8002664 <_ZL12MX_TIM2_Initv+0xc8>)
 8002658:	f000 ff04 	bl	8003464 <HAL_TIM_MspPostInit>

}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	@ 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000160 	.word	0x20000160

08002668 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266e:	463b      	mov	r3, r7
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002676:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <_ZL12MX_TIM7_Initv+0x78>)
 8002678:	4a1a      	ldr	r2, [pc, #104]	@ (80026e4 <_ZL12MX_TIM7_Initv+0x7c>)
 800267a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 800267c:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <_ZL12MX_TIM7_Initv+0x78>)
 800267e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002682:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <_ZL12MX_TIM7_Initv+0x78>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <_ZL12MX_TIM7_Initv+0x78>)
 800268c:	2201      	movs	r2, #1
 800268e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <_ZL12MX_TIM7_Initv+0x78>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002696:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <_ZL12MX_TIM7_Initv+0x78>)
 8002698:	f003 fee1 	bl	800645e <HAL_TIM_Base_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 80026ac:	f000 fa6a 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80026b8:	463b      	mov	r3, r7
 80026ba:	4619      	mov	r1, r3
 80026bc:	4808      	ldr	r0, [pc, #32]	@ (80026e0 <_ZL12MX_TIM7_Initv+0x78>)
 80026be:	f004 fcfd 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 80026d2:	f000 fa57 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200001ac 	.word	0x200001ac
 80026e4:	40001400 	.word	0x40001400

080026e8 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80026ec:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <_ZL13MX_TIM13_Initv+0x48>)
 80026ee:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <_ZL13MX_TIM13_Initv+0x4c>)
 80026f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 7199;
 80026f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <_ZL13MX_TIM13_Initv+0x48>)
 80026f4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80026f8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <_ZL13MX_TIM13_Initv+0x48>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <_ZL13MX_TIM13_Initv+0x48>)
 8002702:	2264      	movs	r2, #100	@ 0x64
 8002704:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <_ZL13MX_TIM13_Initv+0x48>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <_ZL13MX_TIM13_Initv+0x48>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002712:	4807      	ldr	r0, [pc, #28]	@ (8002730 <_ZL13MX_TIM13_Initv+0x48>)
 8002714:	f003 fea3 	bl	800645e <HAL_TIM_Base_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 8002728:	f000 fa2c 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200001f8 	.word	0x200001f8
 8002734:	40001c00 	.word	0x40001c00

08002738 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800273c:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800273e:	4a17      	ldr	r2, [pc, #92]	@ (800279c <_ZL19MX_USART1_UART_Initv+0x64>)
 8002740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002744:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8002748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b11      	ldr	r3, [pc, #68]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800275c:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800275e:	2204      	movs	r2, #4
 8002760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276e:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800277a:	4807      	ldr	r0, [pc, #28]	@ (8002798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800277c:	f004 fd26 	bl	80071cc <HAL_UART_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	bf14      	ite	ne
 8002786:	2301      	movne	r3, #1
 8002788:	2300      	moveq	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002790:	f000 f9f8 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000244 	.word	0x20000244
 800279c:	40013800 	.word	0x40013800

080027a0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b6:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4a33      	ldr	r2, [pc, #204]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80027c0:	6153      	str	r3, [r2, #20]
 80027c2:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027d8:	6153      	str	r3, [r2, #20]
 80027da:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4a27      	ldr	r2, [pc, #156]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f0:	6153      	str	r3, [r2, #20]
 80027f2:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4a21      	ldr	r2, [pc, #132]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 8002804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002808:	6153      	str	r3, [r2, #20]
 800280a:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002816:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4a1b      	ldr	r2, [pc, #108]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002820:	6153      	str	r3, [r2, #20]
 8002822:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <_ZL12MX_GPIO_Initv+0xe8>)
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800282e:	2200      	movs	r2, #0
 8002830:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002834:	4815      	ldr	r0, [pc, #84]	@ (800288c <_ZL12MX_GPIO_Initv+0xec>)
 8002836:	f001 fb99 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, gate1_Pin|gate2_Pin|gate3_Pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	2107      	movs	r1, #7
 800283e:	4814      	ldr	r0, [pc, #80]	@ (8002890 <_ZL12MX_GPIO_Initv+0xf0>)
 8002840:	f001 fb94 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284a:	2301      	movs	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	480b      	ldr	r0, [pc, #44]	@ (800288c <_ZL12MX_GPIO_Initv+0xec>)
 800285e:	f001 fa0b 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : gate1_Pin gate2_Pin gate3_Pin */
  GPIO_InitStruct.Pin = gate1_Pin|gate2_Pin|gate3_Pin;
 8002862:	2307      	movs	r3, #7
 8002864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	2301      	movs	r3, #1
 8002868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	4805      	ldr	r0, [pc, #20]	@ (8002890 <_ZL12MX_GPIO_Initv+0xf0>)
 800287a:	f001 f9fd 	bl	8003c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800287e:	bf00      	nop
 8002880:	3728      	adds	r7, #40	@ 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	48000800 	.word	0x48000800
 8002890:	48000400 	.word	0x48000400
 8002894:	00000000 	.word	0x00000000

08002898 <_Z13Handle_NoteOnhhh>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	__NOP();
}


void Handle_NoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
 80028a2:	460b      	mov	r3, r1
 80028a4:	71bb      	strb	r3, [r7, #6]
 80028a6:	4613      	mov	r3, r2
 80028a8:	717b      	strb	r3, [r7, #5]
    uint32_t pitch_CV = (uint32_t)((note * 0.0833333333 * X) / (3.3 / 4096));  // Calculate pitch CV from MIDI note
 80028aa:	79bb      	ldrb	r3, [r7, #6]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fddd 	bl	800046c <__aeabi_i2d>
 80028b2:	a349      	add	r3, pc, #292	@ (adr r3, 80029d8 <_Z13Handle_NoteOnhhh+0x140>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fd fe42 	bl	8000540 <__aeabi_dmul>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	4b3b      	ldr	r3, [pc, #236]	@ (80029b8 <_Z13Handle_NoteOnhhh+0x120>)
 80028ca:	f7fd fe39 	bl	8000540 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	a332      	add	r3, pc, #200	@ (adr r3, 80029a0 <_Z13Handle_NoteOnhhh+0x108>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd ff5a 	bl	8000794 <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f83c 	bl	8000964 <__aeabi_d2uiz>
 80028ec:	4603      	mov	r3, r0
 80028ee:	61fb      	str	r3, [r7, #28]
    uint32_t velo_CV = (uint32_t)((velocity / 127.0) * 65535);
 80028f0:	797b      	ldrb	r3, [r7, #5]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fdba 	bl	800046c <__aeabi_i2d>
 80028f8:	a32b      	add	r3, pc, #172	@ (adr r3, 80029a8 <_Z13Handle_NoteOnhhh+0x110>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd ff49 	bl	8000794 <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	a329      	add	r3, pc, #164	@ (adr r3, 80029b0 <_Z13Handle_NoteOnhhh+0x118>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe16 	bl	8000540 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f822 	bl	8000964 <__aeabi_d2uiz>
 8002920:	4603      	mov	r3, r0
 8002922:	61bb      	str	r3, [r7, #24]




    // If no notes are currently active, send the first note to DAC_CHANNEL_1
    if (!first_note_active) {
 8002924:	4b25      	ldr	r3, [pc, #148]	@ (80029bc <_Z13Handle_NoteOnhhh+0x124>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f083 0301 	eor.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01d      	beq.n	800296e <_Z13Handle_NoteOnhhh+0xd6>
        pitch1_CV = pitch_CV;
 8002932:	4a23      	ldr	r2, [pc, #140]	@ (80029c0 <_Z13Handle_NoteOnhhh+0x128>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	6013      	str	r3, [r2, #0]


            // Calculate frequency from MIDI note
        float frequency = midi2freq[note];
 8002938:	79bb      	ldrb	r3, [r7, #6]
 800293a:	4a22      	ldr	r2, [pc, #136]	@ (80029c4 <_Z13Handle_NoteOnhhh+0x12c>)
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	617b      	str	r3, [r7, #20]
        setupPWM((uint32_t)frequency);
 8002944:	edd7 7a05 	vldr	s15, [r7, #20]
 8002948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294c:	ee17 0a90 	vmov	r0, s15
 8002950:	f7ff fab6 	bl	8001ec0 <_Z8setupPWMm>



        ADSR_SetGateSignal(&envelopes[0], 1);
 8002954:	2101      	movs	r1, #1
 8002956:	481c      	ldr	r0, [pc, #112]	@ (80029c8 <_Z13Handle_NoteOnhhh+0x130>)
 8002958:	f7ff fa84 	bl	8001e64 <ADSR_SetGateSignal>

//        if (dac.ready()) {
//         dac.Write((uint16_t)pitch1_CV, 30000);
        // Also output the same value to DAC_CHANNEL_2 as default
//        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pitch1_CV);
        HAL_GPIO_WritePin(GPIOB, gate3_Pin, GPIO_PIN_SET);  // Indicate first note is on via gate3_Pin
 800295c:	2201      	movs	r2, #1
 800295e:	2104      	movs	r1, #4
 8002960:	481a      	ldr	r0, [pc, #104]	@ (80029cc <_Z13Handle_NoteOnhhh+0x134>)
 8002962:	f001 fb03 	bl	8003f6c <HAL_GPIO_WritePin>
        first_note_active = true;  // First note is now active
 8002966:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <_Z13Handle_NoteOnhhh+0x124>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
        pitch2_CV = pitch_CV;
//        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pitch2_CV);
        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_SET);  // Indicate second note is on via gate2_Pin
        second_note_active = true;  // Second note is now active
    }
	}
 800296c:	e011      	b.n	8002992 <_Z13Handle_NoteOnhhh+0xfa>
    else if (!second_note_active) {
 800296e:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <_Z13Handle_NoteOnhhh+0x138>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	f083 0301 	eor.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <_Z13Handle_NoteOnhhh+0xfa>
        pitch2_CV = pitch_CV;
 800297c:	4a15      	ldr	r2, [pc, #84]	@ (80029d4 <_Z13Handle_NoteOnhhh+0x13c>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_SET);  // Indicate second note is on via gate2_Pin
 8002982:	2201      	movs	r2, #1
 8002984:	2102      	movs	r1, #2
 8002986:	4811      	ldr	r0, [pc, #68]	@ (80029cc <_Z13Handle_NoteOnhhh+0x134>)
 8002988:	f001 faf0 	bl	8003f6c <HAL_GPIO_WritePin>
        second_note_active = true;  // Second note is now active
 800298c:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <_Z13Handle_NoteOnhhh+0x138>)
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
	}
 8002992:	bf00      	nop
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	f3af 8000 	nop.w
 80029a0:	66666666 	.word	0x66666666
 80029a4:	3f4a6666 	.word	0x3f4a6666
 80029a8:	00000000 	.word	0x00000000
 80029ac:	405fc000 	.word	0x405fc000
 80029b0:	00000000 	.word	0x00000000
 80029b4:	40efffe0 	.word	0x40efffe0
 80029b8:	3fd00000 	.word	0x3fd00000
 80029bc:	200002cc 	.word	0x200002cc
 80029c0:	200002d0 	.word	0x200002d0
 80029c4:	08008550 	.word	0x08008550
 80029c8:	200002d8 	.word	0x200002d8
 80029cc:	48000400 	.word	0x48000400
 80029d0:	200002cd 	.word	0x200002cd
 80029d4:	200002d4 	.word	0x200002d4
 80029d8:	5530aed6 	.word	0x5530aed6
 80029dc:	3fb55555 	.word	0x3fb55555

080029e0 <_Z14Handle_NoteOffhhh>:

void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
 80029ea:	460b      	mov	r3, r1
 80029ec:	71bb      	strb	r3, [r7, #6]
 80029ee:	4613      	mov	r3, r2
 80029f0:	717b      	strb	r3, [r7, #5]
//    env1 = ADSR_computeSample(&adsr);


   // If the first note is off

    if (first_note_active) {
 80029f2:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <_Z14Handle_NoteOffhhh+0x54>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <_Z14Handle_NoteOffhhh+0x34>
    	ADSR_SetGateSignal(&envelopes[0], 0);
 80029fa:	2100      	movs	r1, #0
 80029fc:	480e      	ldr	r0, [pc, #56]	@ (8002a38 <_Z14Handle_NoteOffhhh+0x58>)
 80029fe:	f7ff fa31 	bl	8001e64 <ADSR_SetGateSignal>

        HAL_GPIO_WritePin(GPIOB, gate3_Pin, GPIO_PIN_RESET);  // Turn off gate for first note
 8002a02:	2200      	movs	r2, #0
 8002a04:	2104      	movs	r1, #4
 8002a06:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <_Z14Handle_NoteOffhhh+0x5c>)
 8002a08:	f001 fab0 	bl	8003f6c <HAL_GPIO_WritePin>
        first_note_active = false;  // First note is no longer active
 8002a0c:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <_Z14Handle_NoteOffhhh+0x54>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
    else if (second_note_active) {

        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_RESET);  // Turn off gate for second note
        second_note_active = false;  // Second note is no longer active
    }
}
 8002a12:	e00b      	b.n	8002a2c <_Z14Handle_NoteOffhhh+0x4c>
    else if (second_note_active) {
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <_Z14Handle_NoteOffhhh+0x60>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <_Z14Handle_NoteOffhhh+0x4c>
        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_RESET);  // Turn off gate for second note
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2102      	movs	r1, #2
 8002a20:	4806      	ldr	r0, [pc, #24]	@ (8002a3c <_Z14Handle_NoteOffhhh+0x5c>)
 8002a22:	f001 faa3 	bl	8003f6c <HAL_GPIO_WritePin>
        second_note_active = false;  // Second note is no longer active
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <_Z14Handle_NoteOffhhh+0x60>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200002cc 	.word	0x200002cc
 8002a38:	200002d8 	.word	0x200002d8
 8002a3c:	48000400 	.word	0x48000400
 8002a40:	200002cd 	.word	0x200002cd

08002a44 <_Z13ADSR_HandleCChhh>:
//
//
//	}
//}

void ADSR_HandleCC(byte channel, byte number, byte value) {
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	71bb      	strb	r3, [r7, #6]
 8002a52:	4613      	mov	r3, r2
 8002a54:	717b      	strb	r3, [r7, #5]
 //   if (channel < NUM_ENVELOPES && update_adsr_flag) {
	int envelope_index = channel - 1;
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
//    	if (channel < NUM_ENVELOPES) {
    	    if (envelope_index >= 0 && envelope_index < NUM_ENVELOPES) {
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f2c0 8081 	blt.w	8002b66 <_Z13ADSR_HandleCChhh+0x122>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	dc7d      	bgt.n	8002b66 <_Z13ADSR_HandleCChhh+0x122>
    	        ADSR_t *adsr = &envelopes[envelope_index];  // Get the corresponding ADSR envelope
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4a3f      	ldr	r2, [pc, #252]	@ (8002b74 <_Z13ADSR_HandleCChhh+0x130>)
 8002a76:	4413      	add	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]


        switch (number) {
 8002a7a:	79bb      	ldrb	r3, [r7, #6]
 8002a7c:	2b07      	cmp	r3, #7
 8002a7e:	d05b      	beq.n	8002b38 <_Z13ADSR_HandleCChhh+0xf4>
 8002a80:	2b07      	cmp	r3, #7
 8002a82:	db6f      	blt.n	8002b64 <_Z13ADSR_HandleCChhh+0x120>
 8002a84:	2b4a      	cmp	r3, #74	@ 0x4a
 8002a86:	dc6d      	bgt.n	8002b64 <_Z13ADSR_HandleCChhh+0x120>
 8002a88:	2b47      	cmp	r3, #71	@ 0x47
 8002a8a:	db6b      	blt.n	8002b64 <_Z13ADSR_HandleCChhh+0x120>
 8002a8c:	3b47      	subs	r3, #71	@ 0x47
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d868      	bhi.n	8002b64 <_Z13ADSR_HandleCChhh+0x120>
 8002a92:	a201      	add	r2, pc, #4	@ (adr r2, 8002a98 <_Z13ADSR_HandleCChhh+0x54>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002ac9 	.word	0x08002ac9
 8002a9c:	08002b0d 	.word	0x08002b0d
 8002aa0:	08002aeb 	.word	0x08002aeb
 8002aa4:	08002aa9 	.word	0x08002aa9
        case ATTACK_CC: // Brightness controls Attack
//        	oled("attack");
        	cc_values[envelope_index].attack_value = value;
 8002aa8:	4933      	ldr	r1, [pc, #204]	@ (8002b78 <_Z13ADSR_HandleCChhh+0x134>)
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	797a      	ldrb	r2, [r7, #5]
 8002ab6:	701a      	strb	r2, [r3, #0]
            adsr->attack_rate = attack_rate_lookup[value];
 8002ab8:	797b      	ldrb	r3, [r7, #5]
 8002aba:	4a30      	ldr	r2, [pc, #192]	@ (8002b7c <_Z13ADSR_HandleCChhh+0x138>)
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	601a      	str	r2, [r3, #0]
//            oled2("A: %d", value);
            break;
 8002ac6:	e04e      	b.n	8002b66 <_Z13ADSR_HandleCChhh+0x122>

        case DECAY_CC: // Resonance controls Decay
        	cc_values[envelope_index].decay_value = value;
 8002ac8:	492b      	ldr	r1, [pc, #172]	@ (8002b78 <_Z13ADSR_HandleCChhh+0x134>)
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	797a      	ldrb	r2, [r7, #5]
 8002ad8:	701a      	strb	r2, [r3, #0]
            adsr->decay_rate = attack_rate_lookup[value];   // Scale 0-127 to 0.001 - 0.01
 8002ada:	797b      	ldrb	r3, [r7, #5]
 8002adc:	4a27      	ldr	r2, [pc, #156]	@ (8002b7c <_Z13ADSR_HandleCChhh+0x138>)
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	605a      	str	r2, [r3, #4]
            break;
 8002ae8:	e03d      	b.n	8002b66 <_Z13ADSR_HandleCChhh+0x122>

        case RELEASE_CC: // Release Time controls Release
        	cc_values[envelope_index].release_value = value;
 8002aea:	4923      	ldr	r1, [pc, #140]	@ (8002b78 <_Z13ADSR_HandleCChhh+0x134>)
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	3303      	adds	r3, #3
 8002af8:	797a      	ldrb	r2, [r7, #5]
 8002afa:	701a      	strb	r2, [r3, #0]
            adsr->release_rate = attack_rate_lookup[value]; // Scale 0-127 to 0.001 - 0.01
 8002afc:	797b      	ldrb	r3, [r7, #5]
 8002afe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b7c <_Z13ADSR_HandleCChhh+0x138>)
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	60da      	str	r2, [r3, #12]
            break;
 8002b0a:	e02c      	b.n	8002b66 <_Z13ADSR_HandleCChhh+0x122>

        case SUSTAIN_CC: // Decay Time controls Sustain
        	cc_values[envelope_index].sustain_value = value;
 8002b0c:	491a      	ldr	r1, [pc, #104]	@ (8002b78 <_Z13ADSR_HandleCChhh+0x134>)
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	440b      	add	r3, r1
 8002b18:	3302      	adds	r3, #2
 8002b1a:	797a      	ldrb	r2, [r7, #5]
 8002b1c:	701a      	strb	r2, [r3, #0]
            adsr->sustain_level = value / 127.0f;          // 2ia manau nereik float, pakaks ma=esnies reik6mies
 8002b1e:	797b      	ldrb	r3, [r7, #5]
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b28:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002b80 <_Z13ADSR_HandleCChhh+0x13c>
 8002b2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	edc3 7a02 	vstr	s15, [r3, #8]
            break;
 8002b36:	e016      	b.n	8002b66 <_Z13ADSR_HandleCChhh+0x122>

        case AMPLITUDE_CC:
            cc_values[envelope_index].amplitude_value = value;  // Store amplitude value
 8002b38:	490f      	ldr	r1, [pc, #60]	@ (8002b78 <_Z13ADSR_HandleCChhh+0x134>)
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	3304      	adds	r3, #4
 8002b46:	797a      	ldrb	r2, [r7, #5]
 8002b48:	701a      	strb	r2, [r3, #0]
            adsr->amplitude = value / 127.0f;  // Scale amplitude from 0-127 to 0.0-1.0
 8002b4a:	797b      	ldrb	r3, [r7, #5]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b54:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002b80 <_Z13ADSR_HandleCChhh+0x13c>
 8002b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	edc3 7a04 	vstr	s15, [r3, #16]
            break;
 8002b62:	e000      	b.n	8002b66 <_Z13ADSR_HandleCChhh+0x122>

        default:
            // Handle other CC messages or ignore
            break;
 8002b64:	bf00      	nop
    }
//        update_adsr_flag = false;
    }

}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	200002d8 	.word	0x200002d8
 8002b78:	20000310 	.word	0x20000310
 8002b7c:	08008350 	.word	0x08008350
 8002b80:	42fe0000 	.word	0x42fe0000

08002b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
}
 8002b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <Error_Handler+0x8>

08002b90 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d102      	bne.n	8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x20>
MidiInterface Port;
 8002baa:	4809      	ldr	r0, [pc, #36]	@ (8002bd0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002bac:	f7fd ff40 	bl	8000a30 <_ZN13MidiInterfaceC1Ev>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d107      	bne.n	8002bc6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002bc0:	4803      	ldr	r0, [pc, #12]	@ (8002bd0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002bc2:	f7fd ffed 	bl	8000ba0 <_ZN13MidiInterfaceD1Ev>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000031c 	.word	0x2000031c

08002bd4 <_GLOBAL__sub_I_hdac1>:
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7ff ffd7 	bl	8002b90 <_Z41__static_initialization_and_destruction_0ii>
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_GLOBAL__sub_D_hdac1>:
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7ff ffcf 	bl	8002b90 <_Z41__static_initialization_and_destruction_0ii>
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <dac_init>:
 */

#include <mcp4728_mod.h>


void dac_init(ChannelConfig *config ,ChannelConfig_2 *config2) {
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
    config->vref = 0x0;  // Use VDD as reference voltage
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
    config->gain = 0x1;  // Gain of 1x
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	705a      	strb	r2, [r3, #1]
    config->val[0] = 0;  // 12-bit DAC value for channel A
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	805a      	strh	r2, [r3, #2]
    config->val[1] = 0;  // 12-bit DAC value for channel B
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	809a      	strh	r2, [r3, #4]
    config->val[2] = 0;  // 12-bit DAC value for channel C
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	80da      	strh	r2, [r3, #6]
    config->val[3] = 0;  // 12-bit DAC value for channel D
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	811a      	strh	r2, [r3, #8]


    config2->vref = 0x0;  // Use VDD as reference voltage
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
    config2->gain = 0x1;  // Gain of 1x
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	705a      	strb	r2, [r3, #1]
    config2->val[0] = 0;  // 12-bit DAC value for channel A
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2200      	movs	r2, #0
 8002c32:	805a      	strh	r2, [r3, #2]
    config2->val[1] = 0;  // 12-bit DAC value for channel B
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	809a      	strh	r2, [r3, #4]
    config2->val[2] = 0;  // 12-bit DAC value for channel C
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	80da      	strh	r2, [r3, #6]
    config2->val[3] = 0;  // 12-bit DAC value for channel D
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	811a      	strh	r2, [r3, #8]

}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <ssd1306_Reset>:
#include "ssd1306_fonts.h"


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af04      	add	r7, sp, #16
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	2301      	movs	r3, #1
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2178      	movs	r1, #120	@ 0x78
 8002c7e:	4803      	ldr	r0, [pc, #12]	@ (8002c8c <ssd1306_WriteCommand+0x2c>)
 8002c80:	f001 fa42 	bl	8004108 <HAL_I2C_Mem_Write>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	200000a8 	.word	0x200000a8

08002c90 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af04      	add	r7, sp, #16
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca2:	9202      	str	r2, [sp, #8]
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2301      	movs	r3, #1
 8002cac:	2240      	movs	r2, #64	@ 0x40
 8002cae:	2178      	movs	r1, #120	@ 0x78
 8002cb0:	4803      	ldr	r0, [pc, #12]	@ (8002cc0 <ssd1306_WriteData+0x30>)
 8002cb2:	f001 fa29 	bl	8004108 <HAL_I2C_Mem_Write>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200000a8 	.word	0x200000a8

08002cc4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002cc8:	f7ff ffc3 	bl	8002c52 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002ccc:	2064      	movs	r0, #100	@ 0x64
 8002cce:	f000 fd43 	bl	8003758 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 f9d6 	bl	8003084 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002cd8:	2020      	movs	r0, #32
 8002cda:	f7ff ffc1 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7ff ffbe 	bl	8002c60 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ce4:	20b0      	movs	r0, #176	@ 0xb0
 8002ce6:	f7ff ffbb 	bl	8002c60 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002cea:	20c8      	movs	r0, #200	@ 0xc8
 8002cec:	f7ff ffb8 	bl	8002c60 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7ff ffb5 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002cf6:	2010      	movs	r0, #16
 8002cf8:	f7ff ffb2 	bl	8002c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002cfc:	2040      	movs	r0, #64	@ 0x40
 8002cfe:	f7ff ffaf 	bl	8002c60 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002d02:	20ff      	movs	r0, #255	@ 0xff
 8002d04:	f000 f9aa 	bl	800305c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002d08:	20a1      	movs	r0, #161	@ 0xa1
 8002d0a:	f7ff ffa9 	bl	8002c60 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002d0e:	20a6      	movs	r0, #166	@ 0xa6
 8002d10:	f7ff ffa6 	bl	8002c60 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002d14:	20a8      	movs	r0, #168	@ 0xa8
 8002d16:	f7ff ffa3 	bl	8002c60 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002d1a:	203f      	movs	r0, #63	@ 0x3f
 8002d1c:	f7ff ffa0 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d20:	20a4      	movs	r0, #164	@ 0xa4
 8002d22:	f7ff ff9d 	bl	8002c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002d26:	20d3      	movs	r0, #211	@ 0xd3
 8002d28:	f7ff ff9a 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7ff ff97 	bl	8002c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d32:	20d5      	movs	r0, #213	@ 0xd5
 8002d34:	f7ff ff94 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002d38:	20f0      	movs	r0, #240	@ 0xf0
 8002d3a:	f7ff ff91 	bl	8002c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002d3e:	20d9      	movs	r0, #217	@ 0xd9
 8002d40:	f7ff ff8e 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002d44:	2022      	movs	r0, #34	@ 0x22
 8002d46:	f7ff ff8b 	bl	8002c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002d4a:	20da      	movs	r0, #218	@ 0xda
 8002d4c:	f7ff ff88 	bl	8002c60 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002d50:	2012      	movs	r0, #18
 8002d52:	f7ff ff85 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002d56:	20db      	movs	r0, #219	@ 0xdb
 8002d58:	f7ff ff82 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002d5c:	2020      	movs	r0, #32
 8002d5e:	f7ff ff7f 	bl	8002c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002d62:	208d      	movs	r0, #141	@ 0x8d
 8002d64:	f7ff ff7c 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002d68:	2014      	movs	r0, #20
 8002d6a:	f7ff ff79 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f000 f988 	bl	8003084 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f000 f80f 	bl	8002d98 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002d7a:	f000 f825 	bl	8002dc8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <ssd1306_Init+0xd0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002d84:	4b03      	ldr	r3, [pc, #12]	@ (8002d94 <ssd1306_Init+0xd0>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002d8a:	4b02      	ldr	r3, [pc, #8]	@ (8002d94 <ssd1306_Init+0xd0>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	711a      	strb	r2, [r3, #4]
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	2000088c 	.word	0x2000088c

08002d98 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <ssd1306_Fill+0x14>
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <ssd1306_Fill+0x16>
 8002dac:	23ff      	movs	r3, #255	@ 0xff
 8002dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002db2:	4619      	mov	r1, r3
 8002db4:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <ssd1306_Fill+0x2c>)
 8002db6:	f005 fa7c 	bl	80082b2 <memset>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000048c 	.word	0x2000048c

08002dc8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	71fb      	strb	r3, [r7, #7]
 8002dd2:	e016      	b.n	8002e02 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	3b50      	subs	r3, #80	@ 0x50
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff40 	bl	8002c60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7ff ff3d 	bl	8002c60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002de6:	2010      	movs	r0, #16
 8002de8:	f7ff ff3a 	bl	8002c60 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	01db      	lsls	r3, r3, #7
 8002df0:	4a08      	ldr	r2, [pc, #32]	@ (8002e14 <ssd1306_UpdateScreen+0x4c>)
 8002df2:	4413      	add	r3, r2
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff4a 	bl	8002c90 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	71fb      	strb	r3, [r7, #7]
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b07      	cmp	r3, #7
 8002e06:	d9e5      	bls.n	8002dd4 <ssd1306_UpdateScreen+0xc>
    }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000048c 	.word	0x2000048c

08002e18 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	460b      	mov	r3, r1
 8002e24:	71bb      	strb	r3, [r7, #6]
 8002e26:	4613      	mov	r3, r2
 8002e28:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	db3d      	blt.n	8002eae <ssd1306_DrawPixel+0x96>
 8002e32:	79bb      	ldrb	r3, [r7, #6]
 8002e34:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e36:	d83a      	bhi.n	8002eae <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002e38:	797b      	ldrb	r3, [r7, #5]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d11a      	bne.n	8002e74 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	79bb      	ldrb	r3, [r7, #6]
 8002e42:	08db      	lsrs	r3, r3, #3
 8002e44:	b2d8      	uxtb	r0, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	01db      	lsls	r3, r3, #7
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ebc <ssd1306_DrawPixel+0xa4>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	b25a      	sxtb	r2, r3
 8002e52:	79bb      	ldrb	r3, [r7, #6]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	4313      	orrs	r3, r2
 8002e62:	b259      	sxtb	r1, r3
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	4603      	mov	r3, r0
 8002e68:	01db      	lsls	r3, r3, #7
 8002e6a:	4413      	add	r3, r2
 8002e6c:	b2c9      	uxtb	r1, r1
 8002e6e:	4a13      	ldr	r2, [pc, #76]	@ (8002ebc <ssd1306_DrawPixel+0xa4>)
 8002e70:	54d1      	strb	r1, [r2, r3]
 8002e72:	e01d      	b.n	8002eb0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e74:	79fa      	ldrb	r2, [r7, #7]
 8002e76:	79bb      	ldrb	r3, [r7, #6]
 8002e78:	08db      	lsrs	r3, r3, #3
 8002e7a:	b2d8      	uxtb	r0, r3
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	01db      	lsls	r3, r3, #7
 8002e80:	4413      	add	r3, r2
 8002e82:	4a0e      	ldr	r2, [pc, #56]	@ (8002ebc <ssd1306_DrawPixel+0xa4>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	b25a      	sxtb	r2, r3
 8002e88:	79bb      	ldrb	r3, [r7, #6]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	2101      	movs	r1, #1
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b259      	sxtb	r1, r3
 8002e9e:	79fa      	ldrb	r2, [r7, #7]
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	01db      	lsls	r3, r3, #7
 8002ea4:	4413      	add	r3, r2
 8002ea6:	b2c9      	uxtb	r1, r1
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <ssd1306_DrawPixel+0xa4>)
 8002eaa:	54d1      	strb	r1, [r2, r3]
 8002eac:	e000      	b.n	8002eb0 <ssd1306_DrawPixel+0x98>
        return;
 8002eae:	bf00      	nop
    }
}
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	2000048c 	.word	0x2000048c

08002ec0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b089      	sub	sp, #36	@ 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4638      	mov	r0, r7
 8002eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002ece:	4623      	mov	r3, r4
 8002ed0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b1f      	cmp	r3, #31
 8002ed6:	d902      	bls.n	8002ede <ssd1306_WriteChar+0x1e>
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b7e      	cmp	r3, #126	@ 0x7e
 8002edc:	d901      	bls.n	8002ee2 <ssd1306_WriteChar+0x22>
        return 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e077      	b.n	8002fd2 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fdc <ssd1306_WriteChar+0x11c>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	783b      	ldrb	r3, [r7, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	2b80      	cmp	r3, #128	@ 0x80
 8002eee:	dc06      	bgt.n	8002efe <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fdc <ssd1306_WriteChar+0x11c>)
 8002ef2:	885b      	ldrh	r3, [r3, #2]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	787b      	ldrb	r3, [r7, #1]
 8002ef8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002efa:	2b40      	cmp	r3, #64	@ 0x40
 8002efc:	dd01      	ble.n	8002f02 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e067      	b.n	8002fd2 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e04e      	b.n	8002fa6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3b20      	subs	r3, #32
 8002f0e:	7879      	ldrb	r1, [r7, #1]
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4619      	mov	r1, r3
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	440b      	add	r3, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	e036      	b.n	8002f96 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <ssd1306_WriteChar+0x11c>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	b2d8      	uxtb	r0, r3
 8002f46:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <ssd1306_WriteChar+0x11c>)
 8002f48:	885b      	ldrh	r3, [r3, #2]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7ff ff5d 	bl	8002e18 <ssd1306_DrawPixel>
 8002f5e:	e017      	b.n	8002f90 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f60:	4b1e      	ldr	r3, [pc, #120]	@ (8002fdc <ssd1306_WriteChar+0x11c>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b2d8      	uxtb	r0, r3
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <ssd1306_WriteChar+0x11c>)
 8002f70:	885b      	ldrh	r3, [r3, #2]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	b2d9      	uxtb	r1, r3
 8002f7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f7ff ff44 	bl	8002e18 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	783b      	ldrb	r3, [r7, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d3c3      	bcc.n	8002f28 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	787b      	ldrb	r3, [r7, #1]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d3ab      	bcc.n	8002f08 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <ssd1306_WriteChar+0x11c>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	2a00      	cmp	r2, #0
 8002fb8:	d005      	beq.n	8002fc6 <ssd1306_WriteChar+0x106>
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	3a20      	subs	r2, #32
 8002fc0:	440a      	add	r2, r1
 8002fc2:	7812      	ldrb	r2, [r2, #0]
 8002fc4:	e000      	b.n	8002fc8 <ssd1306_WriteChar+0x108>
 8002fc6:	783a      	ldrb	r2, [r7, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <ssd1306_WriteChar+0x11c>)
 8002fce:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	2000088c 	.word	0x2000088c

08002fe0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	4638      	mov	r0, r7
 8002fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002fee:	e013      	b.n	8003018 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	7818      	ldrb	r0, [r3, #0]
 8002ff4:	7e3b      	ldrb	r3, [r7, #24]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffc:	f7ff ff60 	bl	8002ec0 <ssd1306_WriteChar>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d002      	beq.n	8003012 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	e008      	b.n	8003024 <ssd1306_WriteString+0x44>
        }
        str++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e7      	bne.n	8002ff0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	781b      	ldrb	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	460a      	mov	r2, r1
 8003036:	71fb      	strb	r3, [r7, #7]
 8003038:	4613      	mov	r3, r2
 800303a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <ssd1306_SetCursor+0x2c>)
 8003042:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003044:	79bb      	ldrb	r3, [r7, #6]
 8003046:	b29a      	uxth	r2, r3
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <ssd1306_SetCursor+0x2c>)
 800304a:	805a      	strh	r2, [r3, #2]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	2000088c 	.word	0x2000088c

0800305c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003066:	2381      	movs	r3, #129	@ 0x81
 8003068:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fdf7 	bl	8002c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fdf3 	bl	8002c60 <ssd1306_WriteCommand>
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003094:	23af      	movs	r3, #175	@ 0xaf
 8003096:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003098:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <ssd1306_SetDisplayOn+0x38>)
 800309a:	2201      	movs	r2, #1
 800309c:	715a      	strb	r2, [r3, #5]
 800309e:	e004      	b.n	80030aa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80030a0:	23ae      	movs	r3, #174	@ 0xae
 80030a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <ssd1306_SetDisplayOn+0x38>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fdd7 	bl	8002c60 <ssd1306_WriteCommand>
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2000088c 	.word	0x2000088c

080030c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <HAL_MspInit+0x44>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003104 <HAL_MspInit+0x44>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6193      	str	r3, [r2, #24]
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <HAL_MspInit+0x44>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_MspInit+0x44>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a08      	ldr	r2, [pc, #32]	@ (8003104 <HAL_MspInit+0x44>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	61d3      	str	r3, [r2, #28]
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_MspInit+0x44>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08c      	sub	sp, #48	@ 0x30
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2b      	ldr	r2, [pc, #172]	@ (80031d4 <HAL_DAC_MspInit+0xcc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d125      	bne.n	8003176 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800312a:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4a2a      	ldr	r2, [pc, #168]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 8003130:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003134:	61d3      	str	r3, [r2, #28]
 8003136:	4b28      	ldr	r3, [pc, #160]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003142:	4b25      	ldr	r3, [pc, #148]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4a24      	ldr	r2, [pc, #144]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	6153      	str	r3, [r2, #20]
 800314e:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800315a:	2330      	movs	r3, #48	@ 0x30
 800315c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800315e:	2303      	movs	r3, #3
 8003160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003166:	f107 031c 	add.w	r3, r7, #28
 800316a:	4619      	mov	r1, r3
 800316c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003170:	f000 fd82 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003174:	e029      	b.n	80031ca <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a18      	ldr	r2, [pc, #96]	@ (80031dc <HAL_DAC_MspInit+0xd4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d124      	bne.n	80031ca <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003180:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	4a14      	ldr	r2, [pc, #80]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 8003186:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800318a:	61d3      	str	r3, [r2, #28]
 800318c:	4b12      	ldr	r3, [pc, #72]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003198:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	4a0e      	ldr	r2, [pc, #56]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a2:	6153      	str	r3, [r2, #20]
 80031a4:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <HAL_DAC_MspInit+0xd0>)
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031b0:	2340      	movs	r3, #64	@ 0x40
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b4:	2303      	movs	r3, #3
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	f107 031c 	add.w	r3, r7, #28
 80031c0:	4619      	mov	r1, r3
 80031c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031c6:	f000 fd57 	bl	8003c78 <HAL_GPIO_Init>
}
 80031ca:	bf00      	nop
 80031cc:	3730      	adds	r7, #48	@ 0x30
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40007400 	.word	0x40007400
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40009800 	.word	0x40009800

080031e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	@ 0x30
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2e      	ldr	r2, [pc, #184]	@ (80032b8 <HAL_I2C_MspInit+0xd8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d128      	bne.n	8003254 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	4b2e      	ldr	r3, [pc, #184]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4a2d      	ldr	r2, [pc, #180]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 8003208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800320c:	6153      	str	r3, [r2, #20]
 800320e:	4b2b      	ldr	r3, [pc, #172]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800321a:	23c0      	movs	r3, #192	@ 0xc0
 800321c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800321e:	2312      	movs	r3, #18
 8003220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800322a:	2304      	movs	r3, #4
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	4822      	ldr	r0, [pc, #136]	@ (80032c0 <HAL_I2C_MspInit+0xe0>)
 8003236:	f000 fd1f 	bl	8003c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4a1f      	ldr	r2, [pc, #124]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 8003240:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003244:	61d3      	str	r3, [r2, #28]
 8003246:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003252:	e02c      	b.n	80032ae <HAL_I2C_MspInit+0xce>
  else if(hi2c->Instance==I2C2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	@ (80032c4 <HAL_I2C_MspInit+0xe4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d127      	bne.n	80032ae <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800325e:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4a16      	ldr	r2, [pc, #88]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 8003264:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003268:	6153      	str	r3, [r2, #20]
 800326a:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003276:	23c0      	movs	r3, #192	@ 0xc0
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800327a:	2312      	movs	r3, #18
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003286:	2304      	movs	r3, #4
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	4619      	mov	r1, r3
 8003290:	480d      	ldr	r0, [pc, #52]	@ (80032c8 <HAL_I2C_MspInit+0xe8>)
 8003292:	f000 fcf1 	bl	8003c78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4a08      	ldr	r2, [pc, #32]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 800329c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032a0:	61d3      	str	r3, [r2, #28]
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_I2C_MspInit+0xdc>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
}
 80032ae:	bf00      	nop
 80032b0:	3730      	adds	r7, #48	@ 0x30
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40005400 	.word	0x40005400
 80032bc:	40021000 	.word	0x40021000
 80032c0:	48000400 	.word	0x48000400
 80032c4:	40005800 	.word	0x40005800
 80032c8:	48001400 	.word	0x48001400

080032cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003394 <HAL_SPI_MspInit+0xc8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d14d      	bne.n	800338a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f8:	61d3      	str	r3, [r2, #28]
 80032fa:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003306:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4a23      	ldr	r2, [pc, #140]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003310:	6153      	str	r3, [r2, #20]
 8003312:	4b21      	ldr	r3, [pc, #132]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800331e:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 8003324:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003328:	6153      	str	r3, [r2, #20]
 800332a:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <HAL_SPI_MspInit+0xcc>)
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PD8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003336:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800333a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003344:	2303      	movs	r3, #3
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003348:	2305      	movs	r3, #5
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4619      	mov	r1, r3
 8003352:	4812      	ldr	r0, [pc, #72]	@ (800339c <HAL_SPI_MspInit+0xd0>)
 8003354:	f000 fc90 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800335c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335e:	2302      	movs	r3, #2
 8003360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003366:	2303      	movs	r3, #3
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800336a:	2305      	movs	r3, #5
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800336e:	f107 0314 	add.w	r3, r7, #20
 8003372:	4619      	mov	r1, r3
 8003374:	480a      	ldr	r0, [pc, #40]	@ (80033a0 <HAL_SPI_MspInit+0xd4>)
 8003376:	f000 fc7f 	bl	8003c78 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	2024      	movs	r0, #36	@ 0x24
 8003380:	f000 fae9 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003384:	2024      	movs	r0, #36	@ 0x24
 8003386:	f000 fb02 	bl	800398e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800338a:	bf00      	nop
 800338c:	3728      	adds	r7, #40	@ 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40003800 	.word	0x40003800
 8003398:	40021000 	.word	0x40021000
 800339c:	48000400 	.word	0x48000400
 80033a0:	48000c00 	.word	0x48000c00

080033a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b4:	d10b      	bne.n	80033ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033b6:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <HAL_TIM_PWM_MspInit+0x38>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4a08      	ldr	r2, [pc, #32]	@ (80033dc <HAL_TIM_PWM_MspInit+0x38>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	61d3      	str	r3, [r2, #28]
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_TIM_PWM_MspInit+0x38>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000

080033e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003458 <HAL_TIM_Base_MspInit+0x78>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d114      	bne.n	800341c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033f2:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <HAL_TIM_Base_MspInit+0x7c>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_TIM_Base_MspInit+0x7c>)
 80033f8:	f043 0320 	orr.w	r3, r3, #32
 80033fc:	61d3      	str	r3, [r2, #28]
 80033fe:	4b17      	ldr	r3, [pc, #92]	@ (800345c <HAL_TIM_Base_MspInit+0x7c>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800340a:	2200      	movs	r2, #0
 800340c:	2100      	movs	r1, #0
 800340e:	2037      	movs	r0, #55	@ 0x37
 8003410:	f000 faa1 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003414:	2037      	movs	r0, #55	@ 0x37
 8003416:	f000 faba 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800341a:	e018      	b.n	800344e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM13)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0f      	ldr	r2, [pc, #60]	@ (8003460 <HAL_TIM_Base_MspInit+0x80>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d113      	bne.n	800344e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <HAL_TIM_Base_MspInit+0x7c>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a0c      	ldr	r2, [pc, #48]	@ (800345c <HAL_TIM_Base_MspInit+0x7c>)
 800342c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003430:	61d3      	str	r3, [r2, #28]
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <HAL_TIM_Base_MspInit+0x7c>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM13_IRQn, 0, 0);
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	202c      	movs	r0, #44	@ 0x2c
 8003444:	f000 fa87 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM13_IRQn);
 8003448:	202c      	movs	r0, #44	@ 0x2c
 800344a:	f000 faa0 	bl	800398e <HAL_NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40001400 	.word	0x40001400
 800345c:	40021000 	.word	0x40021000
 8003460:	40001c00 	.word	0x40001c00

08003464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003484:	d11c      	bne.n	80034c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <HAL_TIM_MspPostInit+0x64>)
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	4a0f      	ldr	r2, [pc, #60]	@ (80034c8 <HAL_TIM_MspPostInit+0x64>)
 800348c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003490:	6153      	str	r3, [r2, #20]
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <HAL_TIM_MspPostInit+0x64>)
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800349e:	2301      	movs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034a6:	2302      	movs	r3, #2
 80034a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	4619      	mov	r1, r3
 80034b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034bc:	f000 fbdc 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034c0:	bf00      	nop
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000

080034cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <HAL_UART_MspInit+0x90>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d131      	bne.n	8003552 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003560 <HAL_UART_MspInit+0x94>)
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003560 <HAL_UART_MspInit+0x94>)
 80034f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034f8:	6193      	str	r3, [r2, #24]
 80034fa:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_UART_MspInit+0x94>)
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <HAL_UART_MspInit+0x94>)
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4a15      	ldr	r2, [pc, #84]	@ (8003560 <HAL_UART_MspInit+0x94>)
 800350c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003510:	6153      	str	r3, [r2, #20]
 8003512:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <HAL_UART_MspInit+0x94>)
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800351e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003530:	2307      	movs	r3, #7
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4619      	mov	r1, r3
 800353a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800353e:	f000 fb9b 	bl	8003c78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	2025      	movs	r0, #37	@ 0x25
 8003548:	f000 fa05 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800354c:	2025      	movs	r0, #37	@ 0x25
 800354e:	f000 fa1e 	bl	800398e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40013800 	.word	0x40013800
 8003560:	40021000 	.word	0x40021000

08003564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <NMI_Handler+0x4>

0800356c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <HardFault_Handler+0x4>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <MemManage_Handler+0x4>

0800357c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <BusFault_Handler+0x4>

08003584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <UsageFault_Handler+0x4>

0800358c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ba:	f000 f8ad 	bl	8003718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80035c8:	4802      	ldr	r0, [pc, #8]	@ (80035d4 <SPI2_IRQHandler+0x10>)
 80035ca:	f002 fe35 	bl	8006238 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200000fc 	.word	0x200000fc

080035d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035dc:	4802      	ldr	r0, [pc, #8]	@ (80035e8 <USART1_IRQHandler+0x10>)
 80035de:	f003 ff83 	bl	80074e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000244 	.word	0x20000244

080035ec <TIM13_IRQHandler>:

/**
  * @brief This function handles TIM13 global interrupt.
  */
void TIM13_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM13_IRQn 0 */

  /* USER CODE END TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80035f0:	4802      	ldr	r0, [pc, #8]	@ (80035fc <TIM13_IRQHandler+0x10>)
 80035f2:	f003 f965 	bl	80068c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM13_IRQn 1 */

  /* USER CODE END TIM13_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200001f8 	.word	0x200001f8

08003600 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003604:	4802      	ldr	r0, [pc, #8]	@ (8003610 <TIM7_IRQHandler+0x10>)
 8003606:	f003 f95b 	bl	80068c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200001ac 	.word	0x200001ac

08003614 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <SystemInit+0x20>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	4a05      	ldr	r2, [pc, #20]	@ (8003634 <SystemInit+0x20>)
 8003620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003638:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003670 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800363c:	f7ff ffea 	bl	8003614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003640:	480c      	ldr	r0, [pc, #48]	@ (8003674 <LoopForever+0x6>)
  ldr r1, =_edata
 8003642:	490d      	ldr	r1, [pc, #52]	@ (8003678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003644:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <LoopForever+0xe>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003648:	e002      	b.n	8003650 <LoopCopyDataInit>

0800364a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800364c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364e:	3304      	adds	r3, #4

08003650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003654:	d3f9      	bcc.n	800364a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003658:	4c0a      	ldr	r4, [pc, #40]	@ (8003684 <LoopForever+0x16>)
  movs r3, #0
 800365a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800365c:	e001      	b.n	8003662 <LoopFillZerobss>

0800365e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003660:	3204      	adds	r2, #4

08003662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003664:	d3fb      	bcc.n	800365e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003666:	f004 fe2d 	bl	80082c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800366a:	f7fe fcb5 	bl	8001fd8 <main>

0800366e <LoopForever>:

LoopForever:
    b LoopForever
 800366e:	e7fe      	b.n	800366e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003670:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003678:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800367c:	08008f10 	.word	0x08008f10
  ldr r2, =_sbss
 8003680:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003684:	20000898 	.word	0x20000898

08003688 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003688:	e7fe      	b.n	8003688 <ADC1_IRQHandler>
	...

0800368c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003690:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <HAL_Init+0x28>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a07      	ldr	r2, [pc, #28]	@ (80036b4 <HAL_Init+0x28>)
 8003696:	f043 0310 	orr.w	r3, r3, #16
 800369a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800369c:	2003      	movs	r0, #3
 800369e:	f000 f94f 	bl	8003940 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036a2:	200f      	movs	r0, #15
 80036a4:	f000 f808 	bl	80036b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a8:	f7ff fd0a 	bl	80030c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40022000 	.word	0x40022000

080036b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c0:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_InitTick+0x54>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b12      	ldr	r3, [pc, #72]	@ (8003710 <HAL_InitTick+0x58>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f967 	bl	80039aa <HAL_SYSTICK_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00e      	b.n	8003704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b0f      	cmp	r3, #15
 80036ea:	d80a      	bhi.n	8003702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ec:	2200      	movs	r2, #0
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f000 f92f 	bl	8003956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f8:	4a06      	ldr	r2, [pc, #24]	@ (8003714 <HAL_InitTick+0x5c>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000000 	.word	0x20000000
 8003710:	20000008 	.word	0x20000008
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <HAL_IncTick+0x20>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_IncTick+0x24>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4413      	add	r3, r2
 8003728:	4a04      	ldr	r2, [pc, #16]	@ (800373c <HAL_IncTick+0x24>)
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000008 	.word	0x20000008
 800373c:	20000894 	.word	0x20000894

08003740 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return uwTick;  
 8003744:	4b03      	ldr	r3, [pc, #12]	@ (8003754 <HAL_GetTick+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000894 	.word	0x20000894

08003758 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003760:	f7ff ffee 	bl	8003740 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d005      	beq.n	800377e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_Delay+0x44>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800377e:	bf00      	nop
 8003780:	f7ff ffde 	bl	8003740 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d8f7      	bhi.n	8003780 <HAL_Delay+0x28>
  {
  }
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000008 	.word	0x20000008

080037a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037bc:	4013      	ands	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d2:	4a04      	ldr	r2, [pc, #16]	@ (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <__NVIC_GetPriorityGrouping+0x18>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 0307 	and.w	r3, r3, #7
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	2b00      	cmp	r3, #0
 8003814:	db0b      	blt.n	800382e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	4907      	ldr	r1, [pc, #28]	@ (800383c <__NVIC_EnableIRQ+0x38>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2001      	movs	r0, #1
 8003826:	fa00 f202 	lsl.w	r2, r0, r2
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e100 	.word	0xe000e100

08003840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	6039      	str	r1, [r7, #0]
 800384a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003850:	2b00      	cmp	r3, #0
 8003852:	db0a      	blt.n	800386a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	490c      	ldr	r1, [pc, #48]	@ (800388c <__NVIC_SetPriority+0x4c>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	440b      	add	r3, r1
 8003864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003868:	e00a      	b.n	8003880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4908      	ldr	r1, [pc, #32]	@ (8003890 <__NVIC_SetPriority+0x50>)
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	3b04      	subs	r3, #4
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	440b      	add	r3, r1
 800387e:	761a      	strb	r2, [r3, #24]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000e100 	.word	0xe000e100
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003894:	b480      	push	{r7}
 8003896:	b089      	sub	sp, #36	@ 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f1c3 0307 	rsb	r3, r3, #7
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	bf28      	it	cs
 80038b2:	2304      	movcs	r3, #4
 80038b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d902      	bls.n	80038c4 <NVIC_EncodePriority+0x30>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3b03      	subs	r3, #3
 80038c2:	e000      	b.n	80038c6 <NVIC_EncodePriority+0x32>
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	f04f 32ff 	mov.w	r2, #4294967295
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	401a      	ands	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038dc:	f04f 31ff 	mov.w	r1, #4294967295
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	43d9      	mvns	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	4313      	orrs	r3, r2
         );
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3724      	adds	r7, #36	@ 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800390c:	d301      	bcc.n	8003912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800390e:	2301      	movs	r3, #1
 8003910:	e00f      	b.n	8003932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <SysTick_Config+0x40>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391a:	210f      	movs	r1, #15
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f7ff ff8e 	bl	8003840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <SysTick_Config+0x40>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392a:	4b04      	ldr	r3, [pc, #16]	@ (800393c <SysTick_Config+0x40>)
 800392c:	2207      	movs	r2, #7
 800392e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	e000e010 	.word	0xe000e010

08003940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff29 	bl	80037a0 <__NVIC_SetPriorityGrouping>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003968:	f7ff ff3e 	bl	80037e8 <__NVIC_GetPriorityGrouping>
 800396c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff8e 	bl	8003894 <NVIC_EncodePriority>
 8003978:	4602      	mov	r2, r0
 800397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5d 	bl	8003840 <__NVIC_SetPriority>
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff31 	bl	8003804 <__NVIC_EnableIRQ>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffa2 	bl	80038fc <SysTick_Config>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e014      	b.n	80039fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	791b      	ldrb	r3, [r3, #4]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d105      	bne.n	80039ea <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fb8f 	bl	8003108 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e004      	b.n	8003a3a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	3314      	adds	r3, #20
 8003a38:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	795b      	ldrb	r3, [r3, #5]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_DAC_Start+0x16>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e039      	b.n	8003ada <HAL_DAC_Start+0x8a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10f      	bne.n	8003aac <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003a96:	2b3c      	cmp	r3, #60	@ 0x3c
 8003a98:	d118      	bne.n	8003acc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	e00f      	b.n	8003acc <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003ab6:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8003aba:	d107      	bne.n	8003acc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0202 	orr.w	r2, r2, #2
 8003aca:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b087      	sub	sp, #28
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	795b      	ldrb	r3, [r3, #5]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_DAC_ConfigChannel+0x20>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e036      	b.n	8003b74 <HAL_DAC_ConfigChannel+0x8e>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003b1a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	22c0      	movs	r2, #192	@ 0xc0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	400a      	ands	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e02e      	b.n	8003bf0 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d008      	beq.n	8003bae <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e020      	b.n	8003bf0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 020e 	bic.w	r2, r2, #14
 8003bbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d005      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2204      	movs	r2, #4
 8003c16:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e027      	b.n	8003c6e <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 020e 	bic.w	r2, r2, #14
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
    }
  }
  return status;
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c86:	e154      	b.n	8003f32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8146 	beq.w	8003f2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d005      	beq.n	8003cb8 <HAL_GPIO_Init+0x40>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d130      	bne.n	8003d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cee:	2201      	movs	r2, #1
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	f003 0201 	and.w	r2, r3, #1
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d017      	beq.n	8003d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d123      	bne.n	8003daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	08da      	lsrs	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3208      	adds	r2, #8
 8003d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	220f      	movs	r2, #15
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	08da      	lsrs	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3208      	adds	r2, #8
 8003da4:	6939      	ldr	r1, [r7, #16]
 8003da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	2203      	movs	r2, #3
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0203 	and.w	r2, r3, #3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a0 	beq.w	8003f2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dec:	4b58      	ldr	r3, [pc, #352]	@ (8003f50 <HAL_GPIO_Init+0x2d8>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4a57      	ldr	r2, [pc, #348]	@ (8003f50 <HAL_GPIO_Init+0x2d8>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6193      	str	r3, [r2, #24]
 8003df8:	4b55      	ldr	r3, [pc, #340]	@ (8003f50 <HAL_GPIO_Init+0x2d8>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e04:	4a53      	ldr	r2, [pc, #332]	@ (8003f54 <HAL_GPIO_Init+0x2dc>)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e2e:	d019      	beq.n	8003e64 <HAL_GPIO_Init+0x1ec>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a49      	ldr	r2, [pc, #292]	@ (8003f58 <HAL_GPIO_Init+0x2e0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <HAL_GPIO_Init+0x1e8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a48      	ldr	r2, [pc, #288]	@ (8003f5c <HAL_GPIO_Init+0x2e4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00d      	beq.n	8003e5c <HAL_GPIO_Init+0x1e4>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a47      	ldr	r2, [pc, #284]	@ (8003f60 <HAL_GPIO_Init+0x2e8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <HAL_GPIO_Init+0x1e0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a46      	ldr	r2, [pc, #280]	@ (8003f64 <HAL_GPIO_Init+0x2ec>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_GPIO_Init+0x1dc>
 8003e50:	2304      	movs	r3, #4
 8003e52:	e008      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e54:	2305      	movs	r3, #5
 8003e56:	e006      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e004      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e002      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e64:	2300      	movs	r3, #0
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	f002 0203 	and.w	r2, r2, #3
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	4093      	lsls	r3, r2
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e76:	4937      	ldr	r1, [pc, #220]	@ (8003f54 <HAL_GPIO_Init+0x2dc>)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e84:	4b38      	ldr	r3, [pc, #224]	@ (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eae:	4b2e      	ldr	r3, [pc, #184]	@ (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ed2:	4a25      	ldr	r2, [pc, #148]	@ (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ed8:	4b23      	ldr	r3, [pc, #140]	@ (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003efc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f02:	4b19      	ldr	r3, [pc, #100]	@ (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f26:	4a10      	ldr	r2, [pc, #64]	@ (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f aea3 	bne.w	8003c88 <HAL_GPIO_Init+0x10>
  }
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40010000 	.word	0x40010000
 8003f58:	48000400 	.word	0x48000400
 8003f5c:	48000800 	.word	0x48000800
 8003f60:	48000c00 	.word	0x48000c00
 8003f64:	48001000 	.word	0x48001000
 8003f68:	40010400 	.word	0x40010400

08003f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f7c:	787b      	ldrb	r3, [r7, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f88:	e002      	b.n	8003f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	041a      	lsls	r2, r3, #16
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	43d9      	mvns	r1, r3
 8003fba:	887b      	ldrh	r3, [r7, #2]
 8003fbc:	400b      	ands	r3, r1
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	619a      	str	r2, [r3, #24]
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e08d      	b.n	80040fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff f8f2 	bl	80031e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	@ 0x24
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d107      	bne.n	800404a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	e006      	b.n	8004058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d108      	bne.n	8004072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	e007      	b.n	8004082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	460b      	mov	r3, r1
 800411c:	813b      	strh	r3, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	f040 80f9 	bne.w	8004322 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_I2C_Mem_Write+0x34>
 8004136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004142:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0ed      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_I2C_Mem_Write+0x4e>
 8004152:	2302      	movs	r3, #2
 8004154:	e0e6      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800415e:	f7ff faef 	bl	8003740 <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2319      	movs	r3, #25
 800416a:	2201      	movs	r2, #1
 800416c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f955 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0d1      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2221      	movs	r2, #33	@ 0x21
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2240      	movs	r2, #64	@ 0x40
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041a8:	88f8      	ldrh	r0, [r7, #6]
 80041aa:	893a      	ldrh	r2, [r7, #8]
 80041ac:	8979      	ldrh	r1, [r7, #10]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	4603      	mov	r3, r0
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f8b9 	bl	8004330 <I2C_RequestMemoryWrite>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0a9      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2bff      	cmp	r3, #255	@ 0xff
 80041d8:	d90e      	bls.n	80041f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	22ff      	movs	r2, #255	@ 0xff
 80041de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	8979      	ldrh	r1, [r7, #10]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fad9 	bl	80047a8 <I2C_TransferConfig>
 80041f6:	e00f      	b.n	8004218 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004206:	b2da      	uxtb	r2, r3
 8004208:	8979      	ldrh	r1, [r7, #10]
 800420a:	2300      	movs	r3, #0
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fac8 	bl	80047a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f958 	bl	80044d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e07b      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d034      	beq.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426a:	2b00      	cmp	r3, #0
 800426c:	d130      	bne.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	2200      	movs	r2, #0
 8004276:	2180      	movs	r1, #128	@ 0x80
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f8d1 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e04d      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2bff      	cmp	r3, #255	@ 0xff
 8004290:	d90e      	bls.n	80042b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22ff      	movs	r2, #255	@ 0xff
 8004296:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429c:	b2da      	uxtb	r2, r3
 800429e:	8979      	ldrh	r1, [r7, #10]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fa7d 	bl	80047a8 <I2C_TransferConfig>
 80042ae:	e00f      	b.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	8979      	ldrh	r1, [r7, #10]
 80042c2:	2300      	movs	r3, #0
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fa6c 	bl	80047a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d19e      	bne.n	8004218 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f93e 	bl	8004560 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e01a      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2220      	movs	r2, #32
 80042f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_I2C_Mem_Write+0x224>)
 8004302:	400b      	ands	r3, r1
 8004304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	fe00e800 	.word	0xfe00e800

08004330 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	8979      	ldrh	r1, [r7, #10]
 8004350:	4b20      	ldr	r3, [pc, #128]	@ (80043d4 <I2C_RequestMemoryWrite+0xa4>)
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa25 	bl	80047a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8b5 	bl	80044d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e02c      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004378:	893b      	ldrh	r3, [r7, #8]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	629a      	str	r2, [r3, #40]	@ 0x28
 8004382:	e015      	b.n	80043b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004384:	893b      	ldrh	r3, [r7, #8]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	b29b      	uxth	r3, r3
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f89b 	bl	80044d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e012      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043a6:	893b      	ldrh	r3, [r7, #8]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f830 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	80002000 	.word	0x80002000

080043d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d103      	bne.n	80043f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d007      	beq.n	8004414 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	619a      	str	r2, [r3, #24]
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004430:	e03b      	b.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f8d6 	bl	80045e8 <I2C_IsErrorOccurred>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e041      	b.n	80044ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d02d      	beq.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444e:	f7ff f977 	bl	8003740 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <I2C_WaitOnFlagUntilTimeout+0x44>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d122      	bne.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	429a      	cmp	r2, r3
 8004480:	d113      	bne.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e00f      	b.n	80044ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4013      	ands	r3, r2
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d0b4      	beq.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044de:	e033      	b.n	8004548 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f87f 	bl	80045e8 <I2C_IsErrorOccurred>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e031      	b.n	8004558 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d025      	beq.n	8004548 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fc:	f7ff f920 	bl	8003740 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d11a      	bne.n	8004548 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b02      	cmp	r3, #2
 800451e:	d013      	beq.n	8004548 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e007      	b.n	8004558 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	d1c4      	bne.n	80044e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800456c:	e02f      	b.n	80045ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f838 	bl	80045e8 <I2C_IsErrorOccurred>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e02d      	b.n	80045de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004582:	f7ff f8dd 	bl	8003740 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d11a      	bne.n	80045ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d013      	beq.n	80045ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f043 0220 	orr.w	r2, r3, #32
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e007      	b.n	80045de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d1c8      	bne.n	800456e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d068      	beq.n	80046e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2210      	movs	r2, #16
 800461a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800461c:	e049      	b.n	80046b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d045      	beq.n	80046b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7ff f88b 	bl	8003740 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <I2C_IsErrorOccurred+0x54>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d13a      	bne.n	80046b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004646:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800464e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800465a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800465e:	d121      	bne.n	80046a4 <I2C_IsErrorOccurred+0xbc>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004666:	d01d      	beq.n	80046a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	2b20      	cmp	r3, #32
 800466c:	d01a      	beq.n	80046a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800467c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800467e:	f7ff f85f 	bl	8003740 <HAL_GetTick>
 8004682:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004684:	e00e      	b.n	80046a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004686:	f7ff f85b 	bl	8003740 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b19      	cmp	r3, #25
 8004692:	d907      	bls.n	80046a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f043 0320 	orr.w	r3, r3, #32
 800469a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80046a2:	e006      	b.n	80046b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d1e9      	bne.n	8004686 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d003      	beq.n	80046c8 <I2C_IsErrorOccurred+0xe0>
 80046c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0aa      	beq.n	800461e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2220      	movs	r2, #32
 80046d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f043 0304 	orr.w	r3, r3, #4
 80046de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004708:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800472a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	f043 0302 	orr.w	r3, r3, #2
 8004742:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800474c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01c      	beq.n	8004796 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff fe3b 	bl	80043d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6859      	ldr	r1, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <I2C_IsErrorOccurred+0x1bc>)
 800476e:	400b      	ands	r3, r1
 8004770:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800479a:	4618      	mov	r0, r3
 800479c:	3728      	adds	r7, #40	@ 0x28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	fe00e800 	.word	0xfe00e800

080047a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	817b      	strh	r3, [r7, #10]
 80047b6:	4613      	mov	r3, r2
 80047b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047c0:	7a7b      	ldrb	r3, [r7, #9]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	0d5b      	lsrs	r3, r3, #21
 80047e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <I2C_TransferConfig+0x60>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	43db      	mvns	r3, r3
 80047ec:	ea02 0103 	and.w	r1, r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	03ff63ff 	.word	0x03ff63ff

0800480c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b20      	cmp	r3, #32
 8004820:	d138      	bne.n	8004894 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800482c:	2302      	movs	r3, #2
 800482e:	e032      	b.n	8004896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	@ 0x24
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800485e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d139      	bne.n	800492c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e033      	b.n	800492e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2224      	movs	r2, #36	@ 0x24
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004942:	af00      	add	r7, sp, #0
 8004944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004948:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800494c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800494e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f001 b823 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 817d 	beq.w	8004c72 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004978:	4bbc      	ldr	r3, [pc, #752]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b04      	cmp	r3, #4
 8004982:	d00c      	beq.n	800499e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004984:	4bb9      	ldr	r3, [pc, #740]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b08      	cmp	r3, #8
 800498e:	d15c      	bne.n	8004a4a <HAL_RCC_OscConfig+0x10e>
 8004990:	4bb6      	ldr	r3, [pc, #728]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499c:	d155      	bne.n	8004a4a <HAL_RCC_OscConfig+0x10e>
 800499e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049a2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d102      	bne.n	80049d0 <HAL_RCC_OscConfig+0x94>
 80049ca:	4ba8      	ldr	r3, [pc, #672]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	e015      	b.n	80049fc <HAL_RCC_OscConfig+0xc0>
 80049d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049d4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80049dc:	fa93 f3a3 	rbit	r3, r3
 80049e0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80049e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049e8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80049ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80049f8:	4b9c      	ldr	r3, [pc, #624]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a00:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004a04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004a08:	fa92 f2a2 	rbit	r2, r2
 8004a0c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004a10:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004a14:	fab2 f282 	clz	r2, r2
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	f042 0220 	orr.w	r2, r2, #32
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	f002 021f 	and.w	r2, r2, #31
 8004a24:	2101      	movs	r1, #1
 8004a26:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 811f 	beq.w	8004c70 <HAL_RCC_OscConfig+0x334>
 8004a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 8116 	bne.w	8004c70 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f000 bfaf 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x12e>
 8004a5c:	4b83      	ldr	r3, [pc, #524]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a82      	ldr	r2, [pc, #520]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e036      	b.n	8004ad8 <HAL_RCC_OscConfig+0x19c>
 8004a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x158>
 8004a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7b      	ldr	r2, [pc, #492]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b79      	ldr	r3, [pc, #484]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a78      	ldr	r2, [pc, #480]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004a8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e021      	b.n	8004ad8 <HAL_RCC_OscConfig+0x19c>
 8004a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x184>
 8004aa6:	4b71      	ldr	r3, [pc, #452]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a70      	ldr	r2, [pc, #448]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4b6e      	ldr	r3, [pc, #440]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a6d      	ldr	r2, [pc, #436]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x19c>
 8004ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a69      	ldr	r2, [pc, #420]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b67      	ldr	r3, [pc, #412]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a66      	ldr	r2, [pc, #408]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ad8:	4b64      	ldr	r3, [pc, #400]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	f023 020f 	bic.w	r2, r3, #15
 8004ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	495f      	ldr	r1, [pc, #380]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d059      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7fe fe1d 	bl	8003740 <HAL_GetTick>
 8004b06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fe fe18 	bl	8003740 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b64      	cmp	r3, #100	@ 0x64
 8004b1a:	d902      	bls.n	8004b22 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	f000 bf43 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>
 8004b22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b26:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004b36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	fab3 f383 	clz	r3, r3
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d102      	bne.n	8004b54 <HAL_RCC_OscConfig+0x218>
 8004b4e:	4b47      	ldr	r3, [pc, #284]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	e015      	b.n	8004b80 <HAL_RCC_OscConfig+0x244>
 8004b54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b58:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004b68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b6c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004b70:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004b74:	fa93 f3a3 	rbit	r3, r3
 8004b78:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b84:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004b88:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004b8c:	fa92 f2a2 	rbit	r2, r2
 8004b90:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004b94:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004b98:	fab2 f282 	clz	r2, r2
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	f042 0220 	orr.w	r2, r2, #32
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	f002 021f 	and.w	r2, r2, #31
 8004ba8:	2101      	movs	r1, #1
 8004baa:	fa01 f202 	lsl.w	r2, r1, r2
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ab      	beq.n	8004b0c <HAL_RCC_OscConfig+0x1d0>
 8004bb4:	e05d      	b.n	8004c72 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fe fdc3 	bl	8003740 <HAL_GetTick>
 8004bba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fe fdbe 	bl	8003740 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b64      	cmp	r3, #100	@ 0x64
 8004bce:	d902      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	f000 bee9 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>
 8004bd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bda:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004be2:	fa93 f3a3 	rbit	r3, r3
 8004be6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004bea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d102      	bne.n	8004c08 <HAL_RCC_OscConfig+0x2cc>
 8004c02:	4b1a      	ldr	r3, [pc, #104]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	e015      	b.n	8004c34 <HAL_RCC_OscConfig+0x2f8>
 8004c08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c0c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004c1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c20:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004c24:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004c28:	fa93 f3a3 	rbit	r3, r3
 8004c2c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004c30:	4b0e      	ldr	r3, [pc, #56]	@ (8004c6c <HAL_RCC_OscConfig+0x330>)
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c38:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004c3c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004c40:	fa92 f2a2 	rbit	r2, r2
 8004c44:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004c48:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004c4c:	fab2 f282 	clz	r2, r2
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	f042 0220 	orr.w	r2, r2, #32
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	f002 021f 	and.w	r2, r2, #31
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ab      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x284>
 8004c68:	e003      	b.n	8004c72 <HAL_RCC_OscConfig+0x336>
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 817d 	beq.w	8004f82 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c88:	4ba6      	ldr	r3, [pc, #664]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00b      	beq.n	8004cac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c94:	4ba3      	ldr	r3, [pc, #652]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d172      	bne.n	8004d86 <HAL_RCC_OscConfig+0x44a>
 8004ca0:	4ba0      	ldr	r3, [pc, #640]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d16c      	bne.n	8004d86 <HAL_RCC_OscConfig+0x44a>
 8004cac:	2302      	movs	r3, #2
 8004cae:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004cbe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d102      	bne.n	8004cdc <HAL_RCC_OscConfig+0x3a0>
 8004cd6:	4b93      	ldr	r3, [pc, #588]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	e013      	b.n	8004d04 <HAL_RCC_OscConfig+0x3c8>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004cee:	2302      	movs	r3, #2
 8004cf0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004cf4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004d00:	4b88      	ldr	r3, [pc, #544]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	2202      	movs	r2, #2
 8004d06:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004d0a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004d0e:	fa92 f2a2 	rbit	r2, r2
 8004d12:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004d16:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004d1a:	fab2 f282 	clz	r2, r2
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	f042 0220 	orr.w	r2, r2, #32
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	f002 021f 	and.w	r2, r2, #31
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCC_OscConfig+0x410>
 8004d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d002      	beq.n	8004d4c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f000 be2e 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4c:	4b75      	ldr	r3, [pc, #468]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	21f8      	movs	r1, #248	@ 0xf8
 8004d62:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004d6a:	fa91 f1a1 	rbit	r1, r1
 8004d6e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004d72:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004d76:	fab1 f181 	clz	r1, r1
 8004d7a:	b2c9      	uxtb	r1, r1
 8004d7c:	408b      	lsls	r3, r1
 8004d7e:	4969      	ldr	r1, [pc, #420]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d84:	e0fd      	b.n	8004f82 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8088 	beq.w	8004ea8 <HAL_RCC_OscConfig+0x56c>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004da2:	fa93 f3a3 	rbit	r3, r3
 8004da6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004daa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004db8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fe fcbc 	bl	8003740 <HAL_GetTick>
 8004dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dce:	f7fe fcb7 	bl	8003740 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d902      	bls.n	8004de4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	f000 bde2 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>
 8004de4:	2302      	movs	r3, #2
 8004de6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004df6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	fab3 f383 	clz	r3, r3
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d102      	bne.n	8004e14 <HAL_RCC_OscConfig+0x4d8>
 8004e0e:	4b45      	ldr	r3, [pc, #276]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	e013      	b.n	8004e3c <HAL_RCC_OscConfig+0x500>
 8004e14:	2302      	movs	r3, #2
 8004e16:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004e1e:	fa93 f3a3 	rbit	r3, r3
 8004e22:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004e26:	2302      	movs	r3, #2
 8004e28:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004e2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004e30:	fa93 f3a3 	rbit	r3, r3
 8004e34:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004e38:	4b3a      	ldr	r3, [pc, #232]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004e42:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004e46:	fa92 f2a2 	rbit	r2, r2
 8004e4a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004e4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004e52:	fab2 f282 	clz	r2, r2
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	f042 0220 	orr.w	r2, r2, #32
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	f002 021f 	and.w	r2, r2, #31
 8004e62:	2101      	movs	r1, #1
 8004e64:	fa01 f202 	lsl.w	r2, r1, r2
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0af      	beq.n	8004dce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	21f8      	movs	r1, #248	@ 0xf8
 8004e84:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004e8c:	fa91 f1a1 	rbit	r1, r1
 8004e90:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004e94:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004e98:	fab1 f181 	clz	r1, r1
 8004e9c:	b2c9      	uxtb	r1, r1
 8004e9e:	408b      	lsls	r3, r1
 8004ea0:	4920      	ldr	r1, [pc, #128]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
 8004ea6:	e06c      	b.n	8004f82 <HAL_RCC_OscConfig+0x646>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004eba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ebe:	fab3 f383 	clz	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ec8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fc34 	bl	8003740 <HAL_GetTick>
 8004ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ede:	f7fe fc2f 	bl	8003740 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d902      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	f000 bd5a 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	fab3 f383 	clz	r3, r3
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d104      	bne.n	8004f28 <HAL_RCC_OscConfig+0x5ec>
 8004f1e:	4b01      	ldr	r3, [pc, #4]	@ (8004f24 <HAL_RCC_OscConfig+0x5e8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	e015      	b.n	8004f50 <HAL_RCC_OscConfig+0x614>
 8004f24:	40021000 	.word	0x40021000
 8004f28:	2302      	movs	r3, #2
 8004f2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004f32:	fa93 f3a3 	rbit	r3, r3
 8004f36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004f40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f44:	fa93 f3a3 	rbit	r3, r3
 8004f48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004f4c:	4bc8      	ldr	r3, [pc, #800]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	2202      	movs	r2, #2
 8004f52:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004f56:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004f5a:	fa92 f2a2 	rbit	r2, r2
 8004f5e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004f62:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004f66:	fab2 f282 	clz	r2, r2
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	f042 0220 	orr.w	r2, r2, #32
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	f002 021f 	and.w	r2, r2, #31
 8004f76:	2101      	movs	r1, #1
 8004f78:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1ad      	bne.n	8004ede <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8110 	beq.w	80051b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d079      	beq.n	800509c <HAL_RCC_OscConfig+0x760>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4bab      	ldr	r3, [pc, #684]	@ (8005274 <HAL_RCC_OscConfig+0x938>)
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2301      	movs	r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd2:	f7fe fbb5 	bl	8003740 <HAL_GetTick>
 8004fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fdc:	f7fe fbb0 	bl	8003740 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d902      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	f000 bcdb 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004ffc:	fa93 f3a3 	rbit	r3, r3
 8005000:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005008:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800500c:	2202      	movs	r2, #2
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005014:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	fa93 f2a3 	rbit	r2, r3
 800501e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800502c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005030:	2202      	movs	r2, #2
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	fa93 f2a3 	rbit	r2, r3
 8005042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005046:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800504a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504c:	4b88      	ldr	r3, [pc, #544]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 800504e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005054:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005058:	2102      	movs	r1, #2
 800505a:	6019      	str	r1, [r3, #0]
 800505c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005060:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	fa93 f1a3 	rbit	r1, r3
 800506a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800506e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005072:	6019      	str	r1, [r3, #0]
  return result;
 8005074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005078:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	fab3 f383 	clz	r3, r3
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2101      	movs	r1, #1
 8005090:	fa01 f303 	lsl.w	r3, r1, r3
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0a0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x6a0>
 800509a:	e08d      	b.n	80051b8 <HAL_RCC_OscConfig+0x87c>
 800509c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	fa93 f2a3 	rbit	r2, r3
 80050b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050be:	601a      	str	r2, [r3, #0]
  return result;
 80050c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ca:	fab3 f383 	clz	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	4b68      	ldr	r3, [pc, #416]	@ (8005274 <HAL_RCC_OscConfig+0x938>)
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	461a      	mov	r2, r3
 80050da:	2300      	movs	r3, #0
 80050dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050de:	f7fe fb2f 	bl	8003740 <HAL_GetTick>
 80050e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e8:	f7fe fb2a 	bl	8003740 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d902      	bls.n	80050fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	f000 bc55 	b.w	80059a8 <HAL_RCC_OscConfig+0x106c>
 80050fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005102:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005106:	2202      	movs	r2, #2
 8005108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800510e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	fa93 f2a3 	rbit	r2, r3
 8005118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800511c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005126:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800512a:	2202      	movs	r2, #2
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005132:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	fa93 f2a3 	rbit	r2, r3
 800513c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005140:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800514a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800514e:	2202      	movs	r2, #2
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005156:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	fa93 f2a3 	rbit	r2, r3
 8005160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005164:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005168:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516a:	4b41      	ldr	r3, [pc, #260]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 800516c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800516e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005172:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005176:	2102      	movs	r1, #2
 8005178:	6019      	str	r1, [r3, #0]
 800517a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800517e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	fa93 f1a3 	rbit	r1, r3
 8005188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800518c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005190:	6019      	str	r1, [r3, #0]
  return result;
 8005192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005196:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	fab3 f383 	clz	r3, r3
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	2101      	movs	r1, #1
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d197      	bne.n	80050e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 81a1 	beq.w	8005510 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d4:	4b26      	ldr	r3, [pc, #152]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d116      	bne.n	800520e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e0:	4b23      	ldr	r3, [pc, #140]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4a22      	ldr	r2, [pc, #136]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 80051e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	61d3      	str	r3, [r2, #28]
 80051ec:	4b20      	ldr	r3, [pc, #128]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80051f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051f8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005202:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005206:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520e:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <HAL_RCC_OscConfig+0x93c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d11a      	bne.n	8005250 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800521a:	4b17      	ldr	r3, [pc, #92]	@ (8005278 <HAL_RCC_OscConfig+0x93c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <HAL_RCC_OscConfig+0x93c>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005224:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005226:	f7fe fa8b 	bl	8003740 <HAL_GetTick>
 800522a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522e:	e009      	b.n	8005244 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005230:	f7fe fa86 	bl	8003740 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b64      	cmp	r3, #100	@ 0x64
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e3b1      	b.n	80059a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <HAL_RCC_OscConfig+0x93c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ef      	beq.n	8005230 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10d      	bne.n	800527c <HAL_RCC_OscConfig+0x940>
 8005260:	4b03      	ldr	r3, [pc, #12]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a02      	ldr	r2, [pc, #8]	@ (8005270 <HAL_RCC_OscConfig+0x934>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6213      	str	r3, [r2, #32]
 800526c:	e03c      	b.n	80052e8 <HAL_RCC_OscConfig+0x9ac>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	10908120 	.word	0x10908120
 8005278:	40007000 	.word	0x40007000
 800527c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005280:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10c      	bne.n	80052a6 <HAL_RCC_OscConfig+0x96a>
 800528c:	4bc1      	ldr	r3, [pc, #772]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	4ac0      	ldr	r2, [pc, #768]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	6213      	str	r3, [r2, #32]
 8005298:	4bbe      	ldr	r3, [pc, #760]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4abd      	ldr	r2, [pc, #756]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 800529e:	f023 0304 	bic.w	r3, r3, #4
 80052a2:	6213      	str	r3, [r2, #32]
 80052a4:	e020      	b.n	80052e8 <HAL_RCC_OscConfig+0x9ac>
 80052a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x994>
 80052b6:	4bb7      	ldr	r3, [pc, #732]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	4ab6      	ldr	r2, [pc, #728]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80052bc:	f043 0304 	orr.w	r3, r3, #4
 80052c0:	6213      	str	r3, [r2, #32]
 80052c2:	4bb4      	ldr	r3, [pc, #720]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	4ab3      	ldr	r2, [pc, #716]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	6213      	str	r3, [r2, #32]
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0x9ac>
 80052d0:	4bb0      	ldr	r3, [pc, #704]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4aaf      	ldr	r2, [pc, #700]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6213      	str	r3, [r2, #32]
 80052dc:	4bad      	ldr	r3, [pc, #692]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	4aac      	ldr	r2, [pc, #688]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8081 	beq.w	80053fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fa:	f7fe fa21 	bl	8003740 <HAL_GetTick>
 80052fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005304:	f7fe fa1c 	bl	8003740 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e345      	b.n	80059a8 <HAL_RCC_OscConfig+0x106c>
 800531c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005320:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005324:	2202      	movs	r2, #2
 8005326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800532c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	fa93 f2a3 	rbit	r2, r3
 8005336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800533a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005344:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005348:	2202      	movs	r2, #2
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005350:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	fa93 f2a3 	rbit	r2, r3
 800535a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800535e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005362:	601a      	str	r2, [r3, #0]
  return result;
 8005364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005368:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800536c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f043 0302 	orr.w	r3, r3, #2
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d102      	bne.n	8005388 <HAL_RCC_OscConfig+0xa4c>
 8005382:	4b84      	ldr	r3, [pc, #528]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	e013      	b.n	80053b0 <HAL_RCC_OscConfig+0xa74>
 8005388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800538c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005390:	2202      	movs	r2, #2
 8005392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005398:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	fa93 f2a3 	rbit	r2, r3
 80053a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053a6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	4b79      	ldr	r3, [pc, #484]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80053b4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80053b8:	2102      	movs	r1, #2
 80053ba:	6011      	str	r1, [r2, #0]
 80053bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80053c0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	fa92 f1a2 	rbit	r1, r2
 80053ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80053ce:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80053d2:	6011      	str	r1, [r2, #0]
  return result;
 80053d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80053d8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	fab2 f282 	clz	r2, r2
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	f002 021f 	and.w	r2, r2, #31
 80053ee:	2101      	movs	r1, #1
 80053f0:	fa01 f202 	lsl.w	r2, r1, r2
 80053f4:	4013      	ands	r3, r2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d084      	beq.n	8005304 <HAL_RCC_OscConfig+0x9c8>
 80053fa:	e07f      	b.n	80054fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fc:	f7fe f9a0 	bl	8003740 <HAL_GetTick>
 8005400:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005404:	e00b      	b.n	800541e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005406:	f7fe f99b 	bl	8003740 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e2c4      	b.n	80059a8 <HAL_RCC_OscConfig+0x106c>
 800541e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005422:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005426:	2202      	movs	r2, #2
 8005428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800542e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	fa93 f2a3 	rbit	r2, r3
 8005438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800543c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005446:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800544a:	2202      	movs	r2, #2
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005452:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	fa93 f2a3 	rbit	r2, r3
 800545c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005460:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005464:	601a      	str	r2, [r3, #0]
  return result;
 8005466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800546a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800546e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005470:	fab3 f383 	clz	r3, r3
 8005474:	b2db      	uxtb	r3, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f043 0302 	orr.w	r3, r3, #2
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d102      	bne.n	800548a <HAL_RCC_OscConfig+0xb4e>
 8005484:	4b43      	ldr	r3, [pc, #268]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	e013      	b.n	80054b2 <HAL_RCC_OscConfig+0xb76>
 800548a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800548e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005492:	2202      	movs	r2, #2
 8005494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800549a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	fa93 f2a3 	rbit	r2, r3
 80054a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054a8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	4b39      	ldr	r3, [pc, #228]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054b6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80054ba:	2102      	movs	r1, #2
 80054bc:	6011      	str	r1, [r2, #0]
 80054be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054c2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	fa92 f1a2 	rbit	r1, r2
 80054cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054d0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80054d4:	6011      	str	r1, [r2, #0]
  return result;
 80054d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054da:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	fab2 f282 	clz	r2, r2
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	f002 021f 	and.w	r2, r2, #31
 80054f0:	2101      	movs	r1, #1
 80054f2:	fa01 f202 	lsl.w	r2, r1, r2
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d184      	bne.n	8005406 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005500:	2b01      	cmp	r3, #1
 8005502:	d105      	bne.n	8005510 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005504:	4b23      	ldr	r3, [pc, #140]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	4a22      	ldr	r2, [pc, #136]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 800550a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800550e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8242 	beq.w	80059a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005522:	4b1c      	ldr	r3, [pc, #112]	@ (8005594 <HAL_RCC_OscConfig+0xc58>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b08      	cmp	r3, #8
 800552c:	f000 8213 	beq.w	8005956 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005534:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	2b02      	cmp	r3, #2
 800553e:	f040 8162 	bne.w	8005806 <HAL_RCC_OscConfig+0xeca>
 8005542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005546:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800554a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800554e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005554:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	fa93 f2a3 	rbit	r2, r3
 800555e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005562:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005566:	601a      	str	r2, [r3, #0]
  return result;
 8005568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800556c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005570:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005572:	fab3 f383 	clz	r3, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800557c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fe f8da 	bl	8003740 <HAL_GetTick>
 800558c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005590:	e00c      	b.n	80055ac <HAL_RCC_OscConfig+0xc70>
 8005592:	bf00      	nop
 8005594:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005598:	f7fe f8d2 	bl	8003740 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e1fd      	b.n	80059a8 <HAL_RCC_OscConfig+0x106c>
 80055ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055b0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80055b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	fa93 f2a3 	rbit	r2, r3
 80055c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055cc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80055d0:	601a      	str	r2, [r3, #0]
  return result;
 80055d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055d6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80055da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055dc:	fab3 f383 	clz	r3, r3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d102      	bne.n	80055f6 <HAL_RCC_OscConfig+0xcba>
 80055f0:	4bb0      	ldr	r3, [pc, #704]	@ (80058b4 <HAL_RCC_OscConfig+0xf78>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	e027      	b.n	8005646 <HAL_RCC_OscConfig+0xd0a>
 80055f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055fa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80055fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005608:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	fa93 f2a3 	rbit	r2, r3
 8005612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005616:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005620:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005624:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800562e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	fa93 f2a3 	rbit	r2, r3
 8005638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800563c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	4b9c      	ldr	r3, [pc, #624]	@ (80058b4 <HAL_RCC_OscConfig+0xf78>)
 8005644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005646:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800564a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800564e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005652:	6011      	str	r1, [r2, #0]
 8005654:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005658:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	fa92 f1a2 	rbit	r1, r2
 8005662:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005666:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800566a:	6011      	str	r1, [r2, #0]
  return result;
 800566c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005670:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	fab2 f282 	clz	r2, r2
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	f042 0220 	orr.w	r2, r2, #32
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	f002 021f 	and.w	r2, r2, #31
 8005686:	2101      	movs	r1, #1
 8005688:	fa01 f202 	lsl.w	r2, r1, r2
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d182      	bne.n	8005598 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005692:	4b88      	ldr	r3, [pc, #544]	@ (80058b4 <HAL_RCC_OscConfig+0xf78>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800569a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800569e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80056a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	430b      	orrs	r3, r1
 80056b4:	497f      	ldr	r1, [pc, #508]	@ (80058b4 <HAL_RCC_OscConfig+0xf78>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	604b      	str	r3, [r1, #4]
 80056ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056be:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80056c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056cc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	fa93 f2a3 	rbit	r2, r3
 80056d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056da:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80056de:	601a      	str	r2, [r3, #0]
  return result;
 80056e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056e4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80056e8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ea:	fab3 f383 	clz	r3, r3
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80056f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	461a      	mov	r2, r3
 80056fc:	2301      	movs	r3, #1
 80056fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fe f81e 	bl	8003740 <HAL_GetTick>
 8005704:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005708:	e009      	b.n	800571e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570a:	f7fe f819 	bl	8003740 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e144      	b.n	80059a8 <HAL_RCC_OscConfig+0x106c>
 800571e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005722:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005726:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800572a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005730:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	fa93 f2a3 	rbit	r2, r3
 800573a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800573e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005742:	601a      	str	r2, [r3, #0]
  return result;
 8005744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005748:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800574c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	d102      	bne.n	8005768 <HAL_RCC_OscConfig+0xe2c>
 8005762:	4b54      	ldr	r3, [pc, #336]	@ (80058b4 <HAL_RCC_OscConfig+0xf78>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	e027      	b.n	80057b8 <HAL_RCC_OscConfig+0xe7c>
 8005768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800576c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005770:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800577a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	fa93 f2a3 	rbit	r2, r3
 8005784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005788:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005792:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	fa93 f2a3 	rbit	r2, r3
 80057aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	4b3f      	ldr	r3, [pc, #252]	@ (80058b4 <HAL_RCC_OscConfig+0xf78>)
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80057bc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80057c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80057ca:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	fa92 f1a2 	rbit	r1, r2
 80057d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80057d8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80057dc:	6011      	str	r1, [r2, #0]
  return result;
 80057de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80057e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	fab2 f282 	clz	r2, r2
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	f042 0220 	orr.w	r2, r2, #32
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	f002 021f 	and.w	r2, r2, #31
 80057f8:	2101      	movs	r1, #1
 80057fa:	fa01 f202 	lsl.w	r2, r1, r2
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d082      	beq.n	800570a <HAL_RCC_OscConfig+0xdce>
 8005804:	e0cf      	b.n	80059a6 <HAL_RCC_OscConfig+0x106a>
 8005806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800580a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800580e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005818:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	fa93 f2a3 	rbit	r2, r3
 8005822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005826:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800582a:	601a      	str	r2, [r3, #0]
  return result;
 800582c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005830:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005834:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005836:	fab3 f383 	clz	r3, r3
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005840:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fd ff78 	bl	8003740 <HAL_GetTick>
 8005850:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005854:	e009      	b.n	800586a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005856:	f7fd ff73 	bl	8003740 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e09e      	b.n	80059a8 <HAL_RCC_OscConfig+0x106c>
 800586a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800586e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005872:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800587c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	fa93 f2a3 	rbit	r2, r3
 8005886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800588a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800588e:	601a      	str	r2, [r3, #0]
  return result;
 8005890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005894:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005898:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800589a:	fab3 f383 	clz	r3, r3
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d104      	bne.n	80058b8 <HAL_RCC_OscConfig+0xf7c>
 80058ae:	4b01      	ldr	r3, [pc, #4]	@ (80058b4 <HAL_RCC_OscConfig+0xf78>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	e029      	b.n	8005908 <HAL_RCC_OscConfig+0xfcc>
 80058b4:	40021000 	.word	0x40021000
 80058b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058bc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80058c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058ca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	fa93 f2a3 	rbit	r2, r3
 80058d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058d8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058e2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80058e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058f0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	fa93 f2a3 	rbit	r2, r3
 80058fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058fe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	4b2b      	ldr	r3, [pc, #172]	@ (80059b4 <HAL_RCC_OscConfig+0x1078>)
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800590c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005910:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800591a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	fa92 f1a2 	rbit	r1, r2
 8005924:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005928:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800592c:	6011      	str	r1, [r2, #0]
  return result;
 800592e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005932:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	fab2 f282 	clz	r2, r2
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	f042 0220 	orr.w	r2, r2, #32
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	f002 021f 	and.w	r2, r2, #31
 8005948:	2101      	movs	r1, #1
 800594a:	fa01 f202 	lsl.w	r2, r1, r2
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d180      	bne.n	8005856 <HAL_RCC_OscConfig+0xf1a>
 8005954:	e027      	b.n	80059a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800595a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e01e      	b.n	80059a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800596a:	4b12      	ldr	r3, [pc, #72]	@ (80059b4 <HAL_RCC_OscConfig+0x1078>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005972:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005976:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800597a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800597e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	429a      	cmp	r2, r3
 8005988:	d10b      	bne.n	80059a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800598a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800598e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005996:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800599e:	429a      	cmp	r2, r3
 80059a0:	d001      	beq.n	80059a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000

080059b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b09e      	sub	sp, #120	@ 0x78
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e162      	b.n	8005c96 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d0:	4b90      	ldr	r3, [pc, #576]	@ (8005c14 <HAL_RCC_ClockConfig+0x25c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d910      	bls.n	8005a00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059de:	4b8d      	ldr	r3, [pc, #564]	@ (8005c14 <HAL_RCC_ClockConfig+0x25c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 0207 	bic.w	r2, r3, #7
 80059e6:	498b      	ldr	r1, [pc, #556]	@ (8005c14 <HAL_RCC_ClockConfig+0x25c>)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ee:	4b89      	ldr	r3, [pc, #548]	@ (8005c14 <HAL_RCC_ClockConfig+0x25c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e14a      	b.n	8005c96 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a0c:	4b82      	ldr	r3, [pc, #520]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	497f      	ldr	r1, [pc, #508]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80dc 	beq.w	8005be4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d13c      	bne.n	8005aae <HAL_RCC_ClockConfig+0xf6>
 8005a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a38:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a3c:	fa93 f3a3 	rbit	r3, r3
 8005a40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a44:	fab3 f383 	clz	r3, r3
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d102      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xa6>
 8005a58:	4b6f      	ldr	r3, [pc, #444]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	e00f      	b.n	8005a7e <HAL_RCC_ClockConfig+0xc6>
 8005a5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a62:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a66:	fa93 f3a3 	rbit	r3, r3
 8005a6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a70:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a74:	fa93 f3a3 	rbit	r3, r3
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7a:	4b67      	ldr	r3, [pc, #412]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005a82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a86:	fa92 f2a2 	rbit	r2, r2
 8005a8a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005a8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a8e:	fab2 f282 	clz	r2, r2
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	f042 0220 	orr.w	r2, r2, #32
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	f002 021f 	and.w	r2, r2, #31
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d17b      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e0f3      	b.n	8005c96 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d13c      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x178>
 8005ab6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005aba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005abe:	fa93 f3a3 	rbit	r3, r3
 8005ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac6:	fab3 f383 	clz	r3, r3
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d102      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x128>
 8005ada:	4b4f      	ldr	r3, [pc, #316]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	e00f      	b.n	8005b00 <HAL_RCC_ClockConfig+0x148>
 8005ae0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae8:	fa93 f3a3 	rbit	r3, r3
 8005aec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005af2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af6:	fa93 f3a3 	rbit	r3, r3
 8005afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005afc:	4b46      	ldr	r3, [pc, #280]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b04:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005b06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b08:	fa92 f2a2 	rbit	r2, r2
 8005b0c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b10:	fab2 f282 	clz	r2, r2
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	f042 0220 	orr.w	r2, r2, #32
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	f002 021f 	and.w	r2, r2, #31
 8005b20:	2101      	movs	r1, #1
 8005b22:	fa01 f202 	lsl.w	r2, r1, r2
 8005b26:	4013      	ands	r3, r2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d13a      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0b2      	b.n	8005c96 <HAL_RCC_ClockConfig+0x2de>
 8005b30:	2302      	movs	r3, #2
 8005b32:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b36:	fa93 f3a3 	rbit	r3, r3
 8005b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b3e:	fab3 f383 	clz	r3, r3
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d102      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x1a0>
 8005b52:	4b31      	ldr	r3, [pc, #196]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	e00d      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1bc>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	fa93 f3a3 	rbit	r3, r3
 8005b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b64:	2302      	movs	r3, #2
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	fa93 f3a3 	rbit	r3, r3
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	4b29      	ldr	r3, [pc, #164]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	2202      	movs	r2, #2
 8005b76:	61ba      	str	r2, [r7, #24]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	fa92 f2a2 	rbit	r2, r2
 8005b7e:	617a      	str	r2, [r7, #20]
  return result;
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	fab2 f282 	clz	r2, r2
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	f042 0220 	orr.w	r2, r2, #32
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	f002 021f 	and.w	r2, r2, #31
 8005b92:	2101      	movs	r1, #1
 8005b94:	fa01 f202 	lsl.w	r2, r1, r2
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e079      	b.n	8005c96 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f023 0203 	bic.w	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	491a      	ldr	r1, [pc, #104]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bb4:	f7fd fdc4 	bl	8003740 <HAL_GetTick>
 8005bb8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bba:	e00a      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bbc:	f7fd fdc0 	bl	8003740 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e061      	b.n	8005c96 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd2:	4b11      	ldr	r3, [pc, #68]	@ (8005c18 <HAL_RCC_ClockConfig+0x260>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 020c 	and.w	r2, r3, #12
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d1eb      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005be4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <HAL_RCC_ClockConfig+0x25c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d214      	bcs.n	8005c1c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf2:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <HAL_RCC_ClockConfig+0x25c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 0207 	bic.w	r2, r3, #7
 8005bfa:	4906      	ldr	r1, [pc, #24]	@ (8005c14 <HAL_RCC_ClockConfig+0x25c>)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c02:	4b04      	ldr	r3, [pc, #16]	@ (8005c14 <HAL_RCC_ClockConfig+0x25c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e040      	b.n	8005c96 <HAL_RCC_ClockConfig+0x2de>
 8005c14:	40022000 	.word	0x40022000
 8005c18:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	491a      	ldr	r1, [pc, #104]	@ (8005ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c46:	4b16      	ldr	r3, [pc, #88]	@ (8005ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	4912      	ldr	r1, [pc, #72]	@ (8005ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c5a:	f000 f829 	bl	8005cb0 <HAL_RCC_GetSysClockFreq>
 8005c5e:	4601      	mov	r1, r0
 8005c60:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c68:	22f0      	movs	r2, #240	@ 0xf0
 8005c6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	fa92 f2a2 	rbit	r2, r2
 8005c72:	60fa      	str	r2, [r7, #12]
  return result;
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	fab2 f282 	clz	r2, r2
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	40d3      	lsrs	r3, r2
 8005c7e:	4a09      	ldr	r2, [pc, #36]	@ (8005ca4 <HAL_RCC_ClockConfig+0x2ec>)
 8005c80:	5cd3      	ldrb	r3, [r2, r3]
 8005c82:	fa21 f303 	lsr.w	r3, r1, r3
 8005c86:	4a08      	ldr	r2, [pc, #32]	@ (8005ca8 <HAL_RCC_ClockConfig+0x2f0>)
 8005c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c8a:	4b08      	ldr	r3, [pc, #32]	@ (8005cac <HAL_RCC_ClockConfig+0x2f4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fd fd12 	bl	80036b8 <HAL_InitTick>
  
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3778      	adds	r7, #120	@ 0x78
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	08008ec8 	.word	0x08008ec8
 8005ca8:	20000000 	.word	0x20000000
 8005cac:	20000004 	.word	0x20000004

08005cb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005cca:	4b1e      	ldr	r3, [pc, #120]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d002      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x30>
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x36>
 8005cde:	e026      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ce0:	4b19      	ldr	r3, [pc, #100]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ce2:	613b      	str	r3, [r7, #16]
      break;
 8005ce4:	e026      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	0c9b      	lsrs	r3, r3, #18
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	4a17      	ldr	r2, [pc, #92]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cf0:	5cd3      	ldrb	r3, [r2, r3]
 8005cf2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005cf4:	4b13      	ldr	r3, [pc, #76]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	4a14      	ldr	r2, [pc, #80]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005cfe:	5cd3      	ldrb	r3, [r2, r3]
 8005d00:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	e004      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a0c      	ldr	r2, [pc, #48]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	613b      	str	r3, [r7, #16]
      break;
 8005d2c:	e002      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d30:	613b      	str	r3, [r7, #16]
      break;
 8005d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d34:	693b      	ldr	r3, [r7, #16]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40021000 	.word	0x40021000
 8005d48:	007a1200 	.word	0x007a1200
 8005d4c:	08008ee0 	.word	0x08008ee0
 8005d50:	08008ef0 	.word	0x08008ef0
 8005d54:	003d0900 	.word	0x003d0900

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	@ (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000000 	.word	0x20000000

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d76:	f7ff ffef 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d84:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005d88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	fa92 f2a2 	rbit	r2, r2
 8005d90:	603a      	str	r2, [r7, #0]
  return result;
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	fab2 f282 	clz	r2, r2
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	40d3      	lsrs	r3, r2
 8005d9c:	4a04      	ldr	r2, [pc, #16]	@ (8005db0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005d9e:	5cd3      	ldrb	r3, [r2, r3]
 8005da0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40021000 	.word	0x40021000
 8005db0:	08008ed8 	.word	0x08008ed8

08005db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005dba:	f7ff ffcd 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005dc8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005dcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	fa92 f2a2 	rbit	r2, r2
 8005dd4:	603a      	str	r2, [r7, #0]
  return result;
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	fab2 f282 	clz	r2, r2
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	40d3      	lsrs	r3, r2
 8005de0:	4a04      	ldr	r2, [pc, #16]	@ (8005df4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005de2:	5cd3      	ldrb	r3, [r2, r3]
 8005de4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40021000 	.word	0x40021000
 8005df4:	08008ed8 	.word	0x08008ed8

08005df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b092      	sub	sp, #72	@ 0x48
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80d4 	beq.w	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10e      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e28:	4b4b      	ldr	r3, [pc, #300]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e32:	61d3      	str	r3, [r2, #28]
 8005e34:	4b48      	ldr	r3, [pc, #288]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e46:	4b45      	ldr	r3, [pc, #276]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d118      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e52:	4b42      	ldr	r3, [pc, #264]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a41      	ldr	r2, [pc, #260]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e5e:	f7fd fc6f 	bl	8003740 <HAL_GetTick>
 8005e62:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e64:	e008      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e66:	f7fd fc6b 	bl	8003740 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b64      	cmp	r3, #100	@ 0x64
 8005e72:	d901      	bls.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e12d      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e78:	4b38      	ldr	r3, [pc, #224]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f0      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e84:	4b34      	ldr	r3, [pc, #208]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8084 	beq.w	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d07c      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005eb2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ebe:	fab3 f383 	clz	r3, r3
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4b26      	ldr	r3, [pc, #152]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2301      	movs	r3, #1
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	fa93 f3a3 	rbit	r3, r3
 8005ede:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee2:	fab3 f383 	clz	r3, r3
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b1d      	ldr	r3, [pc, #116]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ef6:	4a18      	ldr	r2, [pc, #96]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d04b      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f06:	f7fd fc1b 	bl	8003740 <HAL_GetTick>
 8005f0a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0c:	e00a      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0e:	f7fd fc17 	bl	8003740 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e0d7      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005f24:	2302      	movs	r3, #2
 8005f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	fa93 f3a3 	rbit	r3, r3
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f30:	2302      	movs	r3, #2
 8005f32:	623b      	str	r3, [r7, #32]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	fa93 f3a3 	rbit	r3, r3
 8005f3a:	61fb      	str	r3, [r7, #28]
  return result;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3e:	fab3 f383 	clz	r3, r3
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d108      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f52:	4b01      	ldr	r3, [pc, #4]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	e00d      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40007000 	.word	0x40007000
 8005f60:	10908100 	.word	0x10908100
 8005f64:	2302      	movs	r3, #2
 8005f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	fa93 f3a3 	rbit	r3, r3
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	4b5a      	ldr	r3, [pc, #360]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	2202      	movs	r2, #2
 8005f76:	613a      	str	r2, [r7, #16]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	fa92 f2a2 	rbit	r2, r2
 8005f7e:	60fa      	str	r2, [r7, #12]
  return result;
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	fab2 f282 	clz	r2, r2
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	f002 021f 	and.w	r2, r2, #31
 8005f92:	2101      	movs	r1, #1
 8005f94:	fa01 f202 	lsl.w	r2, r1, r2
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0b7      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	494c      	ldr	r1, [pc, #304]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fb0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d105      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb8:	4b48      	ldr	r3, [pc, #288]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	4a47      	ldr	r2, [pc, #284]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd0:	4b42      	ldr	r3, [pc, #264]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd4:	f023 0203 	bic.w	r2, r3, #3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	493f      	ldr	r1, [pc, #252]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fee:	4b3b      	ldr	r3, [pc, #236]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	4938      	ldr	r1, [pc, #224]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800600c:	4b33      	ldr	r3, [pc, #204]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800600e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006010:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	4930      	ldr	r1, [pc, #192]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800601a:	4313      	orrs	r3, r2
 800601c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800602a:	4b2c      	ldr	r3, [pc, #176]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	f023 0210 	bic.w	r2, r3, #16
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	4929      	ldr	r1, [pc, #164]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006038:	4313      	orrs	r3, r2
 800603a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006048:	4b24      	ldr	r3, [pc, #144]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006054:	4921      	ldr	r1, [pc, #132]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006056:	4313      	orrs	r3, r2
 8006058:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006066:	4b1d      	ldr	r3, [pc, #116]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	f023 0220 	bic.w	r2, r3, #32
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	491a      	ldr	r1, [pc, #104]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006074:	4313      	orrs	r3, r2
 8006076:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d008      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006084:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	4912      	ldr	r1, [pc, #72]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d008      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80060a2:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	490b      	ldr	r1, [pc, #44]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060c0:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	4903      	ldr	r1, [pc, #12]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3748      	adds	r7, #72	@ 0x48
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40021000 	.word	0x40021000

080060e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e09d      	b.n	800622e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d108      	bne.n	800610c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006102:	d009      	beq.n	8006118 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	61da      	str	r2, [r3, #28]
 800610a:	e005      	b.n	8006118 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fd f8ca 	bl	80032cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800614e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006158:	d902      	bls.n	8006160 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e002      	b.n	8006166 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006164:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800616e:	d007      	beq.n	8006180 <HAL_SPI_Init+0xa0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006178:	d002      	beq.n	8006180 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c2:	ea42 0103 	orr.w	r1, r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	0c1b      	lsrs	r3, r3, #16
 80061dc:	f003 0204 	and.w	r2, r3, #4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061fc:	ea42 0103 	orr.w	r1, r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800621c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10e      	bne.n	8006278 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
    return;
 8006276:	e0ce      	b.n	8006416 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_SPI_IRQHandler+0x5e>
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
    return;
 8006294:	e0bf      	b.n	8006416 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <HAL_SPI_IRQHandler+0x7e>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d105      	bne.n	80062b6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80b0 	beq.w	8006416 <HAL_SPI_IRQHandler+0x1de>
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80aa 	beq.w	8006416 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d023      	beq.n	8006314 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d011      	beq.n	80062fc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062dc:	f043 0204 	orr.w	r2, r3, #4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	e00b      	b.n	8006314 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062fc:	2300      	movs	r3, #0
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	693b      	ldr	r3, [r7, #16]
        return;
 8006312:	e080      	b.n	8006416 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d014      	beq.n	8006348 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006322:	f043 0201 	orr.w	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00c      	beq.n	800636c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006356:	f043 0208 	orr.w	r2, r3, #8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006370:	2b00      	cmp	r3, #0
 8006372:	d04f      	beq.n	8006414 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006382:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <HAL_SPI_IRQHandler+0x168>
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d034      	beq.n	800640a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0203 	bic.w	r2, r2, #3
 80063ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063bc:	4a17      	ldr	r2, [pc, #92]	@ (800641c <HAL_SPI_IRQHandler+0x1e4>)
 80063be:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fd fc19 	bl	8003bfc <HAL_DMA_Abort_IT>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d016      	beq.n	8006412 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e8:	4a0c      	ldr	r2, [pc, #48]	@ (800641c <HAL_SPI_IRQHandler+0x1e4>)
 80063ea:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fd fc03 	bl	8003bfc <HAL_DMA_Abort_IT>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006400:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006408:	e003      	b.n	8006412 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f808 	bl	8006420 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006410:	e000      	b.n	8006414 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006412:	bf00      	nop
    return;
 8006414:	bf00      	nop
  }
}
 8006416:	3720      	adds	r7, #32
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	08006435 	.word	0x08006435

08006420 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff ffe5 	bl	8006420 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e041      	b.n	80064f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fc ffab 	bl	80033e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f000 fbe9 	bl	8006c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d001      	beq.n	8006514 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e041      	b.n	8006598 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006524:	d01d      	beq.n	8006562 <HAL_TIM_Base_Start+0x66>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	@ (80065a4 <HAL_TIM_Base_Start+0xa8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d018      	beq.n	8006562 <HAL_TIM_Base_Start+0x66>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <HAL_TIM_Base_Start+0xac>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_TIM_Base_Start+0x66>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	@ (80065ac <HAL_TIM_Base_Start+0xb0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_TIM_Base_Start+0x66>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	@ (80065b0 <HAL_TIM_Base_Start+0xb4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d009      	beq.n	8006562 <HAL_TIM_Base_Start+0x66>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <HAL_TIM_Base_Start+0xb8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_TIM_Base_Start+0x66>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a16      	ldr	r2, [pc, #88]	@ (80065b8 <HAL_TIM_Base_Start+0xbc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d111      	bne.n	8006586 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b06      	cmp	r3, #6
 8006572:	d010      	beq.n	8006596 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0201 	orr.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006584:	e007      	b.n	8006596 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800
 80065ac:	40000c00 	.word	0x40000c00
 80065b0:	40001800 	.word	0x40001800
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40015c00 	.word	0x40015c00

080065bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d001      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e049      	b.n	8006668 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f4:	d01d      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006674 <HAL_TIM_Base_Start_IT+0xb8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d018      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1c      	ldr	r2, [pc, #112]	@ (8006678 <HAL_TIM_Base_Start_IT+0xbc>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1b      	ldr	r2, [pc, #108]	@ (800667c <HAL_TIM_Base_Start_IT+0xc0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a19      	ldr	r2, [pc, #100]	@ (8006680 <HAL_TIM_Base_Start_IT+0xc4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a18      	ldr	r2, [pc, #96]	@ (8006684 <HAL_TIM_Base_Start_IT+0xc8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x76>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a16      	ldr	r2, [pc, #88]	@ (8006688 <HAL_TIM_Base_Start_IT+0xcc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d111      	bne.n	8006656 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b06      	cmp	r3, #6
 8006642:	d010      	beq.n	8006666 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006654:	e007      	b.n	8006666 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40000c00 	.word	0x40000c00
 8006680:	40001800 	.word	0x40001800
 8006684:	40014000 	.word	0x40014000
 8006688:	40015c00 	.word	0x40015c00

0800668c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e041      	b.n	8006722 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fc fe76 	bl	80033a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f000 fad2 	bl	8006c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <HAL_TIM_PWM_Start+0x24>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	bf14      	ite	ne
 8006748:	2301      	movne	r3, #1
 800674a:	2300      	moveq	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e022      	b.n	8006796 <HAL_TIM_PWM_Start+0x6a>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b04      	cmp	r3, #4
 8006754:	d109      	bne.n	800676a <HAL_TIM_PWM_Start+0x3e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	bf14      	ite	ne
 8006762:	2301      	movne	r3, #1
 8006764:	2300      	moveq	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	e015      	b.n	8006796 <HAL_TIM_PWM_Start+0x6a>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b08      	cmp	r3, #8
 800676e:	d109      	bne.n	8006784 <HAL_TIM_PWM_Start+0x58>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e008      	b.n	8006796 <HAL_TIM_PWM_Start+0x6a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	bf14      	ite	ne
 8006790:	2301      	movne	r3, #1
 8006792:	2300      	moveq	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e07c      	b.n	8006898 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Start+0x82>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067ac:	e013      	b.n	80067d6 <HAL_TIM_PWM_Start+0xaa>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start+0x92>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067bc:	e00b      	b.n	80067d6 <HAL_TIM_PWM_Start+0xaa>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start+0xa2>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067cc:	e003      	b.n	80067d6 <HAL_TIM_PWM_Start+0xaa>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2201      	movs	r2, #1
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fc47 	bl	8007072 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a2d      	ldr	r2, [pc, #180]	@ (80068a0 <HAL_TIM_PWM_Start+0x174>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_TIM_PWM_Start+0xd6>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a2c      	ldr	r2, [pc, #176]	@ (80068a4 <HAL_TIM_PWM_Start+0x178>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_PWM_Start+0xd6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2a      	ldr	r2, [pc, #168]	@ (80068a8 <HAL_TIM_PWM_Start+0x17c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <HAL_TIM_PWM_Start+0xda>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <HAL_TIM_PWM_Start+0xdc>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d007      	beq.n	800681c <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800681a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006824:	d01d      	beq.n	8006862 <HAL_TIM_PWM_Start+0x136>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a20      	ldr	r2, [pc, #128]	@ (80068ac <HAL_TIM_PWM_Start+0x180>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d018      	beq.n	8006862 <HAL_TIM_PWM_Start+0x136>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <HAL_TIM_PWM_Start+0x184>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <HAL_TIM_PWM_Start+0x136>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1d      	ldr	r2, [pc, #116]	@ (80068b4 <HAL_TIM_PWM_Start+0x188>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00e      	beq.n	8006862 <HAL_TIM_PWM_Start+0x136>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1b      	ldr	r2, [pc, #108]	@ (80068b8 <HAL_TIM_PWM_Start+0x18c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d009      	beq.n	8006862 <HAL_TIM_PWM_Start+0x136>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a13      	ldr	r2, [pc, #76]	@ (80068a0 <HAL_TIM_PWM_Start+0x174>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d004      	beq.n	8006862 <HAL_TIM_PWM_Start+0x136>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a17      	ldr	r2, [pc, #92]	@ (80068bc <HAL_TIM_PWM_Start+0x190>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d111      	bne.n	8006886 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b06      	cmp	r3, #6
 8006872:	d010      	beq.n	8006896 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006884:	e007      	b.n	8006896 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0201 	orr.w	r2, r2, #1
 8006894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800
 80068b4:	40000c00 	.word	0x40000c00
 80068b8:	40001800 	.word	0x40001800
 80068bc:	40015c00 	.word	0x40015c00

080068c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d020      	beq.n	8006924 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0202 	mvn.w	r2, #2
 80068f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f994 	bl	8006c38 <HAL_TIM_IC_CaptureCallback>
 8006910:	e005      	b.n	800691e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f986 	bl	8006c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f997 	bl	8006c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d020      	beq.n	8006970 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0204 	mvn.w	r2, #4
 8006940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2202      	movs	r2, #2
 8006946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f96e 	bl	8006c38 <HAL_TIM_IC_CaptureCallback>
 800695c:	e005      	b.n	800696a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f960 	bl	8006c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f971 	bl	8006c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d020      	beq.n	80069bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0208 	mvn.w	r2, #8
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2204      	movs	r2, #4
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f948 	bl	8006c38 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f93a 	bl	8006c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f94b 	bl	8006c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d020      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01b      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0210 	mvn.w	r2, #16
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2208      	movs	r2, #8
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f922 	bl	8006c38 <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f914 	bl	8006c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f925 	bl	8006c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00c      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0201 	mvn.w	r2, #1
 8006a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fb fa8c 	bl	8001f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fbb4 	bl	80071b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00c      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8f6 	bl	8006c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0220 	mvn.w	r2, #32
 8006a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fb86 	bl	80071a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e0ae      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b0c      	cmp	r3, #12
 8006aca:	f200 809f 	bhi.w	8006c0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ace:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006b09 	.word	0x08006b09
 8006ad8:	08006c0d 	.word	0x08006c0d
 8006adc:	08006c0d 	.word	0x08006c0d
 8006ae0:	08006c0d 	.word	0x08006c0d
 8006ae4:	08006b49 	.word	0x08006b49
 8006ae8:	08006c0d 	.word	0x08006c0d
 8006aec:	08006c0d 	.word	0x08006c0d
 8006af0:	08006c0d 	.word	0x08006c0d
 8006af4:	08006b8b 	.word	0x08006b8b
 8006af8:	08006c0d 	.word	0x08006c0d
 8006afc:	08006c0d 	.word	0x08006c0d
 8006b00:	08006c0d 	.word	0x08006c0d
 8006b04:	08006bcb 	.word	0x08006bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f956 	bl	8006dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0208 	orr.w	r2, r2, #8
 8006b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0204 	bic.w	r2, r2, #4
 8006b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6999      	ldr	r1, [r3, #24]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	619a      	str	r2, [r3, #24]
      break;
 8006b46:	e064      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 f9b0 	bl	8006eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	619a      	str	r2, [r3, #24]
      break;
 8006b88:	e043      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f9f1 	bl	8006f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0208 	orr.w	r2, r2, #8
 8006ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69da      	ldr	r2, [r3, #28]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0204 	bic.w	r2, r2, #4
 8006bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69d9      	ldr	r1, [r3, #28]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	61da      	str	r2, [r3, #28]
      break;
 8006bc8:	e023      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fa0f 	bl	8006ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69d9      	ldr	r1, [r3, #28]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	021a      	lsls	r2, r3, #8
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	61da      	str	r2, [r3, #28]
      break;
 8006c0a:	e002      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c8a:	d00f      	beq.n	8006cac <TIM_Base_SetConfig+0x38>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a42      	ldr	r2, [pc, #264]	@ (8006d98 <TIM_Base_SetConfig+0x124>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00b      	beq.n	8006cac <TIM_Base_SetConfig+0x38>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a41      	ldr	r2, [pc, #260]	@ (8006d9c <TIM_Base_SetConfig+0x128>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d007      	beq.n	8006cac <TIM_Base_SetConfig+0x38>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a40      	ldr	r2, [pc, #256]	@ (8006da0 <TIM_Base_SetConfig+0x12c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_Base_SetConfig+0x38>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8006da4 <TIM_Base_SetConfig+0x130>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d108      	bne.n	8006cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc4:	d027      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a33      	ldr	r2, [pc, #204]	@ (8006d98 <TIM_Base_SetConfig+0x124>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d023      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a32      	ldr	r2, [pc, #200]	@ (8006d9c <TIM_Base_SetConfig+0x128>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01f      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a31      	ldr	r2, [pc, #196]	@ (8006da0 <TIM_Base_SetConfig+0x12c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d01b      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a31      	ldr	r2, [pc, #196]	@ (8006da8 <TIM_Base_SetConfig+0x134>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d017      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a30      	ldr	r2, [pc, #192]	@ (8006dac <TIM_Base_SetConfig+0x138>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8006db0 <TIM_Base_SetConfig+0x13c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00f      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8006db4 <TIM_Base_SetConfig+0x140>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00b      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a2d      	ldr	r2, [pc, #180]	@ (8006db8 <TIM_Base_SetConfig+0x144>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d007      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a2c      	ldr	r2, [pc, #176]	@ (8006dbc <TIM_Base_SetConfig+0x148>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_Base_SetConfig+0xa2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a24      	ldr	r2, [pc, #144]	@ (8006da4 <TIM_Base_SetConfig+0x130>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d108      	bne.n	8006d28 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a19      	ldr	r2, [pc, #100]	@ (8006db4 <TIM_Base_SetConfig+0x140>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d007      	beq.n	8006d64 <TIM_Base_SetConfig+0xf0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a18      	ldr	r2, [pc, #96]	@ (8006db8 <TIM_Base_SetConfig+0x144>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d003      	beq.n	8006d64 <TIM_Base_SetConfig+0xf0>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a17      	ldr	r2, [pc, #92]	@ (8006dbc <TIM_Base_SetConfig+0x148>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d103      	bne.n	8006d6c <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d105      	bne.n	8006d8a <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f023 0201 	bic.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	611a      	str	r2, [r3, #16]
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40000c00 	.word	0x40000c00
 8006da4:	40015c00 	.word	0x40015c00
 8006da8:	40001800 	.word	0x40001800
 8006dac:	40001c00 	.word	0x40001c00
 8006db0:	40002000 	.word	0x40002000
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40014400 	.word	0x40014400
 8006dbc:	40014800 	.word	0x40014800

08006dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f023 0201 	bic.w	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f023 0302 	bic.w	r3, r3, #2
 8006e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a24      	ldr	r2, [pc, #144]	@ (8006ea8 <TIM_OC1_SetConfig+0xe8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d007      	beq.n	8006e2c <TIM_OC1_SetConfig+0x6c>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a23      	ldr	r2, [pc, #140]	@ (8006eac <TIM_OC1_SetConfig+0xec>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_OC1_SetConfig+0x6c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a22      	ldr	r2, [pc, #136]	@ (8006eb0 <TIM_OC1_SetConfig+0xf0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d10c      	bne.n	8006e46 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0308 	bic.w	r3, r3, #8
 8006e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f023 0304 	bic.w	r3, r3, #4
 8006e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a17      	ldr	r2, [pc, #92]	@ (8006ea8 <TIM_OC1_SetConfig+0xe8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d007      	beq.n	8006e5e <TIM_OC1_SetConfig+0x9e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a16      	ldr	r2, [pc, #88]	@ (8006eac <TIM_OC1_SetConfig+0xec>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_OC1_SetConfig+0x9e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a15      	ldr	r2, [pc, #84]	@ (8006eb0 <TIM_OC1_SetConfig+0xf0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d111      	bne.n	8006e82 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	621a      	str	r2, [r3, #32]
}
 8006e9c:	bf00      	nop
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40014400 	.word	0x40014400
 8006eb0:	40014800 	.word	0x40014800

08006eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	f023 0210 	bic.w	r2, r3, #16
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f023 0320 	bic.w	r3, r3, #32
 8006efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	@ (8006f6c <TIM_OC2_SetConfig+0xb8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <TIM_OC2_SetConfig+0x70>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a16      	ldr	r2, [pc, #88]	@ (8006f70 <TIM_OC2_SetConfig+0xbc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_OC2_SetConfig+0x70>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a15      	ldr	r2, [pc, #84]	@ (8006f74 <TIM_OC2_SetConfig+0xc0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10f      	bne.n	8006f44 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f2a:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800

08006f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0303 	bic.w	r3, r3, #3
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800702a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800703e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007072:	b480      	push	{r7}
 8007074:	b087      	sub	sp, #28
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f003 031f 	and.w	r3, r3, #31
 8007084:	2201      	movs	r2, #1
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1a      	ldr	r2, [r3, #32]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	43db      	mvns	r3, r3
 8007094:	401a      	ands	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	fa01 f303 	lsl.w	r3, r1, r3
 80070aa:	431a      	orrs	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	621a      	str	r2, [r3, #32]
}
 80070b0:	bf00      	nop
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e055      	b.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007116:	d01d      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1b      	ldr	r2, [pc, #108]	@ (800718c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d018      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1a      	ldr	r2, [pc, #104]	@ (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a18      	ldr	r2, [pc, #96]	@ (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00e      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a17      	ldr	r2, [pc, #92]	@ (8007198 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d009      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a15      	ldr	r2, [pc, #84]	@ (800719c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a14      	ldr	r2, [pc, #80]	@ (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d10c      	bne.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800715a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	4313      	orrs	r3, r2
 8007164:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40000400 	.word	0x40000400
 8007190:	40000800 	.word	0x40000800
 8007194:	40000c00 	.word	0x40000c00
 8007198:	40001800 	.word	0x40001800
 800719c:	40014000 	.word	0x40014000
 80071a0:	40015c00 	.word	0x40015c00

080071a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e040      	b.n	8007260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fc f96c 	bl	80034cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2224      	movs	r2, #36	@ 0x24
 80071f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0201 	bic.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fde8 	bl	8007de8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fc6b 	bl	8007af4 <UART_SetConfig>
 800721e:	4603      	mov	r3, r0
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e01b      	b.n	8007260 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fe67 	bl	8007f2c <UART_CheckIdleState>
 800725e:	4603      	mov	r3, r0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	@ 0x28
 800726c:	af02      	add	r7, sp, #8
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800727c:	2b20      	cmp	r3, #32
 800727e:	d177      	bne.n	8007370 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_UART_Transmit+0x24>
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e070      	b.n	8007372 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2221      	movs	r2, #33	@ 0x21
 800729c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800729e:	f7fc fa4f 	bl	8003740 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	88fa      	ldrh	r2, [r7, #6]
 80072a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072bc:	d108      	bne.n	80072d0 <HAL_UART_Transmit+0x68>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e003      	b.n	80072d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072d8:	e02f      	b.n	800733a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	2180      	movs	r1, #128	@ 0x80
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fec9 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e03b      	b.n	8007372 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	881a      	ldrh	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800730c:	b292      	uxth	r2, r2
 800730e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	3302      	adds	r3, #2
 8007314:	61bb      	str	r3, [r7, #24]
 8007316:	e007      	b.n	8007328 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	3301      	adds	r3, #1
 8007326:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1c9      	bne.n	80072da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2200      	movs	r2, #0
 800734e:	2140      	movs	r1, #64	@ 0x40
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fe93 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e005      	b.n	8007372 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e000      	b.n	8007372 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007370:	2302      	movs	r3, #2
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b08a      	sub	sp, #40	@ 0x28
 800737e:	af02      	add	r7, sp, #8
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	4613      	mov	r3, r2
 8007388:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007390:	2b20      	cmp	r3, #32
 8007392:	f040 80a3 	bne.w	80074dc <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <HAL_UART_Receive+0x28>
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e09b      	b.n	80074de <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2222      	movs	r2, #34	@ 0x22
 80073b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073bc:	f7fc f9c0 	bl	8003740 <HAL_GetTick>
 80073c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073da:	d10e      	bne.n	80073fa <HAL_UART_Receive+0x80>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <HAL_UART_Receive+0x76>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80073ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80073ee:	e01a      	b.n	8007426 <HAL_UART_Receive+0xac>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	22ff      	movs	r2, #255	@ 0xff
 80073f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80073f8:	e015      	b.n	8007426 <HAL_UART_Receive+0xac>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10d      	bne.n	800741e <HAL_UART_Receive+0xa4>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d104      	bne.n	8007414 <HAL_UART_Receive+0x9a>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	22ff      	movs	r2, #255	@ 0xff
 800740e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007412:	e008      	b.n	8007426 <HAL_UART_Receive+0xac>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	227f      	movs	r2, #127	@ 0x7f
 8007418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800741c:	e003      	b.n	8007426 <HAL_UART_Receive+0xac>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800742c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007436:	d108      	bne.n	800744a <HAL_UART_Receive+0xd0>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	e003      	b.n	8007452 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007452:	e037      	b.n	80074c4 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2200      	movs	r2, #0
 800745c:	2120      	movs	r1, #32
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fe0c 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e033      	b.n	80074de <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007482:	b29a      	uxth	r2, r3
 8007484:	8a7b      	ldrh	r3, [r7, #18]
 8007486:	4013      	ands	r3, r2
 8007488:	b29a      	uxth	r2, r3
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	3302      	adds	r3, #2
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	e00d      	b.n	80074b2 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800749c:	b29b      	uxth	r3, r3
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	8a7b      	ldrh	r3, [r7, #18]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	4013      	ands	r3, r2
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1c1      	bne.n	8007454 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	e000      	b.n	80074de <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 80074dc:	2302      	movs	r3, #2
  }
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b0ba      	sub	sp, #232	@ 0xe8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800750e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007512:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007516:	4013      	ands	r3, r2
 8007518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800751c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d115      	bne.n	8007550 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00f      	beq.n	8007550 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 82ab 	beq.w	8007a9c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
      }
      return;
 800754e:	e2a5      	b.n	8007a9c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8117 	beq.w	8007788 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800755a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800756a:	4b85      	ldr	r3, [pc, #532]	@ (8007780 <HAL_UART_IRQHandler+0x298>)
 800756c:	4013      	ands	r3, r2
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 810a 	beq.w	8007788 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d011      	beq.n	80075a4 <HAL_UART_IRQHandler+0xbc>
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2201      	movs	r2, #1
 8007592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d011      	beq.n	80075d4 <HAL_UART_IRQHandler+0xec>
 80075b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2202      	movs	r2, #2
 80075c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ca:	f043 0204 	orr.w	r2, r3, #4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d011      	beq.n	8007604 <HAL_UART_IRQHandler+0x11c>
 80075e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2204      	movs	r2, #4
 80075f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075fa:	f043 0202 	orr.w	r2, r3, #2
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b00      	cmp	r3, #0
 800760e:	d017      	beq.n	8007640 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d105      	bne.n	8007628 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800761c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007620:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2208      	movs	r2, #8
 800762e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007636:	f043 0208 	orr.w	r2, r3, #8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <HAL_UART_IRQHandler+0x18a>
 800764c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00c      	beq.n	8007672 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007668:	f043 0220 	orr.w	r2, r3, #32
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8211 	beq.w	8007aa0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800767e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800768a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ba:	2b40      	cmp	r3, #64	@ 0x40
 80076bc:	d005      	beq.n	80076ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d04f      	beq.n	800776a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fd43 	bl	8008156 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076da:	2b40      	cmp	r3, #64	@ 0x40
 80076dc:	d141      	bne.n	8007762 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80076f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800770a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800770e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1d9      	bne.n	80076de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800772e:	2b00      	cmp	r3, #0
 8007730:	d013      	beq.n	800775a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007736:	4a13      	ldr	r2, [pc, #76]	@ (8007784 <HAL_UART_IRQHandler+0x29c>)
 8007738:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800773e:	4618      	mov	r0, r3
 8007740:	f7fc fa5c 	bl	8003bfc <HAL_DMA_Abort_IT>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d017      	beq.n	800777a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	e00f      	b.n	800777a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f9b4 	bl	8007ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007760:	e00b      	b.n	800777a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9b0 	bl	8007ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007768:	e007      	b.n	800777a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f9ac 	bl	8007ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007778:	e192      	b.n	8007aa0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777a:	bf00      	nop
    return;
 800777c:	e190      	b.n	8007aa0 <HAL_UART_IRQHandler+0x5b8>
 800777e:	bf00      	nop
 8007780:	04000120 	.word	0x04000120
 8007784:	0800821f 	.word	0x0800821f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800778c:	2b01      	cmp	r3, #1
 800778e:	f040 814b 	bne.w	8007a28 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 8144 	beq.w	8007a28 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a4:	f003 0310 	and.w	r3, r3, #16
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 813d 	beq.w	8007a28 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2210      	movs	r2, #16
 80077b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c0:	2b40      	cmp	r3, #64	@ 0x40
 80077c2:	f040 80b5 	bne.w	8007930 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 8164 	beq.w	8007aa4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077e6:	429a      	cmp	r2, r3
 80077e8:	f080 815c 	bcs.w	8007aa4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	f000 8086 	beq.w	800790e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007816:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800781a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800781e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800782c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007830:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007838:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1da      	bne.n	8007802 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3308      	adds	r3, #8
 8007852:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800785c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007870:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007874:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007878:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007882:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e1      	bne.n	800784c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800789a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800789e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e3      	bne.n	8007888 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078de:	f023 0310 	bic.w	r3, r3, #16
 80078e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e4      	bne.n	80078ce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007908:	4618      	mov	r0, r3
 800790a:	f7fc f939 	bl	8003b80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2202      	movs	r2, #2
 8007912:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007920:	b29b      	uxth	r3, r3
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	b29b      	uxth	r3, r3
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f8d7 	bl	8007adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800792e:	e0b9      	b.n	8007aa4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800793c:	b29b      	uxth	r3, r3
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 80ab 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007952:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 80a6 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800796a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007970:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800797e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007980:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800798c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e4      	bne.n	800795c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	623b      	str	r3, [r7, #32]
   return(result);
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80079b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e3      	bne.n	8007992 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0310 	bic.w	r3, r3, #16
 80079f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e4      	bne.n	80079de <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f85b 	bl	8007adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a26:	e03f      	b.n	8007aa8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00e      	beq.n	8007a52 <HAL_UART_IRQHandler+0x56a>
 8007a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fc27 	bl	800829e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a50:	e02d      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00e      	beq.n	8007a7c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01c      	beq.n	8007aac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
    }
    return;
 8007a7a:	e017      	b.n	8007aac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d012      	beq.n	8007aae <HAL_UART_IRQHandler+0x5c6>
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fbd8 	bl	800824a <UART_EndTransmit_IT>
    return;
 8007a9a:	e008      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a9c:	bf00      	nop
 8007a9e:	e006      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
    return;
 8007aa0:	bf00      	nop
 8007aa2:	e004      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007aa4:	bf00      	nop
 8007aa6:	e002      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
    return;
 8007aac:	bf00      	nop
  }

}
 8007aae:	37e8      	adds	r7, #232	@ 0xe8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007b22:	f023 030c 	bic.w	r3, r3, #12
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6812      	ldr	r2, [r2, #0]
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a99      	ldr	r2, [pc, #612]	@ (8007dd4 <UART_SetConfig+0x2e0>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d120      	bne.n	8007bb6 <UART_SetConfig+0xc2>
 8007b74:	4b98      	ldr	r3, [pc, #608]	@ (8007dd8 <UART_SetConfig+0x2e4>)
 8007b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d817      	bhi.n	8007bb0 <UART_SetConfig+0xbc>
 8007b80:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <UART_SetConfig+0x94>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007ba5 	.word	0x08007ba5
 8007b90:	08007bab 	.word	0x08007bab
 8007b94:	08007b9f 	.word	0x08007b9f
 8007b98:	2301      	movs	r3, #1
 8007b9a:	77fb      	strb	r3, [r7, #31]
 8007b9c:	e061      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	77fb      	strb	r3, [r7, #31]
 8007ba2:	e05e      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	77fb      	strb	r3, [r7, #31]
 8007ba8:	e05b      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007baa:	2308      	movs	r3, #8
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e058      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e055      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a88      	ldr	r2, [pc, #544]	@ (8007ddc <UART_SetConfig+0x2e8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d124      	bne.n	8007c0a <UART_SetConfig+0x116>
 8007bc0:	4b85      	ldr	r3, [pc, #532]	@ (8007dd8 <UART_SetConfig+0x2e4>)
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bcc:	d011      	beq.n	8007bf2 <UART_SetConfig+0xfe>
 8007bce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bd2:	d817      	bhi.n	8007c04 <UART_SetConfig+0x110>
 8007bd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd8:	d011      	beq.n	8007bfe <UART_SetConfig+0x10a>
 8007bda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bde:	d811      	bhi.n	8007c04 <UART_SetConfig+0x110>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <UART_SetConfig+0xf8>
 8007be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007be8:	d006      	beq.n	8007bf8 <UART_SetConfig+0x104>
 8007bea:	e00b      	b.n	8007c04 <UART_SetConfig+0x110>
 8007bec:	2300      	movs	r3, #0
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e037      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	77fb      	strb	r3, [r7, #31]
 8007bf6:	e034      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e031      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007bfe:	2308      	movs	r3, #8
 8007c00:	77fb      	strb	r3, [r7, #31]
 8007c02:	e02e      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007c04:	2310      	movs	r3, #16
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	e02b      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a74      	ldr	r2, [pc, #464]	@ (8007de0 <UART_SetConfig+0x2ec>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d124      	bne.n	8007c5e <UART_SetConfig+0x16a>
 8007c14:	4b70      	ldr	r3, [pc, #448]	@ (8007dd8 <UART_SetConfig+0x2e4>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c18:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007c1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c20:	d011      	beq.n	8007c46 <UART_SetConfig+0x152>
 8007c22:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c26:	d817      	bhi.n	8007c58 <UART_SetConfig+0x164>
 8007c28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c2c:	d011      	beq.n	8007c52 <UART_SetConfig+0x15e>
 8007c2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c32:	d811      	bhi.n	8007c58 <UART_SetConfig+0x164>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <UART_SetConfig+0x14c>
 8007c38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c3c:	d006      	beq.n	8007c4c <UART_SetConfig+0x158>
 8007c3e:	e00b      	b.n	8007c58 <UART_SetConfig+0x164>
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e00d      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e00a      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e007      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e004      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e001      	b.n	8007c62 <UART_SetConfig+0x16e>
 8007c5e:	2310      	movs	r3, #16
 8007c60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c6a:	d15a      	bne.n	8007d22 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8007c6c:	7ffb      	ldrb	r3, [r7, #31]
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d827      	bhi.n	8007cc2 <UART_SetConfig+0x1ce>
 8007c72:	a201      	add	r2, pc, #4	@ (adr r2, 8007c78 <UART_SetConfig+0x184>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007c9d 	.word	0x08007c9d
 8007c7c:	08007ca5 	.word	0x08007ca5
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007cc3 	.word	0x08007cc3
 8007c88:	08007cb3 	.word	0x08007cb3
 8007c8c:	08007cc3 	.word	0x08007cc3
 8007c90:	08007cc3 	.word	0x08007cc3
 8007c94:	08007cc3 	.word	0x08007cc3
 8007c98:	08007cbb 	.word	0x08007cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c9c:	f7fe f868 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8007ca0:	61b8      	str	r0, [r7, #24]
        break;
 8007ca2:	e013      	b.n	8007ccc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ca4:	f7fe f886 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8007ca8:	61b8      	str	r0, [r7, #24]
        break;
 8007caa:	e00f      	b.n	8007ccc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cac:	4b4d      	ldr	r3, [pc, #308]	@ (8007de4 <UART_SetConfig+0x2f0>)
 8007cae:	61bb      	str	r3, [r7, #24]
        break;
 8007cb0:	e00c      	b.n	8007ccc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb2:	f7fd fffd 	bl	8005cb0 <HAL_RCC_GetSysClockFreq>
 8007cb6:	61b8      	str	r0, [r7, #24]
        break;
 8007cb8:	e008      	b.n	8007ccc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cbe:	61bb      	str	r3, [r7, #24]
        break;
 8007cc0:	e004      	b.n	8007ccc <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8007cca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d074      	beq.n	8007dbc <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	005a      	lsls	r2, r3, #1
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	085b      	lsrs	r3, r3, #1
 8007cdc:	441a      	add	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2b0f      	cmp	r3, #15
 8007cec:	d916      	bls.n	8007d1c <UART_SetConfig+0x228>
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf4:	d212      	bcs.n	8007d1c <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	f023 030f 	bic.w	r3, r3, #15
 8007cfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	89fb      	ldrh	r3, [r7, #14]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	89fa      	ldrh	r2, [r7, #14]
 8007d18:	60da      	str	r2, [r3, #12]
 8007d1a:	e04f      	b.n	8007dbc <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	77bb      	strb	r3, [r7, #30]
 8007d20:	e04c      	b.n	8007dbc <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d22:	7ffb      	ldrb	r3, [r7, #31]
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d828      	bhi.n	8007d7a <UART_SetConfig+0x286>
 8007d28:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <UART_SetConfig+0x23c>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d55 	.word	0x08007d55
 8007d34:	08007d5d 	.word	0x08007d5d
 8007d38:	08007d65 	.word	0x08007d65
 8007d3c:	08007d7b 	.word	0x08007d7b
 8007d40:	08007d6b 	.word	0x08007d6b
 8007d44:	08007d7b 	.word	0x08007d7b
 8007d48:	08007d7b 	.word	0x08007d7b
 8007d4c:	08007d7b 	.word	0x08007d7b
 8007d50:	08007d73 	.word	0x08007d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d54:	f7fe f80c 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8007d58:	61b8      	str	r0, [r7, #24]
        break;
 8007d5a:	e013      	b.n	8007d84 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d5c:	f7fe f82a 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8007d60:	61b8      	str	r0, [r7, #24]
        break;
 8007d62:	e00f      	b.n	8007d84 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d64:	4b1f      	ldr	r3, [pc, #124]	@ (8007de4 <UART_SetConfig+0x2f0>)
 8007d66:	61bb      	str	r3, [r7, #24]
        break;
 8007d68:	e00c      	b.n	8007d84 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d6a:	f7fd ffa1 	bl	8005cb0 <HAL_RCC_GetSysClockFreq>
 8007d6e:	61b8      	str	r0, [r7, #24]
        break;
 8007d70:	e008      	b.n	8007d84 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d76:	61bb      	str	r3, [r7, #24]
        break;
 8007d78:	e004      	b.n	8007d84 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	77bb      	strb	r3, [r7, #30]
        break;
 8007d82:	bf00      	nop
    }

    if (pclk != 0U)
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d018      	beq.n	8007dbc <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	085a      	lsrs	r2, r3, #1
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	441a      	add	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b0f      	cmp	r3, #15
 8007da2:	d909      	bls.n	8007db8 <UART_SetConfig+0x2c4>
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007daa:	d205      	bcs.n	8007db8 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60da      	str	r2, [r3, #12]
 8007db6:	e001      	b.n	8007dbc <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007dc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40013800 	.word	0x40013800
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	40004400 	.word	0x40004400
 8007de0:	40004800 	.word	0x40004800
 8007de4:	007a1200 	.word	0x007a1200

08007de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9e:	f003 0320 	and.w	r3, r3, #32
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01a      	beq.n	8007efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ee6:	d10a      	bne.n	8007efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	605a      	str	r2, [r3, #4]
  }
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b098      	sub	sp, #96	@ 0x60
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f3c:	f7fb fc00 	bl	8003740 <HAL_GetTick>
 8007f40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d12e      	bne.n	8007fae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f88c 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d021      	beq.n	8007fae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e6      	bne.n	8007f6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e062      	b.n	8008074 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d149      	bne.n	8008050 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f856 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d03c      	beq.n	8008050 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e6      	bne.n	8007fd6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3308      	adds	r3, #8
 800800e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	60fb      	str	r3, [r7, #12]
   return(result);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0301 	bic.w	r3, r3, #1
 800801e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3308      	adds	r3, #8
 8008026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008028:	61fa      	str	r2, [r7, #28]
 800802a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	69b9      	ldr	r1, [r7, #24]
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	617b      	str	r3, [r7, #20]
   return(result);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e5      	bne.n	8008008 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e011      	b.n	8008074 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3758      	adds	r7, #88	@ 0x58
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	4613      	mov	r3, r2
 800808a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800808c:	e04f      	b.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008094:	d04b      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008096:	f7fb fb53 	bl	8003740 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d302      	bcc.n	80080ac <UART_WaitOnFlagUntilTimeout+0x30>
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e04e      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d037      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b80      	cmp	r3, #128	@ 0x80
 80080c2:	d034      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b40      	cmp	r3, #64	@ 0x40
 80080c8:	d031      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	f003 0308 	and.w	r3, r3, #8
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d110      	bne.n	80080fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2208      	movs	r2, #8
 80080de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 f838 	bl	8008156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2208      	movs	r2, #8
 80080ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e029      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008108:	d111      	bne.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f81e 	bl	8008156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e00f      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69da      	ldr	r2, [r3, #28]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4013      	ands	r3, r2
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	429a      	cmp	r2, r3
 800813c:	bf0c      	ite	eq
 800813e:	2301      	moveq	r3, #1
 8008140:	2300      	movne	r3, #0
 8008142:	b2db      	uxtb	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	429a      	cmp	r2, r3
 800814a:	d0a0      	beq.n	800808e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008156:	b480      	push	{r7}
 8008158:	b095      	sub	sp, #84	@ 0x54
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800816c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800817c:	643b      	str	r3, [r7, #64]	@ 0x40
 800817e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800818a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e6      	bne.n	800815e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3308      	adds	r3, #8
 8008196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	61fb      	str	r3, [r7, #28]
   return(result);
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f023 0301 	bic.w	r3, r3, #1
 80081a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3308      	adds	r3, #8
 80081ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e5      	bne.n	8008190 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d118      	bne.n	80081fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f023 0310 	bic.w	r3, r3, #16
 80081e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081ea:	61bb      	str	r3, [r7, #24]
 80081ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6979      	ldr	r1, [r7, #20]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	613b      	str	r3, [r7, #16]
   return(result);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e6      	bne.n	80081cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008212:	bf00      	nop
 8008214:	3754      	adds	r7, #84	@ 0x54
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff fc43 	bl	8007ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b088      	sub	sp, #32
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	61bb      	str	r3, [r7, #24]
 8008272:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6979      	ldr	r1, [r7, #20]
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	613b      	str	r3, [r7, #16]
   return(result);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e6      	bne.n	8008252 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff fc0f 	bl	8007ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008296:	bf00      	nop
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <memset>:
 80082b2:	4402      	add	r2, r0
 80082b4:	4603      	mov	r3, r0
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d100      	bne.n	80082bc <memset+0xa>
 80082ba:	4770      	bx	lr
 80082bc:	f803 1b01 	strb.w	r1, [r3], #1
 80082c0:	e7f9      	b.n	80082b6 <memset+0x4>
	...

080082c4 <__libc_init_array>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	4d0d      	ldr	r5, [pc, #52]	@ (80082fc <__libc_init_array+0x38>)
 80082c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008300 <__libc_init_array+0x3c>)
 80082ca:	1b64      	subs	r4, r4, r5
 80082cc:	10a4      	asrs	r4, r4, #2
 80082ce:	2600      	movs	r6, #0
 80082d0:	42a6      	cmp	r6, r4
 80082d2:	d109      	bne.n	80082e8 <__libc_init_array+0x24>
 80082d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008304 <__libc_init_array+0x40>)
 80082d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008308 <__libc_init_array+0x44>)
 80082d8:	f000 f826 	bl	8008328 <_init>
 80082dc:	1b64      	subs	r4, r4, r5
 80082de:	10a4      	asrs	r4, r4, #2
 80082e0:	2600      	movs	r6, #0
 80082e2:	42a6      	cmp	r6, r4
 80082e4:	d105      	bne.n	80082f2 <__libc_init_array+0x2e>
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ec:	4798      	blx	r3
 80082ee:	3601      	adds	r6, #1
 80082f0:	e7ee      	b.n	80082d0 <__libc_init_array+0xc>
 80082f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f6:	4798      	blx	r3
 80082f8:	3601      	adds	r6, #1
 80082fa:	e7f2      	b.n	80082e2 <__libc_init_array+0x1e>
 80082fc:	08008f00 	.word	0x08008f00
 8008300:	08008f00 	.word	0x08008f00
 8008304:	08008f00 	.word	0x08008f00
 8008308:	08008f08 	.word	0x08008f08

0800830c <memcpy>:
 800830c:	440a      	add	r2, r1
 800830e:	4291      	cmp	r1, r2
 8008310:	f100 33ff 	add.w	r3, r0, #4294967295
 8008314:	d100      	bne.n	8008318 <memcpy+0xc>
 8008316:	4770      	bx	lr
 8008318:	b510      	push	{r4, lr}
 800831a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800831e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008322:	4291      	cmp	r1, r2
 8008324:	d1f9      	bne.n	800831a <memcpy+0xe>
 8008326:	bd10      	pop	{r4, pc}

08008328 <_init>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr

08008334 <_fini>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr
