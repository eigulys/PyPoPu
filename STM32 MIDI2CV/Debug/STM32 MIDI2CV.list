
STM32 MIDI2CV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006894  08006894  00007894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068cc  080068cc  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  080068cc  080068cc  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068cc  080068cc  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080068cc  080068cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080068d4  080068d4  000078d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080068dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000000c  080068e8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080068e8  00008314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015281  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb9  00000000  00000000  0001d2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00020178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d46  00000000  00000000  000212a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e100  00000000  00000000  00021fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001598c  00000000  00000000  000400ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a43c9  00000000  00000000  00055a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9e43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  000f9e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000fe81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800687c 	.word	0x0800687c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800687c 	.word	0x0800687c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <_ZN8mMessage12getSysExSizeEv>:
	Channel channel = 0;
	uint8_t data1 = 0;
	uint8_t data2 = 0;

	uint8_t SysExMaxSize;
	 unsigned getSysExSize()  {
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
		 unsigned size = unsigned(data2) << 8 | data1;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	78d2      	ldrb	r2, [r2, #3]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
		return size > SysExMaxSize ? SysExMaxSize : size;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	795b      	ldrb	r3, [r3, #5]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4293      	cmp	r3, r2
 80009c4:	bf28      	it	cs
 80009c6:	4613      	movcs	r3, r2
	}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_ZN9mSettingsC1Ev>:
	uint8_t sysexArray[];
};

struct mSettings {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2201      	movs	r2, #1
 80009e6:	705a      	strb	r2, [r3, #1]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	709a      	strb	r2, [r3, #2]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_ZN8mMessageC1Ev>:
struct mMessage {
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	709a      	strb	r2, [r3, #2]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	70da      	strb	r2, [r3, #3]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	711a      	strb	r2, [r3, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_ZN13MidiInterfaceC1Ev>:
 *
 */

#include "MIDI.h"
#include "stm32f3xx_hal.h"
MidiInterface::MidiInterface() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f203 1365 	addw	r3, r3, #357	@ 0x165
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffc8 	bl	80009d4 <_ZN9mSettingsC1Ev>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ffd6 	bl	80009fc <_ZN8mMessageC1Ev>
	mRunningStatus_TX = InvalidType;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	mRunningStatus_RX = InvalidType;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159

	mPendingMessageIndex = 0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mPendingMessageExpectedLenght = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

	mCurrentRpnNumber = 0xffff;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a76:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	mCurrentNrpnNumber = 0xffff;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a80:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162

	mMessage.valid = false;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
	mMessage.type = InvalidType;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
	mMessage.channel = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
	mMessage.data1 = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
	mMessage.data2 = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
	mMessage.SysExMaxSize = Settings.SysExMaxSize;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
	mThruFilterMode = Thru::Full;
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000aba:	2101      	movs	r1, #1
 8000abc:	f361 0347 	bfi	r3, r1, #1, #7
 8000ac0:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mThruActivated = true;
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164

	mInputChannel = 0;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
	mRunningStatus_RX = InvalidType;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
	mRunningStatus_TX = InvalidType;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	mPendingMessageExpectedLenght = 0;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
	mPendingMessageIndex = 0;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mCurrentRpnNumber = 0xffff;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b00:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	mCurrentNrpnNumber = 0xffff;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0a:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
	mThruActivated = false;
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000b14:	f36f 0300 	bfc	r3, #0, #1
 8000b18:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mThruFilterMode = Thru::Off;
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	f892 3164 	ldrb.w	r3, [r2, #356]	@ 0x164
 8000b22:	f36f 0347 	bfc	r3, #1, #7
 8000b26:	f882 3164 	strb.w	r3, [r2, #356]	@ 0x164
	mNoteOffCallback = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
	mNoteOnCallback = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
	mAfterTouchPolyCallback = 0;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
	mControlChangeCallback = 0;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
	mProgramChangeCallback = 0;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
	mAfterTouchChannelCallback = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
	mPitchBendCallback = 0;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
	mSystemExclusiveCallback = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
	mTimeCodeQuarterFrameCallback = 0;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
	mSongPositionCallback = 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
	mSongSelectCallback = 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	@ 0x28
	mTuneRequestCallback = 0;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
	mClockCallback = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	631a      	str	r2, [r3, #48]	@ 0x30
	mStartCallback = 0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	635a      	str	r2, [r3, #52]	@ 0x34
	mContinueCallback = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	639a      	str	r2, [r3, #56]	@ 0x38
	mStopCallback = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	63da      	str	r2, [r3, #60]	@ 0x3c
	mActiveSensingCallback = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	641a      	str	r2, [r3, #64]	@ 0x40
	mSystemResetCallback = 0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZN13MidiInterfaceD1Ev>:
MidiInterface::~MidiInterface() {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
}
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>:
 - Input channel set to 1 if no value is specified

 */

void MidiInterface::begin(Channel inChannel, UART_HandleTypeDef *huart_in,
		UART_HandleTypeDef *huart_out) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	72fb      	strb	r3, [r7, #11]
	serial_in = *huart_in;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	33d0      	adds	r3, #208	@ 0xd0
 8000bcc:	4611      	mov	r1, r2
 8000bce:	2288      	movs	r2, #136	@ 0x88
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f005 fe45 	bl	8006860 <memcpy>
	serial_out = *huart_out;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	3348      	adds	r3, #72	@ 0x48
 8000bdc:	4611      	mov	r1, r2
 8000bde:	2288      	movs	r2, #136	@ 0x88
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 fe3d 	bl	8006860 <memcpy>
	mInputChannel = inChannel;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	7afa      	ldrb	r2, [r7, #11]
 8000bea:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158

}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>:
 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */

void MidiInterface::send(MidiType inType, DataByte inData1, DataByte inData2,
		Channel inChannel) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	4608      	mov	r0, r1
 8000c00:	4611      	mov	r1, r2
 8000c02:	461a      	mov	r2, r3
 8000c04:	4603      	mov	r3, r0
 8000c06:	70fb      	strb	r3, [r7, #3]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70bb      	strb	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
	// Then test if channel is valid
	if (inChannel >= MIDI_CHANNEL_OFF || inChannel == MIDI_CHANNEL_OMNI
 8000c10:	7e3b      	ldrb	r3, [r7, #24]
 8000c12:	2b10      	cmp	r3, #16
 8000c14:	d85e      	bhi.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
 8000c16:	7e3b      	ldrb	r3, [r7, #24]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d05b      	beq.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
			|| inType < 0x80) {
 8000c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	da57      	bge.n	8000cd4 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
		return; // Don't send anything
	}

	if (inType <= PitchBend)  // Channel messages
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2be0      	cmp	r3, #224	@ 0xe0
 8000c28:	d84b      	bhi.n	8000cc2 <_ZN13MidiInterface4sendE8MidiTypehhh+0xcc>
			{
// Protection: remove MSBs on data
		inData1 &= 0x7f;
 8000c2a:	78bb      	ldrb	r3, [r7, #2]
 8000c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	70bb      	strb	r3, [r7, #2]
		inData2 &= 0x7f;
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	707b      	strb	r3, [r7, #1]

		StatusByte status = getStatus(inType, inChannel);
 8000c3e:	7e3a      	ldrb	r2, [r7, #24]
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	4619      	mov	r1, r3
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 f949 	bl	8000edc <_ZN13MidiInterface9getStatusE8MidiTypeh>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]

		if (Settings.UseRunningStatus) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d014      	beq.n	8000c82 <_ZN13MidiInterface4sendE8MidiTypehhh+0x8c>
			if (mRunningStatus_TX != status) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 215a 	ldrb.w	r2, [r3, #346]	@ 0x15a
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d017      	beq.n	8000c94 <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
// New message, memorise and send header
				mRunningStatus_TX = status;
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
				HAL_UART_Transmit(&serial_out, &mRunningStatus_TX, 1,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f503 71ad 	add.w	r1, r3, #346	@ 0x15a
 8000c78:	230a      	movs	r3, #10
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f004 fd9f 	bl	80057be <HAL_UART_Transmit>
 8000c80:	e008      	b.n	8000c94 <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
				MidiTimeout);
			}
		} else {
			// Don't care about running status, send the status byte.
			HAL_UART_Transmit(&serial_out, &status, 1, MidiTimeout);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c88:	f107 010f 	add.w	r1, r7, #15
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f004 fd95 	bl	80057be <HAL_UART_Transmit>
		}

// Then send data
		HAL_UART_Transmit(&serial_out, &inData1, 1, MidiTimeout);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000c9a:	1cb9      	adds	r1, r7, #2
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f004 fd8d 	bl	80057be <HAL_UART_Transmit>
		if (inType != ProgramChange && inType != AfterTouchChannel) {
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2bc0      	cmp	r3, #192	@ 0xc0
 8000ca8:	d015      	beq.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	2bd0      	cmp	r3, #208	@ 0xd0
 8000cae:	d012      	beq.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
			HAL_UART_Transmit(&serial_out, &inData2, 1, MidiTimeout);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000cb6:	1c79      	adds	r1, r7, #1
 8000cb8:	230a      	movs	r3, #10
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f004 fd7f 	bl	80057be <HAL_UART_Transmit>
 8000cc0:	e009      	b.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		}
	} else if (inType >= Clock && inType <= SystemReset) {
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	2bf7      	cmp	r3, #247	@ 0xf7
 8000cc6:	d906      	bls.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		sendRealTime(inType); // System Real-time and 1 byte.
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f8db 	bl	8000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>
 8000cd2:	e000      	b.n	8000cd6 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		return; // Don't send anything
 8000cd4:	bf00      	nop
	}
}
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZN13MidiInterface9sendSysExEhPhb>:
 default value for ArrayContainsBoundaries is set to 'false' for compatibility
 with previous versions of the library.
 */

void MidiInterface::sendSysEx(uint8_t inLength, byte *inArray,
		bool inArrayContainsBoundaries) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	72fb      	strb	r3, [r7, #11]
 8000cec:	4613      	mov	r3, r2
 8000cee:	72bb      	strb	r3, [r7, #10]
	bool writeBeginEndBytes = !inArrayContainsBoundaries;
 8000cf0:	7abb      	ldrb	r3, [r7, #10]
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	75fb      	strb	r3, [r7, #23]
	uint8_t StartByte = 0xf0;
 8000cf8:	23f0      	movs	r3, #240	@ 0xf0
 8000cfa:	75bb      	strb	r3, [r7, #22]
	uint8_t EndByte = 0xf7;
 8000cfc:	23f7      	movs	r3, #247	@ 0xf7
 8000cfe:	757b      	strb	r3, [r7, #21]
	if (writeBeginEndBytes) {
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d008      	beq.n	8000d18 <_ZN13MidiInterface9sendSysExEhPhb+0x3c>
		HAL_UART_Transmit(&serial_out, &StartByte, 1, MidiTimeout);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d0c:	f107 0116 	add.w	r1, r7, #22
 8000d10:	230a      	movs	r3, #10
 8000d12:	2201      	movs	r2, #1
 8000d14:	f004 fd53 	bl	80057be <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&serial_out, inArray, sizeof(inLength), MidiTimeout);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d1e:	230a      	movs	r3, #10
 8000d20:	2201      	movs	r2, #1
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f004 fd4b 	bl	80057be <HAL_UART_Transmit>

	if (writeBeginEndBytes) {
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <_ZN13MidiInterface9sendSysExEhPhb+0x64>
		HAL_UART_Transmit(&serial_out, &EndByte, 1, MidiTimeout);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000d34:	f107 0115 	add.w	r1, r7, #21
 8000d38:	230a      	movs	r3, #10
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f004 fd3f 	bl	80057be <HAL_UART_Transmit>
	}

	if (Settings.UseRunningStatus) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <_ZN13MidiInterface9sendSysExEhPhb+0x76>
		mRunningStatus_TX = InvalidType;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>:
 \param inValuesNibble    MTC data
 See MIDI Specification for more information.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
		DataByte inValuesNibble) {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
 8000d66:	4613      	mov	r3, r2
 8000d68:	70bb      	strb	r3, [r7, #2]
	byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000d74:	b25a      	sxtb	r2, r3
 8000d76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	73fb      	strb	r3, [r7, #15]
	sendTimeCodeQuarterFrame(data);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f804 	bl	8000d98 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>:
 See MIDI Specification for more information.
 \param inData  if you want to encode directly the nibbles in your program,
 you can send the byte here.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inData) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
	uint8_t TimeCodeMessage[] = { TimeCodeQuarterFrame, inData };
 8000da4:	2300      	movs	r3, #0
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	23f1      	movs	r3, #241	@ 0xf1
 8000daa:	733b      	strb	r3, [r7, #12]
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, TimeCodeMessage, 2, MidiTimeout);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000db6:	f107 010c 	add.w	r1, r7, #12
 8000dba:	230a      	movs	r3, #10
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	f004 fcfe 	bl	80057be <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh+0x3c>
		mRunningStatus_TX = InvalidType;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZN13MidiInterface16sendSongPositionEj>:

/*! \brief Send a Song Position Pointer message.
 \param inBeats    The number of beats since the start of the song.
 */

void MidiInterface::sendSongPosition(unsigned inBeats) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	uint8_t SongPositionMessage[] = { SongPosition, (uint8_t) (inBeats & 0x7f),
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2100      	movs	r1, #0
 8000dec:	460a      	mov	r2, r1
 8000dee:	801a      	strh	r2, [r3, #0]
 8000df0:	460a      	mov	r2, r1
 8000df2:	709a      	strb	r2, [r3, #2]
 8000df4:	23f2      	movs	r3, #242	@ 0xf2
 8000df6:	733b      	strb	r3, [r7, #12]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e00:	b2db      	uxtb	r3, r3
			(uint8_t) ((inBeats >> 7) & 0x7f) };
 8000e02:	737b      	strb	r3, [r7, #13]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	09db      	lsrs	r3, r3, #7
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&serial_out, SongPositionMessage, 3, MidiTimeout);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	2203      	movs	r2, #3
 8000e20:	f004 fccd 	bl	80057be <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <_ZN13MidiInterface16sendSongPositionEj+0x5a>
		mRunningStatus_TX = InvalidType;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_ZN13MidiInterface14sendSongSelectEh>:

/*! \brief Send a Song Select message */

void MidiInterface::sendSongSelect(DataByte inSongNumber) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	70fb      	strb	r3, [r7, #3]
	uint8_t SongSelectMessage[] =
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	81bb      	strh	r3, [r7, #12]
 8000e4e:	23f3      	movs	r3, #243	@ 0xf3
 8000e50:	733b      	strb	r3, [r7, #12]
			{ SongSelect, (uint8_t) (inSongNumber & 0x7f) };
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, SongSelectMessage, 2, MidiTimeout);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000e62:	f107 010c 	add.w	r1, r7, #12
 8000e66:	230a      	movs	r3, #10
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f004 fca8 	bl	80057be <HAL_UART_Transmit>
	if (Settings.UseRunningStatus) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <_ZN13MidiInterface14sendSongSelectEh+0x42>
		mRunningStatus_TX = InvalidType;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
	}
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>:
 \param inType    The available Real Time types are:
 Start, Stop, Continue, Clock, ActiveSensing and SystemReset.
 @see MidiType
 */

void MidiInterface::sendRealTime(MidiType inType) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
	// Do not invalidate Running Status for real-time messages
	// as they can be interleaved within any message.
	uint8_t RealTimeMessage;
	switch (inType) {
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	3bf8      	subs	r3, #248	@ 0xf8
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	bf8c      	ite	hi
 8000e9c:	2201      	movhi	r2, #1
 8000e9e:	2200      	movls	r2, #0
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d115      	bne.n	8000ed2 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
 8000ea6:	22dd      	movs	r2, #221	@ 0xdd
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf14      	ite	ne
 8000eb4:	2301      	movne	r3, #1
 8000eb6:	2300      	moveq	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d009      	beq.n	8000ed2 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
	case Start:
	case Stop:
	case Continue:
	case ActiveSensing:
	case SystemReset:
		HAL_UART_Transmit(&serial_out, &RealTimeMessage, 1, MidiTimeout);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000ec4:	f107 010f 	add.w	r1, r7, #15
 8000ec8:	230a      	movs	r3, #10
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f004 fc77 	bl	80057be <HAL_UART_Transmit>
		break;
 8000ed0:	e000      	b.n	8000ed4 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4c>
	default:
// Invalid Real Time marker
		break;
 8000ed2:	bf00      	nop
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN13MidiInterface9getStatusE8MidiTypeh>:
	mCurrentNrpnNumber = 0xffff;
}

/*! @} */ // End of doc group MIDI Output
// -----------------------------------------------------------------------------
StatusByte MidiInterface::getStatus(MidiType inType, Channel inChannel) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	70bb      	strb	r3, [r7, #2]
	return ((byte) inType | ((inChannel - 1) & 0x0f));
 8000eec:	78bb      	ldrb	r3, [r7, #2]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_ZN13MidiInterface4readEv>:
 If the Thru is enabled and the message matches the filter,
 it is sent back on the MIDI output.
 @see see setInputChannel()
 */

bool MidiInterface::read() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	return read(mInputChannel);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f805 	bl	8000f30 <_ZN13MidiInterface4readEh>
 8000f26:	4603      	mov	r3, r0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN13MidiInterface4readEh>:

/*! \brief Read messages on a specified channel.
 */

bool MidiInterface::read(Channel inChannel) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	if (inChannel >= MIDI_CHANNEL_OFF)
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b10      	cmp	r3, #16
 8000f40:	d901      	bls.n	8000f46 <_ZN13MidiInterface4readEh+0x16>
		return false; // MIDI Input disabled.
 8000f42:	2300      	movs	r3, #0
 8000f44:	e020      	b.n	8000f88 <_ZN13MidiInterface4readEh+0x58>

	if (!parse())
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f822 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f083 0301 	eor.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <_ZN13MidiInterface4readEh+0x2c>
		return false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e015      	b.n	8000f88 <_ZN13MidiInterface4readEh+0x58>

	handleNullVelocityNoteOnAsNoteOff();
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fa5b 	bl	8001418 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>
	bool channelMatch = inputFilter(inChannel);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fa78 	bl	800145c <_ZN13MidiInterface11inputFilterEh>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]

	if (channelMatch) {
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <_ZN13MidiInterface4readEh+0x4c>
		launchCallback();
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fb90 	bl	800169c <_ZN13MidiInterface14launchCallbackEv>
	}

	thruFilter(inChannel);
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fdc3 	bl	8001b0c <_ZN13MidiInterface10thruFilterEh>

	return channelMatch;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZN13MidiInterface5parseEv>:
		break;
	}
}
// Private method: MIDI parser

bool MidiInterface::parse() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	byte extracted;
	if (HAL_UART_Receive(&serial_in, &extracted, 1, MidiTimeout) != HAL_OK) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8000f9e:	f107 010f 	add.w	r1, r7, #15
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f004 fc93 	bl	80058d0 <HAL_UART_Receive>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZN13MidiInterface5parseEv+0x2e>
		return false;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e228      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
	//    until the message is assembled or the buffer is empty.
	// Else, add the extracted byte to the pending message, and check validity.
	// When the message is done, store it.

	// Ignore Undefined
	if (extracted == 0xf9 || extracted == 0xfd) {
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	2bf9      	cmp	r3, #249	@ 0xf9
 8000fc2:	d002      	beq.n	8000fca <_ZN13MidiInterface5parseEv+0x3a>
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2bfd      	cmp	r3, #253	@ 0xfd
 8000fc8:	d10b      	bne.n	8000fe2 <_ZN13MidiInterface5parseEv+0x52>
		if (Settings.Use1ByteParsing) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZN13MidiInterface5parseEv+0x48>
			return false;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e21b      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			return parse();
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffd9 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e216      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		}
	}

	if (mPendingMessageIndex == 0) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f040 80f9 	bne.w	80011e0 <_ZN13MidiInterface5parseEv+0x250>
// Start a new pending message
		mPendingMessage[0] = extracted;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b

// Check for running status first
		if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fa9e 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001002:	4603      	mov	r3, r0
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fad1 	bl	80015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d011      	beq.n	8001034 <_ZN13MidiInterface5parseEv+0xa4>
			// Only these types allow Running Status

			// If the status byte is not received, prepend it
			// to the pending message
			if (extracted < 0x80) {
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0d      	blt.n	8001034 <_ZN13MidiInterface5parseEv+0xa4>
				mPendingMessage[0] = mRunningStatus_RX;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 2159 	ldrb.w	r2, [r3, #345]	@ 0x159
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
				mPendingMessage[1] = extracted;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
				mPendingMessageIndex = 1;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			// Else: well, we received another status byte,
			// so the running status does not apply here.
			// It will be updated upon completion of this message.
		}

		switch (getTypeFromStatusByte(mPendingMessage[0])) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fa7f 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001040:	4603      	mov	r3, r0
 8001042:	2bff      	cmp	r3, #255	@ 0xff
 8001044:	dc7b      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001046:	2bf1      	cmp	r3, #241	@ 0xf1
 8001048:	da1c      	bge.n	8001084 <_ZN13MidiInterface5parseEv+0xf4>
 800104a:	2bf0      	cmp	r3, #240	@ 0xf0
 800104c:	d06a      	beq.n	8001124 <_ZN13MidiInterface5parseEv+0x194>
 800104e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001050:	dc75      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001052:	2be0      	cmp	r3, #224	@ 0xe0
 8001054:	d061      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001056:	2be0      	cmp	r3, #224	@ 0xe0
 8001058:	dc71      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800105a:	2bd0      	cmp	r3, #208	@ 0xd0
 800105c:	d058      	beq.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 800105e:	2bd0      	cmp	r3, #208	@ 0xd0
 8001060:	dc6d      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001062:	2bc0      	cmp	r3, #192	@ 0xc0
 8001064:	d054      	beq.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 8001066:	2bc0      	cmp	r3, #192	@ 0xc0
 8001068:	dc69      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800106a:	2bb0      	cmp	r3, #176	@ 0xb0
 800106c:	d055      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 800106e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001070:	dc65      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001072:	2ba0      	cmp	r3, #160	@ 0xa0
 8001074:	d051      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001076:	2ba0      	cmp	r3, #160	@ 0xa0
 8001078:	dc61      	bgt.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 800107a:	2b80      	cmp	r3, #128	@ 0x80
 800107c:	d04d      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 800107e:	2b90      	cmp	r3, #144	@ 0x90
 8001080:	d04b      	beq.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 8001082:	e05c      	b.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
 8001084:	3bf1      	subs	r3, #241	@ 0xf1
 8001086:	2201      	movs	r2, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	f646 62a0 	movw	r2, #28320	@ 0x6ea0
 8001090:	401a      	ands	r2, r3
 8001092:	2a00      	cmp	r2, #0
 8001094:	bf14      	ite	ne
 8001096:	2201      	movne	r2, #1
 8001098:	2200      	moveq	r2, #0
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	2a00      	cmp	r2, #0
 800109e:	d112      	bne.n	80010c6 <_ZN13MidiInterface5parseEv+0x136>
 80010a0:	f003 0205 	and.w	r2, r3, #5
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2201      	movne	r2, #1
 80010aa:	2200      	moveq	r2, #0
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d12e      	bne.n	8001110 <_ZN13MidiInterface5parseEv+0x180>
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d12a      	bne.n	800111a <_ZN13MidiInterface5parseEv+0x18a>
 80010c4:	e03b      	b.n	800113e <_ZN13MidiInterface5parseEv+0x1ae>
		case Clock:
		case ActiveSensing:
		case SystemReset:
		case TuneRequest:
			// Handle the message type directly here.
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fa36 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
			mMessage.channel = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
			mMessage.data1 = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
			mMessage.data2 = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
			mMessage.valid = true;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

			// Do not reset all input attributes, Running Status must remain unchanged.
			// We still need to reset these
			mPendingMessageIndex = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

			return true;
 800110c:	2301      	movs	r3, #1
 800110e:	e17f      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			// 2 bytes messages
		case ProgramChange:
		case AfterTouchChannel:
		case TimeCodeQuarterFrame:
		case SongSelect:
			mPendingMessageExpectedLenght = 2;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			break;
 8001118:	e016      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>
		case NoteOff:
		case ControlChange:
		case PitchBend:
		case AfterTouchPoly:
		case SongPosition:
			mPendingMessageExpectedLenght = 3;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2203      	movs	r2, #3
 800111e:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			break;
 8001122:	e011      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>

		case SystemExclusive:
			// The message can be any lenght
			// between 3 and Settings.SysExMaxSize bytes
			mPendingMessageExpectedLenght = Settings.SysExMaxSize;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			mRunningStatus_RX = InvalidType;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
			mMessage.sysexArray[0] = SystemExclusive;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	22f0      	movs	r2, #240	@ 0xf0
 8001138:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
			break;
 800113c:	e004      	b.n	8001148 <_ZN13MidiInterface5parseEv+0x1b8>

		case InvalidType:
		default:
			// This is obviously wrong. Let's get the hell out'a here.
			resetInput();
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f9b1 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
			return false;
 8001144:	2300      	movs	r3, #0
 8001146:	e163      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			break;
		}

		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
 8001156:	3b01      	subs	r3, #1
 8001158:	429a      	cmp	r2, r3
 800115a:	db2d      	blt.n	80011b8 <_ZN13MidiInterface5parseEv+0x228>
			// Reception complete
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f9eb 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
			mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fa06 	bl	800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
			mMessage.data1 = mPendingMessage[1];
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 215c 	ldrb.w	r2, [r3, #348]	@ 0x15c
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
			mMessage.data2 = 0;			// Completed new message has 1 data byte
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

			mPendingMessageIndex = 0;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
			mMessage.valid = true;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
			return true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e12b      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Waiting for more data
			mPendingMessageIndex++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
		}

		if (Settings.Use1ByteParsing) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <_ZN13MidiInterface5parseEv+0x246>
			// Message is not complete.
			return false;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e11c      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Call the parser recursively
			// to parse the rest of the message.
			return parse();
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff feda 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 80011dc:	4603      	mov	r3, r0
 80011de:	e117      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		}
	} else {
// First, test if this is a status byte
		if (extracted >= 0x80) {
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da67      	bge.n	80012b8 <_ZN13MidiInterface5parseEv+0x328>
			// Reception of status bytes in the middle of an uncompleted message
			// are allowed only for interleaved Real Time message or EOX
			switch (extracted) {
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3bf7      	subs	r3, #247	@ 0xf7
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d862      	bhi.n	80012b6 <_ZN13MidiInterface5parseEv+0x326>
 80011f0:	a201      	add	r2, pc, #4	@ (adr r2, 80011f8 <_ZN13MidiInterface5parseEv+0x268>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001249 	.word	0x08001249
 80011fc:	0800121d 	.word	0x0800121d
 8001200:	080012b7 	.word	0x080012b7
 8001204:	0800121d 	.word	0x0800121d
 8001208:	0800121d 	.word	0x0800121d
 800120c:	0800121d 	.word	0x0800121d
 8001210:	080012b7 	.word	0x080012b7
 8001214:	0800121d 	.word	0x0800121d
 8001218:	0800121d 	.word	0x0800121d
// the MIDI class, and recompose the message it was
// interleaved into. Oh, and without killing the running status..
// This is done by leaving the pending message as is,
// it will be completed on next calls.

				mMessage.type = (MidiType) extracted;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
				mMessage.data1 = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
				mMessage.data2 = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
				mMessage.channel = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
				mMessage.valid = true;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
				return true;
 8001244:	2301      	movs	r3, #1
 8001246:	e0e3      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>

// End of Exclusive
			case 0xf7:
				if (mMessage.sysexArray[0] == SystemExclusive) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 800124e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001250:	d12c      	bne.n	80012ac <_ZN13MidiInterface5parseEv+0x31c>
					// Store the last byte (EOX)
					mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	b2d1      	uxtb	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	f882 115f 	strb.w	r1, [r2, #351]	@ 0x15f
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	22f7      	movs	r2, #247	@ 0xf7
 800126a:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
					mMessage.type = SystemExclusive;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	22f0      	movs	r2, #240	@ 0xf0
 8001272:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169

					// Get length
					mMessage.data1 = mPendingMessageIndex & 0xff;		// LSB
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 215f 	ldrb.w	r2, [r3, #351]	@ 0x15f
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
					mMessage.data2 = mPendingMessageIndex >> 8;			// MSB
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8001288:	121b      	asrs	r3, r3, #8
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
					mMessage.channel = 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
					mMessage.valid = true;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

					resetInput();
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f8ff 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
					return true;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b1      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
				} else {
					// Well well well.. error.
					resetInput();
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8fa 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
					return false;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e0ac      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
				}

			default:
				break; // LCOV_EXCL_LINE - Coverage blind spot
 80012b6:	bf00      	nop
			}
		}

// Add extracted data byte to pending message
		if (mPendingMessage[0] == SystemExclusive)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 80012be:	2bf0      	cmp	r3, #240	@ 0xf0
 80012c0:	d109      	bne.n	80012d6 <_ZN13MidiInterface5parseEv+0x346>
			mMessage.sysexArray[mPendingMessageIndex] = extracted;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012c8:	4619      	mov	r1, r3
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
 80012d4:	e008      	b.n	80012e8 <_ZN13MidiInterface5parseEv+0x358>
		else
			mPendingMessage[mPendingMessageIndex] = extracted;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012dc:	4619      	mov	r1, r3
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b

// Now we are going to check if we have reached the end of the message
		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
 80012f6:	3b01      	subs	r3, #1
 80012f8:	429a      	cmp	r2, r3
 80012fa:	db75      	blt.n	80013e8 <_ZN13MidiInterface5parseEv+0x458>
			// "FML" case: fall down here with an overflown SysEx..
			// This means we received the last possible data byte that can fit
			// the buffer. If this happens, try increasing Settings.SysExMaxSize.
			if (mPendingMessage[0] == SystemExclusive) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001302:	2bf0      	cmp	r3, #240	@ 0xf0
 8001304:	d104      	bne.n	8001310 <_ZN13MidiInterface5parseEv+0x380>
				resetInput();
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8cd 	bl	80014a6 <_ZN13MidiInterface10resetInputEv>
				return false;
 800130c:	2300      	movs	r3, #0
 800130e:	e07f      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			}

			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f911 	bl	800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169

			if (isChannelMessage(mMessage.type))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f93d 	bl	80015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <_ZN13MidiInterface5parseEv+0x3c0>
				mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f923 	bl	800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
 800134e:	e003      	b.n	8001358 <_ZN13MidiInterface5parseEv+0x3c8>
			else
				mMessage.channel = 0;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a

			mMessage.data1 = mPendingMessage[1];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 215c 	ldrb.w	r2, [r3, #348]	@ 0x15c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b

			// Save data2 only if applicable
			mMessage.data2 =
					mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 315e 	ldrb.w	r3, [r3, #350]	@ 0x15e
			mMessage.data2 =
 800136a:	2b03      	cmp	r3, #3
 800136c:	d103      	bne.n	8001376 <_ZN13MidiInterface5parseEv+0x3e6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 215d 	ldrb.w	r2, [r3, #349]	@ 0x15d
 8001374:	e000      	b.n	8001378 <_ZN13MidiInterface5parseEv+0x3e8>
 8001376:	2200      	movs	r2, #0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

			// Reset local variables
			mPendingMessageIndex = 0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
			mPendingMessageExpectedLenght = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e

			mMessage.valid = true;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168

			// Activate running status (if enabled for the received type)
			switch (mMessage.type) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800139c:	2be0      	cmp	r3, #224	@ 0xe0
 800139e:	d015      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013a0:	2be0      	cmp	r3, #224	@ 0xe0
 80013a2:	dc1a      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013a4:	2bd0      	cmp	r3, #208	@ 0xd0
 80013a6:	d011      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013a8:	2bd0      	cmp	r3, #208	@ 0xd0
 80013aa:	dc16      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80013ae:	d00d      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80013b2:	dc12      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013b4:	2bb0      	cmp	r3, #176	@ 0xb0
 80013b6:	d009      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013b8:	2bb0      	cmp	r3, #176	@ 0xb0
 80013ba:	dc0e      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80013be:	d005      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80013c2:	dc0a      	bgt.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
 80013c4:	2b80      	cmp	r3, #128	@ 0x80
 80013c6:	d001      	beq.n	80013cc <_ZN13MidiInterface5parseEv+0x43c>
 80013c8:	2b90      	cmp	r3, #144	@ 0x90
 80013ca:	d106      	bne.n	80013da <_ZN13MidiInterface5parseEv+0x44a>
			case ControlChange:
			case ProgramChange:
			case AfterTouchChannel:
			case PitchBend:
// Running status enabled: store it from received message
				mRunningStatus_RX = mPendingMessage[0];
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 215b 	ldrb.w	r2, [r3, #347]	@ 0x15b
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
				break;
 80013d8:	e004      	b.n	80013e4 <_ZN13MidiInterface5parseEv+0x454>

			default:
// No running status
				mRunningStatus_RX = InvalidType;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
				break;
 80013e2:	bf00      	nop
			}
			return true;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e013      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Then update the index of the pending message.
			mPendingMessageIndex++;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f

			if (Settings.Use1ByteParsing) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <_ZN13MidiInterface5parseEv+0x476>
// Message is not complete.
				return false;
 8001402:	2300      	movs	r3, #0
 8001404:	e004      	b.n	8001410 <_ZN13MidiInterface5parseEv+0x480>
			} else {
// Call the parser recursively to parse the rest of the message.
				return parse();
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fdc2 	bl	8000f90 <_ZN13MidiInterface5parseEv>
 800140c:	4603      	mov	r3, r0
 800140e:	bf00      	nop
			}
		}
	}
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>:

void MidiInterface::handleNullVelocityNoteOnAsNoteOff() {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
			&& getData2() == 0) {
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00d      	beq.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f851 	bl	80014d2 <_ZN13MidiInterface7getTypeEv>
 8001430:	4603      	mov	r3, r0
 8001432:	2b90      	cmp	r3, #144	@ 0x90
 8001434:	d107      	bne.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
			&& getData2() == 0) {
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f858 	bl	80014ec <_ZN13MidiInterface8getData2Ev>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x30>
 8001446:	2300      	movs	r3, #0
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x3c>
		mMessage.type = NoteOff;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
	}
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN13MidiInterface11inputFilterEh>:

// Private method: check if the received message is on the listened channel

bool MidiInterface::inputFilter(Channel inChannel) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	// This method handles recognition of channel
	// (to know if the message is destinated to the Arduino)

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800146e:	b25b      	sxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	da11      	bge.n	8001498 <_ZN13MidiInterface11inputFilterEh+0x3c>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 800147a:	2be0      	cmp	r3, #224	@ 0xe0
 800147c:	d80c      	bhi.n	8001498 <_ZN13MidiInterface11inputFilterEh+0x3c>
// Then we need to know if we listen to it
		if ((mMessage.channel == inChannel)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	429a      	cmp	r2, r3
 8001488:	d002      	beq.n	8001490 <_ZN13MidiInterface11inputFilterEh+0x34>
				|| (inChannel == MIDI_CHANNEL_OMNI)) {
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <_ZN13MidiInterface11inputFilterEh+0x38>
			return true;
 8001490:	2301      	movs	r3, #1
 8001492:	e002      	b.n	800149a <_ZN13MidiInterface11inputFilterEh+0x3e>
		} else {
			// We don't listen to this channel
			return false;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <_ZN13MidiInterface11inputFilterEh+0x3e>
		}
	} else {
// System messages are always received
		return true;
 8001498:	2301      	movs	r3, #1
	}
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZN13MidiInterface10resetInputEv>:

// Private method: reset input attributes

void MidiInterface::resetInput() {
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	mPendingMessageIndex = 0;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 215f 	strb.w	r2, [r3, #351]	@ 0x15f
	mPendingMessageExpectedLenght = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
	mRunningStatus_RX = InvalidType;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_ZN13MidiInterface7getTypeEv>:
/*! \brief Get the last received message's type

 Returns an enumerated type. @see MidiType
 */

MidiType MidiInterface::getType() {
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	return mMessage.type;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_ZN13MidiInterface8getData2Ev>:
	return mMessage.data1;
}

/*! \brief Get the second data byte of the last received message. */

DataByte MidiInterface::getData2() {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	return mMessage.data2;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_ZN13MidiInterface13getSysExArrayEv>:
/*! \brief Get the System Exclusive byte array.

 @see getSysExArrayLength to get the array's length in bytes.
 */

byte* MidiInterface::getSysExArray() {
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	return mMessage.sysexArray;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f503 73b7 	add.w	r3, r3, #366	@ 0x16e
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZN13MidiInterface19getSysExArrayLengthEv>:

 It is coded using data1 as LSB and data2 as MSB.
 \return The array's length, in bytes.
 */

unsigned MidiInterface::getSysExArrayLength() {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	return mMessage.getSysExSize();
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fa38 	bl	80009a4 <_ZN8mMessage12getSysExSizeEv>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_ZN13MidiInterface21getTypeFromStatusByteEh>:
 This is a utility static method, used internally,
 made public so you can handle MidiTypes more easily.
 */

MidiType MidiInterface::getTypeFromStatusByte(
byte inStatus) {
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
	if ((inStatus < 0x80) || (inStatus == 0xf4) || (inStatus == 0xf5)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	da0b      	bge.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2bf4      	cmp	r3, #244	@ 0xf4
 8001554:	d008      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2bf5      	cmp	r3, #245	@ 0xf5
 800155a:	d005      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
			|| (inStatus == 0xf9) || (inStatus == 0xfD)) {
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001560:	d002      	beq.n	8001568 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2bfd      	cmp	r3, #253	@ 0xfd
 8001566:	d101      	bne.n	800156c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2e>
// Data bytes and undefined.
		return InvalidType;
 8001568:	2300      	movs	r3, #0
 800156a:	e008      	b.n	800157e <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}
	if (inStatus < 0xf0) {
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2bef      	cmp	r3, #239	@ 0xef
 8001570:	d804      	bhi.n	800157c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x3e>
// Channel message, remove channel nibble.
		return MidiType(inStatus & 0xf0);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e000      	b.n	800157e <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}

	return MidiType(inStatus);
 800157c:	79fb      	ldrb	r3, [r7, #7]
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_ZN13MidiInterface24getChannelFromStatusByteEh>:

/*! \brief Returns channel in the range 1-16
 */

Channel MidiInterface::getChannelFromStatusByte(
byte inStatus) {
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
	return (inStatus & 0x0f) + 1;
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3301      	adds	r3, #1
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN13MidiInterface16isChannelMessageE8MidiType>:

bool MidiInterface::isChannelMessage(MidiType inType) {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
			|| inType == PitchBend || inType == ProgramChange);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b80      	cmp	r3, #128	@ 0x80
 80015ba:	d011      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b90      	cmp	r3, #144	@ 0x90
 80015c0:	d00e      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80015c6:	d00b      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80015cc:	d008      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2bd0      	cmp	r3, #208	@ 0xd0
 80015d2:	d005      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == PitchBend || inType == ProgramChange);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2be0      	cmp	r3, #224	@ 0xe0
 80015d8:	d002      	beq.n	80015e0 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80015de:	d101      	bne.n	80015e4 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x38>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x3a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>:

void MidiInterface::setHandleNoteOff(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	mNoteOffCallback = fptr;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>:
void MidiInterface::setHandleNoteOn(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	mNoteOnCallback = fptr;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	605a      	str	r2, [r3, #4]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_ZN13MidiInterface22setHandleControlChangeEPFvhhhE>:
void MidiInterface::setHandleAfterTouchPoly(
		void (*fptr)(byte channel, byte note, byte pressure)) {
	mAfterTouchPolyCallback = fptr;
}
void MidiInterface::setHandleControlChange(
		void (*fptr)(byte channel, byte number, byte value)) {
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	mControlChangeCallback = fptr;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	60da      	str	r2, [r3, #12]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_ZN13MidiInterface14setHandleClockEPFvvE>:
	mSongSelectCallback = fptr;
}
void MidiInterface::setHandleTuneRequest(void (*fptr)(void)) {
	mTuneRequestCallback = fptr;
}
void MidiInterface::setHandleClock(void (*fptr)(void)) {
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
	mClockCallback = fptr;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_ZN13MidiInterface14setHandleStartEPFvvE>:
void MidiInterface::setHandleStart(void (*fptr)(void)) {
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	mStartCallback = fptr;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_ZN13MidiInterface13setHandleStopEPFvvE>:
void MidiInterface::setHandleContinue(void (*fptr)(void)) {
	mContinueCallback = fptr;
}
void MidiInterface::setHandleStop(void (*fptr)(void)) {
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
	mStopCallback = fptr;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <_ZN13MidiInterface14launchCallbackEv>:
	}
}

/*! @} */ // End of doc group MIDI Callbacks
// Private - launch callback function based on received type.
void MidiInterface::launchCallback() {
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	// The order is mixed to allow frequent messages to trigger their callback faster.
	switch (mMessage.type) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 80016aa:	3b80      	subs	r3, #128	@ 0x80
 80016ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80016ae:	f200 8203 	bhi.w	8001ab8 <_ZN13MidiInterface14launchCallbackEv+0x41c>
 80016b2:	a201      	add	r2, pc, #4	@ (adr r2, 80016b8 <_ZN13MidiInterface14launchCallbackEv+0x1c>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	080018b9 	.word	0x080018b9
 80016bc:	08001ab9 	.word	0x08001ab9
 80016c0:	08001ab9 	.word	0x08001ab9
 80016c4:	08001ab9 	.word	0x08001ab9
 80016c8:	08001ab9 	.word	0x08001ab9
 80016cc:	08001ab9 	.word	0x08001ab9
 80016d0:	08001ab9 	.word	0x08001ab9
 80016d4:	08001ab9 	.word	0x08001ab9
 80016d8:	08001ab9 	.word	0x08001ab9
 80016dc:	08001ab9 	.word	0x08001ab9
 80016e0:	08001ab9 	.word	0x08001ab9
 80016e4:	08001ab9 	.word	0x08001ab9
 80016e8:	08001ab9 	.word	0x08001ab9
 80016ec:	08001ab9 	.word	0x08001ab9
 80016f0:	08001ab9 	.word	0x08001ab9
 80016f4:	08001ab9 	.word	0x08001ab9
 80016f8:	080018dd 	.word	0x080018dd
 80016fc:	08001ab9 	.word	0x08001ab9
 8001700:	08001ab9 	.word	0x08001ab9
 8001704:	08001ab9 	.word	0x08001ab9
 8001708:	08001ab9 	.word	0x08001ab9
 800170c:	08001ab9 	.word	0x08001ab9
 8001710:	08001ab9 	.word	0x08001ab9
 8001714:	08001ab9 	.word	0x08001ab9
 8001718:	08001ab9 	.word	0x08001ab9
 800171c:	08001ab9 	.word	0x08001ab9
 8001720:	08001ab9 	.word	0x08001ab9
 8001724:	08001ab9 	.word	0x08001ab9
 8001728:	08001ab9 	.word	0x08001ab9
 800172c:	08001ab9 	.word	0x08001ab9
 8001730:	08001ab9 	.word	0x08001ab9
 8001734:	08001ab9 	.word	0x08001ab9
 8001738:	080019b5 	.word	0x080019b5
 800173c:	08001ab9 	.word	0x08001ab9
 8001740:	08001ab9 	.word	0x08001ab9
 8001744:	08001ab9 	.word	0x08001ab9
 8001748:	08001ab9 	.word	0x08001ab9
 800174c:	08001ab9 	.word	0x08001ab9
 8001750:	08001ab9 	.word	0x08001ab9
 8001754:	08001ab9 	.word	0x08001ab9
 8001758:	08001ab9 	.word	0x08001ab9
 800175c:	08001ab9 	.word	0x08001ab9
 8001760:	08001ab9 	.word	0x08001ab9
 8001764:	08001ab9 	.word	0x08001ab9
 8001768:	08001ab9 	.word	0x08001ab9
 800176c:	08001ab9 	.word	0x08001ab9
 8001770:	08001ab9 	.word	0x08001ab9
 8001774:	08001ab9 	.word	0x08001ab9
 8001778:	0800195b 	.word	0x0800195b
 800177c:	08001ab9 	.word	0x08001ab9
 8001780:	08001ab9 	.word	0x08001ab9
 8001784:	08001ab9 	.word	0x08001ab9
 8001788:	08001ab9 	.word	0x08001ab9
 800178c:	08001ab9 	.word	0x08001ab9
 8001790:	08001ab9 	.word	0x08001ab9
 8001794:	08001ab9 	.word	0x08001ab9
 8001798:	08001ab9 	.word	0x08001ab9
 800179c:	08001ab9 	.word	0x08001ab9
 80017a0:	08001ab9 	.word	0x08001ab9
 80017a4:	08001ab9 	.word	0x08001ab9
 80017a8:	08001ab9 	.word	0x08001ab9
 80017ac:	08001ab9 	.word	0x08001ab9
 80017b0:	08001ab9 	.word	0x08001ab9
 80017b4:	08001ab9 	.word	0x08001ab9
 80017b8:	080019f9 	.word	0x080019f9
 80017bc:	08001ab9 	.word	0x08001ab9
 80017c0:	08001ab9 	.word	0x08001ab9
 80017c4:	08001ab9 	.word	0x08001ab9
 80017c8:	08001ab9 	.word	0x08001ab9
 80017cc:	08001ab9 	.word	0x08001ab9
 80017d0:	08001ab9 	.word	0x08001ab9
 80017d4:	08001ab9 	.word	0x08001ab9
 80017d8:	08001ab9 	.word	0x08001ab9
 80017dc:	08001ab9 	.word	0x08001ab9
 80017e0:	08001ab9 	.word	0x08001ab9
 80017e4:	08001ab9 	.word	0x08001ab9
 80017e8:	08001ab9 	.word	0x08001ab9
 80017ec:	08001ab9 	.word	0x08001ab9
 80017f0:	08001ab9 	.word	0x08001ab9
 80017f4:	08001ab9 	.word	0x08001ab9
 80017f8:	080019d9 	.word	0x080019d9
 80017fc:	08001ab9 	.word	0x08001ab9
 8001800:	08001ab9 	.word	0x08001ab9
 8001804:	08001ab9 	.word	0x08001ab9
 8001808:	08001ab9 	.word	0x08001ab9
 800180c:	08001ab9 	.word	0x08001ab9
 8001810:	08001ab9 	.word	0x08001ab9
 8001814:	08001ab9 	.word	0x08001ab9
 8001818:	08001ab9 	.word	0x08001ab9
 800181c:	08001ab9 	.word	0x08001ab9
 8001820:	08001ab9 	.word	0x08001ab9
 8001824:	08001ab9 	.word	0x08001ab9
 8001828:	08001ab9 	.word	0x08001ab9
 800182c:	08001ab9 	.word	0x08001ab9
 8001830:	08001ab9 	.word	0x08001ab9
 8001834:	08001ab9 	.word	0x08001ab9
 8001838:	0800197f 	.word	0x0800197f
 800183c:	08001ab9 	.word	0x08001ab9
 8001840:	08001ab9 	.word	0x08001ab9
 8001844:	08001ab9 	.word	0x08001ab9
 8001848:	08001ab9 	.word	0x08001ab9
 800184c:	08001ab9 	.word	0x08001ab9
 8001850:	08001ab9 	.word	0x08001ab9
 8001854:	08001ab9 	.word	0x08001ab9
 8001858:	08001ab9 	.word	0x08001ab9
 800185c:	08001ab9 	.word	0x08001ab9
 8001860:	08001ab9 	.word	0x08001ab9
 8001864:	08001ab9 	.word	0x08001ab9
 8001868:	08001ab9 	.word	0x08001ab9
 800186c:	08001ab9 	.word	0x08001ab9
 8001870:	08001ab9 	.word	0x08001ab9
 8001874:	08001ab9 	.word	0x08001ab9
 8001878:	08001a17 	.word	0x08001a17
 800187c:	08001a3f 	.word	0x08001a3f
 8001880:	08001a57 	.word	0x08001a57
 8001884:	08001a81 	.word	0x08001a81
 8001888:	08001ab9 	.word	0x08001ab9
 800188c:	08001ab9 	.word	0x08001ab9
 8001890:	08001a99 	.word	0x08001a99
 8001894:	08001ab9 	.word	0x08001ab9
 8001898:	08001901 	.word	0x08001901
 800189c:	08001ab9 	.word	0x08001ab9
 80018a0:	08001913 	.word	0x08001913
 80018a4:	08001925 	.word	0x08001925
 80018a8:	08001937 	.word	0x08001937
 80018ac:	08001ab9 	.word	0x08001ab9
 80018b0:	08001949 	.word	0x08001949
 80018b4:	08001aa9 	.word	0x08001aa9
	// Notes
	case NoteOff:
		if (mNoteOffCallback != 0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80fd 	beq.w	8001abc <_ZN13MidiInterface14launchCallbackEv+0x420>
			mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80018d8:	4798      	blx	r3
		break;
 80018da:	e0ef      	b.n	8001abc <_ZN13MidiInterface14launchCallbackEv+0x420>
	case NoteOn:
		if (mNoteOnCallback != 0)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80ed 	beq.w	8001ac0 <_ZN13MidiInterface14launchCallbackEv+0x424>
			mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80018fc:	4798      	blx	r3
		break;
 80018fe:	e0df      	b.n	8001ac0 <_ZN13MidiInterface14launchCallbackEv+0x424>

// Real-time messages
	case Clock:
		if (mClockCallback != 0)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80dd 	beq.w	8001ac4 <_ZN13MidiInterface14launchCallbackEv+0x428>
			mClockCallback();
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4798      	blx	r3
		break;
 8001910:	e0d8      	b.n	8001ac4 <_ZN13MidiInterface14launchCallbackEv+0x428>
	case Start:
		if (mStartCallback != 0)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80d6 	beq.w	8001ac8 <_ZN13MidiInterface14launchCallbackEv+0x42c>
			mStartCallback();
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	4798      	blx	r3
		break;
 8001922:	e0d1      	b.n	8001ac8 <_ZN13MidiInterface14launchCallbackEv+0x42c>
	case Continue:
		if (mContinueCallback != 0)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80cf 	beq.w	8001acc <_ZN13MidiInterface14launchCallbackEv+0x430>
			mContinueCallback();
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001932:	4798      	blx	r3
		break;
 8001934:	e0ca      	b.n	8001acc <_ZN13MidiInterface14launchCallbackEv+0x430>
	case Stop:
		if (mStopCallback != 0)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80c8 	beq.w	8001ad0 <_ZN13MidiInterface14launchCallbackEv+0x434>
			mStopCallback();
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001944:	4798      	blx	r3
		break;
 8001946:	e0c3      	b.n	8001ad0 <_ZN13MidiInterface14launchCallbackEv+0x434>
	case ActiveSensing:
		if (mActiveSensingCallback != 0)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80c1 	beq.w	8001ad4 <_ZN13MidiInterface14launchCallbackEv+0x438>
			mActiveSensingCallback();
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4798      	blx	r3
		break;
 8001958:	e0bc      	b.n	8001ad4 <_ZN13MidiInterface14launchCallbackEv+0x438>

// Continuous controllers
	case ControlChange:
		if (mControlChangeCallback != 0)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80ba 	beq.w	8001ad8 <_ZN13MidiInterface14launchCallbackEv+0x43c>
			mControlChangeCallback(mMessage.channel, mMessage.data1,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 800197a:	4798      	blx	r3
					mMessage.data2);
		break;
 800197c:	e0ac      	b.n	8001ad8 <_ZN13MidiInterface14launchCallbackEv+0x43c>
	case PitchBend:
		if (mPitchBendCallback != 0)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80aa 	beq.w	8001adc <_ZN13MidiInterface14launchCallbackEv+0x440>
			mPitchBendCallback(mMessage.channel,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
					(int) ((mMessage.data1 & 0x7f)
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001998:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
							| ((mMessage.data2 & 0x7f) << 7))
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80019a2:	01d2      	lsls	r2, r2, #7
 80019a4:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 80019a8:	430a      	orrs	r2, r1
			mPitchBendCallback(mMessage.channel,
 80019aa:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
 80019ae:	4611      	mov	r1, r2
 80019b0:	4798      	blx	r3
							+ MIDI_PITCHBEND_MIN);
		break;
 80019b2:	e093      	b.n	8001adc <_ZN13MidiInterface14launchCallbackEv+0x440>
	case AfterTouchPoly:
		if (mAfterTouchPolyCallback != 0)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8091 	beq.w	8001ae0 <_ZN13MidiInterface14launchCallbackEv+0x444>
			mAfterTouchPolyCallback(mMessage.channel, mMessage.data1,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	f892 116b 	ldrb.w	r1, [r2, #363]	@ 0x16b
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 80019d4:	4798      	blx	r3
					mMessage.data2);
		break;
 80019d6:	e083      	b.n	8001ae0 <_ZN13MidiInterface14launchCallbackEv+0x444>
	case AfterTouchChannel:
		if (mAfterTouchChannelCallback != 0)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8081 	beq.w	8001ae4 <_ZN13MidiInterface14launchCallbackEv+0x448>
			mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 80019f2:	4611      	mov	r1, r2
 80019f4:	4798      	blx	r3
		break;
 80019f6:	e075      	b.n	8001ae4 <_ZN13MidiInterface14launchCallbackEv+0x448>

	case ProgramChange:
		if (mProgramChangeCallback != 0)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d073      	beq.n	8001ae8 <_ZN13MidiInterface14launchCallbackEv+0x44c>
			mProgramChangeCallback(mMessage.channel, mMessage.data1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	f892 016a 	ldrb.w	r0, [r2, #362]	@ 0x16a
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a10:	4611      	mov	r1, r2
 8001a12:	4798      	blx	r3
		break;
 8001a14:	e068      	b.n	8001ae8 <_ZN13MidiInterface14launchCallbackEv+0x44c>
	case SystemExclusive:
		if (mSystemExclusiveCallback != 0)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d066      	beq.n	8001aec <_ZN13MidiInterface14launchCallbackEv+0x450>
			mSystemExclusiveCallback(mMessage.sysexArray,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69dc      	ldr	r4, [r3, #28]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f503 75b7 	add.w	r5, r3, #366	@ 0x16e
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe ffb8 	bl	80009a4 <_ZN8mMessage12getSysExSizeEv>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4619      	mov	r1, r3
 8001a38:	4628      	mov	r0, r5
 8001a3a:	47a0      	blx	r4
					mMessage.getSysExSize());
		break;
 8001a3c:	e056      	b.n	8001aec <_ZN13MidiInterface14launchCallbackEv+0x450>

// Occasional messages
	case TimeCodeQuarterFrame:
		if (mTimeCodeQuarterFrameCallback != 0)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d054      	beq.n	8001af0 <_ZN13MidiInterface14launchCallbackEv+0x454>
			mTimeCodeQuarterFrameCallback(mMessage.data1);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a50:	4610      	mov	r0, r2
 8001a52:	4798      	blx	r3
		break;
 8001a54:	e04c      	b.n	8001af0 <_ZN13MidiInterface14launchCallbackEv+0x454>
	case SongPosition:
		if (mSongPositionCallback != 0)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d04a      	beq.n	8001af4 <_ZN13MidiInterface14launchCallbackEv+0x458>
			mSongPositionCallback(
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
					(mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a68:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
 8001a72:	01d2      	lsls	r2, r2, #7
 8001a74:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001a78:	430a      	orrs	r2, r1
			mSongPositionCallback(
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4798      	blx	r3
		break;
 8001a7e:	e039      	b.n	8001af4 <_ZN13MidiInterface14launchCallbackEv+0x458>
	case SongSelect:
		if (mSongSelectCallback != 0)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d037      	beq.n	8001af8 <_ZN13MidiInterface14launchCallbackEv+0x45c>
			mSongSelectCallback(mMessage.data1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	f892 216b 	ldrb.w	r2, [r2, #363]	@ 0x16b
 8001a92:	4610      	mov	r0, r2
 8001a94:	4798      	blx	r3
		break;
 8001a96:	e02f      	b.n	8001af8 <_ZN13MidiInterface14launchCallbackEv+0x45c>
	case TuneRequest:
		if (mTuneRequestCallback != 0)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02d      	beq.n	8001afc <_ZN13MidiInterface14launchCallbackEv+0x460>
			mTuneRequestCallback();
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	4798      	blx	r3
		break;
 8001aa6:	e029      	b.n	8001afc <_ZN13MidiInterface14launchCallbackEv+0x460>

	case SystemReset:
		if (mSystemResetCallback != 0)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d027      	beq.n	8001b00 <_ZN13MidiInterface14launchCallbackEv+0x464>
			mSystemResetCallback();
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	4798      	blx	r3
		break;
 8001ab6:	e023      	b.n	8001b00 <_ZN13MidiInterface14launchCallbackEv+0x464>

	case InvalidType:
	default:
		break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001ab8:	bf00      	nop
 8001aba:	e022      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001abc:	bf00      	nop
 8001abe:	e020      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac0:	bf00      	nop
 8001ac2:	e01e      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac4:	bf00      	nop
 8001ac6:	e01c      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ac8:	bf00      	nop
 8001aca:	e01a      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001acc:	bf00      	nop
 8001ace:	e018      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad0:	bf00      	nop
 8001ad2:	e016      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad4:	bf00      	nop
 8001ad6:	e014      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ad8:	bf00      	nop
 8001ada:	e012      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001adc:	bf00      	nop
 8001ade:	e010      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ae0:	bf00      	nop
 8001ae2:	e00e      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ae4:	bf00      	nop
 8001ae6:	e00c      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001ae8:	bf00      	nop
 8001aea:	e00a      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001aec:	bf00      	nop
 8001aee:	e008      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001af0:	bf00      	nop
 8001af2:	e006      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001af4:	bf00      	nop
 8001af6:	e004      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001af8:	bf00      	nop
 8001afa:	e002      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001afc:	bf00      	nop
 8001afe:	e000      	b.n	8001b02 <_ZN13MidiInterface14launchCallbackEv+0x466>
		break;
 8001b00:	bf00      	nop
	}
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	bf00      	nop

08001b0c <_ZN13MidiInterface10thruFilterEh>:

void MidiInterface::thruFilter(Channel inChannel) {
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
	// If the feature is disabled, don't do anything.
	if (!mThruActivated || (mThruFilterMode == Thru::Off))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 80da 	bne.w	8001ce4 <_ZN13MidiInterface10thruFilterEh+0x1d8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80d1 	beq.w	8001ce4 <_ZN13MidiInterface10thruFilterEh+0x1d8>
		return;

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da65      	bge.n	8001c1a <_ZN13MidiInterface10thruFilterEh+0x10e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001b54:	2be0      	cmp	r3, #224	@ 0xe0
 8001b56:	d860      	bhi.n	8001c1a <_ZN13MidiInterface10thruFilterEh+0x10e>
		bool filter_condition = ((mMessage.channel == inChannel)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
				|| (inChannel == MIDI_CHANNEL_OMNI));
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d002      	beq.n	8001b6a <_ZN13MidiInterface10thruFilterEh+0x5e>
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <_ZN13MidiInterface10thruFilterEh+0x62>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZN13MidiInterface10thruFilterEh+0x64>
 8001b6e:	2300      	movs	r3, #0
		bool filter_condition = ((mMessage.channel == inChannel)
 8001b70:	73fb      	strb	r3, [r7, #15]

		// Now let's pass it to the output
		switch (mThruFilterMode) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3164 	ldrb.w	r3, [r3, #356]	@ 0x164
 8001b78:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d02d      	beq.n	8001bde <_ZN13MidiInterface10thruFilterEh+0xd2>
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	dc43      	bgt.n	8001c0e <_ZN13MidiInterface10thruFilterEh+0x102>
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d002      	beq.n	8001b90 <_ZN13MidiInterface10thruFilterEh+0x84>
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d012      	beq.n	8001bb4 <_ZN13MidiInterface10thruFilterEh+0xa8>
						mMessage.channel);
			}
			break;

		default:
			break;
 8001b8e:	e03e      	b.n	8001c0e <_ZN13MidiInterface10thruFilterEh+0x102>
			send(mMessage.type, mMessage.data1, mMessage.data2,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4603      	mov	r3, r0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff f822 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001bb2:	e031      	b.n	8001c18 <_ZN13MidiInterface10thruFilterEh+0x10c>
			if (filter_condition) {
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d02b      	beq.n	8001c12 <_ZN13MidiInterface10thruFilterEh+0x106>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff f80d 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001bdc:	e019      	b.n	8001c12 <_ZN13MidiInterface10thruFilterEh+0x106>
			if (!filter_condition) {
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <_ZN13MidiInterface10thruFilterEh+0x10a>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 1169 	ldrb.w	r1, [r3, #361]	@ 0x169
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4603      	mov	r3, r0
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7fe fff5 	bl	8000bf6 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001c0c:	e003      	b.n	8001c16 <_ZN13MidiInterface10thruFilterEh+0x10a>
			break;
 8001c0e:	bf00      	nop
 8001c10:	e06b      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001c12:	bf00      	nop
 8001c14:	e069      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001c16:	bf00      	nop
		}
	} else {
 8001c18:	e067      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
		// Send the message to the output
		switch (mMessage.type) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001c20:	2bff      	cmp	r3, #255	@ 0xff
 8001c22:	dc61      	bgt.n	8001ce8 <_ZN13MidiInterface10thruFilterEh+0x1dc>
 8001c24:	2bf2      	cmp	r3, #242	@ 0xf2
 8001c26:	da04      	bge.n	8001c32 <_ZN13MidiInterface10thruFilterEh+0x126>
 8001c28:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c2a:	d02b      	beq.n	8001c84 <_ZN13MidiInterface10thruFilterEh+0x178>
 8001c2c:	2bf1      	cmp	r3, #241	@ 0xf1
 8001c2e:	d04e      	beq.n	8001cce <_ZN13MidiInterface10thruFilterEh+0x1c2>
		case TimeCodeQuarterFrame:
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
			break;

		default:
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001c30:	e05a      	b.n	8001ce8 <_ZN13MidiInterface10thruFilterEh+0x1dc>
		switch (mMessage.type) {
 8001c32:	3bf2      	subs	r3, #242	@ 0xf2
 8001c34:	2201      	movs	r2, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001c3e:	401a      	ands	r2, r3
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	bf14      	ite	ne
 8001c44:	2201      	movne	r2, #1
 8001c46:	2200      	moveq	r2, #0
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d112      	bne.n	8001c74 <_ZN13MidiInterface10thruFilterEh+0x168>
 8001c4e:	f003 0201 	and.w	r2, r3, #1
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2201      	movne	r2, #1
 8001c58:	2200      	moveq	r2, #0
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	d128      	bne.n	8001cb2 <_ZN13MidiInterface10thruFilterEh+0x1a6>
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d117      	bne.n	8001ca2 <_ZN13MidiInterface10thruFilterEh+0x196>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001c72:	e039      	b.n	8001ce8 <_ZN13MidiInterface10thruFilterEh+0x1dc>
			sendRealTime(mMessage.type);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff f903 	bl	8000e88 <_ZN13MidiInterface12sendRealTimeE8MidiType>
			break;
 8001c82:	e032      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSysEx(getSysExArrayLength(), getSysExArray(), true);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fc4b 	bl	8001520 <_ZN13MidiInterface19getSysExArrayLengthEv>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b2dc      	uxtb	r4, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fc39 	bl	8001506 <_ZN13MidiInterface13getSysExArrayEv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	2301      	movs	r3, #1
 8001c98:	4621      	mov	r1, r4
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff f81e 	bl	8000cdc <_ZN13MidiInterface9sendSysExEhPhb>
			break;
 8001ca0:	e023      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongSelect(mMessage.data1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff f8c7 	bl	8000e3e <_ZN13MidiInterface14sendSongSelectEh>
			break;
 8001cb0:	e01b      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongPosition(mMessage.data1 | ((unsigned) mMessage.data2 << 7));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8001cc0:	01db      	lsls	r3, r3, #7
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff f888 	bl	8000ddc <_ZN13MidiInterface16sendSongPositionEj>
			break;
 8001ccc:	e00d      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 116b 	ldrb.w	r1, [r3, #363]	@ 0x16b
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8001cda:	461a      	mov	r2, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff f83c 	bl	8000d5a <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>
			break;
 8001ce2:	e002      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
		return;
 8001ce4:	bf00      	nop
 8001ce6:	e000      	b.n	8001cea <_ZN13MidiInterface10thruFilterEh+0x1de>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001ce8:	bf00      	nop
		}
	}
}
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}

08001cf0 <_Z12Handle_Clockv>:

#include "MidiHandlers.h"
#include "stm32f3xx_hal.h"
int i;
int u;
void Handle_Clock() {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	i++;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <_Z12Handle_Clockv+0x2c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <_Z12Handle_Clockv+0x2c>)
 8001cfc:	6013      	str	r3, [r2, #0]
	if (i / 12 == 1) {
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <_Z12Handle_Clockv+0x2c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3b0c      	subs	r3, #12
 8001d04:	2b0b      	cmp	r3, #11
 8001d06:	d807      	bhi.n	8001d18 <_Z12Handle_Clockv+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d0c:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <_Z12Handle_Clockv+0x30>)
 8001d0e:	f001 faf7 	bl	8003300 <HAL_GPIO_TogglePin>
		i = 0;
 8001d12:	4b02      	ldr	r3, [pc, #8]	@ (8001d1c <_Z12Handle_Clockv+0x2c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000028 	.word	0x20000028
 8001d20:	48000800 	.word	0x48000800

08001d24 <_Z12Handle_Startv>:

void Handle_Start() {
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	i = 0;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <_Z12Handle_Startv+0x14>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_SET);
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	20000028 	.word	0x20000028

08001d3c <_Z11Handle_Stopv>:
void Handle_Stop() {
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_RESET);
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d52:	f000 fe71 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d56:	f000 f85b 	bl	8001e10 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5a:	f000 fa03 	bl	8002164 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001d5e:	f000 f9cd 	bl	80020fc <_ZL19MX_USART1_UART_Initv>
  MX_DAC1_Init();
 8001d62:	f000 f8c3 	bl	8001eec <_ZL12MX_DAC1_Initv>
  MX_DAC2_Init();
 8001d66:	f000 f905 	bl	8001f74 <_ZL12MX_DAC2_Initv>
  MX_SPI2_Init();
 8001d6a:	f000 f985 	bl	8002078 <_ZL12MX_SPI2_Initv>
  MX_I2C1_Init();
 8001d6e:	f000 f935 	bl	8001fdc <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
	Port.begin(1, &huart1, &huart1);
 8001d72:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <main+0x98>)
 8001d74:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <main+0x98>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	481b      	ldr	r0, [pc, #108]	@ (8001de8 <main+0x9c>)
 8001d7a:	f7fe ff1c 	bl	8000bb6 <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>

	Port.setHandleClock(Handle_Clock);
 8001d7e:	491b      	ldr	r1, [pc, #108]	@ (8001dec <main+0xa0>)
 8001d80:	4819      	ldr	r0, [pc, #100]	@ (8001de8 <main+0x9c>)
 8001d82:	f7ff fc60 	bl	8001646 <_ZN13MidiInterface14setHandleClockEPFvvE>
	Port.setHandleStart(Handle_Start);
 8001d86:	491a      	ldr	r1, [pc, #104]	@ (8001df0 <main+0xa4>)
 8001d88:	4817      	ldr	r0, [pc, #92]	@ (8001de8 <main+0x9c>)
 8001d8a:	f7ff fc6a 	bl	8001662 <_ZN13MidiInterface14setHandleStartEPFvvE>
	Port.setHandleStop(Handle_Stop);
 8001d8e:	4919      	ldr	r1, [pc, #100]	@ (8001df4 <main+0xa8>)
 8001d90:	4815      	ldr	r0, [pc, #84]	@ (8001de8 <main+0x9c>)
 8001d92:	f7ff fc74 	bl	800167e <_ZN13MidiInterface13setHandleStopEPFvvE>
	Port.setHandleNoteOn(Handle_NoteOn);
 8001d96:	4918      	ldr	r1, [pc, #96]	@ (8001df8 <main+0xac>)
 8001d98:	4813      	ldr	r0, [pc, #76]	@ (8001de8 <main+0x9c>)
 8001d9a:	f7ff fc38 	bl	800160e <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>
	Port.setHandleNoteOff(Handle_NoteOff);
 8001d9e:	4917      	ldr	r1, [pc, #92]	@ (8001dfc <main+0xb0>)
 8001da0:	4811      	ldr	r0, [pc, #68]	@ (8001de8 <main+0x9c>)
 8001da2:	f7ff fc26 	bl	80015f2 <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>
	Port.setHandleControlChange(Handle_CC);
 8001da6:	4916      	ldr	r1, [pc, #88]	@ (8001e00 <main+0xb4>)
 8001da8:	480f      	ldr	r0, [pc, #60]	@ (8001de8 <main+0x9c>)
 8001daa:	f7ff fc3e 	bl	800162a <_ZN13MidiInterface22setHandleControlChangeEPFvhhhE>

//	 printf("Great Succes!\n\r");

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001dae:	2100      	movs	r1, #0
 8001db0:	4814      	ldr	r0, [pc, #80]	@ (8001e04 <main+0xb8>)
 8001db2:	f000 ffff 	bl	8002db4 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001db6:	2110      	movs	r1, #16
 8001db8:	4812      	ldr	r0, [pc, #72]	@ (8001e04 <main+0xb8>)
 8001dba:	f000 fffb 	bl	8002db4 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4811      	ldr	r0, [pc, #68]	@ (8001e08 <main+0xbc>)
 8001dc2:	f000 fff7 	bl	8002db4 <HAL_DAC_Start>
    HAL_SPI_Init(&hspi2);
 8001dc6:	4811      	ldr	r0, [pc, #68]	@ (8001e0c <main+0xc0>)
 8001dc8:	f003 faec 	bl	80053a4 <HAL_SPI_Init>

    ChannelConfig config;
    ChannelConfig_2 config2;
    dac_init(&config, &config2);
 8001dcc:	463a      	mov	r2, r7
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fb99 	bl	800250c <dac_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Port.read();
 8001dda:	4803      	ldr	r0, [pc, #12]	@ (8001de8 <main+0x9c>)
 8001ddc:	f7ff f898 	bl	8000f10 <_ZN13MidiInterface4readEv>
 8001de0:	e7fb      	b.n	8001dda <main+0x8e>
 8001de2:	bf00      	nop
 8001de4:	2000010c 	.word	0x2000010c
 8001de8:	200001a0 	.word	0x200001a0
 8001dec:	08001cf1 	.word	0x08001cf1
 8001df0:	08001d25 	.word	0x08001d25
 8001df4:	08001d3d 	.word	0x08001d3d
 8001df8:	08002289 	.word	0x08002289
 8001dfc:	080023d1 	.word	0x080023d1
 8001e00:	08002429 	.word	0x08002429
 8001e04:	2000002c 	.word	0x2000002c
 8001e08:	20000040 	.word	0x20000040
 8001e0c:	200000a8 	.word	0x200000a8

08001e10 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b09a      	sub	sp, #104	@ 0x68
 8001e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e1a:	2228      	movs	r2, #40	@ 0x28
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fcf1 	bl	8006806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	222c      	movs	r2, #44	@ 0x2c
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 fce3 	bl	8006806 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e40:	2303      	movs	r3, #3
 8001e42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e52:	2310      	movs	r3, #16
 8001e54:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e56:	2302      	movs	r3, #2
 8001e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e60:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001e64:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 fec8 	bl	8003c00 <HAL_RCC_OscConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8001e80:	f000 fb0c 	bl	800249c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e84:	230f      	movs	r3, #15
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 feeb 	bl	8004c7c <HAL_RCC_ClockConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8001eb6:	f000 faf1 	bl	800249c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001eba:	2321      	movs	r3, #33	@ 0x21
 8001ebc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f8f7 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8001ede:	f000 fadd 	bl	800249c <Error_Handler>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3768      	adds	r7, #104	@ 0x68
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <_ZL12MX_DAC1_Initv+0x80>)
 8001efe:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <_ZL12MX_DAC1_Initv+0x84>)
 8001f00:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001f02:	481a      	ldr	r0, [pc, #104]	@ (8001f6c <_ZL12MX_DAC1_Initv+0x80>)
 8001f04:	f000 ff0f 	bl	8002d26 <HAL_DAC_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <_ZL12MX_DAC1_Initv+0x30>
  {
    Error_Handler();
 8001f18:	f000 fac0 	bl	800249c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4810      	ldr	r0, [pc, #64]	@ (8001f6c <_ZL12MX_DAC1_Initv+0x80>)
 8001f2c:	f000 ff8d 	bl	8002e4a <HAL_DAC_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf14      	ite	ne
 8001f36:	2301      	movne	r3, #1
 8001f38:	2300      	moveq	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <_ZL12MX_DAC1_Initv+0x58>
  {
    Error_Handler();
 8001f40:	f000 faac 	bl	800249c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2210      	movs	r2, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4808      	ldr	r0, [pc, #32]	@ (8001f6c <_ZL12MX_DAC1_Initv+0x80>)
 8001f4c:	f000 ff7d 	bl	8002e4a <HAL_DAC_ConfigChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <_ZL12MX_DAC1_Initv+0x78>
  {
    Error_Handler();
 8001f60:	f000 fa9c 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000002c 	.word	0x2000002c
 8001f70:	40007400 	.word	0x40007400

08001f74 <_ZL12MX_DAC2_Initv>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <_ZL12MX_DAC2_Initv+0x60>)
 8001f86:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <_ZL12MX_DAC2_Initv+0x64>)
 8001f88:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001f8a:	4812      	ldr	r0, [pc, #72]	@ (8001fd4 <_ZL12MX_DAC2_Initv+0x60>)
 8001f8c:	f000 fecb 	bl	8002d26 <HAL_DAC_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf14      	ite	ne
 8001f96:	2301      	movne	r3, #1
 8001f98:	2300      	moveq	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <_ZL12MX_DAC2_Initv+0x30>
  {
    Error_Handler();
 8001fa0:	f000 fa7c 	bl	800249c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <_ZL12MX_DAC2_Initv+0x60>)
 8001fb4:	f000 ff49 	bl	8002e4a <HAL_DAC_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <_ZL12MX_DAC2_Initv+0x58>
  {
    Error_Handler();
 8001fc8:	f000 fa68 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000040 	.word	0x20000040
 8001fd8:	40009800 	.word	0x40009800

08001fdc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8001fe2:	4a23      	ldr	r2, [pc, #140]	@ (8002070 <_ZL12MX_I2C1_Initv+0x94>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8001fe8:	4a22      	ldr	r2, [pc, #136]	@ (8002074 <_ZL12MX_I2C1_Initv+0x98>)
 8001fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002016:	4815      	ldr	r0, [pc, #84]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8002018:	f001 f98c 	bl	8003334 <HAL_I2C_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800202c:	f000 fa36 	bl	800249c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002030:	2100      	movs	r1, #0
 8002032:	480e      	ldr	r0, [pc, #56]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8002034:	f001 fd4c 	bl	8003ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002048:	f000 fa28 	bl	800249c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800204c:	2100      	movs	r1, #0
 800204e:	4807      	ldr	r0, [pc, #28]	@ (800206c <_ZL12MX_I2C1_Initv+0x90>)
 8002050:	f001 fd89 	bl	8003b66 <HAL_I2CEx_ConfigDigitalFilter>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002064:	f000 fa1a 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000054 	.word	0x20000054
 8002070:	40005400 	.word	0x40005400
 8002074:	00201d2b 	.word	0x00201d2b

08002078 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800207c:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 800207e:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <_ZL12MX_SPI2_Initv+0x80>)
 8002080:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 8002084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002088:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800208a:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 8002092:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002096:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002098:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 800209a:	2202      	movs	r2, #2
 800209c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020b8:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020be:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020c6:	2207      	movs	r2, #7
 80020c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020d2:	2208      	movs	r2, #8
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020d6:	4807      	ldr	r0, [pc, #28]	@ (80020f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80020d8:	f003 f964 	bl	80053a4 <HAL_SPI_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80020ec:	f000 f9d6 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200000a8 	.word	0x200000a8
 80020f8:	40003800 	.word	0x40003800

080020fc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002100:	4b16      	ldr	r3, [pc, #88]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002102:	4a17      	ldr	r2, [pc, #92]	@ (8002160 <_ZL19MX_USART1_UART_Initv+0x64>)
 8002104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002108:	f647 2212 	movw	r2, #31250	@ 0x7a12
 800210c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002120:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002122:	2204      	movs	r2, #4
 8002124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800213e:	4807      	ldr	r0, [pc, #28]	@ (800215c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002140:	f003 faef 	bl	8005722 <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002154:	f000 f9a2 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	2000010c 	.word	0x2000010c
 8002160:	40013800 	.word	0x40013800

08002164 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	4a3e      	ldr	r2, [pc, #248]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 8002180:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002184:	6153      	str	r3, [r2, #20]
 8002186:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002192:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	4a38      	ldr	r2, [pc, #224]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 8002198:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800219c:	6153      	str	r3, [r2, #20]
 800219e:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b4:	6153      	str	r3, [r2, #20]
 80021b6:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021cc:	6153      	str	r3, [r2, #20]
 80021ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	4a26      	ldr	r2, [pc, #152]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021e4:	6153      	str	r3, [r2, #20]
 80021e6:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <_ZL12MX_GPIO_Initv+0x114>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021f8:	4820      	ldr	r0, [pc, #128]	@ (800227c <_ZL12MX_GPIO_Initv+0x118>)
 80021fa:	f001 f869 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, gate1_Pin|gate2_Pin|gate3_Pin, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	2107      	movs	r1, #7
 8002202:	481f      	ldr	r0, [pc, #124]	@ (8002280 <_ZL12MX_GPIO_Initv+0x11c>)
 8002204:	f001 f864 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(kPinSS_GPIO_Port, kPinSS_Pin, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800220e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002212:	f001 f85d 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002216:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800221a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	4813      	ldr	r0, [pc, #76]	@ (800227c <_ZL12MX_GPIO_Initv+0x118>)
 8002230:	f000 fed4 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : gate1_Pin gate2_Pin gate3_Pin */
  GPIO_InitStruct.Pin = gate1_Pin|gate2_Pin|gate3_Pin;
 8002234:	2307      	movs	r3, #7
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	480d      	ldr	r0, [pc, #52]	@ (8002280 <_ZL12MX_GPIO_Initv+0x11c>)
 800224c:	f000 fec6 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : kPinSS_Pin */
  GPIO_InitStruct.Pin = kPinSS_Pin;
 8002250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2301      	movs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(kPinSS_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800226c:	f000 feb6 	bl	8002fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	@ 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	48000800 	.word	0x48000800
 8002280:	48000400 	.word	0x48000400
 8002284:	00000000 	.word	0x00000000

08002288 <_Z13Handle_NoteOnhhh>:
/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	__NOP();
}

void Handle_NoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
 8002292:	460b      	mov	r3, r1
 8002294:	71bb      	strb	r3, [r7, #6]
 8002296:	4613      	mov	r3, r2
 8002298:	717b      	strb	r3, [r7, #5]
    uint32_t pitch_CV = (uint32_t)((note * 0.0833333333 * X) / (3.3 / 4096));  // Calculate pitch CV from MIDI note
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f8e5 	bl	800046c <__aeabi_i2d>
 80022a2:	a349      	add	r3, pc, #292	@ (adr r3, 80023c8 <_Z13Handle_NoteOnhhh+0x140>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f94a 	bl	8000540 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <_Z13Handle_NoteOnhhh+0x120>)
 80022ba:	f7fe f941 	bl	8000540 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	a332      	add	r3, pc, #200	@ (adr r3, 8002390 <_Z13Handle_NoteOnhhh+0x108>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f7fe fa62 	bl	8000794 <__aeabi_ddiv>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fb44 	bl	8000964 <__aeabi_d2uiz>
 80022dc:	4603      	mov	r3, r0
 80022de:	61fb      	str	r3, [r7, #28]
    uint32_t velo_CV = (uint32_t)((velocity / 127.0) * 65535);
 80022e0:	797b      	ldrb	r3, [r7, #5]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f8c2 	bl	800046c <__aeabi_i2d>
 80022e8:	a32b      	add	r3, pc, #172	@ (adr r3, 8002398 <_Z13Handle_NoteOnhhh+0x110>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe fa51 	bl	8000794 <__aeabi_ddiv>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	a329      	add	r3, pc, #164	@ (adr r3, 80023a0 <_Z13Handle_NoteOnhhh+0x118>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f91e 	bl	8000540 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fb2a 	bl	8000964 <__aeabi_d2uiz>
 8002310:	4603      	mov	r3, r0
 8002312:	61bb      	str	r3, [r7, #24]
    ChannelConfig config;
    // If no notes are currently active, send the first note to DAC_CHANNEL_1
    if (!first_note_active) {
 8002314:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <_Z13Handle_NoteOnhhh+0x124>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f083 0301 	eor.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d020      	beq.n	8002364 <_Z13Handle_NoteOnhhh+0xdc>
        pitch1_CV = pitch_CV;
 8002322:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <_Z13Handle_NoteOnhhh+0x128>)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	6013      	str	r3, [r2, #0]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pitch1_CV);
 8002328:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <_Z13Handle_NoteOnhhh+0x128>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	4820      	ldr	r0, [pc, #128]	@ (80023b4 <_Z13Handle_NoteOnhhh+0x12c>)
 8002332:	f000 fd1a 	bl	8002d6a <HAL_DAC_SetValue>
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, velo_CV);
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	2200      	movs	r2, #0
 800233a:	2110      	movs	r1, #16
 800233c:	481d      	ldr	r0, [pc, #116]	@ (80023b4 <_Z13Handle_NoteOnhhh+0x12c>)
 800233e:	f000 fd14 	bl	8002d6a <HAL_DAC_SetValue>

          config.val[0] = pitch1_CV;  // 12-bit DAC value for channel A
 8002342:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <_Z13Handle_NoteOnhhh+0x128>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	81fb      	strh	r3, [r7, #14]
          config.val[1] = velo_CV;  // 12-bit DAC value for channel B
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	b29b      	uxth	r3, r3
 800234e:	823b      	strh	r3, [r7, #16]
    	  DACx60FW(&hi2c1, config);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002356:	4818      	ldr	r0, [pc, #96]	@ (80023b8 <_Z13Handle_NoteOnhhh+0x130>)
 8002358:	f000 f91b 	bl	8002592 <DACx60FW>
//        if (dac.ready()) {
//         dac.Write((uint16_t)pitch1_CV, 30000);
        // Also output the same value to DAC_CHANNEL_2 as default
//        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pitch1_CV);
//        HAL_GPIO_WritePin(GPIOB, gate3_Pin, GPIO_PIN_SET);  // Indicate first note is on via gate3_Pin
        first_note_active = true;  // First note is now active
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <_Z13Handle_NoteOnhhh+0x124>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
        pitch2_CV = pitch_CV;
//        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, pitch2_CV);
        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_SET);  // Indicate second note is on via gate2_Pin
        second_note_active = true;  // Second note is now active
    }
	}
 8002362:	e011      	b.n	8002388 <_Z13Handle_NoteOnhhh+0x100>
    else if (!second_note_active) {
 8002364:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <_Z13Handle_NoteOnhhh+0x134>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f083 0301 	eor.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <_Z13Handle_NoteOnhhh+0x100>
        pitch2_CV = pitch_CV;
 8002372:	4a13      	ldr	r2, [pc, #76]	@ (80023c0 <_Z13Handle_NoteOnhhh+0x138>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_SET);  // Indicate second note is on via gate2_Pin
 8002378:	2201      	movs	r2, #1
 800237a:	2102      	movs	r1, #2
 800237c:	4811      	ldr	r0, [pc, #68]	@ (80023c4 <_Z13Handle_NoteOnhhh+0x13c>)
 800237e:	f000 ffa7 	bl	80032d0 <HAL_GPIO_WritePin>
        second_note_active = true;  // Second note is now active
 8002382:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <_Z13Handle_NoteOnhhh+0x134>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
	}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	66666666 	.word	0x66666666
 8002394:	3f4a6666 	.word	0x3f4a6666
 8002398:	00000000 	.word	0x00000000
 800239c:	405fc000 	.word	0x405fc000
 80023a0:	00000000 	.word	0x00000000
 80023a4:	40efffe0 	.word	0x40efffe0
 80023a8:	3fd00000 	.word	0x3fd00000
 80023ac:	20000194 	.word	0x20000194
 80023b0:	20000198 	.word	0x20000198
 80023b4:	2000002c 	.word	0x2000002c
 80023b8:	20000054 	.word	0x20000054
 80023bc:	20000195 	.word	0x20000195
 80023c0:	2000019c 	.word	0x2000019c
 80023c4:	48000400 	.word	0x48000400
 80023c8:	5530aed6 	.word	0x5530aed6
 80023cc:	3fb55555 	.word	0x3fb55555

080023d0 <_Z14Handle_NoteOffhhh>:

void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
 80023da:	460b      	mov	r3, r1
 80023dc:	71bb      	strb	r3, [r7, #6]
 80023de:	4613      	mov	r3, r2
 80023e0:	717b      	strb	r3, [r7, #5]

    // If the first note is off
    if (first_note_active) {
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <_Z14Handle_NoteOffhhh+0x4c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <_Z14Handle_NoteOffhhh+0x2c>

        HAL_GPIO_WritePin(GPIOB, gate3_Pin, GPIO_PIN_RESET);  // Turn off gate for first note
 80023ea:	2200      	movs	r2, #0
 80023ec:	2104      	movs	r1, #4
 80023ee:	480c      	ldr	r0, [pc, #48]	@ (8002420 <_Z14Handle_NoteOffhhh+0x50>)
 80023f0:	f000 ff6e 	bl	80032d0 <HAL_GPIO_WritePin>
        first_note_active = false;  // First note is no longer active
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <_Z14Handle_NoteOffhhh+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
    else if (second_note_active) {

        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_RESET);  // Turn off gate for second note
        second_note_active = false;  // Second note is no longer active
    }
}
 80023fa:	e00b      	b.n	8002414 <_Z14Handle_NoteOffhhh+0x44>
    else if (second_note_active) {
 80023fc:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <_Z14Handle_NoteOffhhh+0x54>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <_Z14Handle_NoteOffhhh+0x44>
        HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_RESET);  // Turn off gate for second note
 8002404:	2200      	movs	r2, #0
 8002406:	2102      	movs	r1, #2
 8002408:	4805      	ldr	r0, [pc, #20]	@ (8002420 <_Z14Handle_NoteOffhhh+0x50>)
 800240a:	f000 ff61 	bl	80032d0 <HAL_GPIO_WritePin>
        second_note_active = false;  // Second note is no longer active
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <_Z14Handle_NoteOffhhh+0x54>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000194 	.word	0x20000194
 8002420:	48000400 	.word	0x48000400
 8002424:	20000195 	.word	0x20000195

08002428 <_Z9Handle_CChhh>:

void Handle_CC(byte channel, byte number, byte value) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	460b      	mov	r3, r1
 8002434:	71bb      	strb	r3, [r7, #6]
 8002436:	4613      	mov	r3, r2
 8002438:	717b      	strb	r3, [r7, #5]
	if (number == ModulationWheel){
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d11f      	bne.n	8002480 <_Z9Handle_CChhh+0x58>
		uint32_t modv_CV = (uint32_t)((value / 127.0) * 4095);
 8002440:	797b      	ldrb	r3, [r7, #5]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f812 	bl	800046c <__aeabi_i2d>
 8002448:	a310      	add	r3, pc, #64	@ (adr r3, 800248c <_Z9Handle_CChhh+0x64>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	f7fe f9a1 	bl	8000794 <__aeabi_ddiv>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	a30e      	add	r3, pc, #56	@ (adr r3, 8002494 <_Z9Handle_CChhh+0x6c>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fe f86e 	bl	8000540 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fa7a 	bl	8000964 <__aeabi_d2uiz>
 8002470:	4603      	mov	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, modv_CV);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	4803      	ldr	r0, [pc, #12]	@ (8002488 <_Z9Handle_CChhh+0x60>)
 800247c:	f000 fc75 	bl	8002d6a <HAL_DAC_SetValue>
	}
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000040 	.word	0x20000040
 800248c:	00000000 	.word	0x00000000
 8002490:	405fc000 	.word	0x405fc000
 8002494:	00000000 	.word	0x00000000
 8002498:	40affe00 	.word	0x40affe00

0800249c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a0:	b672      	cpsid	i
}
 80024a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <Error_Handler+0x8>

080024a8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d107      	bne.n	80024c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024be:	4293      	cmp	r3, r2
 80024c0:	d102      	bne.n	80024c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
MidiInterface Port;
 80024c2:	4809      	ldr	r0, [pc, #36]	@ (80024e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80024c4:	f7fe fab4 	bl	8000a30 <_ZN13MidiInterfaceC1Ev>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d102      	bne.n	80024de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80024d8:	4803      	ldr	r0, [pc, #12]	@ (80024e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80024da:	f7fe fb61 	bl	8000ba0 <_ZN13MidiInterfaceD1Ev>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200001a0 	.word	0x200001a0

080024ec <_GLOBAL__sub_I_hdac1>:
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7ff ffd7 	bl	80024a8 <_Z41__static_initialization_and_destruction_0ii>
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_GLOBAL__sub_D_hdac1>:
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
 8002500:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff ffcf 	bl	80024a8 <_Z41__static_initialization_and_destruction_0ii>
 800250a:	bd80      	pop	{r7, pc}

0800250c <dac_init>:
 */

#include <mcp4728_mod.h>


void dac_init(ChannelConfig *config ,ChannelConfig_2 *config2) {
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
    config->vref = 0x0;  // Use VDD as reference voltage
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
    config->gain = 0x1;  // Gain of 1x
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	705a      	strb	r2, [r3, #1]
    config->val[0] = 0;  // 12-bit DAC value for channel A
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	805a      	strh	r2, [r3, #2]
    config->val[1] = 0;  // 12-bit DAC value for channel B
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	809a      	strh	r2, [r3, #4]
    config->val[2] = 0;  // 12-bit DAC value for channel C
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	80da      	strh	r2, [r3, #6]
    config->val[3] = 0;  // 12-bit DAC value for channel D
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	811a      	strh	r2, [r3, #8]


    config2->vref = 0x0;  // Use VDD as reference voltage
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
    config2->gain = 0x1;  // Gain of 1x
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2201      	movs	r2, #1
 8002544:	705a      	strb	r2, [r3, #1]
    config2->val[0] = 0;  // 12-bit DAC value for channel A
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	805a      	strh	r2, [r3, #2]
    config2->val[1] = 0;  // 12-bit DAC value for channel B
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2200      	movs	r2, #0
 8002550:	809a      	strh	r2, [r3, #4]
    config2->val[2] = 0;  // 12-bit DAC value for channel C
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	80da      	strh	r2, [r3, #6]
    config2->val[3] = 0;  // 12-bit DAC value for channel D
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	811a      	strh	r2, [r3, #8]

}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <mcp4728_generalCall>:
 *
 * @param i2cHandler Pointer to the I2C handler.
 * @param command General call command to send.
 * @return HAL_StatusTypeDef HAL status indicating success or failure.
 */
HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af02      	add	r7, sp, #8
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	70fb      	strb	r3, [r7, #3]
    // Transmit the general call command
    return HAL_I2C_Master_Transmit(i2cHandler, 0x00, &command, 1, HAL_MAX_DELAY);
 8002576:	1cfa      	adds	r2, r7, #3
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	2100      	movs	r1, #0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 ff72 	bl	800346c <HAL_I2C_Master_Transmit>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <DACx60FW>:
 *
 * @param i2cHandler Pointer to the I2C handler.
 * @param config Configuration structure containing the DAC values for each channel.
 * @return HAL_StatusTypeDef HAL status indicating success or failure.
 */
HAL_StatusTypeDef DACx60FW(I2C_HandleTypeDef *i2cHandler, ChannelConfig config) {
 8002592:	b580      	push	{r7, lr}
 8002594:	b08a      	sub	sp, #40	@ 0x28
 8002596:	af02      	add	r7, sp, #8
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	4638      	mov	r0, r7
 800259c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[8]; // Buffer to hold the data for 4 channels, 2 bytes each

    for (uint8_t i = 0; i < 4; i++) {
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]
 80025a4:	e01f      	b.n	80025e6 <DACx60FW+0x54>
        buf[2 * i] = (config.val[i] >> 8); // Upper 8 bits of DAC value
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	3320      	adds	r3, #32
 80025ac:	443b      	add	r3, r7
 80025ae:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	3320      	adds	r3, #32
 80025be:	443b      	add	r3, r7
 80025c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
        buf[2 * i + 1] = config.val[i] & 0xFF; // Lower 8 bits of DAC value
 80025c4:	7ffb      	ldrb	r3, [r7, #31]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	3320      	adds	r3, #32
 80025ca:	443b      	add	r3, r7
 80025cc:	f833 2c1e 	ldrh.w	r2, [r3, #-30]
 80025d0:	7ffb      	ldrb	r3, [r7, #31]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	3301      	adds	r3, #1
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	3320      	adds	r3, #32
 80025da:	443b      	add	r3, r7
 80025dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
 80025e2:	3301      	adds	r3, #1
 80025e4:	77fb      	strb	r3, [r7, #31]
 80025e6:	7ffb      	ldrb	r3, [r7, #31]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d9dc      	bls.n	80025a6 <DACx60FW+0x14>
    }

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(i2cHandler, dac1, buf, sizeof(buf), HAL_MAX_DELAY);
 80025ec:	f107 0214 	add.w	r2, r7, #20
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2308      	movs	r3, #8
 80025f8:	21c0      	movs	r1, #192	@ 0xc0
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 ff36 	bl	800346c <HAL_I2C_Master_Transmit>
 8002600:	4603      	mov	r3, r0
 8002602:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) {
 8002604:	7fbb      	ldrb	r3, [r7, #30]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <DACx60FW+0x7c>
        return ret;
 800260a:	7fbb      	ldrb	r3, [r7, #30]
 800260c:	e004      	b.n	8002618 <DACx60FW+0x86>
    }

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 800260e:	2108      	movs	r1, #8
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff ffaa 	bl	800256a <mcp4728_generalCall>
 8002616:	4603      	mov	r3, r0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <HAL_MspInit+0x44>)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <HAL_MspInit+0x44>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6193      	str	r3, [r2, #24]
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <HAL_MspInit+0x44>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_MspInit+0x44>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <HAL_MspInit+0x44>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_MspInit+0x44>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	@ 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2b      	ldr	r2, [pc, #172]	@ (8002734 <HAL_DAC_MspInit+0xcc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d125      	bne.n	80026d6 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800268a:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 8002690:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002694:	61d3      	str	r3, [r2, #28]
 8002696:	4b28      	ldr	r3, [pc, #160]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b25      	ldr	r3, [pc, #148]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	4a24      	ldr	r2, [pc, #144]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ac:	6153      	str	r3, [r2, #20]
 80026ae:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026ba:	2330      	movs	r3, #48	@ 0x30
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026be:	2303      	movs	r3, #3
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d0:	f000 fc84 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80026d4:	e029      	b.n	800272a <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a18      	ldr	r2, [pc, #96]	@ (800273c <HAL_DAC_MspInit+0xd4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d124      	bne.n	800272a <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80026e0:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 80026e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026ea:	61d3      	str	r3, [r2, #28]
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 80026fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002702:	6153      	str	r3, [r2, #20]
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_DAC_MspInit+0xd0>)
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002710:	2340      	movs	r3, #64	@ 0x40
 8002712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002714:	2303      	movs	r3, #3
 8002716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	4619      	mov	r1, r3
 8002722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002726:	f000 fc59 	bl	8002fdc <HAL_GPIO_Init>
}
 800272a:	bf00      	nop
 800272c:	3730      	adds	r7, #48	@ 0x30
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40007400 	.word	0x40007400
 8002738:	40021000 	.word	0x40021000
 800273c:	40009800 	.word	0x40009800

08002740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a17      	ldr	r2, [pc, #92]	@ (80027bc <HAL_I2C_MspInit+0x7c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d127      	bne.n	80027b2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_I2C_MspInit+0x80>)
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <HAL_I2C_MspInit+0x80>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276c:	6153      	str	r3, [r2, #20]
 800276e:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <HAL_I2C_MspInit+0x80>)
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800277a:	23c0      	movs	r3, #192	@ 0xc0
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277e:	2312      	movs	r3, #18
 8002780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800278a:	2304      	movs	r3, #4
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	480b      	ldr	r0, [pc, #44]	@ (80027c4 <HAL_I2C_MspInit+0x84>)
 8002796:	f000 fc21 	bl	8002fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_I2C_MspInit+0x80>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a08      	ldr	r2, [pc, #32]	@ (80027c0 <HAL_I2C_MspInit+0x80>)
 80027a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027a4:	61d3      	str	r3, [r2, #28]
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_I2C_MspInit+0x80>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	@ 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40005400 	.word	0x40005400
 80027c0:	40021000 	.word	0x40021000
 80027c4:	48000400 	.word	0x48000400

080027c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002890 <HAL_SPI_MspInit+0xc8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d14d      	bne.n	8002886 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a29      	ldr	r2, [pc, #164]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4a23      	ldr	r2, [pc, #140]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800280c:	6153      	str	r3, [r2, #20]
 800280e:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800281a:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	4a1d      	ldr	r2, [pc, #116]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 8002820:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002824:	6153      	str	r3, [r2, #20]
 8002826:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <HAL_SPI_MspInit+0xcc>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PD8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002832:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002844:	2305      	movs	r3, #5
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4812      	ldr	r0, [pc, #72]	@ (8002898 <HAL_SPI_MspInit+0xd0>)
 8002850:	f000 fbc4 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002866:	2305      	movs	r3, #5
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	480a      	ldr	r0, [pc, #40]	@ (800289c <HAL_SPI_MspInit+0xd4>)
 8002872:	f000 fbb3 	bl	8002fdc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	2024      	movs	r0, #36	@ 0x24
 800287c:	f000 fa1d 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002880:	2024      	movs	r0, #36	@ 0x24
 8002882:	f000 fa36 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	@ 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40003800 	.word	0x40003800
 8002894:	40021000 	.word	0x40021000
 8002898:	48000400 	.word	0x48000400
 800289c:	48000c00 	.word	0x48000c00

080028a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002930 <HAL_UART_MspInit+0x90>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d131      	bne.n	8002926 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002934 <HAL_UART_MspInit+0x94>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002934 <HAL_UART_MspInit+0x94>)
 80028c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028cc:	6193      	str	r3, [r2, #24]
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_UART_MspInit+0x94>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_UART_MspInit+0x94>)
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <HAL_UART_MspInit+0x94>)
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e4:	6153      	str	r3, [r2, #20]
 80028e6:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <HAL_UART_MspInit+0x94>)
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002904:	2307      	movs	r3, #7
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002912:	f000 fb63 	bl	8002fdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2025      	movs	r0, #37	@ 0x25
 800291c:	f000 f9cd 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002920:	2025      	movs	r0, #37	@ 0x25
 8002922:	f000 f9e6 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	@ 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40013800 	.word	0x40013800
 8002934:	40021000 	.word	0x40021000

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <NMI_Handler+0x4>

08002940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <MemManage_Handler+0x4>

08002950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <BusFault_Handler+0x4>

08002958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <UsageFault_Handler+0x4>

08002960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298e:	f000 f899 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800299c:	4802      	ldr	r0, [pc, #8]	@ (80029a8 <SPI2_IRQHandler+0x10>)
 800299e:	f002 fdad 	bl	80054fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200000a8 	.word	0x200000a8

080029ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029b0:	4802      	ldr	r0, [pc, #8]	@ (80029bc <USART1_IRQHandler+0x10>)
 80029b2:	f003 f843 	bl	8005a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000010c 	.word	0x2000010c

080029c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <SystemInit+0x20>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <SystemInit+0x20>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80029e8:	f7ff ffea 	bl	80029c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029ec:	480c      	ldr	r0, [pc, #48]	@ (8002a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80029ee:	490d      	ldr	r1, [pc, #52]	@ (8002a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <LoopForever+0xe>)
  movs r3, #0
 80029f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f4:	e002      	b.n	80029fc <LoopCopyDataInit>

080029f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fa:	3304      	adds	r3, #4

080029fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a00:	d3f9      	bcc.n	80029f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a04:	4c0a      	ldr	r4, [pc, #40]	@ (8002a30 <LoopForever+0x16>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a08:	e001      	b.n	8002a0e <LoopFillZerobss>

08002a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a0c:	3204      	adds	r2, #4

08002a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a10:	d3fb      	bcc.n	8002a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a12:	f003 ff01 	bl	8006818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a16:	f7ff f999 	bl	8001d4c <main>

08002a1a <LoopForever>:

LoopForever:
    b LoopForever
 8002a1a:	e7fe      	b.n	8002a1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a28:	080068dc 	.word	0x080068dc
  ldr r2, =_sbss
 8002a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002a30:	20000314 	.word	0x20000314

08002a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC1_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <HAL_Init+0x28>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a07      	ldr	r2, [pc, #28]	@ (8002a60 <HAL_Init+0x28>)
 8002a42:	f043 0310 	orr.w	r3, r3, #16
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a48:	2003      	movs	r0, #3
 8002a4a:	f000 f92b 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f000 f808 	bl	8002a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a54:	f7ff fde4 	bl	8002620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40022000 	.word	0x40022000

08002a64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_InitTick+0x54>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_InitTick+0x58>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f943 	bl	8002d0e <HAL_SYSTICK_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00e      	b.n	8002ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d80a      	bhi.n	8002aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f000 f90b 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa4:	4a06      	ldr	r2, [pc, #24]	@ (8002ac0 <HAL_InitTick+0x5c>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	20000008 	.word	0x20000008
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_IncTick+0x20>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <HAL_IncTick+0x24>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a04      	ldr	r2, [pc, #16]	@ (8002ae8 <HAL_IncTick+0x24>)
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	20000310 	.word	0x20000310

08002aec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return uwTick;  
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_GetTick+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000310 	.word	0x20000310

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff3e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5d 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff31 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa2 	bl	8002c60 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e014      	b.n	8002d62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff fc8d 	bl	8002668 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002d6a:	b480      	push	{r7}
 8002d6c:	b087      	sub	sp, #28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3308      	adds	r3, #8
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e004      	b.n	8002d9e <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	461a      	mov	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	795b      	ldrb	r3, [r3, #5]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_DAC_Start+0x16>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e039      	b.n	8002e3e <HAL_DAC_Start+0x8a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	409a      	lsls	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10f      	bne.n	8002e10 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002dfa:	2b3c      	cmp	r3, #60	@ 0x3c
 8002dfc:	d118      	bne.n	8002e30 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	e00f      	b.n	8002e30 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e1a:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8002e1e:	d107      	bne.n	8002e30 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0202 	orr.w	r2, r2, #2
 8002e2e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b087      	sub	sp, #28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	795b      	ldrb	r3, [r3, #5]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_DAC_ConfigChannel+0x20>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e036      	b.n	8002ed8 <HAL_DAC_ConfigChannel+0x8e>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2202      	movs	r2, #2
 8002e74:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002e7e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	22c0      	movs	r2, #192	@ 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e02e      	b.n	8002f54 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d008      	beq.n	8002f12 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2204      	movs	r2, #4
 8002f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e020      	b.n	8002f54 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 020e 	bic.w	r2, r2, #14
 8002f20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d005      	beq.n	8002f82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e027      	b.n	8002fd2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 020e 	bic.w	r2, r2, #14
 8002f90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
    }
  }
  return status;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fea:	e154      	b.n	8003296 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8146 	beq.w	8003290 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d005      	beq.n	800301c <HAL_GPIO_Init+0x40>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d130      	bne.n	800307e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003052:	2201      	movs	r2, #1
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 0201 	and.w	r2, r3, #1
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b03      	cmp	r3, #3
 8003088:	d017      	beq.n	80030ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d123      	bne.n	800310e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	6939      	ldr	r1, [r7, #16]
 800310a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2203      	movs	r2, #3
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0203 	and.w	r2, r3, #3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80a0 	beq.w	8003290 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003150:	4b58      	ldr	r3, [pc, #352]	@ (80032b4 <HAL_GPIO_Init+0x2d8>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4a57      	ldr	r2, [pc, #348]	@ (80032b4 <HAL_GPIO_Init+0x2d8>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6193      	str	r3, [r2, #24]
 800315c:	4b55      	ldr	r3, [pc, #340]	@ (80032b4 <HAL_GPIO_Init+0x2d8>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003168:	4a53      	ldr	r2, [pc, #332]	@ (80032b8 <HAL_GPIO_Init+0x2dc>)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	220f      	movs	r2, #15
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003192:	d019      	beq.n	80031c8 <HAL_GPIO_Init+0x1ec>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a49      	ldr	r2, [pc, #292]	@ (80032bc <HAL_GPIO_Init+0x2e0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_GPIO_Init+0x1e8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a48      	ldr	r2, [pc, #288]	@ (80032c0 <HAL_GPIO_Init+0x2e4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00d      	beq.n	80031c0 <HAL_GPIO_Init+0x1e4>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a47      	ldr	r2, [pc, #284]	@ (80032c4 <HAL_GPIO_Init+0x2e8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <HAL_GPIO_Init+0x1e0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a46      	ldr	r2, [pc, #280]	@ (80032c8 <HAL_GPIO_Init+0x2ec>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_GPIO_Init+0x1dc>
 80031b4:	2304      	movs	r3, #4
 80031b6:	e008      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031b8:	2305      	movs	r3, #5
 80031ba:	e006      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031bc:	2303      	movs	r3, #3
 80031be:	e004      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c8:	2300      	movs	r3, #0
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	f002 0203 	and.w	r2, r2, #3
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4093      	lsls	r3, r2
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031da:	4937      	ldr	r1, [pc, #220]	@ (80032b8 <HAL_GPIO_Init+0x2dc>)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031e8:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <HAL_GPIO_Init+0x2f0>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800320c:	4a2f      	ldr	r2, [pc, #188]	@ (80032cc <HAL_GPIO_Init+0x2f0>)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003212:	4b2e      	ldr	r3, [pc, #184]	@ (80032cc <HAL_GPIO_Init+0x2f0>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003236:	4a25      	ldr	r2, [pc, #148]	@ (80032cc <HAL_GPIO_Init+0x2f0>)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323c:	4b23      	ldr	r3, [pc, #140]	@ (80032cc <HAL_GPIO_Init+0x2f0>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	43db      	mvns	r3, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003260:	4a1a      	ldr	r2, [pc, #104]	@ (80032cc <HAL_GPIO_Init+0x2f0>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003266:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_GPIO_Init+0x2f0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800328a:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <HAL_GPIO_Init+0x2f0>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3301      	adds	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f47f aea3 	bne.w	8002fec <HAL_GPIO_Init+0x10>
  }
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40010000 	.word	0x40010000
 80032bc:	48000400 	.word	0x48000400
 80032c0:	48000800 	.word	0x48000800
 80032c4:	48000c00 	.word	0x48000c00
 80032c8:	48001000 	.word	0x48001000
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	43d9      	mvns	r1, r3
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	400b      	ands	r3, r1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e08d      	b.n	8003462 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff f9f0 	bl	8002740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2224      	movs	r2, #36	@ 0x24
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	e006      	b.n	80033bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d108      	bne.n	80033d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	e007      	b.n	80033e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003408:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69d9      	ldr	r1, [r3, #28]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	461a      	mov	r2, r3
 8003478:	460b      	mov	r3, r1
 800347a:	817b      	strh	r3, [r7, #10]
 800347c:	4613      	mov	r3, r2
 800347e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	f040 80fd 	bne.w	8003688 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_I2C_Master_Transmit+0x30>
 8003498:	2302      	movs	r3, #2
 800349a:	e0f6      	b.n	800368a <HAL_I2C_Master_Transmit+0x21e>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034a4:	f7ff fb22 	bl	8002aec <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2319      	movs	r3, #25
 80034b0:	2201      	movs	r2, #1
 80034b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f914 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e0e1      	b.n	800368a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2221      	movs	r2, #33	@ 0x21
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2210      	movs	r2, #16
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	893a      	ldrh	r2, [r7, #8]
 80034e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2bff      	cmp	r3, #255	@ 0xff
 80034f6:	d906      	bls.n	8003506 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	22ff      	movs	r2, #255	@ 0xff
 80034fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80034fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e007      	b.n	8003516 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003514:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d024      	beq.n	8003568 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3301      	adds	r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	8979      	ldrh	r1, [r7, #10]
 800355a:	4b4e      	ldr	r3, [pc, #312]	@ (8003694 <HAL_I2C_Master_Transmit+0x228>)
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fa83 	bl	8003a6c <I2C_TransferConfig>
 8003566:	e066      	b.n	8003636 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	b2da      	uxtb	r2, r3
 800356e:	8979      	ldrh	r1, [r7, #10]
 8003570:	4b48      	ldr	r3, [pc, #288]	@ (8003694 <HAL_I2C_Master_Transmit+0x228>)
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fa78 	bl	8003a6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800357c:	e05b      	b.n	8003636 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	6a39      	ldr	r1, [r7, #32]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f907 	bl	8003796 <I2C_WaitOnTXISFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07b      	b.n	800368a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d034      	beq.n	8003636 <HAL_I2C_Master_Transmit+0x1ca>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d130      	bne.n	8003636 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	2200      	movs	r2, #0
 80035dc:	2180      	movs	r1, #128	@ 0x80
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f880 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e04d      	b.n	800368a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2bff      	cmp	r3, #255	@ 0xff
 80035f6:	d90e      	bls.n	8003616 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	22ff      	movs	r2, #255	@ 0xff
 80035fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003602:	b2da      	uxtb	r2, r3
 8003604:	8979      	ldrh	r1, [r7, #10]
 8003606:	2300      	movs	r3, #0
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa2c 	bl	8003a6c <I2C_TransferConfig>
 8003614:	e00f      	b.n	8003636 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	b2da      	uxtb	r2, r3
 8003626:	8979      	ldrh	r1, [r7, #10]
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fa1b 	bl	8003a6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d19e      	bne.n	800357e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	6a39      	ldr	r1, [r7, #32]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f8ed 	bl	8003824 <I2C_WaitOnSTOPFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e01a      	b.n	800368a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2220      	movs	r2, #32
 800365a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <HAL_I2C_Master_Transmit+0x22c>)
 8003668:	400b      	ands	r3, r1
 800366a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	80002000 	.word	0x80002000
 8003698:	fe00e800 	.word	0xfe00e800

0800369c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d103      	bne.n	80036ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d007      	beq.n	80036d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	619a      	str	r2, [r3, #24]
  }
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	e03b      	b.n	800376e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f8d6 	bl	80038ac <I2C_IsErrorOccurred>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e041      	b.n	800378e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d02d      	beq.n	800376e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7ff f9eb 	bl	8002aec <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d122      	bne.n	800376e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	429a      	cmp	r2, r3
 8003744:	d113      	bne.n	800376e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e00f      	b.n	800378e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	429a      	cmp	r2, r3
 800378a:	d0b4      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037a2:	e033      	b.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f87f 	bl	80038ac <I2C_IsErrorOccurred>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e031      	b.n	800381c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d025      	beq.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7ff f994 	bl	8002aec <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11a      	bne.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d013      	beq.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e007      	b.n	800381c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d1c4      	bne.n	80037a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003830:	e02f      	b.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f838 	bl	80038ac <I2C_IsErrorOccurred>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e02d      	b.n	80038a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7ff f951 	bl	8002aec <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11a      	bne.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b20      	cmp	r3, #32
 8003868:	d013      	beq.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e007      	b.n	80038a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b20      	cmp	r3, #32
 800389e:	d1c8      	bne.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	@ 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d068      	beq.n	80039aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2210      	movs	r2, #16
 80038de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038e0:	e049      	b.n	8003976 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d045      	beq.n	8003976 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7ff f8ff 	bl	8002aec <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_IsErrorOccurred+0x54>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d13a      	bne.n	8003976 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800390a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003912:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800391e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003922:	d121      	bne.n	8003968 <I2C_IsErrorOccurred+0xbc>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800392a:	d01d      	beq.n	8003968 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800392c:	7cfb      	ldrb	r3, [r7, #19]
 800392e:	2b20      	cmp	r3, #32
 8003930:	d01a      	beq.n	8003968 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003940:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003942:	f7ff f8d3 	bl	8002aec <HAL_GetTick>
 8003946:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003948:	e00e      	b.n	8003968 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800394a:	f7ff f8cf 	bl	8002aec <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b19      	cmp	r3, #25
 8003956:	d907      	bls.n	8003968 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f043 0320 	orr.w	r3, r3, #32
 800395e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003966:	e006      	b.n	8003976 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d1e9      	bne.n	800394a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b20      	cmp	r3, #32
 8003982:	d003      	beq.n	800398c <I2C_IsErrorOccurred+0xe0>
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0aa      	beq.n	80038e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800398c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2220      	movs	r2, #32
 800399a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f043 0308 	orr.w	r3, r3, #8
 80039e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01c      	beq.n	8003a5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7ff fe3b 	bl	800369c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <I2C_IsErrorOccurred+0x1bc>)
 8003a32:	400b      	ands	r3, r1
 8003a34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	@ 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	fe00e800 	.word	0xfe00e800

08003a6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	817b      	strh	r3, [r7, #10]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a7e:	897b      	ldrh	r3, [r7, #10]
 8003a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a84:	7a7b      	ldrb	r3, [r7, #9]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	0d5b      	lsrs	r3, r3, #21
 8003aa6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <I2C_TransferConfig+0x60>)
 8003aac:	430b      	orrs	r3, r1
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	ea02 0103 	and.w	r1, r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	03ff63ff 	.word	0x03ff63ff

08003ad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d138      	bne.n	8003b58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e032      	b.n	8003b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	@ 0x24
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d139      	bne.n	8003bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e033      	b.n	8003bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2224      	movs	r2, #36	@ 0x24
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f001 b823 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 817d 	beq.w	8003f36 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c3c:	4bbc      	ldr	r3, [pc, #752]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d00c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c48:	4bb9      	ldr	r3, [pc, #740]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d15c      	bne.n	8003d0e <HAL_RCC_OscConfig+0x10e>
 8003c54:	4bb6      	ldr	r3, [pc, #728]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c60:	d155      	bne.n	8003d0e <HAL_RCC_OscConfig+0x10e>
 8003c62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c66:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_OscConfig+0x94>
 8003c8e:	4ba8      	ldr	r3, [pc, #672]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	e015      	b.n	8003cc0 <HAL_RCC_OscConfig+0xc0>
 8003c94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c98:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003ca8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cac:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003cb0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003cbc:	4b9c      	ldr	r3, [pc, #624]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cc4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003cc8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003ccc:	fa92 f2a2 	rbit	r2, r2
 8003cd0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003cd4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003cd8:	fab2 f282 	clz	r2, r2
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	f042 0220 	orr.w	r2, r2, #32
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	f002 021f 	and.w	r2, r2, #31
 8003ce8:	2101      	movs	r1, #1
 8003cea:	fa01 f202 	lsl.w	r2, r1, r2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 811f 	beq.w	8003f34 <HAL_RCC_OscConfig+0x334>
 8003cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 8116 	bne.w	8003f34 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f000 bfaf 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x12e>
 8003d20:	4b83      	ldr	r3, [pc, #524]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a82      	ldr	r2, [pc, #520]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	e036      	b.n	8003d9c <HAL_RCC_OscConfig+0x19c>
 8003d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x158>
 8003d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a7b      	ldr	r2, [pc, #492]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b79      	ldr	r3, [pc, #484]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a78      	ldr	r2, [pc, #480]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e021      	b.n	8003d9c <HAL_RCC_OscConfig+0x19c>
 8003d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x184>
 8003d6a:	4b71      	ldr	r3, [pc, #452]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a70      	ldr	r2, [pc, #448]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4b6e      	ldr	r3, [pc, #440]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a6d      	ldr	r2, [pc, #436]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e00b      	b.n	8003d9c <HAL_RCC_OscConfig+0x19c>
 8003d84:	4b6a      	ldr	r3, [pc, #424]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a69      	ldr	r2, [pc, #420]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b67      	ldr	r3, [pc, #412]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a66      	ldr	r2, [pc, #408]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d9c:	4b64      	ldr	r3, [pc, #400]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	f023 020f 	bic.w	r2, r3, #15
 8003da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	495f      	ldr	r1, [pc, #380]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d059      	beq.n	8003e7a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fe91 	bl	8002aec <HAL_GetTick>
 8003dca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fe8c 	bl	8002aec <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	@ 0x64
 8003dde:	d902      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	f000 bf43 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>
 8003de6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dea:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003dfa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d102      	bne.n	8003e18 <HAL_RCC_OscConfig+0x218>
 8003e12:	4b47      	ldr	r3, [pc, #284]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	e015      	b.n	8003e44 <HAL_RCC_OscConfig+0x244>
 8003e18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e1c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003e2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e30:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003e34:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003e40:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e48:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003e4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003e50:	fa92 f2a2 	rbit	r2, r2
 8003e54:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003e58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003e5c:	fab2 f282 	clz	r2, r2
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	f042 0220 	orr.w	r2, r2, #32
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	f002 021f 	and.w	r2, r2, #31
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ab      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x1d0>
 8003e78:	e05d      	b.n	8003f36 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fe37 	bl	8002aec <HAL_GetTick>
 8003e7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e00a      	b.n	8003e9a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fe32 	bl	8002aec <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	@ 0x64
 8003e92:	d902      	bls.n	8003e9a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	f000 bee9 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>
 8003e9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e9e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003eae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2cc>
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	e015      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2f8>
 8003ecc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ed0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003ee0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ee4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ee8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003efc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003f00:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f04:	fa92 f2a2 	rbit	r2, r2
 8003f08:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003f0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f10:	fab2 f282 	clz	r2, r2
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	f042 0220 	orr.w	r2, r2, #32
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	f002 021f 	and.w	r2, r2, #31
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f202 	lsl.w	r2, r1, r2
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ab      	bne.n	8003e84 <HAL_RCC_OscConfig+0x284>
 8003f2c:	e003      	b.n	8003f36 <HAL_RCC_OscConfig+0x336>
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 817d 	beq.w	8004246 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f4c:	4ba6      	ldr	r3, [pc, #664]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f58:	4ba3      	ldr	r3, [pc, #652]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d172      	bne.n	800404a <HAL_RCC_OscConfig+0x44a>
 8003f64:	4ba0      	ldr	r3, [pc, #640]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d16c      	bne.n	800404a <HAL_RCC_OscConfig+0x44a>
 8003f70:	2302      	movs	r3, #2
 8003f72:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003f82:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d102      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x3a0>
 8003f9a:	4b93      	ldr	r3, [pc, #588]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	e013      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3c8>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003fb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fbc:	fa93 f3a3 	rbit	r3, r3
 8003fc0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003fc4:	4b88      	ldr	r3, [pc, #544]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003fce:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003fd2:	fa92 f2a2 	rbit	r2, r2
 8003fd6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003fda:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003fde:	fab2 f282 	clz	r2, r2
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	f042 0220 	orr.w	r2, r2, #32
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	f002 021f 	and.w	r2, r2, #31
 8003fee:	2101      	movs	r1, #1
 8003ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCC_OscConfig+0x410>
 8003ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d002      	beq.n	8004010 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f000 be2e 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	4b75      	ldr	r3, [pc, #468]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	21f8      	movs	r1, #248	@ 0xf8
 8004026:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800402e:	fa91 f1a1 	rbit	r1, r1
 8004032:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004036:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800403a:	fab1 f181 	clz	r1, r1
 800403e:	b2c9      	uxtb	r1, r1
 8004040:	408b      	lsls	r3, r1
 8004042:	4969      	ldr	r1, [pc, #420]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004048:	e0fd      	b.n	8004246 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800404a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8088 	beq.w	800416c <HAL_RCC_OscConfig+0x56c>
 800405c:	2301      	movs	r3, #1
 800405e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800406e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800407c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	461a      	mov	r2, r3
 8004084:	2301      	movs	r3, #1
 8004086:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fe fd30 	bl	8002aec <HAL_GetTick>
 800408c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004092:	f7fe fd2b 	bl	8002aec <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d902      	bls.n	80040a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	f000 bde2 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>
 80040a8:	2302      	movs	r3, #2
 80040aa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80040ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d102      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4d8>
 80040d2:	4b45      	ldr	r3, [pc, #276]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	e013      	b.n	8004100 <HAL_RCC_OscConfig+0x500>
 80040d8:	2302      	movs	r3, #2
 80040da:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80040ea:	2302      	movs	r3, #2
 80040ec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80040f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80040fc:	4b3a      	ldr	r3, [pc, #232]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	2202      	movs	r2, #2
 8004102:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004106:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800410a:	fa92 f2a2 	rbit	r2, r2
 800410e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004112:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004116:	fab2 f282 	clz	r2, r2
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f042 0220 	orr.w	r2, r2, #32
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f002 021f 	and.w	r2, r2, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0af      	beq.n	8004092 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	4b2d      	ldr	r3, [pc, #180]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800413a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	21f8      	movs	r1, #248	@ 0xf8
 8004148:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004150:	fa91 f1a1 	rbit	r1, r1
 8004154:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004158:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800415c:	fab1 f181 	clz	r1, r1
 8004160:	b2c9      	uxtb	r1, r1
 8004162:	408b      	lsls	r3, r1
 8004164:	4920      	ldr	r1, [pc, #128]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
 800416a:	e06c      	b.n	8004246 <HAL_RCC_OscConfig+0x646>
 800416c:	2301      	movs	r3, #1
 800416e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800417e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800418c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	461a      	mov	r2, r3
 8004194:	2300      	movs	r3, #0
 8004196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fe fca8 	bl	8002aec <HAL_GetTick>
 800419c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a2:	f7fe fca3 	bl	8002aec <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d902      	bls.n	80041b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	f000 bd5a 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80041ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d104      	bne.n	80041ec <HAL_RCC_OscConfig+0x5ec>
 80041e2:	4b01      	ldr	r3, [pc, #4]	@ (80041e8 <HAL_RCC_OscConfig+0x5e8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	e015      	b.n	8004214 <HAL_RCC_OscConfig+0x614>
 80041e8:	40021000 	.word	0x40021000
 80041ec:	2302      	movs	r3, #2
 80041ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80041f6:	fa93 f3a3 	rbit	r3, r3
 80041fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80041fe:	2302      	movs	r3, #2
 8004200:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004204:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004210:	4bc8      	ldr	r3, [pc, #800]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	2202      	movs	r2, #2
 8004216:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800421a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800421e:	fa92 f2a2 	rbit	r2, r2
 8004222:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004226:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800422a:	fab2 f282 	clz	r2, r2
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	f042 0220 	orr.w	r2, r2, #32
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	f002 021f 	and.w	r2, r2, #31
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f202 	lsl.w	r2, r1, r2
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ad      	bne.n	80041a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8110 	beq.w	800447c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004260:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d079      	beq.n	8004360 <HAL_RCC_OscConfig+0x760>
 800426c:	2301      	movs	r3, #1
 800426e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800427e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	4bab      	ldr	r3, [pc, #684]	@ (8004538 <HAL_RCC_OscConfig+0x938>)
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	461a      	mov	r2, r3
 8004292:	2301      	movs	r3, #1
 8004294:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004296:	f7fe fc29 	bl	8002aec <HAL_GetTick>
 800429a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fe fc24 	bl	8002aec <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d902      	bls.n	80042b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	f000 bcdb 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>
 80042b6:	2302      	movs	r3, #2
 80042b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80042c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80042d0:	2202      	movs	r2, #2
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	fa93 f2a3 	rbit	r2, r3
 80042e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042f4:	2202      	movs	r2, #2
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	fa93 f2a3 	rbit	r2, r3
 8004306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800430e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004310:	4b88      	ldr	r3, [pc, #544]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 8004312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004318:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800431c:	2102      	movs	r1, #2
 800431e:	6019      	str	r1, [r3, #0]
 8004320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004324:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	fa93 f1a3 	rbit	r1, r3
 800432e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004332:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004336:	6019      	str	r1, [r3, #0]
  return result;
 8004338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0a0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x6a0>
 800435e:	e08d      	b.n	800447c <HAL_RCC_OscConfig+0x87c>
 8004360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004364:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004370:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	fa93 f2a3 	rbit	r2, r3
 800437a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004382:	601a      	str	r2, [r3, #0]
  return result;
 8004384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004388:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800438c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	4b68      	ldr	r3, [pc, #416]	@ (8004538 <HAL_RCC_OscConfig+0x938>)
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	461a      	mov	r2, r3
 800439e:	2300      	movs	r3, #0
 80043a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a2:	f7fe fba3 	bl	8002aec <HAL_GetTick>
 80043a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ac:	f7fe fb9e 	bl	8002aec <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d902      	bls.n	80043c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	f000 bc55 	b.w	8004c6c <HAL_RCC_OscConfig+0x106c>
 80043c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80043ca:	2202      	movs	r2, #2
 80043cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	fa93 f2a3 	rbit	r2, r3
 80043dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80043ee:	2202      	movs	r2, #2
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	fa93 f2a3 	rbit	r2, r3
 8004400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004404:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004412:	2202      	movs	r2, #2
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	fa93 f2a3 	rbit	r2, r3
 8004424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004428:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800442c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442e:	4b41      	ldr	r3, [pc, #260]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 8004430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004436:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800443a:	2102      	movs	r1, #2
 800443c:	6019      	str	r1, [r3, #0]
 800443e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004442:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	fa93 f1a3 	rbit	r1, r3
 800444c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004450:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004454:	6019      	str	r1, [r3, #0]
  return result;
 8004456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2101      	movs	r1, #1
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d197      	bne.n	80043ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004480:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 81a1 	beq.w	80047d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004498:	4b26      	ldr	r3, [pc, #152]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b23      	ldr	r3, [pc, #140]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4a22      	ldr	r2, [pc, #136]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ae:	61d3      	str	r3, [r2, #28]
 80044b0:	4b20      	ldr	r3, [pc, #128]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80044b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044bc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80044ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <HAL_RCC_OscConfig+0x93c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11a      	bne.n	8004514 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044de:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_RCC_OscConfig+0x93c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a16      	ldr	r2, [pc, #88]	@ (800453c <HAL_RCC_OscConfig+0x93c>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fe faff 	bl	8002aec <HAL_GetTick>
 80044ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f2:	e009      	b.n	8004508 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fe fafa 	bl	8002aec <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b64      	cmp	r3, #100	@ 0x64
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e3b1      	b.n	8004c6c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <HAL_RCC_OscConfig+0x93c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ef      	beq.n	80044f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004518:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d10d      	bne.n	8004540 <HAL_RCC_OscConfig+0x940>
 8004524:	4b03      	ldr	r3, [pc, #12]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4a02      	ldr	r2, [pc, #8]	@ (8004534 <HAL_RCC_OscConfig+0x934>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6213      	str	r3, [r2, #32]
 8004530:	e03c      	b.n	80045ac <HAL_RCC_OscConfig+0x9ac>
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000
 8004538:	10908120 	.word	0x10908120
 800453c:	40007000 	.word	0x40007000
 8004540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004544:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10c      	bne.n	800456a <HAL_RCC_OscConfig+0x96a>
 8004550:	4bc1      	ldr	r3, [pc, #772]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4ac0      	ldr	r2, [pc, #768]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	4bbe      	ldr	r3, [pc, #760]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4abd      	ldr	r2, [pc, #756]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004562:	f023 0304 	bic.w	r3, r3, #4
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	e020      	b.n	80045ac <HAL_RCC_OscConfig+0x9ac>
 800456a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b05      	cmp	r3, #5
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0x994>
 800457a:	4bb7      	ldr	r3, [pc, #732]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4ab6      	ldr	r2, [pc, #728]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	6213      	str	r3, [r2, #32]
 8004586:	4bb4      	ldr	r3, [pc, #720]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4ab3      	ldr	r2, [pc, #716]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6213      	str	r3, [r2, #32]
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0x9ac>
 8004594:	4bb0      	ldr	r3, [pc, #704]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4aaf      	ldr	r2, [pc, #700]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6213      	str	r3, [r2, #32]
 80045a0:	4bad      	ldr	r3, [pc, #692]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4aac      	ldr	r2, [pc, #688]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8081 	beq.w	80046c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fe fa95 	bl	8002aec <HAL_GetTick>
 80045c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f7fe fa90 	bl	8002aec <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e345      	b.n	8004c6c <HAL_RCC_OscConfig+0x106c>
 80045e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80045e8:	2202      	movs	r2, #2
 80045ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	fa93 f2a3 	rbit	r2, r3
 80045fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004608:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800460c:	2202      	movs	r2, #2
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004614:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	fa93 f2a3 	rbit	r2, r3
 800461e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004622:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004626:	601a      	str	r2, [r3, #0]
  return result;
 8004628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800462c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004630:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d102      	bne.n	800464c <HAL_RCC_OscConfig+0xa4c>
 8004646:	4b84      	ldr	r3, [pc, #528]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	e013      	b.n	8004674 <HAL_RCC_OscConfig+0xa74>
 800464c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004650:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004654:	2202      	movs	r2, #2
 8004656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	fa93 f2a3 	rbit	r2, r3
 8004666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	4b79      	ldr	r3, [pc, #484]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004678:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800467c:	2102      	movs	r1, #2
 800467e:	6011      	str	r1, [r2, #0]
 8004680:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004684:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	fa92 f1a2 	rbit	r1, r2
 800468e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004692:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004696:	6011      	str	r1, [r2, #0]
  return result;
 8004698:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800469c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	fab2 f282 	clz	r2, r2
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	f002 021f 	and.w	r2, r2, #31
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f202 	lsl.w	r2, r1, r2
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d084      	beq.n	80045c8 <HAL_RCC_OscConfig+0x9c8>
 80046be:	e07f      	b.n	80047c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c0:	f7fe fa14 	bl	8002aec <HAL_GetTick>
 80046c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c8:	e00b      	b.n	80046e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fe fa0f 	bl	8002aec <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e2c4      	b.n	8004c6c <HAL_RCC_OscConfig+0x106c>
 80046e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80046ea:	2202      	movs	r2, #2
 80046ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	fa93 f2a3 	rbit	r2, r3
 80046fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004700:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800470e:	2202      	movs	r2, #2
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004716:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	fa93 f2a3 	rbit	r2, r3
 8004720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004724:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004728:	601a      	str	r2, [r3, #0]
  return result;
 800472a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004732:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004734:	fab3 f383 	clz	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f043 0302 	orr.w	r3, r3, #2
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d102      	bne.n	800474e <HAL_RCC_OscConfig+0xb4e>
 8004748:	4b43      	ldr	r3, [pc, #268]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	e013      	b.n	8004776 <HAL_RCC_OscConfig+0xb76>
 800474e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004752:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004756:	2202      	movs	r2, #2
 8004758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	fa93 f2a3 	rbit	r2, r3
 8004768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	4b39      	ldr	r3, [pc, #228]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800477a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800477e:	2102      	movs	r1, #2
 8004780:	6011      	str	r1, [r2, #0]
 8004782:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004786:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	fa92 f1a2 	rbit	r1, r2
 8004790:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004794:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004798:	6011      	str	r1, [r2, #0]
  return result;
 800479a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800479e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	fab2 f282 	clz	r2, r2
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	f002 021f 	and.w	r2, r2, #31
 80047b4:	2101      	movs	r1, #1
 80047b6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d184      	bne.n	80046ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c8:	4b23      	ldr	r3, [pc, #140]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4a22      	ldr	r2, [pc, #136]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8242 	beq.w	8004c6a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004858 <HAL_RCC_OscConfig+0xc58>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	f000 8213 	beq.w	8004c1a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b02      	cmp	r3, #2
 8004802:	f040 8162 	bne.w	8004aca <HAL_RCC_OscConfig+0xeca>
 8004806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800480e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004818:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	fa93 f2a3 	rbit	r2, r3
 8004822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004826:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800482a:	601a      	str	r2, [r3, #0]
  return result;
 800482c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004830:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004834:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004836:	fab3 f383 	clz	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004840:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	461a      	mov	r2, r3
 8004848:	2300      	movs	r3, #0
 800484a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fe f94e 	bl	8002aec <HAL_GetTick>
 8004850:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004854:	e00c      	b.n	8004870 <HAL_RCC_OscConfig+0xc70>
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485c:	f7fe f946 	bl	8002aec <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e1fd      	b.n	8004c6c <HAL_RCC_OscConfig+0x106c>
 8004870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004874:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004878:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800487c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004882:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	fa93 f2a3 	rbit	r2, r3
 800488c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004890:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004894:	601a      	str	r2, [r3, #0]
  return result;
 8004896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800489e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d102      	bne.n	80048ba <HAL_RCC_OscConfig+0xcba>
 80048b4:	4bb0      	ldr	r3, [pc, #704]	@ (8004b78 <HAL_RCC_OscConfig+0xf78>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	e027      	b.n	800490a <HAL_RCC_OscConfig+0xd0a>
 80048ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048be:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80048c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048cc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	fa93 f2a3 	rbit	r2, r3
 80048d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048da:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80048e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	fa93 f2a3 	rbit	r2, r3
 80048fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004900:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	4b9c      	ldr	r3, [pc, #624]	@ (8004b78 <HAL_RCC_OscConfig+0xf78>)
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800490e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004912:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004916:	6011      	str	r1, [r2, #0]
 8004918:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800491c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	fa92 f1a2 	rbit	r1, r2
 8004926:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800492a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800492e:	6011      	str	r1, [r2, #0]
  return result;
 8004930:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004934:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	fab2 f282 	clz	r2, r2
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	f042 0220 	orr.w	r2, r2, #32
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	f002 021f 	and.w	r2, r2, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d182      	bne.n	800485c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004956:	4b88      	ldr	r3, [pc, #544]	@ (8004b78 <HAL_RCC_OscConfig+0xf78>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800495e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800496a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	430b      	orrs	r3, r1
 8004978:	497f      	ldr	r1, [pc, #508]	@ (8004b78 <HAL_RCC_OscConfig+0xf78>)
 800497a:	4313      	orrs	r3, r2
 800497c:	604b      	str	r3, [r1, #4]
 800497e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004982:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004986:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800498a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004990:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	fa93 f2a3 	rbit	r2, r3
 800499a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800499e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049a2:	601a      	str	r2, [r3, #0]
  return result;
 80049a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ae:	fab3 f383 	clz	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80049b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	461a      	mov	r2, r3
 80049c0:	2301      	movs	r3, #1
 80049c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fe f892 	bl	8002aec <HAL_GetTick>
 80049c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049cc:	e009      	b.n	80049e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fe f88d 	bl	8002aec <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e144      	b.n	8004c6c <HAL_RCC_OscConfig+0x106c>
 80049e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80049ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	fa93 f2a3 	rbit	r2, r3
 80049fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a02:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a06:	601a      	str	r2, [r3, #0]
  return result;
 8004a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d102      	bne.n	8004a2c <HAL_RCC_OscConfig+0xe2c>
 8004a26:	4b54      	ldr	r3, [pc, #336]	@ (8004b78 <HAL_RCC_OscConfig+0xf78>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	e027      	b.n	8004a7c <HAL_RCC_OscConfig+0xe7c>
 8004a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a30:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	fa93 f2a3 	rbit	r2, r3
 8004a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a56:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a64:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	fa93 f2a3 	rbit	r2, r3
 8004a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a72:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	4b3f      	ldr	r3, [pc, #252]	@ (8004b78 <HAL_RCC_OscConfig+0xf78>)
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a80:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004a84:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004a88:	6011      	str	r1, [r2, #0]
 8004a8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a8e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	fa92 f1a2 	rbit	r1, r2
 8004a98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a9c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004aa0:	6011      	str	r1, [r2, #0]
  return result;
 8004aa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aa6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	fab2 f282 	clz	r2, r2
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	f042 0220 	orr.w	r2, r2, #32
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	f002 021f 	and.w	r2, r2, #31
 8004abc:	2101      	movs	r1, #1
 8004abe:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d082      	beq.n	80049ce <HAL_RCC_OscConfig+0xdce>
 8004ac8:	e0cf      	b.n	8004c6a <HAL_RCC_OscConfig+0x106a>
 8004aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ace:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004ad2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004adc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	fa93 f2a3 	rbit	r2, r3
 8004ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004aee:	601a      	str	r2, [r3, #0]
  return result;
 8004af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004af8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b10:	f7fd ffec 	bl	8002aec <HAL_GetTick>
 8004b14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b18:	e009      	b.n	8004b2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fd ffe7 	bl	8002aec <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e09e      	b.n	8004c6c <HAL_RCC_OscConfig+0x106c>
 8004b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b32:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b40:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	fa93 f2a3 	rbit	r2, r3
 8004b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b4e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b52:	601a      	str	r2, [r3, #0]
  return result;
 8004b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b58:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d104      	bne.n	8004b7c <HAL_RCC_OscConfig+0xf7c>
 8004b72:	4b01      	ldr	r3, [pc, #4]	@ (8004b78 <HAL_RCC_OscConfig+0xf78>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	e029      	b.n	8004bcc <HAL_RCC_OscConfig+0xfcc>
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b80:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004b84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b8e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	fa93 f2a3 	rbit	r2, r3
 8004b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004baa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	fa93 f2a3 	rbit	r2, r3
 8004bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <HAL_RCC_OscConfig+0x1078>)
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bd0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004bd4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004bd8:	6011      	str	r1, [r2, #0]
 8004bda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bde:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	fa92 f1a2 	rbit	r1, r2
 8004be8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004bf0:	6011      	str	r1, [r2, #0]
  return result;
 8004bf2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bf6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	fab2 f282 	clz	r2, r2
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	f042 0220 	orr.w	r2, r2, #32
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	f002 021f 	and.w	r2, r2, #31
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d180      	bne.n	8004b1a <HAL_RCC_OscConfig+0xf1a>
 8004c18:	e027      	b.n	8004c6a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e01e      	b.n	8004c6c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c2e:	4b12      	ldr	r3, [pc, #72]	@ (8004c78 <HAL_RCC_OscConfig+0x1078>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c3a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d10b      	bne.n	8004c66 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d001      	beq.n	8004c6a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b09e      	sub	sp, #120	@ 0x78
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e162      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c94:	4b90      	ldr	r3, [pc, #576]	@ (8004ed8 <HAL_RCC_ClockConfig+0x25c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d910      	bls.n	8004cc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	4b8d      	ldr	r3, [pc, #564]	@ (8004ed8 <HAL_RCC_ClockConfig+0x25c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f023 0207 	bic.w	r2, r3, #7
 8004caa:	498b      	ldr	r1, [pc, #556]	@ (8004ed8 <HAL_RCC_ClockConfig+0x25c>)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb2:	4b89      	ldr	r3, [pc, #548]	@ (8004ed8 <HAL_RCC_ClockConfig+0x25c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e14a      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd0:	4b82      	ldr	r3, [pc, #520]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	497f      	ldr	r1, [pc, #508]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80dc 	beq.w	8004ea8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d13c      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xf6>
 8004cf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004cfc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d00:	fa93 f3a3 	rbit	r3, r3
 8004d04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d08:	fab3 f383 	clz	r3, r3
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xa6>
 8004d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	e00f      	b.n	8004d42 <HAL_RCC_ClockConfig+0xc6>
 8004d22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d2a:	fa93 f3a3 	rbit	r3, r3
 8004d2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d3e:	4b67      	ldr	r3, [pc, #412]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d46:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d4a:	fa92 f2a2 	rbit	r2, r2
 8004d4e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004d50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d52:	fab2 f282 	clz	r2, r2
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	f042 0220 	orr.w	r2, r2, #32
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	f002 021f 	and.w	r2, r2, #31
 8004d62:	2101      	movs	r1, #1
 8004d64:	fa01 f202 	lsl.w	r2, r1, r2
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d17b      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0f3      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d13c      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x178>
 8004d7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d102      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x128>
 8004d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	e00f      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x148>
 8004da4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dc0:	4b46      	ldr	r3, [pc, #280]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dc8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dcc:	fa92 f2a2 	rbit	r2, r2
 8004dd0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004dd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dd4:	fab2 f282 	clz	r2, r2
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	f042 0220 	orr.w	r2, r2, #32
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	f002 021f 	and.w	r2, r2, #31
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d13a      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b2      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2de>
 8004df4:	2302      	movs	r3, #2
 8004df6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	fab3 f383 	clz	r3, r3
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d102      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x1a0>
 8004e16:	4b31      	ldr	r3, [pc, #196]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	e00d      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1bc>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e28:	2302      	movs	r3, #2
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	fa93 f3a3 	rbit	r3, r3
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	4b29      	ldr	r3, [pc, #164]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	2202      	movs	r2, #2
 8004e3a:	61ba      	str	r2, [r7, #24]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	fa92 f2a2 	rbit	r2, r2
 8004e42:	617a      	str	r2, [r7, #20]
  return result;
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	fab2 f282 	clz	r2, r2
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	f042 0220 	orr.w	r2, r2, #32
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	f002 021f 	and.w	r2, r2, #31
 8004e56:	2101      	movs	r1, #1
 8004e58:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e079      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e66:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f023 0203 	bic.w	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	491a      	ldr	r1, [pc, #104]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e78:	f7fd fe38 	bl	8002aec <HAL_GetTick>
 8004e7c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e80:	f7fd fe34 	bl	8002aec <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e061      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	4b11      	ldr	r3, [pc, #68]	@ (8004edc <HAL_RCC_ClockConfig+0x260>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f003 020c 	and.w	r2, r3, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1eb      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <HAL_RCC_ClockConfig+0x25c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d214      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <HAL_RCC_ClockConfig+0x25c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 0207 	bic.w	r2, r3, #7
 8004ebe:	4906      	ldr	r1, [pc, #24]	@ (8004ed8 <HAL_RCC_ClockConfig+0x25c>)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b04      	ldr	r3, [pc, #16]	@ (8004ed8 <HAL_RCC_ClockConfig+0x25c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e040      	b.n	8004f5a <HAL_RCC_ClockConfig+0x2de>
 8004ed8:	40022000 	.word	0x40022000
 8004edc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eec:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <HAL_RCC_ClockConfig+0x2e8>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	491a      	ldr	r1, [pc, #104]	@ (8004f64 <HAL_RCC_ClockConfig+0x2e8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0a:	4b16      	ldr	r3, [pc, #88]	@ (8004f64 <HAL_RCC_ClockConfig+0x2e8>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4912      	ldr	r1, [pc, #72]	@ (8004f64 <HAL_RCC_ClockConfig+0x2e8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f1e:	f000 f829 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8004f22:	4601      	mov	r1, r0
 8004f24:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <HAL_RCC_ClockConfig+0x2e8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f2c:	22f0      	movs	r2, #240	@ 0xf0
 8004f2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	fa92 f2a2 	rbit	r2, r2
 8004f36:	60fa      	str	r2, [r7, #12]
  return result;
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	fab2 f282 	clz	r2, r2
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	40d3      	lsrs	r3, r2
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x2ec>)
 8004f44:	5cd3      	ldrb	r3, [r2, r3]
 8004f46:	fa21 f303 	lsr.w	r3, r1, r3
 8004f4a:	4a08      	ldr	r2, [pc, #32]	@ (8004f6c <HAL_RCC_ClockConfig+0x2f0>)
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f4e:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <HAL_RCC_ClockConfig+0x2f4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fd fd86 	bl	8002a64 <HAL_InitTick>
  
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3778      	adds	r7, #120	@ 0x78
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	08006894 	.word	0x08006894
 8004f6c:	20000000 	.word	0x20000000
 8004f70:	20000004 	.word	0x20000004

08004f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d002      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0x36>
 8004fa2:	e026      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fa4:	4b19      	ldr	r3, [pc, #100]	@ (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fa6:	613b      	str	r3, [r7, #16]
      break;
 8004fa8:	e026      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	0c9b      	lsrs	r3, r3, #18
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	4a17      	ldr	r2, [pc, #92]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fb4:	5cd3      	ldrb	r3, [r2, r3]
 8004fb6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004fb8:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	4a14      	ldr	r2, [pc, #80]	@ (8005014 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fc2:	5cd3      	ldrb	r3, [r2, r3]
 8004fc4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e004      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	613b      	str	r3, [r7, #16]
      break;
 8004ff0:	e002      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ff4:	613b      	str	r3, [r7, #16]
      break;
 8004ff6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff8:	693b      	ldr	r3, [r7, #16]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	007a1200 	.word	0x007a1200
 8005010:	080068ac 	.word	0x080068ac
 8005014:	080068bc 	.word	0x080068bc
 8005018:	003d0900 	.word	0x003d0900

0800501c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005020:	4b03      	ldr	r3, [pc, #12]	@ (8005030 <HAL_RCC_GetHCLKFreq+0x14>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000000 	.word	0x20000000

08005034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800503a:	f7ff ffef 	bl	800501c <HAL_RCC_GetHCLKFreq>
 800503e:	4601      	mov	r1, r0
 8005040:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005048:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800504c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	fa92 f2a2 	rbit	r2, r2
 8005054:	603a      	str	r2, [r7, #0]
  return result;
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	fab2 f282 	clz	r2, r2
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	40d3      	lsrs	r3, r2
 8005060:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005062:	5cd3      	ldrb	r3, [r2, r3]
 8005064:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	080068a4 	.word	0x080068a4

08005078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800507e:	f7ff ffcd 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8005082:	4601      	mov	r1, r0
 8005084:	4b0b      	ldr	r3, [pc, #44]	@ (80050b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800508c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005090:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	fa92 f2a2 	rbit	r2, r2
 8005098:	603a      	str	r2, [r7, #0]
  return result;
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	fab2 f282 	clz	r2, r2
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	40d3      	lsrs	r3, r2
 80050a4:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050a6:	5cd3      	ldrb	r3, [r2, r3]
 80050a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	080068a4 	.word	0x080068a4

080050bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b092      	sub	sp, #72	@ 0x48
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80d4 	beq.w	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e0:	4b4e      	ldr	r3, [pc, #312]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10e      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	4b4b      	ldr	r3, [pc, #300]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4a4a      	ldr	r2, [pc, #296]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	61d3      	str	r3, [r2, #28]
 80050f8:	4b48      	ldr	r3, [pc, #288]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510a:	4b45      	ldr	r3, [pc, #276]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d118      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005116:	4b42      	ldr	r3, [pc, #264]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a41      	ldr	r2, [pc, #260]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005120:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005122:	f7fd fce3 	bl	8002aec <HAL_GetTick>
 8005126:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	e008      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512a:	f7fd fcdf 	bl	8002aec <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	@ 0x64
 8005136:	d901      	bls.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e12d      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	4b38      	ldr	r3, [pc, #224]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005148:	4b34      	ldr	r3, [pc, #208]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005150:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8084 	beq.w	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005162:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005164:	429a      	cmp	r2, r3
 8005166:	d07c      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005168:	4b2c      	ldr	r3, [pc, #176]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005176:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005182:	fab3 f383 	clz	r3, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	461a      	mov	r2, r3
 8005192:	2301      	movs	r3, #1
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800519a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80051a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	461a      	mov	r2, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051ba:	4a18      	ldr	r2, [pc, #96]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d04b      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ca:	f7fd fc8f 	bl	8002aec <HAL_GetTick>
 80051ce:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fd fc8b 	bl	8002aec <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e0d7      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80051e8:	2302      	movs	r3, #2
 80051ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ee:	fa93 f3a3 	rbit	r3, r3
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f4:	2302      	movs	r3, #2
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	61fb      	str	r3, [r7, #28]
  return result;
 8005200:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005202:	fab3 f383 	clz	r3, r3
 8005206:	b2db      	uxtb	r3, r3
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d108      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005216:	4b01      	ldr	r3, [pc, #4]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	e00d      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800521c:	40021000 	.word	0x40021000
 8005220:	40007000 	.word	0x40007000
 8005224:	10908100 	.word	0x10908100
 8005228:	2302      	movs	r3, #2
 800522a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	fa93 f3a3 	rbit	r3, r3
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	4b5a      	ldr	r3, [pc, #360]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	2202      	movs	r2, #2
 800523a:	613a      	str	r2, [r7, #16]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	fa92 f2a2 	rbit	r2, r2
 8005242:	60fa      	str	r2, [r7, #12]
  return result;
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	fab2 f282 	clz	r2, r2
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	f002 021f 	and.w	r2, r2, #31
 8005256:	2101      	movs	r1, #1
 8005258:	fa01 f202 	lsl.w	r2, r1, r2
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0b7      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005262:	4b4f      	ldr	r3, [pc, #316]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	494c      	ldr	r1, [pc, #304]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005274:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005278:	2b01      	cmp	r3, #1
 800527a:	d105      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800527c:	4b48      	ldr	r3, [pc, #288]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	4a47      	ldr	r2, [pc, #284]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005286:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005294:	4b42      	ldr	r3, [pc, #264]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	f023 0203 	bic.w	r2, r3, #3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	493f      	ldr	r1, [pc, #252]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052b2:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	4938      	ldr	r1, [pc, #224]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052d0:	4b33      	ldr	r3, [pc, #204]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	4930      	ldr	r1, [pc, #192]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d008      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ee:	4b2c      	ldr	r3, [pc, #176]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	f023 0210 	bic.w	r2, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4929      	ldr	r1, [pc, #164]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800530c:	4b24      	ldr	r3, [pc, #144]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005318:	4921      	ldr	r1, [pc, #132]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800532a:	4b1d      	ldr	r3, [pc, #116]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	f023 0220 	bic.w	r2, r3, #32
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	491a      	ldr	r1, [pc, #104]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005338:	4313      	orrs	r3, r2
 800533a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005348:	4b15      	ldr	r3, [pc, #84]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	4912      	ldr	r1, [pc, #72]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8005366:	4b0e      	ldr	r3, [pc, #56]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	490b      	ldr	r1, [pc, #44]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005384:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	4903      	ldr	r1, [pc, #12]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3748      	adds	r7, #72	@ 0x48
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000

080053a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e09d      	b.n	80054f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053c6:	d009      	beq.n	80053dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	61da      	str	r2, [r3, #28]
 80053ce:	e005      	b.n	80053dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fd f9e6 	bl	80027c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005412:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800541c:	d902      	bls.n	8005424 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e002      	b.n	800542a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005428:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005432:	d007      	beq.n	8005444 <HAL_SPI_Init+0xa0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800543c:	d002      	beq.n	8005444 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	ea42 0103 	orr.w	r1, r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	f003 0204 	and.w	r2, r3, #4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80054c0:	ea42 0103 	orr.w	r1, r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10e      	bne.n	800553c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d004      	beq.n	800553c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
    return;
 800553a:	e0ce      	b.n	80056da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <HAL_SPI_IRQHandler+0x5e>
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
    return;
 8005558:	e0bf      	b.n	80056da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <HAL_SPI_IRQHandler+0x7e>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d105      	bne.n	800557a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80b0 	beq.w	80056da <HAL_SPI_IRQHandler+0x1de>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80aa 	beq.w	80056da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d023      	beq.n	80055d8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b03      	cmp	r3, #3
 800559a:	d011      	beq.n	80055c0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a0:	f043 0204 	orr.w	r2, r3, #4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	e00b      	b.n	80055d8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
        return;
 80055d6:	e080      	b.n	80056da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d014      	beq.n	800560c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800561a:	f043 0208 	orr.w	r2, r3, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005634:	2b00      	cmp	r3, #0
 8005636:	d04f      	beq.n	80056d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005646:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <HAL_SPI_IRQHandler+0x168>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d034      	beq.n	80056ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0203 	bic.w	r2, r2, #3
 8005672:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005678:	2b00      	cmp	r3, #0
 800567a:	d011      	beq.n	80056a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005680:	4a17      	ldr	r2, [pc, #92]	@ (80056e0 <HAL_SPI_IRQHandler+0x1e4>)
 8005682:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005688:	4618      	mov	r0, r3
 800568a:	f7fd fc69 	bl	8002f60 <HAL_DMA_Abort_IT>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005698:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d016      	beq.n	80056d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ac:	4a0c      	ldr	r2, [pc, #48]	@ (80056e0 <HAL_SPI_IRQHandler+0x1e4>)
 80056ae:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fd fc53 	bl	8002f60 <HAL_DMA_Abort_IT>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80056cc:	e003      	b.n	80056d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f808 	bl	80056e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80056d4:	e000      	b.n	80056d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80056d6:	bf00      	nop
    return;
 80056d8:	bf00      	nop
  }
}
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	080056f9 	.word	0x080056f9

080056e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff ffe5 	bl	80056e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800571a:	bf00      	nop
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e040      	b.n	80057b6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d106      	bne.n	800574a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fd f8ab 	bl	80028a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2224      	movs	r2, #36	@ 0x24
 800574e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fde7 	bl	800633c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fc6a 	bl	8006048 <UART_SetConfig>
 8005774:	4603      	mov	r3, r0
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e01b      	b.n	80057b6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800578c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800579c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fe66 	bl	8006480 <UART_CheckIdleState>
 80057b4:	4603      	mov	r3, r0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b08a      	sub	sp, #40	@ 0x28
 80057c2:	af02      	add	r7, sp, #8
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d177      	bne.n	80058c6 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_UART_Transmit+0x24>
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e070      	b.n	80058c8 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2221      	movs	r2, #33	@ 0x21
 80057f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f4:	f7fd f97a 	bl	8002aec <HAL_GetTick>
 80057f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	88fa      	ldrh	r2, [r7, #6]
 80057fe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005812:	d108      	bne.n	8005826 <HAL_UART_Transmit+0x68>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e003      	b.n	800582e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800582e:	e02f      	b.n	8005890 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2200      	movs	r2, #0
 8005838:	2180      	movs	r1, #128	@ 0x80
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fec8 	bl	80065d0 <UART_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e03b      	b.n	80058c8 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	881a      	ldrh	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005862:	b292      	uxth	r2, r2
 8005864:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	3302      	adds	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e007      	b.n	800587e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1c9      	bne.n	8005830 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2140      	movs	r1, #64	@ 0x40
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fe92 	bl	80065d0 <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e005      	b.n	80058c8 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	@ 0x28
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	f040 80a3 	bne.w	8005a32 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_UART_Receive+0x28>
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e09b      	b.n	8005a34 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2222      	movs	r2, #34	@ 0x22
 8005908:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005912:	f7fd f8eb 	bl	8002aec <HAL_GetTick>
 8005916:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005930:	d10e      	bne.n	8005950 <HAL_UART_Receive+0x80>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <HAL_UART_Receive+0x76>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005940:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005944:	e01a      	b.n	800597c <HAL_UART_Receive+0xac>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	22ff      	movs	r2, #255	@ 0xff
 800594a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800594e:	e015      	b.n	800597c <HAL_UART_Receive+0xac>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10d      	bne.n	8005974 <HAL_UART_Receive+0xa4>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <HAL_UART_Receive+0x9a>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	22ff      	movs	r2, #255	@ 0xff
 8005964:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005968:	e008      	b.n	800597c <HAL_UART_Receive+0xac>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	227f      	movs	r2, #127	@ 0x7f
 800596e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005972:	e003      	b.n	800597c <HAL_UART_Receive+0xac>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005982:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598c:	d108      	bne.n	80059a0 <HAL_UART_Receive+0xd0>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e003      	b.n	80059a8 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80059a8:	e037      	b.n	8005a1a <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2120      	movs	r1, #32
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fe0b 	bl	80065d0 <UART_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e033      	b.n	8005a34 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10c      	bne.n	80059ec <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80059d8:	b29a      	uxth	r2, r3
 80059da:	8a7b      	ldrh	r3, [r7, #18]
 80059dc:	4013      	ands	r3, r2
 80059de:	b29a      	uxth	r2, r3
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	3302      	adds	r3, #2
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e00d      	b.n	8005a08 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	8a7b      	ldrh	r3, [r7, #18]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	4013      	ands	r3, r2
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3301      	adds	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1c1      	bne.n	80059aa <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e000      	b.n	8005a34 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
  }
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b0ba      	sub	sp, #232	@ 0xe8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a66:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d115      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00f      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 82ab 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
      }
      return;
 8005aa2:	e2a5      	b.n	8005ff0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8117 	beq.w	8005cdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005aba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005abe:	4b85      	ldr	r3, [pc, #532]	@ (8005cd4 <HAL_UART_IRQHandler+0x298>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 810a 	beq.w	8005cdc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d011      	beq.n	8005af8 <HAL_UART_IRQHandler+0xbc>
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aee:	f043 0201 	orr.w	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d011      	beq.n	8005b28 <HAL_UART_IRQHandler+0xec>
 8005b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2202      	movs	r2, #2
 8005b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b1e:	f043 0204 	orr.w	r2, r3, #4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d011      	beq.n	8005b58 <HAL_UART_IRQHandler+0x11c>
 8005b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2204      	movs	r2, #4
 8005b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b4e:	f043 0202 	orr.w	r2, r3, #2
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d017      	beq.n	8005b94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2208      	movs	r2, #8
 8005b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b8a:	f043 0208 	orr.w	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d012      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x18a>
 8005ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00c      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8211 	beq.w	8005ff4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d007      	beq.n	8005bfa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0e:	2b40      	cmp	r3, #64	@ 0x40
 8005c10:	d005      	beq.n	8005c1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d04f      	beq.n	8005cbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fd43 	bl	80066aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2e:	2b40      	cmp	r3, #64	@ 0x40
 8005c30:	d141      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3308      	adds	r3, #8
 8005c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1d9      	bne.n	8005c32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d013      	beq.n	8005cae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c8a:	4a13      	ldr	r2, [pc, #76]	@ (8005cd8 <HAL_UART_IRQHandler+0x29c>)
 8005c8c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fd f964 	bl	8002f60 <HAL_DMA_Abort_IT>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d017      	beq.n	8005cce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	e00f      	b.n	8005cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f9b4 	bl	800601c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb4:	e00b      	b.n	8005cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f9b0 	bl	800601c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	e007      	b.n	8005cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f9ac 	bl	800601c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005ccc:	e192      	b.n	8005ff4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cce:	bf00      	nop
    return;
 8005cd0:	e190      	b.n	8005ff4 <HAL_UART_IRQHandler+0x5b8>
 8005cd2:	bf00      	nop
 8005cd4:	04000120 	.word	0x04000120
 8005cd8:	08006773 	.word	0x08006773

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	f040 814b 	bne.w	8005f7c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8144 	beq.w	8005f7c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 813d 	beq.w	8005f7c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2210      	movs	r2, #16
 8005d08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d14:	2b40      	cmp	r3, #64	@ 0x40
 8005d16:	f040 80b5 	bne.w	8005e84 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 8164 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	f080 815c 	bcs.w	8005ff8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	f000 8086 	beq.w	8005e62 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d84:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1da      	bne.n	8005d56 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005db0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dc4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e1      	bne.n	8005da0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e3      	bne.n	8005ddc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e32:	f023 0310 	bic.w	r3, r3, #16
 8005e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e4      	bne.n	8005e22 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fd f841 	bl	8002ee4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f8d7 	bl	8006030 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e82:	e0b9      	b.n	8005ff8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80ab 	beq.w	8005ffc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80a6 	beq.w	8005ffc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ed4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e4      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e3      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0310 	bic.w	r3, r3, #16
 8005f46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	69b9      	ldr	r1, [r7, #24]
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	617b      	str	r3, [r7, #20]
   return(result);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e4      	bne.n	8005f32 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f85b 	bl	8006030 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f7a:	e03f      	b.n	8005ffc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x56a>
 8005f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fc27 	bl	80067f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fa4:	e02d      	b.n	8006002 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01c      	beq.n	8006000 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
    }
    return;
 8005fce:	e017      	b.n	8006000 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d012      	beq.n	8006002 <HAL_UART_IRQHandler+0x5c6>
 8005fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00c      	beq.n	8006002 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fbd8 	bl	800679e <UART_EndTransmit_IT>
    return;
 8005fee:	e008      	b.n	8006002 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ff0:	bf00      	nop
 8005ff2:	e006      	b.n	8006002 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005ff4:	bf00      	nop
 8005ff6:	e004      	b.n	8006002 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ff8:	bf00      	nop
 8005ffa:	e002      	b.n	8006002 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ffc:	bf00      	nop
 8005ffe:	e000      	b.n	8006002 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006000:	bf00      	nop
  }

}
 8006002:	37e8      	adds	r7, #232	@ 0xe8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006076:	f023 030c 	bic.w	r3, r3, #12
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	6979      	ldr	r1, [r7, #20]
 8006080:	430b      	orrs	r3, r1
 8006082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a99      	ldr	r2, [pc, #612]	@ (8006328 <UART_SetConfig+0x2e0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d120      	bne.n	800610a <UART_SetConfig+0xc2>
 80060c8:	4b98      	ldr	r3, [pc, #608]	@ (800632c <UART_SetConfig+0x2e4>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d817      	bhi.n	8006104 <UART_SetConfig+0xbc>
 80060d4:	a201      	add	r2, pc, #4	@ (adr r2, 80060dc <UART_SetConfig+0x94>)
 80060d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060da:	bf00      	nop
 80060dc:	080060ed 	.word	0x080060ed
 80060e0:	080060f9 	.word	0x080060f9
 80060e4:	080060ff 	.word	0x080060ff
 80060e8:	080060f3 	.word	0x080060f3
 80060ec:	2301      	movs	r3, #1
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e061      	b.n	80061b6 <UART_SetConfig+0x16e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	e05e      	b.n	80061b6 <UART_SetConfig+0x16e>
 80060f8:	2304      	movs	r3, #4
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e05b      	b.n	80061b6 <UART_SetConfig+0x16e>
 80060fe:	2308      	movs	r3, #8
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e058      	b.n	80061b6 <UART_SetConfig+0x16e>
 8006104:	2310      	movs	r3, #16
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e055      	b.n	80061b6 <UART_SetConfig+0x16e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a88      	ldr	r2, [pc, #544]	@ (8006330 <UART_SetConfig+0x2e8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d124      	bne.n	800615e <UART_SetConfig+0x116>
 8006114:	4b85      	ldr	r3, [pc, #532]	@ (800632c <UART_SetConfig+0x2e4>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006118:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800611c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006120:	d011      	beq.n	8006146 <UART_SetConfig+0xfe>
 8006122:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006126:	d817      	bhi.n	8006158 <UART_SetConfig+0x110>
 8006128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800612c:	d011      	beq.n	8006152 <UART_SetConfig+0x10a>
 800612e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006132:	d811      	bhi.n	8006158 <UART_SetConfig+0x110>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <UART_SetConfig+0xf8>
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613c:	d006      	beq.n	800614c <UART_SetConfig+0x104>
 800613e:	e00b      	b.n	8006158 <UART_SetConfig+0x110>
 8006140:	2300      	movs	r3, #0
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e037      	b.n	80061b6 <UART_SetConfig+0x16e>
 8006146:	2302      	movs	r3, #2
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e034      	b.n	80061b6 <UART_SetConfig+0x16e>
 800614c:	2304      	movs	r3, #4
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e031      	b.n	80061b6 <UART_SetConfig+0x16e>
 8006152:	2308      	movs	r3, #8
 8006154:	77fb      	strb	r3, [r7, #31]
 8006156:	e02e      	b.n	80061b6 <UART_SetConfig+0x16e>
 8006158:	2310      	movs	r3, #16
 800615a:	77fb      	strb	r3, [r7, #31]
 800615c:	e02b      	b.n	80061b6 <UART_SetConfig+0x16e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a74      	ldr	r2, [pc, #464]	@ (8006334 <UART_SetConfig+0x2ec>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d124      	bne.n	80061b2 <UART_SetConfig+0x16a>
 8006168:	4b70      	ldr	r3, [pc, #448]	@ (800632c <UART_SetConfig+0x2e4>)
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006170:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006174:	d011      	beq.n	800619a <UART_SetConfig+0x152>
 8006176:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800617a:	d817      	bhi.n	80061ac <UART_SetConfig+0x164>
 800617c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006180:	d011      	beq.n	80061a6 <UART_SetConfig+0x15e>
 8006182:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006186:	d811      	bhi.n	80061ac <UART_SetConfig+0x164>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <UART_SetConfig+0x14c>
 800618c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006190:	d006      	beq.n	80061a0 <UART_SetConfig+0x158>
 8006192:	e00b      	b.n	80061ac <UART_SetConfig+0x164>
 8006194:	2300      	movs	r3, #0
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e00d      	b.n	80061b6 <UART_SetConfig+0x16e>
 800619a:	2302      	movs	r3, #2
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e00a      	b.n	80061b6 <UART_SetConfig+0x16e>
 80061a0:	2304      	movs	r3, #4
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e007      	b.n	80061b6 <UART_SetConfig+0x16e>
 80061a6:	2308      	movs	r3, #8
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e004      	b.n	80061b6 <UART_SetConfig+0x16e>
 80061ac:	2310      	movs	r3, #16
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e001      	b.n	80061b6 <UART_SetConfig+0x16e>
 80061b2:	2310      	movs	r3, #16
 80061b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061be:	d15a      	bne.n	8006276 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 80061c0:	7ffb      	ldrb	r3, [r7, #31]
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d827      	bhi.n	8006216 <UART_SetConfig+0x1ce>
 80061c6:	a201      	add	r2, pc, #4	@ (adr r2, 80061cc <UART_SetConfig+0x184>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	080061f9 	.word	0x080061f9
 80061d4:	08006201 	.word	0x08006201
 80061d8:	08006217 	.word	0x08006217
 80061dc:	08006207 	.word	0x08006207
 80061e0:	08006217 	.word	0x08006217
 80061e4:	08006217 	.word	0x08006217
 80061e8:	08006217 	.word	0x08006217
 80061ec:	0800620f 	.word	0x0800620f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f0:	f7fe ff20 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 80061f4:	61b8      	str	r0, [r7, #24]
        break;
 80061f6:	e013      	b.n	8006220 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f8:	f7fe ff3e 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 80061fc:	61b8      	str	r0, [r7, #24]
        break;
 80061fe:	e00f      	b.n	8006220 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006200:	4b4d      	ldr	r3, [pc, #308]	@ (8006338 <UART_SetConfig+0x2f0>)
 8006202:	61bb      	str	r3, [r7, #24]
        break;
 8006204:	e00c      	b.n	8006220 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006206:	f7fe feb5 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 800620a:	61b8      	str	r0, [r7, #24]
        break;
 800620c:	e008      	b.n	8006220 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006212:	61bb      	str	r3, [r7, #24]
        break;
 8006214:	e004      	b.n	8006220 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	77bb      	strb	r3, [r7, #30]
        break;
 800621e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d074      	beq.n	8006310 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	005a      	lsls	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	441a      	add	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	fbb2 f3f3 	udiv	r3, r2, r3
 800623a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d916      	bls.n	8006270 <UART_SetConfig+0x228>
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006248:	d212      	bcs.n	8006270 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f023 030f 	bic.w	r3, r3, #15
 8006252:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	b29b      	uxth	r3, r3
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	b29a      	uxth	r2, r3
 8006260:	89fb      	ldrh	r3, [r7, #14]
 8006262:	4313      	orrs	r3, r2
 8006264:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	89fa      	ldrh	r2, [r7, #14]
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	e04f      	b.n	8006310 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	77bb      	strb	r3, [r7, #30]
 8006274:	e04c      	b.n	8006310 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006276:	7ffb      	ldrb	r3, [r7, #31]
 8006278:	2b08      	cmp	r3, #8
 800627a:	d828      	bhi.n	80062ce <UART_SetConfig+0x286>
 800627c:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x23c>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	080062cf 	.word	0x080062cf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062cf 	.word	0x080062cf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fe fec4 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 80062ac:	61b8      	str	r0, [r7, #24]
        break;
 80062ae:	e013      	b.n	80062d8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fe fee2 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 80062b4:	61b8      	str	r0, [r7, #24]
        break;
 80062b6:	e00f      	b.n	80062d8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006338 <UART_SetConfig+0x2f0>)
 80062ba:	61bb      	str	r3, [r7, #24]
        break;
 80062bc:	e00c      	b.n	80062d8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fe fe59 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 80062c2:	61b8      	str	r0, [r7, #24]
        break;
 80062c4:	e008      	b.n	80062d8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ca:	61bb      	str	r3, [r7, #24]
        break;
 80062cc:	e004      	b.n	80062d8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	77bb      	strb	r3, [r7, #30]
        break;
 80062d6:	bf00      	nop
    }

    if (pclk != 0U)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d018      	beq.n	8006310 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	085a      	lsrs	r2, r3, #1
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	441a      	add	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d909      	bls.n	800630c <UART_SetConfig+0x2c4>
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062fe:	d205      	bcs.n	800630c <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	b29a      	uxth	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	e001      	b.n	8006310 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800631c:	7fbb      	ldrb	r3, [r7, #30]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40013800 	.word	0x40013800
 800632c:	40021000 	.word	0x40021000
 8006330:	40004400 	.word	0x40004400
 8006334:	40004800 	.word	0x40004800
 8006338:	007a1200 	.word	0x007a1200

0800633c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01a      	beq.n	8006452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800643a:	d10a      	bne.n	8006452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	605a      	str	r2, [r3, #4]
  }
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b098      	sub	sp, #96	@ 0x60
 8006484:	af02      	add	r7, sp, #8
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006490:	f7fc fb2c 	bl	8002aec <HAL_GetTick>
 8006494:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d12e      	bne.n	8006502 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ac:	2200      	movs	r2, #0
 80064ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f88c 	bl	80065d0 <UART_WaitOnFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d021      	beq.n	8006502 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80064de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e6      	bne.n	80064be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e062      	b.n	80065c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b04      	cmp	r3, #4
 800650e:	d149      	bne.n	80065a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006518:	2200      	movs	r2, #0
 800651a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f856 	bl	80065d0 <UART_WaitOnFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d03c      	beq.n	80065a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	e853 3f00 	ldrex	r3, [r3]
 8006536:	623b      	str	r3, [r7, #32]
   return(result);
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800653e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006548:	633b      	str	r3, [r7, #48]	@ 0x30
 800654a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800654e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e6      	bne.n	800652a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3308      	adds	r3, #8
 8006562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	60fb      	str	r3, [r7, #12]
   return(result);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0301 	bic.w	r3, r3, #1
 8006572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800657c:	61fa      	str	r2, [r7, #28]
 800657e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	69b9      	ldr	r1, [r7, #24]
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	617b      	str	r3, [r7, #20]
   return(result);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e5      	bne.n	800655c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e011      	b.n	80065c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3758      	adds	r7, #88	@ 0x58
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e0:	e04f      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d04b      	beq.n	8006682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ea:	f7fc fa7f 	bl	8002aec <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d302      	bcc.n	8006600 <UART_WaitOnFlagUntilTimeout+0x30>
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e04e      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	d037      	beq.n	8006682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b80      	cmp	r3, #128	@ 0x80
 8006616:	d034      	beq.n	8006682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b40      	cmp	r3, #64	@ 0x40
 800661c:	d031      	beq.n	8006682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b08      	cmp	r3, #8
 800662a:	d110      	bne.n	800664e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2208      	movs	r2, #8
 8006632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f838 	bl	80066aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2208      	movs	r2, #8
 800663e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e029      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800665c:	d111      	bne.n	8006682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f81e 	bl	80066aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e00f      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4013      	ands	r3, r2
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	bf0c      	ite	eq
 8006692:	2301      	moveq	r3, #1
 8006694:	2300      	movne	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	429a      	cmp	r2, r3
 800669e:	d0a0      	beq.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b095      	sub	sp, #84	@ 0x54
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80066d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e6      	bne.n	80066b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3308      	adds	r3, #8
 80066ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006704:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006706:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800670a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e5      	bne.n	80066e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800671c:	2b01      	cmp	r3, #1
 800671e:	d118      	bne.n	8006752 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	60bb      	str	r3, [r7, #8]
   return(result);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f023 0310 	bic.w	r3, r3, #16
 8006734:	647b      	str	r3, [r7, #68]	@ 0x44
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6979      	ldr	r1, [r7, #20]
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	613b      	str	r3, [r7, #16]
   return(result);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e6      	bne.n	8006720 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006766:	bf00      	nop
 8006768:	3754      	adds	r7, #84	@ 0x54
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff fc43 	bl	800601c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b088      	sub	sp, #32
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6979      	ldr	r1, [r7, #20]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	613b      	str	r3, [r7, #16]
   return(result);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e6      	bne.n	80067a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff fc0f 	bl	8006008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ea:	bf00      	nop
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <memset>:
 8006806:	4402      	add	r2, r0
 8006808:	4603      	mov	r3, r0
 800680a:	4293      	cmp	r3, r2
 800680c:	d100      	bne.n	8006810 <memset+0xa>
 800680e:	4770      	bx	lr
 8006810:	f803 1b01 	strb.w	r1, [r3], #1
 8006814:	e7f9      	b.n	800680a <memset+0x4>
	...

08006818 <__libc_init_array>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	4d0d      	ldr	r5, [pc, #52]	@ (8006850 <__libc_init_array+0x38>)
 800681c:	4c0d      	ldr	r4, [pc, #52]	@ (8006854 <__libc_init_array+0x3c>)
 800681e:	1b64      	subs	r4, r4, r5
 8006820:	10a4      	asrs	r4, r4, #2
 8006822:	2600      	movs	r6, #0
 8006824:	42a6      	cmp	r6, r4
 8006826:	d109      	bne.n	800683c <__libc_init_array+0x24>
 8006828:	4d0b      	ldr	r5, [pc, #44]	@ (8006858 <__libc_init_array+0x40>)
 800682a:	4c0c      	ldr	r4, [pc, #48]	@ (800685c <__libc_init_array+0x44>)
 800682c:	f000 f826 	bl	800687c <_init>
 8006830:	1b64      	subs	r4, r4, r5
 8006832:	10a4      	asrs	r4, r4, #2
 8006834:	2600      	movs	r6, #0
 8006836:	42a6      	cmp	r6, r4
 8006838:	d105      	bne.n	8006846 <__libc_init_array+0x2e>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006840:	4798      	blx	r3
 8006842:	3601      	adds	r6, #1
 8006844:	e7ee      	b.n	8006824 <__libc_init_array+0xc>
 8006846:	f855 3b04 	ldr.w	r3, [r5], #4
 800684a:	4798      	blx	r3
 800684c:	3601      	adds	r6, #1
 800684e:	e7f2      	b.n	8006836 <__libc_init_array+0x1e>
 8006850:	080068cc 	.word	0x080068cc
 8006854:	080068cc 	.word	0x080068cc
 8006858:	080068cc 	.word	0x080068cc
 800685c:	080068d4 	.word	0x080068d4

08006860 <memcpy>:
 8006860:	440a      	add	r2, r1
 8006862:	4291      	cmp	r1, r2
 8006864:	f100 33ff 	add.w	r3, r0, #4294967295
 8006868:	d100      	bne.n	800686c <memcpy+0xc>
 800686a:	4770      	bx	lr
 800686c:	b510      	push	{r4, lr}
 800686e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006876:	4291      	cmp	r1, r2
 8006878:	d1f9      	bne.n	800686e <memcpy+0xe>
 800687a:	bd10      	pop	{r4, pc}

0800687c <_init>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr

08006888 <_fini>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	bf00      	nop
 800688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688e:	bc08      	pop	{r3}
 8006890:	469e      	mov	lr, r3
 8006892:	4770      	bx	lr
