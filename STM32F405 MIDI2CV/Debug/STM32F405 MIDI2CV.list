
STM32F405 MIDI2CV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009130  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080092b8  080092b8  0000a2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  0000b00c  2**0
                  CONTENTS
  4 .ARM          00000008  080094d8  080094d8  0000a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e0  080094e0  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080094e0  080094e0  0000a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080094e8  080094e8  0000a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080094f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b00c  2**0
                  CONTENTS
 10 .bss          00000518  2000000c  2000000c  0000b00c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000524  20000524  0000b00c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bdb  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f0  00000000  00000000  00024c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  00027d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114c  00000000  00000000  00029320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023608  00000000  00000000  0002a46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e6b  00000000  00000000  0004da74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbb14  00000000  00000000  000668df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001323f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006064  00000000  00000000  00132438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0013849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080092a0 	.word	0x080092a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080092a0 	.word	0x080092a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <_ZN8mMessage12getSysExSizeEv>:
	Channel channel = 0;
	uint8_t data1 = 0;
	uint8_t data2 = 0;

	uint8_t SysExMaxSize;
	 unsigned getSysExSize()  {
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
		 unsigned size = unsigned(data2) << 8 | data1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	78d2      	ldrb	r2, [r2, #3]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
		return size > SysExMaxSize ? SysExMaxSize : size;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	795b      	ldrb	r3, [r3, #5]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	bf28      	it	cs
 8000cb6:	4613      	movcs	r3, r2
	}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_ZN9mSettingsC1Ev>:
	uint8_t sysexArray[];
};

struct mSettings {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	705a      	strb	r2, [r3, #1]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	709a      	strb	r2, [r3, #2]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_ZN8mMessageC1Ev>:
struct mMessage {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	705a      	strb	r2, [r3, #1]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	709a      	strb	r2, [r3, #2]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	70da      	strb	r2, [r3, #3]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	711a      	strb	r2, [r3, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_ZN13MidiInterfaceC1Ev>:
 *
 */

#include "MIDI.h"
#include "stm32f4xx_hal.h"
MidiInterface::MidiInterface() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	33e5      	adds	r3, #229	@ 0xe5
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffc9 	bl	8000cc4 <_ZN9mSettingsC1Ev>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	33e8      	adds	r3, #232	@ 0xe8
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ffd8 	bl	8000cec <_ZN8mMessageC1Ev>
	mRunningStatus_TX = InvalidType;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	mRunningStatus_RX = InvalidType;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9

	mPendingMessageIndex = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mPendingMessageExpectedLenght = 0;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

	mCurrentRpnNumber = 0xffff;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d62:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	mCurrentNrpnNumber = 0xffff;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d6c:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2

	mMessage.valid = false;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	mMessage.type = InvalidType;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
	mMessage.channel = 0;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	mMessage.data1 = 0;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
	mMessage.data2 = 0;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	mMessage.SysExMaxSize = Settings.SysExMaxSize;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2280      	movs	r2, #128	@ 0x80
 8000d9c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	mThruFilterMode = Thru::Full;
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000da6:	2101      	movs	r1, #1
 8000da8:	f361 0347 	bfi	r3, r1, #1, #7
 8000dac:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mThruActivated = true;
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4

	mInputChannel = 0;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
	mRunningStatus_RX = InvalidType;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
	mRunningStatus_TX = InvalidType;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	mPendingMessageExpectedLenght = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	mPendingMessageIndex = 0;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mCurrentRpnNumber = 0xffff;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dec:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	mCurrentNrpnNumber = 0xffff;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000df6:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
	mThruActivated = false;
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000e00:	f36f 0300 	bfc	r3, #0, #1
 8000e04:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mThruFilterMode = Thru::Off;
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000e0e:	f36f 0347 	bfc	r3, #1, #7
 8000e12:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mNoteOffCallback = 0;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
	mNoteOnCallback = 0;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
	mAfterTouchPolyCallback = 0;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
	mControlChangeCallback = 0;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
	mProgramChangeCallback = 0;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
	mAfterTouchChannelCallback = 0;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
	mPitchBendCallback = 0;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
	mSystemExclusiveCallback = 0;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
	mTimeCodeQuarterFrameCallback = 0;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
	mSongPositionCallback = 0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
	mSongSelectCallback = 0;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	629a      	str	r2, [r3, #40]	@ 0x28
	mTuneRequestCallback = 0;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	mClockCallback = 0;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	631a      	str	r2, [r3, #48]	@ 0x30
	mStartCallback = 0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	635a      	str	r2, [r3, #52]	@ 0x34
	mContinueCallback = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	@ 0x38
	mStopCallback = 0;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	@ 0x3c
	mActiveSensingCallback = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	641a      	str	r2, [r3, #64]	@ 0x40
	mSystemResetCallback = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_ZN13MidiInterfaceD1Ev>:
MidiInterface::~MidiInterface() {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
}
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>:
 - Input channel set to 1 if no value is specified

 */

void MidiInterface::begin(Channel inChannel, UART_HandleTypeDef *huart_in,
		UART_HandleTypeDef *huart_out) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	72fb      	strb	r3, [r7, #11]
	serial_in = *huart_in;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	3390      	adds	r3, #144	@ 0x90
 8000eb8:	4611      	mov	r1, r2
 8000eba:	2248      	movs	r2, #72	@ 0x48
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f008 f9e1 	bl	8009284 <memcpy>
	serial_out = *huart_out;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	3348      	adds	r3, #72	@ 0x48
 8000ec8:	4611      	mov	r1, r2
 8000eca:	2248      	movs	r2, #72	@ 0x48
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f008 f9d9 	bl	8009284 <memcpy>
	mInputChannel = inChannel;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	7afa      	ldrb	r2, [r7, #11]
 8000ed6:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_ZN13MidiInterface4sendE8MidiTypehhh>:
 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */

void MidiInterface::send(MidiType inType, DataByte inData1, DataByte inData2,
		Channel inChannel) {
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	4608      	mov	r0, r1
 8000eec:	4611      	mov	r1, r2
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70bb      	strb	r3, [r7, #2]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	707b      	strb	r3, [r7, #1]
	// Then test if channel is valid
	if (inChannel >= MIDI_CHANNEL_OFF || inChannel == MIDI_CHANNEL_OMNI
 8000efc:	7e3b      	ldrb	r3, [r7, #24]
 8000efe:	2b10      	cmp	r3, #16
 8000f00:	d85e      	bhi.n	8000fc0 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
 8000f02:	7e3b      	ldrb	r3, [r7, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d05b      	beq.n	8000fc0 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
			|| inType < 0x80) {
 8000f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	da57      	bge.n	8000fc0 <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
		return; // Don't send anything
	}

	if (inType <= PitchBend)  // Channel messages
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	2be0      	cmp	r3, #224	@ 0xe0
 8000f14:	d84b      	bhi.n	8000fae <_ZN13MidiInterface4sendE8MidiTypehhh+0xcc>
			{
// Protection: remove MSBs on data
		inData1 &= 0x7f;
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	70bb      	strb	r3, [r7, #2]
		inData2 &= 0x7f;
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	707b      	strb	r3, [r7, #1]

		StatusByte status = getStatus(inType, inChannel);
 8000f2a:	7e3a      	ldrb	r2, [r7, #24]
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f949 	bl	80011c8 <_ZN13MidiInterface9getStatusE8MidiTypeh>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]

		if (Settings.UseRunningStatus) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d014      	beq.n	8000f6e <_ZN13MidiInterface4sendE8MidiTypehhh+0x8c>
			if (mRunningStatus_TX != status) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 20da 	ldrb.w	r2, [r3, #218]	@ 0xda
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d017      	beq.n	8000f80 <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
// New message, memorise and send header
				mRunningStatus_TX = status;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				HAL_UART_Transmit(&serial_out, &mRunningStatus_TX, 1,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f103 01da 	add.w	r1, r3, #218	@ 0xda
 8000f64:	230a      	movs	r3, #10
 8000f66:	2201      	movs	r2, #1
 8000f68:	f007 f922 	bl	80081b0 <HAL_UART_Transmit>
 8000f6c:	e008      	b.n	8000f80 <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
				MidiTimeout);
			}
		} else {
			// Don't care about running status, send the status byte.
			HAL_UART_Transmit(&serial_out, &status, 1, MidiTimeout);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000f74:	f107 010f 	add.w	r1, r7, #15
 8000f78:	230a      	movs	r3, #10
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f007 f918 	bl	80081b0 <HAL_UART_Transmit>
		}

// Then send data
		HAL_UART_Transmit(&serial_out, &inData1, 1, MidiTimeout);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000f86:	1cb9      	adds	r1, r7, #2
 8000f88:	230a      	movs	r3, #10
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f007 f910 	bl	80081b0 <HAL_UART_Transmit>
		if (inType != ProgramChange && inType != AfterTouchChannel) {
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f94:	d015      	beq.n	8000fc2 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	2bd0      	cmp	r3, #208	@ 0xd0
 8000f9a:	d012      	beq.n	8000fc2 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
			HAL_UART_Transmit(&serial_out, &inData2, 1, MidiTimeout);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000fa2:	1c79      	adds	r1, r7, #1
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f007 f902 	bl	80081b0 <HAL_UART_Transmit>
 8000fac:	e009      	b.n	8000fc2 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		}
	} else if (inType >= Clock && inType <= SystemReset) {
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	2bf7      	cmp	r3, #247	@ 0xf7
 8000fb2:	d906      	bls.n	8000fc2 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		sendRealTime(inType); // System Real-time and 1 byte.
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f8db 	bl	8001174 <_ZN13MidiInterface12sendRealTimeE8MidiType>
 8000fbe:	e000      	b.n	8000fc2 <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		return; // Don't send anything
 8000fc0:	bf00      	nop
	}
}
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_ZN13MidiInterface9sendSysExEhPhb>:
 default value for ArrayContainsBoundaries is set to 'false' for compatibility
 with previous versions of the library.
 */

void MidiInterface::sendSysEx(uint8_t inLength, byte *inArray,
		bool inArrayContainsBoundaries) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	72fb      	strb	r3, [r7, #11]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	72bb      	strb	r3, [r7, #10]
	bool writeBeginEndBytes = !inArrayContainsBoundaries;
 8000fdc:	7abb      	ldrb	r3, [r7, #10]
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]
	uint8_t StartByte = 0xf0;
 8000fe4:	23f0      	movs	r3, #240	@ 0xf0
 8000fe6:	75bb      	strb	r3, [r7, #22]
	uint8_t EndByte = 0xf7;
 8000fe8:	23f7      	movs	r3, #247	@ 0xf7
 8000fea:	757b      	strb	r3, [r7, #21]
	if (writeBeginEndBytes) {
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <_ZN13MidiInterface9sendSysExEhPhb+0x3c>
		HAL_UART_Transmit(&serial_out, &StartByte, 1, MidiTimeout);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000ff8:	f107 0116 	add.w	r1, r7, #22
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	2201      	movs	r2, #1
 8001000:	f007 f8d6 	bl	80081b0 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&serial_out, inArray, sizeof(inLength), MidiTimeout);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800100a:	230a      	movs	r3, #10
 800100c:	2201      	movs	r2, #1
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f007 f8ce 	bl	80081b0 <HAL_UART_Transmit>

	if (writeBeginEndBytes) {
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d008      	beq.n	800102c <_ZN13MidiInterface9sendSysExEhPhb+0x64>
		HAL_UART_Transmit(&serial_out, &EndByte, 1, MidiTimeout);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001020:	f107 0115 	add.w	r1, r7, #21
 8001024:	230a      	movs	r3, #10
 8001026:	2201      	movs	r2, #1
 8001028:	f007 f8c2 	bl	80081b0 <HAL_UART_Transmit>
	}

	if (Settings.UseRunningStatus) {
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <_ZN13MidiInterface9sendSysExEhPhb+0x76>
		mRunningStatus_TX = InvalidType;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>:
 \param inValuesNibble    MTC data
 See MIDI Specification for more information.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
		DataByte inValuesNibble) {
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	70fb      	strb	r3, [r7, #3]
 8001052:	4613      	mov	r3, r2
 8001054:	70bb      	strb	r3, [r7, #2]
	byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	b25b      	sxtb	r3, r3
 800105c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001060:	b25a      	sxtb	r2, r3
 8001062:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	b25b      	sxtb	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b25b      	sxtb	r3, r3
 8001070:	73fb      	strb	r3, [r7, #15]
	sendTimeCodeQuarterFrame(data);
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f804 	bl	8001084 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>:
 See MIDI Specification for more information.
 \param inData  if you want to encode directly the nibbles in your program,
 you can send the byte here.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inData) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
	uint8_t TimeCodeMessage[] = { TimeCodeQuarterFrame, inData };
 8001090:	2300      	movs	r3, #0
 8001092:	81bb      	strh	r3, [r7, #12]
 8001094:	23f1      	movs	r3, #241	@ 0xf1
 8001096:	733b      	strb	r3, [r7, #12]
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, TimeCodeMessage, 2, MidiTimeout);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80010a2:	f107 010c 	add.w	r1, r7, #12
 80010a6:	230a      	movs	r3, #10
 80010a8:	2202      	movs	r2, #2
 80010aa:	f007 f881 	bl	80081b0 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh+0x3c>
		mRunningStatus_TX = InvalidType;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_ZN13MidiInterface16sendSongPositionEj>:

/*! \brief Send a Song Position Pointer message.
 \param inBeats    The number of beats since the start of the song.
 */

void MidiInterface::sendSongPosition(unsigned inBeats) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	uint8_t SongPositionMessage[] = { SongPosition, (uint8_t) (inBeats & 0x7f),
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2100      	movs	r1, #0
 80010d8:	460a      	mov	r2, r1
 80010da:	801a      	strh	r2, [r3, #0]
 80010dc:	460a      	mov	r2, r1
 80010de:	709a      	strb	r2, [r3, #2]
 80010e0:	23f2      	movs	r3, #242	@ 0xf2
 80010e2:	733b      	strb	r3, [r7, #12]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010ec:	b2db      	uxtb	r3, r3
			(uint8_t) ((inBeats >> 7) & 0x7f) };
 80010ee:	737b      	strb	r3, [r7, #13]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&serial_out, SongPositionMessage, 3, MidiTimeout);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001104:	f107 010c 	add.w	r1, r7, #12
 8001108:	230a      	movs	r3, #10
 800110a:	2203      	movs	r2, #3
 800110c:	f007 f850 	bl	80081b0 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <_ZN13MidiInterface16sendSongPositionEj+0x5a>
		mRunningStatus_TX = InvalidType;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN13MidiInterface14sendSongSelectEh>:

/*! \brief Send a Song Select message */

void MidiInterface::sendSongSelect(DataByte inSongNumber) {
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	70fb      	strb	r3, [r7, #3]
	uint8_t SongSelectMessage[] =
 8001136:	2300      	movs	r3, #0
 8001138:	81bb      	strh	r3, [r7, #12]
 800113a:	23f3      	movs	r3, #243	@ 0xf3
 800113c:	733b      	strb	r3, [r7, #12]
			{ SongSelect, (uint8_t) (inSongNumber & 0x7f) };
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001144:	b2db      	uxtb	r3, r3
 8001146:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, SongSelectMessage, 2, MidiTimeout);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800114e:	f107 010c 	add.w	r1, r7, #12
 8001152:	230a      	movs	r3, #10
 8001154:	2202      	movs	r2, #2
 8001156:	f007 f82b 	bl	80081b0 <HAL_UART_Transmit>
	if (Settings.UseRunningStatus) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <_ZN13MidiInterface14sendSongSelectEh+0x42>
		mRunningStatus_TX = InvalidType;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZN13MidiInterface12sendRealTimeE8MidiType>:
 \param inType    The available Real Time types are:
 Start, Stop, Continue, Clock, ActiveSensing and SystemReset.
 @see MidiType
 */

void MidiInterface::sendRealTime(MidiType inType) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
	// Do not invalidate Running Status for real-time messages
	// as they can be interleaved within any message.
	uint8_t RealTimeMessage;
	switch (inType) {
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	3bf8      	subs	r3, #248	@ 0xf8
 8001184:	2b07      	cmp	r3, #7
 8001186:	bf8c      	ite	hi
 8001188:	2201      	movhi	r2, #1
 800118a:	2200      	movls	r2, #0
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	2a00      	cmp	r2, #0
 8001190:	d115      	bne.n	80011be <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
 8001192:	22dd      	movs	r2, #221	@ 0xdd
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
	case Start:
	case Stop:
	case Continue:
	case ActiveSensing:
	case SystemReset:
		HAL_UART_Transmit(&serial_out, &RealTimeMessage, 1, MidiTimeout);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80011b0:	f107 010f 	add.w	r1, r7, #15
 80011b4:	230a      	movs	r3, #10
 80011b6:	2201      	movs	r2, #1
 80011b8:	f006 fffa 	bl	80081b0 <HAL_UART_Transmit>
		break;
 80011bc:	e000      	b.n	80011c0 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4c>
	default:
// Invalid Real Time marker
		break;
 80011be:	bf00      	nop
	}
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZN13MidiInterface9getStatusE8MidiTypeh>:
	mCurrentNrpnNumber = 0xffff;
}

/*! @} */ // End of doc group MIDI Output
// -----------------------------------------------------------------------------
StatusByte MidiInterface::getStatus(MidiType inType, Channel inChannel) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
 80011d4:	4613      	mov	r3, r2
 80011d6:	70bb      	strb	r3, [r7, #2]
	return ((byte) inType | ((inChannel - 1) & 0x0f));
 80011d8:	78bb      	ldrb	r3, [r7, #2]
 80011da:	3b01      	subs	r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_ZN13MidiInterface4readEv>:
 If the Thru is enabled and the message matches the filter,
 it is sent back on the MIDI output.
 @see see setInputChannel()
 */

bool MidiInterface::read() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	return read(mInputChannel);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800120a:	4619      	mov	r1, r3
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f805 	bl	800121c <_ZN13MidiInterface4readEh>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZN13MidiInterface4readEh>:

/*! \brief Read messages on a specified channel.
 */

bool MidiInterface::read(Channel inChannel) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
	if (inChannel >= MIDI_CHANNEL_OFF)
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	2b10      	cmp	r3, #16
 800122c:	d901      	bls.n	8001232 <_ZN13MidiInterface4readEh+0x16>
		return false; // MIDI Input disabled.
 800122e:	2300      	movs	r3, #0
 8001230:	e020      	b.n	8001274 <_ZN13MidiInterface4readEh+0x58>

	if (!parse())
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f822 	bl	800127c <_ZN13MidiInterface5parseEv>
 8001238:	4603      	mov	r3, r0
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <_ZN13MidiInterface4readEh+0x2c>
		return false;
 8001244:	2300      	movs	r3, #0
 8001246:	e015      	b.n	8001274 <_ZN13MidiInterface4readEh+0x58>

	handleNullVelocityNoteOnAsNoteOff();
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fa5b 	bl	8001704 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>
	bool channelMatch = inputFilter(inChannel);
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fa78 	bl	8001748 <_ZN13MidiInterface11inputFilterEh>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]

	if (channelMatch) {
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <_ZN13MidiInterface4readEh+0x4c>
		launchCallback();
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fb80 	bl	8001968 <_ZN13MidiInterface14launchCallbackEv>
	}

	thruFilter(inChannel);
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fdb1 	bl	8001dd4 <_ZN13MidiInterface10thruFilterEh>

	return channelMatch;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN13MidiInterface5parseEv>:
		break;
	}
}
// Private method: MIDI parser

bool MidiInterface::parse() {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	byte extracted;
	if (HAL_UART_Receive(&serial_in, &extracted, 1, MidiTimeout) != HAL_OK) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800128a:	f107 010f 	add.w	r1, r7, #15
 800128e:	230a      	movs	r3, #10
 8001290:	2201      	movs	r2, #1
 8001292:	f007 f818 	bl	80082c6 <HAL_UART_Receive>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf14      	ite	ne
 800129c:	2301      	movne	r3, #1
 800129e:	2300      	moveq	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <_ZN13MidiInterface5parseEv+0x2e>
		return false;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e228      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
	// Ignore Undefined




	if (extracted == 0xf9 || extracted == 0xfd) {
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2bf9      	cmp	r3, #249	@ 0xf9
 80012ae:	d002      	beq.n	80012b6 <_ZN13MidiInterface5parseEv+0x3a>
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2bfd      	cmp	r3, #253	@ 0xfd
 80012b4:	d10b      	bne.n	80012ce <_ZN13MidiInterface5parseEv+0x52>
		if (Settings.Use1ByteParsing) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <_ZN13MidiInterface5parseEv+0x48>
			return false;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e21b      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
		} else {
			return parse();
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffd9 	bl	800127c <_ZN13MidiInterface5parseEv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	e216      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
		}
	}

	if (mPendingMessageIndex == 0) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f040 80f9 	bne.w	80014cc <_ZN13MidiInterface5parseEv+0x250>
// Start a new pending message
		mPendingMessage[0] = extracted;
 80012da:	7bfa      	ldrb	r2, [r7, #15]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

// Check for running status first
		if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa9c 	bl	8001826 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 facf 	bl	8001894 <_ZN13MidiInterface16isChannelMessageE8MidiType>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d011      	beq.n	8001320 <_ZN13MidiInterface5parseEv+0xa4>
			// Only these types allow Running Status

			// If the status byte is not received, prepend it
			// to the pending message
			if (extracted < 0x80) {
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0d      	blt.n	8001320 <_ZN13MidiInterface5parseEv+0xa4>
				mPendingMessage[0] = mRunningStatus_RX;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 20d9 	ldrb.w	r2, [r3, #217]	@ 0xd9
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
				mPendingMessage[1] = extracted;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
				mPendingMessageIndex = 1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf





		switch (getTypeFromStatusByte(mPendingMessage[0])) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fa7d 	bl	8001826 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 800132c:	4603      	mov	r3, r0
 800132e:	2bff      	cmp	r3, #255	@ 0xff
 8001330:	dc7b      	bgt.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
 8001332:	2bf1      	cmp	r3, #241	@ 0xf1
 8001334:	da1c      	bge.n	8001370 <_ZN13MidiInterface5parseEv+0xf4>
 8001336:	2bf0      	cmp	r3, #240	@ 0xf0
 8001338:	d06a      	beq.n	8001410 <_ZN13MidiInterface5parseEv+0x194>
 800133a:	2bf0      	cmp	r3, #240	@ 0xf0
 800133c:	dc75      	bgt.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
 800133e:	2be0      	cmp	r3, #224	@ 0xe0
 8001340:	d061      	beq.n	8001406 <_ZN13MidiInterface5parseEv+0x18a>
 8001342:	2be0      	cmp	r3, #224	@ 0xe0
 8001344:	dc71      	bgt.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
 8001346:	2bd0      	cmp	r3, #208	@ 0xd0
 8001348:	d058      	beq.n	80013fc <_ZN13MidiInterface5parseEv+0x180>
 800134a:	2bd0      	cmp	r3, #208	@ 0xd0
 800134c:	dc6d      	bgt.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
 800134e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001350:	d054      	beq.n	80013fc <_ZN13MidiInterface5parseEv+0x180>
 8001352:	2bc0      	cmp	r3, #192	@ 0xc0
 8001354:	dc69      	bgt.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
 8001356:	2bb0      	cmp	r3, #176	@ 0xb0
 8001358:	d055      	beq.n	8001406 <_ZN13MidiInterface5parseEv+0x18a>
 800135a:	2bb0      	cmp	r3, #176	@ 0xb0
 800135c:	dc65      	bgt.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
 800135e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001360:	d051      	beq.n	8001406 <_ZN13MidiInterface5parseEv+0x18a>
 8001362:	2ba0      	cmp	r3, #160	@ 0xa0
 8001364:	dc61      	bgt.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
 8001366:	2b80      	cmp	r3, #128	@ 0x80
 8001368:	d04d      	beq.n	8001406 <_ZN13MidiInterface5parseEv+0x18a>
 800136a:	2b90      	cmp	r3, #144	@ 0x90
 800136c:	d04b      	beq.n	8001406 <_ZN13MidiInterface5parseEv+0x18a>
 800136e:	e05c      	b.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
 8001370:	3bf1      	subs	r3, #241	@ 0xf1
 8001372:	2201      	movs	r2, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	f646 62a0 	movw	r2, #28320	@ 0x6ea0
 800137c:	401a      	ands	r2, r3
 800137e:	2a00      	cmp	r2, #0
 8001380:	bf14      	ite	ne
 8001382:	2201      	movne	r2, #1
 8001384:	2200      	moveq	r2, #0
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	2a00      	cmp	r2, #0
 800138a:	d112      	bne.n	80013b2 <_ZN13MidiInterface5parseEv+0x136>
 800138c:	f003 0205 	and.w	r2, r3, #5
 8001390:	2a00      	cmp	r2, #0
 8001392:	bf14      	ite	ne
 8001394:	2201      	movne	r2, #1
 8001396:	2200      	moveq	r2, #0
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	2a00      	cmp	r2, #0
 800139c:	d12e      	bne.n	80013fc <_ZN13MidiInterface5parseEv+0x180>
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2301      	movne	r3, #1
 80013a8:	2300      	moveq	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d12a      	bne.n	8001406 <_ZN13MidiInterface5parseEv+0x18a>
 80013b0:	e03b      	b.n	800142a <_ZN13MidiInterface5parseEv+0x1ae>
		case Clock:
		case ActiveSensing:
		case SystemReset:
		case TuneRequest:
			// Handle the message type directly here.
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fa34 	bl	8001826 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
			mMessage.channel = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
			mMessage.data1 = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
			mMessage.data2 = 0;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
			mMessage.valid = true;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

			// Do not reset all input attributes, Running Status must remain unchanged.
			// We still need to reset these
			mPendingMessageIndex = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

			return true;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e17f      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
			// 2 bytes messages
		case ProgramChange:
		case AfterTouchChannel:
		case TimeCodeQuarterFrame:
		case SongSelect:
			mPendingMessageExpectedLenght = 2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			break;
 8001404:	e016      	b.n	8001434 <_ZN13MidiInterface5parseEv+0x1b8>
		case NoteOff:
		case ControlChange:
		case PitchBend:
		case AfterTouchPoly:
		case SongPosition:
			mPendingMessageExpectedLenght = 3;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			break;
 800140e:	e011      	b.n	8001434 <_ZN13MidiInterface5parseEv+0x1b8>

		case SystemExclusive:
			// The message can be any lenght
			// between 3 and Settings.SysExMaxSize bytes
			mPendingMessageExpectedLenght = Settings.SysExMaxSize;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2280      	movs	r2, #128	@ 0x80
 8001414:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			mRunningStatus_RX = InvalidType;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
			mMessage.sysexArray[0] = SystemExclusive;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	22f0      	movs	r2, #240	@ 0xf0
 8001424:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
			break;
 8001428:	e004      	b.n	8001434 <_ZN13MidiInterface5parseEv+0x1b8>

		case InvalidType:
		default:
			// This is obviously wrong. Let's get the hell out'a here.
			resetInput();
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f9b1 	bl	8001792 <_ZN13MidiInterface10resetInputEv>
			return false;
 8001430:	2300      	movs	r3, #0
 8001432:	e163      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
			break;
		}

		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8001442:	3b01      	subs	r3, #1
 8001444:	429a      	cmp	r2, r3
 8001446:	db2d      	blt.n	80014a4 <_ZN13MidiInterface5parseEv+0x228>
			// Reception complete
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f9e9 	bl	8001826 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
			mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fa04 	bl	8001872 <_ZN13MidiInterface24getChannelFromStatusByteEh>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
			mMessage.data1 = mPendingMessage[1];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 20dc 	ldrb.w	r2, [r3, #220]	@ 0xdc
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
			mMessage.data2 = 0;			// Completed new message has 1 data byte
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

			mPendingMessageIndex = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			mMessage.valid = true;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
			return true;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e12b      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Waiting for more data
			mPendingMessageIndex++;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
		}

		if (Settings.Use1ByteParsing) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <_ZN13MidiInterface5parseEv+0x246>
			// Message is not complete.
			return false;
 80014be:	2300      	movs	r3, #0
 80014c0:	e11c      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Call the parser recursively
			// to parse the rest of the message.
			return parse();
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff feda 	bl	800127c <_ZN13MidiInterface5parseEv>
 80014c8:	4603      	mov	r3, r0
 80014ca:	e117      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
		}
	} else {
// First, test if this is a status byte
		if (extracted >= 0x80) {
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da67      	bge.n	80015a4 <_ZN13MidiInterface5parseEv+0x328>
			// Reception of status bytes in the middle of an uncompleted message
			// are allowed only for interleaved Real Time message or EOX
			switch (extracted) {
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	3bf7      	subs	r3, #247	@ 0xf7
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d862      	bhi.n	80015a2 <_ZN13MidiInterface5parseEv+0x326>
 80014dc:	a201      	add	r2, pc, #4	@ (adr r2, 80014e4 <_ZN13MidiInterface5parseEv+0x268>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	08001535 	.word	0x08001535
 80014e8:	08001509 	.word	0x08001509
 80014ec:	080015a3 	.word	0x080015a3
 80014f0:	08001509 	.word	0x08001509
 80014f4:	08001509 	.word	0x08001509
 80014f8:	08001509 	.word	0x08001509
 80014fc:	080015a3 	.word	0x080015a3
 8001500:	08001509 	.word	0x08001509
 8001504:	08001509 	.word	0x08001509
// the MIDI class, and recompose the message it was
// interleaved into. Oh, and without killing the running status..
// This is done by leaving the pending message as is,
// it will be completed on next calls.

				mMessage.type = (MidiType) extracted;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
				mMessage.data1 = 0;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
				mMessage.data2 = 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
				mMessage.channel = 0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
				mMessage.valid = true;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				return true;
 8001530:	2301      	movs	r3, #1
 8001532:	e0e3      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>

// End of Exclusive
			case 0xf7:
				if (mMessage.sysexArray[0] == SystemExclusive) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 30ee 	ldrb.w	r3, [r3, #238]	@ 0xee
 800153a:	2bf0      	cmp	r3, #240	@ 0xf0
 800153c:	d12c      	bne.n	8001598 <_ZN13MidiInterface5parseEv+0x31c>
					// Store the last byte (EOX)
					mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	b2d1      	uxtb	r1, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	f882 10df 	strb.w	r1, [r2, #223]	@ 0xdf
 800154e:	461a      	mov	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	22f7      	movs	r2, #247	@ 0xf7
 8001556:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
					mMessage.type = SystemExclusive;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	22f0      	movs	r2, #240	@ 0xf0
 800155e:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9

					// Get length
					mMessage.data1 = mPendingMessageIndex & 0xff;		// LSB
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
					mMessage.data2 = mPendingMessageIndex >> 8;			// MSB
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001574:	121b      	asrs	r3, r3, #8
 8001576:	b2da      	uxtb	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
					mMessage.channel = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
					mMessage.valid = true;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

					resetInput();
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f8ff 	bl	8001792 <_ZN13MidiInterface10resetInputEv>
					return true;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b1      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
				} else {
					// Well well well.. error.
					resetInput();
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f8fa 	bl	8001792 <_ZN13MidiInterface10resetInputEv>
					return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e0ac      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
				}

			default:
				break; // LCOV_EXCL_LINE - Coverage blind spot
 80015a2:	bf00      	nop
			}
		}

// Add extracted data byte to pending message
		if (mPendingMessage[0] == SystemExclusive)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80015aa:	2bf0      	cmp	r3, #240	@ 0xf0
 80015ac:	d109      	bne.n	80015c2 <_ZN13MidiInterface5parseEv+0x346>
			mMessage.sysexArray[mPendingMessageIndex] = extracted;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80015b4:	4619      	mov	r1, r3
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80015c0:	e008      	b.n	80015d4 <_ZN13MidiInterface5parseEv+0x358>
		else
			mPendingMessage[mPendingMessageIndex] = extracted;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80015c8:	4619      	mov	r1, r3
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

// Now we are going to check if we have reached the end of the message
		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80015da:	461a      	mov	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 80015e2:	3b01      	subs	r3, #1
 80015e4:	429a      	cmp	r2, r3
 80015e6:	db75      	blt.n	80016d4 <_ZN13MidiInterface5parseEv+0x458>
			// "FML" case: fall down here with an overflown SysEx..
			// This means we received the last possible data byte that can fit
			// the buffer. If this happens, try increasing Settings.SysExMaxSize.
			if (mPendingMessage[0] == SystemExclusive) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80015ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80015f0:	d104      	bne.n	80015fc <_ZN13MidiInterface5parseEv+0x380>
				resetInput();
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f8cd 	bl	8001792 <_ZN13MidiInterface10resetInputEv>
				return false;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e07f      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
			}

			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f90f 	bl	8001826 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9

			if (isChannelMessage(mMessage.type))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f93b 	bl	8001894 <_ZN13MidiInterface16isChannelMessageE8MidiType>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <_ZN13MidiInterface5parseEv+0x3c0>
				mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f921 	bl	8001872 <_ZN13MidiInterface24getChannelFromStatusByteEh>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 800163a:	e003      	b.n	8001644 <_ZN13MidiInterface5parseEv+0x3c8>
			else
				mMessage.channel = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea

			mMessage.data1 = mPendingMessage[1];
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 20dc 	ldrb.w	r2, [r3, #220]	@ 0xdc
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb

			// Save data2 only if applicable
			mMessage.data2 =
					mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
			mMessage.data2 =
 8001656:	2b03      	cmp	r3, #3
 8001658:	d103      	bne.n	8001662 <_ZN13MidiInterface5parseEv+0x3e6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 8001660:	e000      	b.n	8001664 <_ZN13MidiInterface5parseEv+0x3e8>
 8001662:	2200      	movs	r2, #0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

			// Reset local variables
			mPendingMessageIndex = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

			mMessage.valid = true;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

			// Activate running status (if enabled for the received type)
			switch (mMessage.type) {
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001688:	2be0      	cmp	r3, #224	@ 0xe0
 800168a:	d015      	beq.n	80016b8 <_ZN13MidiInterface5parseEv+0x43c>
 800168c:	2be0      	cmp	r3, #224	@ 0xe0
 800168e:	dc1a      	bgt.n	80016c6 <_ZN13MidiInterface5parseEv+0x44a>
 8001690:	2bd0      	cmp	r3, #208	@ 0xd0
 8001692:	d011      	beq.n	80016b8 <_ZN13MidiInterface5parseEv+0x43c>
 8001694:	2bd0      	cmp	r3, #208	@ 0xd0
 8001696:	dc16      	bgt.n	80016c6 <_ZN13MidiInterface5parseEv+0x44a>
 8001698:	2bc0      	cmp	r3, #192	@ 0xc0
 800169a:	d00d      	beq.n	80016b8 <_ZN13MidiInterface5parseEv+0x43c>
 800169c:	2bc0      	cmp	r3, #192	@ 0xc0
 800169e:	dc12      	bgt.n	80016c6 <_ZN13MidiInterface5parseEv+0x44a>
 80016a0:	2bb0      	cmp	r3, #176	@ 0xb0
 80016a2:	d009      	beq.n	80016b8 <_ZN13MidiInterface5parseEv+0x43c>
 80016a4:	2bb0      	cmp	r3, #176	@ 0xb0
 80016a6:	dc0e      	bgt.n	80016c6 <_ZN13MidiInterface5parseEv+0x44a>
 80016a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80016aa:	d005      	beq.n	80016b8 <_ZN13MidiInterface5parseEv+0x43c>
 80016ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80016ae:	dc0a      	bgt.n	80016c6 <_ZN13MidiInterface5parseEv+0x44a>
 80016b0:	2b80      	cmp	r3, #128	@ 0x80
 80016b2:	d001      	beq.n	80016b8 <_ZN13MidiInterface5parseEv+0x43c>
 80016b4:	2b90      	cmp	r3, #144	@ 0x90
 80016b6:	d106      	bne.n	80016c6 <_ZN13MidiInterface5parseEv+0x44a>
			case ControlChange:
			case ProgramChange:
			case AfterTouchChannel:
			case PitchBend:
// Running status enabled: store it from received message
				mRunningStatus_RX = mPendingMessage[0];
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 20db 	ldrb.w	r2, [r3, #219]	@ 0xdb
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				break;
 80016c4:	e004      	b.n	80016d0 <_ZN13MidiInterface5parseEv+0x454>

			default:
// No running status
				mRunningStatus_RX = InvalidType;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				break;
 80016ce:	bf00      	nop
			}
			return true;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e013      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Then update the index of the pending message.
			mPendingMessageIndex++;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80016da:	3301      	adds	r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf

			if (Settings.Use1ByteParsing) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <_ZN13MidiInterface5parseEv+0x476>
// Message is not complete.
				return false;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e004      	b.n	80016fc <_ZN13MidiInterface5parseEv+0x480>
			} else {
// Call the parser recursively to parse the rest of the message.
				return parse();
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fdc2 	bl	800127c <_ZN13MidiInterface5parseEv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	bf00      	nop
			}
		}
	}
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>:

void MidiInterface::handleNullVelocityNoteOnAsNoteOff() {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
			&& getData2() == 0) {
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00d      	beq.n	8001732 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f851 	bl	80017be <_ZN13MidiInterface7getTypeEv>
 800171c:	4603      	mov	r3, r0
 800171e:	2b90      	cmp	r3, #144	@ 0x90
 8001720:	d107      	bne.n	8001732 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
			&& getData2() == 0) {
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f858 	bl	80017d8 <_ZN13MidiInterface8getData2Ev>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x30>
 8001732:	2300      	movs	r3, #0
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x3c>
		mMessage.type = NoteOff;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
	}
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZN13MidiInterface11inputFilterEh>:

// Private method: check if the received message is on the listened channel

bool MidiInterface::inputFilter(Channel inChannel) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
	// This method handles recognition of channel
	// (to know if the message is destinated to the Arduino)

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 800175a:	b25b      	sxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	da11      	bge.n	8001784 <_ZN13MidiInterface11inputFilterEh+0x3c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001766:	2be0      	cmp	r3, #224	@ 0xe0
 8001768:	d80c      	bhi.n	8001784 <_ZN13MidiInterface11inputFilterEh+0x3c>
// Then we need to know if we listen to it
		if ((mMessage.channel == inChannel)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	429a      	cmp	r2, r3
 8001774:	d002      	beq.n	800177c <_ZN13MidiInterface11inputFilterEh+0x34>
				|| (inChannel == MIDI_CHANNEL_OMNI)) {
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <_ZN13MidiInterface11inputFilterEh+0x38>
			return true;
 800177c:	2301      	movs	r3, #1
 800177e:	e002      	b.n	8001786 <_ZN13MidiInterface11inputFilterEh+0x3e>
		} else {
			// We don't listen to this channel
			return false;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <_ZN13MidiInterface11inputFilterEh+0x3e>
		}
	} else {
// System messages are always received
		return true;
 8001784:	2301      	movs	r3, #1
	}
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_ZN13MidiInterface10resetInputEv>:

// Private method: reset input attributes

void MidiInterface::resetInput() {
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	mPendingMessageIndex = 0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mPendingMessageExpectedLenght = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	mRunningStatus_RX = InvalidType;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_ZN13MidiInterface7getTypeEv>:
/*! \brief Get the last received message's type

 Returns an enumerated type. @see MidiType
 */

MidiType MidiInterface::getType() {
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
	return mMessage.type;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_ZN13MidiInterface8getData2Ev>:
	return mMessage.data1;
}

/*! \brief Get the second data byte of the last received message. */

DataByte MidiInterface::getData2() {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	return mMessage.data2;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_ZN13MidiInterface13getSysExArrayEv>:
/*! \brief Get the System Exclusive byte array.

 @see getSysExArrayLength to get the array's length in bytes.
 */

byte* MidiInterface::getSysExArray() {
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	return mMessage.sysexArray;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	33ee      	adds	r3, #238	@ 0xee
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_ZN13MidiInterface19getSysExArrayLengthEv>:

 It is coded using data1 as LSB and data2 as MSB.
 \return The array's length, in bytes.
 */

unsigned MidiInterface::getSysExArrayLength() {
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	return mMessage.getSysExSize();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	33e8      	adds	r3, #232	@ 0xe8
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fa3c 	bl	8000c94 <_ZN8mMessage12getSysExSizeEv>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZN13MidiInterface21getTypeFromStatusByteEh>:
 This is a utility static method, used internally,
 made public so you can handle MidiTypes more easily.
 */

MidiType MidiInterface::getTypeFromStatusByte(
byte inStatus) {
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
	if ((inStatus < 0x80) || (inStatus == 0xf4) || (inStatus == 0xf5)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da0b      	bge.n	8001850 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2bf4      	cmp	r3, #244	@ 0xf4
 800183c:	d008      	beq.n	8001850 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2bf5      	cmp	r3, #245	@ 0xf5
 8001842:	d005      	beq.n	8001850 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
			|| (inStatus == 0xf9) || (inStatus == 0xfD)) {
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2bf9      	cmp	r3, #249	@ 0xf9
 8001848:	d002      	beq.n	8001850 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2bfd      	cmp	r3, #253	@ 0xfd
 800184e:	d101      	bne.n	8001854 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2e>
// Data bytes and undefined.
		return InvalidType;
 8001850:	2300      	movs	r3, #0
 8001852:	e008      	b.n	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}
	if (inStatus < 0xf0) {
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2bef      	cmp	r3, #239	@ 0xef
 8001858:	d804      	bhi.n	8001864 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x3e>
// Channel message, remove channel nibble.
		return MidiType(inStatus & 0xf0);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f023 030f 	bic.w	r3, r3, #15
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e000      	b.n	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}

	return MidiType(inStatus);
 8001864:	79fb      	ldrb	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_ZN13MidiInterface24getChannelFromStatusByteEh>:

/*! \brief Returns channel in the range 1-16
 */

Channel MidiInterface::getChannelFromStatusByte(
byte inStatus) {
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
	return (inStatus & 0x0f) + 1;
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	b2db      	uxtb	r3, r3
 8001884:	3301      	adds	r3, #1
 8001886:	b2db      	uxtb	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_ZN13MidiInterface16isChannelMessageE8MidiType>:

bool MidiInterface::isChannelMessage(MidiType inType) {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
			|| inType == PitchBend || inType == ProgramChange);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b80      	cmp	r3, #128	@ 0x80
 80018a2:	d011      	beq.n	80018c8 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b90      	cmp	r3, #144	@ 0x90
 80018a8:	d00e      	beq.n	80018c8 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2bb0      	cmp	r3, #176	@ 0xb0
 80018ae:	d00b      	beq.n	80018c8 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80018b4:	d008      	beq.n	80018c8 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2bd0      	cmp	r3, #208	@ 0xd0
 80018ba:	d005      	beq.n	80018c8 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == PitchBend || inType == ProgramChange);
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	2be0      	cmp	r3, #224	@ 0xe0
 80018c0:	d002      	beq.n	80018c8 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80018c6:	d101      	bne.n	80018cc <_ZN13MidiInterface16isChannelMessageE8MidiType+0x38>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <_ZN13MidiInterface16isChannelMessageE8MidiType+0x3a>
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>:

void MidiInterface::setHandleNoteOff(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
	mNoteOffCallback = fptr;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	601a      	str	r2, [r3, #0]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>:
void MidiInterface::setHandleNoteOn(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
	mNoteOnCallback = fptr;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	605a      	str	r2, [r3, #4]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_ZN13MidiInterface14setHandleClockEPFvvE>:
	mSongSelectCallback = fptr;
}
void MidiInterface::setHandleTuneRequest(void (*fptr)(void)) {
	mTuneRequestCallback = fptr;
}
void MidiInterface::setHandleClock(void (*fptr)(void)) {
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
	mClockCallback = fptr;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_ZN13MidiInterface14setHandleStartEPFvvE>:
void MidiInterface::setHandleStart(void (*fptr)(void)) {
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
	mStartCallback = fptr;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_ZN13MidiInterface13setHandleStopEPFvvE>:
void MidiInterface::setHandleContinue(void (*fptr)(void)) {
	mContinueCallback = fptr;
}
void MidiInterface::setHandleStop(void (*fptr)(void)) {
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
	mStopCallback = fptr;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <_ZN13MidiInterface14launchCallbackEv>:
	}
}

/*! @} */ // End of doc group MIDI Callbacks
// Private - launch callback function based on received type.
void MidiInterface::launchCallback() {
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	// The order is mixed to allow frequent messages to trigger their callback faster.
	switch (mMessage.type) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001976:	3b80      	subs	r3, #128	@ 0x80
 8001978:	2b7f      	cmp	r3, #127	@ 0x7f
 800197a:	f200 8201 	bhi.w	8001d80 <_ZN13MidiInterface14launchCallbackEv+0x418>
 800197e:	a201      	add	r2, pc, #4	@ (adr r2, 8001984 <_ZN13MidiInterface14launchCallbackEv+0x1c>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001b85 	.word	0x08001b85
 8001988:	08001d81 	.word	0x08001d81
 800198c:	08001d81 	.word	0x08001d81
 8001990:	08001d81 	.word	0x08001d81
 8001994:	08001d81 	.word	0x08001d81
 8001998:	08001d81 	.word	0x08001d81
 800199c:	08001d81 	.word	0x08001d81
 80019a0:	08001d81 	.word	0x08001d81
 80019a4:	08001d81 	.word	0x08001d81
 80019a8:	08001d81 	.word	0x08001d81
 80019ac:	08001d81 	.word	0x08001d81
 80019b0:	08001d81 	.word	0x08001d81
 80019b4:	08001d81 	.word	0x08001d81
 80019b8:	08001d81 	.word	0x08001d81
 80019bc:	08001d81 	.word	0x08001d81
 80019c0:	08001d81 	.word	0x08001d81
 80019c4:	08001ba9 	.word	0x08001ba9
 80019c8:	08001d81 	.word	0x08001d81
 80019cc:	08001d81 	.word	0x08001d81
 80019d0:	08001d81 	.word	0x08001d81
 80019d4:	08001d81 	.word	0x08001d81
 80019d8:	08001d81 	.word	0x08001d81
 80019dc:	08001d81 	.word	0x08001d81
 80019e0:	08001d81 	.word	0x08001d81
 80019e4:	08001d81 	.word	0x08001d81
 80019e8:	08001d81 	.word	0x08001d81
 80019ec:	08001d81 	.word	0x08001d81
 80019f0:	08001d81 	.word	0x08001d81
 80019f4:	08001d81 	.word	0x08001d81
 80019f8:	08001d81 	.word	0x08001d81
 80019fc:	08001d81 	.word	0x08001d81
 8001a00:	08001d81 	.word	0x08001d81
 8001a04:	08001c81 	.word	0x08001c81
 8001a08:	08001d81 	.word	0x08001d81
 8001a0c:	08001d81 	.word	0x08001d81
 8001a10:	08001d81 	.word	0x08001d81
 8001a14:	08001d81 	.word	0x08001d81
 8001a18:	08001d81 	.word	0x08001d81
 8001a1c:	08001d81 	.word	0x08001d81
 8001a20:	08001d81 	.word	0x08001d81
 8001a24:	08001d81 	.word	0x08001d81
 8001a28:	08001d81 	.word	0x08001d81
 8001a2c:	08001d81 	.word	0x08001d81
 8001a30:	08001d81 	.word	0x08001d81
 8001a34:	08001d81 	.word	0x08001d81
 8001a38:	08001d81 	.word	0x08001d81
 8001a3c:	08001d81 	.word	0x08001d81
 8001a40:	08001d81 	.word	0x08001d81
 8001a44:	08001c27 	.word	0x08001c27
 8001a48:	08001d81 	.word	0x08001d81
 8001a4c:	08001d81 	.word	0x08001d81
 8001a50:	08001d81 	.word	0x08001d81
 8001a54:	08001d81 	.word	0x08001d81
 8001a58:	08001d81 	.word	0x08001d81
 8001a5c:	08001d81 	.word	0x08001d81
 8001a60:	08001d81 	.word	0x08001d81
 8001a64:	08001d81 	.word	0x08001d81
 8001a68:	08001d81 	.word	0x08001d81
 8001a6c:	08001d81 	.word	0x08001d81
 8001a70:	08001d81 	.word	0x08001d81
 8001a74:	08001d81 	.word	0x08001d81
 8001a78:	08001d81 	.word	0x08001d81
 8001a7c:	08001d81 	.word	0x08001d81
 8001a80:	08001d81 	.word	0x08001d81
 8001a84:	08001cc3 	.word	0x08001cc3
 8001a88:	08001d81 	.word	0x08001d81
 8001a8c:	08001d81 	.word	0x08001d81
 8001a90:	08001d81 	.word	0x08001d81
 8001a94:	08001d81 	.word	0x08001d81
 8001a98:	08001d81 	.word	0x08001d81
 8001a9c:	08001d81 	.word	0x08001d81
 8001aa0:	08001d81 	.word	0x08001d81
 8001aa4:	08001d81 	.word	0x08001d81
 8001aa8:	08001d81 	.word	0x08001d81
 8001aac:	08001d81 	.word	0x08001d81
 8001ab0:	08001d81 	.word	0x08001d81
 8001ab4:	08001d81 	.word	0x08001d81
 8001ab8:	08001d81 	.word	0x08001d81
 8001abc:	08001d81 	.word	0x08001d81
 8001ac0:	08001d81 	.word	0x08001d81
 8001ac4:	08001ca5 	.word	0x08001ca5
 8001ac8:	08001d81 	.word	0x08001d81
 8001acc:	08001d81 	.word	0x08001d81
 8001ad0:	08001d81 	.word	0x08001d81
 8001ad4:	08001d81 	.word	0x08001d81
 8001ad8:	08001d81 	.word	0x08001d81
 8001adc:	08001d81 	.word	0x08001d81
 8001ae0:	08001d81 	.word	0x08001d81
 8001ae4:	08001d81 	.word	0x08001d81
 8001ae8:	08001d81 	.word	0x08001d81
 8001aec:	08001d81 	.word	0x08001d81
 8001af0:	08001d81 	.word	0x08001d81
 8001af4:	08001d81 	.word	0x08001d81
 8001af8:	08001d81 	.word	0x08001d81
 8001afc:	08001d81 	.word	0x08001d81
 8001b00:	08001d81 	.word	0x08001d81
 8001b04:	08001c4b 	.word	0x08001c4b
 8001b08:	08001d81 	.word	0x08001d81
 8001b0c:	08001d81 	.word	0x08001d81
 8001b10:	08001d81 	.word	0x08001d81
 8001b14:	08001d81 	.word	0x08001d81
 8001b18:	08001d81 	.word	0x08001d81
 8001b1c:	08001d81 	.word	0x08001d81
 8001b20:	08001d81 	.word	0x08001d81
 8001b24:	08001d81 	.word	0x08001d81
 8001b28:	08001d81 	.word	0x08001d81
 8001b2c:	08001d81 	.word	0x08001d81
 8001b30:	08001d81 	.word	0x08001d81
 8001b34:	08001d81 	.word	0x08001d81
 8001b38:	08001d81 	.word	0x08001d81
 8001b3c:	08001d81 	.word	0x08001d81
 8001b40:	08001d81 	.word	0x08001d81
 8001b44:	08001ce1 	.word	0x08001ce1
 8001b48:	08001d07 	.word	0x08001d07
 8001b4c:	08001d1f 	.word	0x08001d1f
 8001b50:	08001d49 	.word	0x08001d49
 8001b54:	08001d81 	.word	0x08001d81
 8001b58:	08001d81 	.word	0x08001d81
 8001b5c:	08001d61 	.word	0x08001d61
 8001b60:	08001d81 	.word	0x08001d81
 8001b64:	08001bcd 	.word	0x08001bcd
 8001b68:	08001d81 	.word	0x08001d81
 8001b6c:	08001bdf 	.word	0x08001bdf
 8001b70:	08001bf1 	.word	0x08001bf1
 8001b74:	08001c03 	.word	0x08001c03
 8001b78:	08001d81 	.word	0x08001d81
 8001b7c:	08001c15 	.word	0x08001c15
 8001b80:	08001d71 	.word	0x08001d71
	// Notes
	case NoteOff:
		if (mNoteOffCallback != 0)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80fb 	beq.w	8001d84 <_ZN13MidiInterface14launchCallbackEv+0x41c>
			mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001ba4:	4798      	blx	r3
		break;
 8001ba6:	e0ed      	b.n	8001d84 <_ZN13MidiInterface14launchCallbackEv+0x41c>
	case NoteOn:
		if (mNoteOnCallback != 0)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80eb 	beq.w	8001d88 <_ZN13MidiInterface14launchCallbackEv+0x420>
			mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001bc8:	4798      	blx	r3
		break;
 8001bca:	e0dd      	b.n	8001d88 <_ZN13MidiInterface14launchCallbackEv+0x420>

// Real-time messages
	case Clock:
		if (mClockCallback != 0)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80db 	beq.w	8001d8c <_ZN13MidiInterface14launchCallbackEv+0x424>
			mClockCallback();
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4798      	blx	r3
		break;
 8001bdc:	e0d6      	b.n	8001d8c <_ZN13MidiInterface14launchCallbackEv+0x424>
	case Start:
		if (mStartCallback != 0)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80d4 	beq.w	8001d90 <_ZN13MidiInterface14launchCallbackEv+0x428>
			mStartCallback();
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bec:	4798      	blx	r3
		break;
 8001bee:	e0cf      	b.n	8001d90 <_ZN13MidiInterface14launchCallbackEv+0x428>
	case Continue:
		if (mContinueCallback != 0)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80cd 	beq.w	8001d94 <_ZN13MidiInterface14launchCallbackEv+0x42c>
			mContinueCallback();
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfe:	4798      	blx	r3
		break;
 8001c00:	e0c8      	b.n	8001d94 <_ZN13MidiInterface14launchCallbackEv+0x42c>
	case Stop:
		if (mStopCallback != 0)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 80c6 	beq.w	8001d98 <_ZN13MidiInterface14launchCallbackEv+0x430>
			mStopCallback();
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c10:	4798      	blx	r3
		break;
 8001c12:	e0c1      	b.n	8001d98 <_ZN13MidiInterface14launchCallbackEv+0x430>
	case ActiveSensing:
		if (mActiveSensingCallback != 0)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80bf 	beq.w	8001d9c <_ZN13MidiInterface14launchCallbackEv+0x434>
			mActiveSensingCallback();
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4798      	blx	r3
		break;
 8001c24:	e0ba      	b.n	8001d9c <_ZN13MidiInterface14launchCallbackEv+0x434>

// Continuous controllers
	case ControlChange:
		if (mControlChangeCallback != 0)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80b8 	beq.w	8001da0 <_ZN13MidiInterface14launchCallbackEv+0x438>
			mControlChangeCallback(mMessage.channel, mMessage.data1,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001c46:	4798      	blx	r3
					mMessage.data2);
		break;
 8001c48:	e0aa      	b.n	8001da0 <_ZN13MidiInterface14launchCallbackEv+0x438>
	case PitchBend:
		if (mPitchBendCallback != 0)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a8 	beq.w	8001da4 <_ZN13MidiInterface14launchCallbackEv+0x43c>
			mPitchBendCallback(mMessage.channel,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
					(int) ((mMessage.data1 & 0x7f)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001c64:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
							| ((mMessage.data2 & 0x7f) << 7))
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001c6e:	01d2      	lsls	r2, r2, #7
 8001c70:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001c74:	430a      	orrs	r2, r1
			mPitchBendCallback(mMessage.channel,
 8001c76:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4798      	blx	r3
							+ MIDI_PITCHBEND_MIN);
		break;
 8001c7e:	e091      	b.n	8001da4 <_ZN13MidiInterface14launchCallbackEv+0x43c>
	case AfterTouchPoly:
		if (mAfterTouchPolyCallback != 0)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 808f 	beq.w	8001da8 <_ZN13MidiInterface14launchCallbackEv+0x440>
			mAfterTouchPolyCallback(mMessage.channel, mMessage.data1,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001ca0:	4798      	blx	r3
					mMessage.data2);
		break;
 8001ca2:	e081      	b.n	8001da8 <_ZN13MidiInterface14launchCallbackEv+0x440>
	case AfterTouchChannel:
		if (mAfterTouchChannelCallback != 0)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d07f      	beq.n	8001dac <_ZN13MidiInterface14launchCallbackEv+0x444>
			mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4798      	blx	r3
		break;
 8001cc0:	e074      	b.n	8001dac <_ZN13MidiInterface14launchCallbackEv+0x444>

	case ProgramChange:
		if (mProgramChangeCallback != 0)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d072      	beq.n	8001db0 <_ZN13MidiInterface14launchCallbackEv+0x448>
			mProgramChangeCallback(mMessage.channel, mMessage.data1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4798      	blx	r3
		break;
 8001cde:	e067      	b.n	8001db0 <_ZN13MidiInterface14launchCallbackEv+0x448>
	case SystemExclusive:
		if (mSystemExclusiveCallback != 0)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d065      	beq.n	8001db4 <_ZN13MidiInterface14launchCallbackEv+0x44c>
			mSystemExclusiveCallback(mMessage.sysexArray,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69dc      	ldr	r4, [r3, #28]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f103 05ee 	add.w	r5, r3, #238	@ 0xee
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	33e8      	adds	r3, #232	@ 0xe8
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ffcc 	bl	8000c94 <_ZN8mMessage12getSysExSizeEv>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4628      	mov	r0, r5
 8001d02:	47a0      	blx	r4
					mMessage.getSysExSize());
		break;
 8001d04:	e056      	b.n	8001db4 <_ZN13MidiInterface14launchCallbackEv+0x44c>

// Occasional messages
	case TimeCodeQuarterFrame:
		if (mTimeCodeQuarterFrameCallback != 0)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d054      	beq.n	8001db8 <_ZN13MidiInterface14launchCallbackEv+0x450>
			mTimeCodeQuarterFrameCallback(mMessage.data1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4798      	blx	r3
		break;
 8001d1c:	e04c      	b.n	8001db8 <_ZN13MidiInterface14launchCallbackEv+0x450>
	case SongPosition:
		if (mSongPositionCallback != 0)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d04a      	beq.n	8001dbc <_ZN13MidiInterface14launchCallbackEv+0x454>
			mSongPositionCallback(
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
					(mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d30:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001d3a:	01d2      	lsls	r2, r2, #7
 8001d3c:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001d40:	430a      	orrs	r2, r1
			mSongPositionCallback(
 8001d42:	4610      	mov	r0, r2
 8001d44:	4798      	blx	r3
		break;
 8001d46:	e039      	b.n	8001dbc <_ZN13MidiInterface14launchCallbackEv+0x454>
	case SongSelect:
		if (mSongSelectCallback != 0)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d037      	beq.n	8001dc0 <_ZN13MidiInterface14launchCallbackEv+0x458>
			mSongSelectCallback(mMessage.data1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4798      	blx	r3
		break;
 8001d5e:	e02f      	b.n	8001dc0 <_ZN13MidiInterface14launchCallbackEv+0x458>
	case TuneRequest:
		if (mTuneRequestCallback != 0)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d02d      	beq.n	8001dc4 <_ZN13MidiInterface14launchCallbackEv+0x45c>
			mTuneRequestCallback();
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	4798      	blx	r3
		break;
 8001d6e:	e029      	b.n	8001dc4 <_ZN13MidiInterface14launchCallbackEv+0x45c>

	case SystemReset:
		if (mSystemResetCallback != 0)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d027      	beq.n	8001dc8 <_ZN13MidiInterface14launchCallbackEv+0x460>
			mSystemResetCallback();
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7c:	4798      	blx	r3
		break;
 8001d7e:	e023      	b.n	8001dc8 <_ZN13MidiInterface14launchCallbackEv+0x460>

	case InvalidType:
	default:
		break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001d80:	bf00      	nop
 8001d82:	e022      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001d84:	bf00      	nop
 8001d86:	e020      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001d88:	bf00      	nop
 8001d8a:	e01e      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001d8c:	bf00      	nop
 8001d8e:	e01c      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001d90:	bf00      	nop
 8001d92:	e01a      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001d94:	bf00      	nop
 8001d96:	e018      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001d98:	bf00      	nop
 8001d9a:	e016      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001d9c:	bf00      	nop
 8001d9e:	e014      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001da0:	bf00      	nop
 8001da2:	e012      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001da4:	bf00      	nop
 8001da6:	e010      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001da8:	bf00      	nop
 8001daa:	e00e      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dac:	bf00      	nop
 8001dae:	e00c      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001db0:	bf00      	nop
 8001db2:	e00a      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001db4:	bf00      	nop
 8001db6:	e008      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001db8:	bf00      	nop
 8001dba:	e006      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dbc:	bf00      	nop
 8001dbe:	e004      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dc0:	bf00      	nop
 8001dc2:	e002      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dc4:	bf00      	nop
 8001dc6:	e000      	b.n	8001dca <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dc8:	bf00      	nop
	}
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd2:	bf00      	nop

08001dd4 <_ZN13MidiInterface10thruFilterEh>:

void MidiInterface::thruFilter(Channel inChannel) {
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
	// If the feature is disabled, don't do anything.
	if (!mThruActivated || (mThruFilterMode == Thru::Off))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001de6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f083 0301 	eor.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 80da 	bne.w	8001fac <_ZN13MidiInterface10thruFilterEh+0x1d8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80d1 	beq.w	8001fac <_ZN13MidiInterface10thruFilterEh+0x1d8>
		return;

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da65      	bge.n	8001ee2 <_ZN13MidiInterface10thruFilterEh+0x10e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001e1c:	2be0      	cmp	r3, #224	@ 0xe0
 8001e1e:	d860      	bhi.n	8001ee2 <_ZN13MidiInterface10thruFilterEh+0x10e>
		bool filter_condition = ((mMessage.channel == inChannel)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
				|| (inChannel == MIDI_CHANNEL_OMNI));
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d002      	beq.n	8001e32 <_ZN13MidiInterface10thruFilterEh+0x5e>
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <_ZN13MidiInterface10thruFilterEh+0x62>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <_ZN13MidiInterface10thruFilterEh+0x64>
 8001e36:	2300      	movs	r3, #0
		bool filter_condition = ((mMessage.channel == inChannel)
 8001e38:	73fb      	strb	r3, [r7, #15]

		// Now let's pass it to the output
		switch (mThruFilterMode) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001e40:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d02d      	beq.n	8001ea6 <_ZN13MidiInterface10thruFilterEh+0xd2>
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	dc43      	bgt.n	8001ed6 <_ZN13MidiInterface10thruFilterEh+0x102>
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d002      	beq.n	8001e58 <_ZN13MidiInterface10thruFilterEh+0x84>
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d012      	beq.n	8001e7c <_ZN13MidiInterface10thruFilterEh+0xa8>
						mMessage.channel);
			}
			break;

		default:
			break;
 8001e56:	e03e      	b.n	8001ed6 <_ZN13MidiInterface10thruFilterEh+0x102>
			send(mMessage.type, mMessage.data1, mMessage.data2,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff f834 	bl	8000ee2 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001e7a:	e031      	b.n	8001ee0 <_ZN13MidiInterface10thruFilterEh+0x10c>
			if (filter_condition) {
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d02b      	beq.n	8001eda <_ZN13MidiInterface10thruFilterEh+0x106>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff f81f 	bl	8000ee2 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001ea4:	e019      	b.n	8001eda <_ZN13MidiInterface10thruFilterEh+0x106>
			if (!filter_condition) {
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <_ZN13MidiInterface10thruFilterEh+0x10a>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	4603      	mov	r3, r0
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff f807 	bl	8000ee2 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001ed4:	e003      	b.n	8001ede <_ZN13MidiInterface10thruFilterEh+0x10a>
			break;
 8001ed6:	bf00      	nop
 8001ed8:	e06b      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001eda:	bf00      	nop
 8001edc:	e069      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001ede:	bf00      	nop
		}
	} else {
 8001ee0:	e067      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
		// Send the message to the output
		switch (mMessage.type) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001ee8:	2bff      	cmp	r3, #255	@ 0xff
 8001eea:	dc61      	bgt.n	8001fb0 <_ZN13MidiInterface10thruFilterEh+0x1dc>
 8001eec:	2bf2      	cmp	r3, #242	@ 0xf2
 8001eee:	da04      	bge.n	8001efa <_ZN13MidiInterface10thruFilterEh+0x126>
 8001ef0:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ef2:	d02b      	beq.n	8001f4c <_ZN13MidiInterface10thruFilterEh+0x178>
 8001ef4:	2bf1      	cmp	r3, #241	@ 0xf1
 8001ef6:	d04e      	beq.n	8001f96 <_ZN13MidiInterface10thruFilterEh+0x1c2>
		case TimeCodeQuarterFrame:
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
			break;

		default:
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001ef8:	e05a      	b.n	8001fb0 <_ZN13MidiInterface10thruFilterEh+0x1dc>
		switch (mMessage.type) {
 8001efa:	3bf2      	subs	r3, #242	@ 0xf2
 8001efc:	2201      	movs	r2, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001f06:	401a      	ands	r2, r3
 8001f08:	2a00      	cmp	r2, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2201      	movne	r2, #1
 8001f0e:	2200      	moveq	r2, #0
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	2a00      	cmp	r2, #0
 8001f14:	d112      	bne.n	8001f3c <_ZN13MidiInterface10thruFilterEh+0x168>
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	bf14      	ite	ne
 8001f1e:	2201      	movne	r2, #1
 8001f20:	2200      	moveq	r2, #0
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	2a00      	cmp	r2, #0
 8001f26:	d128      	bne.n	8001f7a <_ZN13MidiInterface10thruFilterEh+0x1a6>
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d117      	bne.n	8001f6a <_ZN13MidiInterface10thruFilterEh+0x196>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001f3a:	e039      	b.n	8001fb0 <_ZN13MidiInterface10thruFilterEh+0x1dc>
			sendRealTime(mMessage.type);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff f915 	bl	8001174 <_ZN13MidiInterface12sendRealTimeE8MidiType>
			break;
 8001f4a:	e032      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSysEx(getSysExArrayLength(), getSysExArray(), true);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fc5c 	bl	800180a <_ZN13MidiInterface19getSysExArrayLengthEv>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b2dc      	uxtb	r4, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fc4b 	bl	80017f2 <_ZN13MidiInterface13getSysExArrayEv>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4621      	mov	r1, r4
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff f830 	bl	8000fc8 <_ZN13MidiInterface9sendSysExEhPhb>
			break;
 8001f68:	e023      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongSelect(mMessage.data1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff f8d9 	bl	800112a <_ZN13MidiInterface14sendSongSelectEh>
			break;
 8001f78:	e01b      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongPosition(mMessage.data1 | ((unsigned) mMessage.data2 << 7));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001f80:	461a      	mov	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001f88:	01db      	lsls	r3, r3, #7
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff f89a 	bl	80010c8 <_ZN13MidiInterface16sendSongPositionEj>
			break;
 8001f94:	e00d      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 10eb 	ldrb.w	r1, [r3, #235]	@ 0xeb
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff f84e 	bl	8001046 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>
			break;
 8001faa:	e002      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
		return;
 8001fac:	bf00      	nop
 8001fae:	e000      	b.n	8001fb2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001fb0:	bf00      	nop
		}
	}
}
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}

08001fb8 <_Z12Handle_Clockv>:
uint32_t pitch4_CV;
uint8_t first_note;
uint8_t second_note;
uint8_t third_note;
uint8_t fourth_note;
void Handle_Clock() {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	i++;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <_Z12Handle_Clockv+0x2c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a08      	ldr	r2, [pc, #32]	@ (8001fe4 <_Z12Handle_Clockv+0x2c>)
 8001fc4:	6013      	str	r3, [r2, #0]
	if (i / 12 == 1) {
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <_Z12Handle_Clockv+0x2c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3b0c      	subs	r3, #12
 8001fcc:	2b0b      	cmp	r3, #11
 8001fce:	d806      	bhi.n	8001fde <_Z12Handle_Clockv+0x26>
		HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <_Z12Handle_Clockv+0x30>)
 8001fd4:	f002 fe3f 	bl	8004c56 <HAL_GPIO_TogglePin>
		i = 0;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	@ (8001fe4 <_Z12Handle_Clockv+0x2c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
	}
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000028 	.word	0x20000028
 8001fe8:	40020c00 	.word	0x40020c00

08001fec <_Z12Handle_Startv>:

void Handle_Start() {
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	i = 0;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <_Z12Handle_Startv+0x14>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_SET);
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000028 	.word	0x20000028

08002004 <_Z11Handle_Stopv>:
void Handle_Stop() {
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_RESET);
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	0000      	movs	r0, r0
 8002014:	0000      	movs	r0, r0
	...

08002018 <_Z13Handle_NoteOnhhh>:

// Callback function for when a Note On is received


// Callback function for when a Note Off is received
void Handle_NoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	@ 0x30
 800201c:	af02      	add	r7, sp, #8
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	460b      	mov	r3, r1
 8002024:	71bb      	strb	r3, [r7, #6]
 8002026:	4613      	mov	r3, r2
 8002028:	717b      	strb	r3, [r7, #5]
    uint32_t pitch_CV = (uint32_t)((note * 0.0833333333 * X) / (3.3 / 4095));  // Calculate pitch CV from MIDI note
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa1d 	bl	800046c <__aeabi_i2d>
 8002032:	a385      	add	r3, pc, #532	@ (adr r3, 8002248 <_Z13Handle_NoteOnhhh+0x230>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe fa82 	bl	8000540 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b6d      	ldr	r3, [pc, #436]	@ (8002200 <_Z13Handle_NoteOnhhh+0x1e8>)
 800204a:	f7fe fa79 	bl	8000540 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	a364      	add	r3, pc, #400	@ (adr r3, 80021e8 <_Z13Handle_NoteOnhhh+0x1d0>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe fb9a 	bl	8000794 <__aeabi_ddiv>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f7fe fc7c 	bl	8000964 <__aeabi_d2uiz>
 800206c:	4603      	mov	r3, r0
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t velo_CV = (uint32_t)((velocity / 127.0) * 4095);
 8002070:	797b      	ldrb	r3, [r7, #5]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe f9fa 	bl	800046c <__aeabi_i2d>
 8002078:	a35d      	add	r3, pc, #372	@ (adr r3, 80021f0 <_Z13Handle_NoteOnhhh+0x1d8>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe fb89 	bl	8000794 <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	a35b      	add	r3, pc, #364	@ (adr r3, 80021f8 <_Z13Handle_NoteOnhhh+0x1e0>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fa56 	bl	8000540 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fc62 	bl	8000964 <__aeabi_d2uiz>
 80020a0:	4603      	mov	r3, r0
 80020a2:	623b      	str	r3, [r7, #32]
    ChannelConfig config;
    ChannelConfig_2 config2;

    if (!first_note_active) {
 80020a4:	4b57      	ldr	r3, [pc, #348]	@ (8002204 <_Z13Handle_NoteOnhhh+0x1ec>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01a      	beq.n	80020e8 <_Z13Handle_NoteOnhhh+0xd0>
        pitch1_CV = pitch_CV;
 80020b2:	4a55      	ldr	r2, [pc, #340]	@ (8002208 <_Z13Handle_NoteOnhhh+0x1f0>)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	6013      	str	r3, [r2, #0]

        ADSR_SetGateSignal(&envelopes[0], 1);
 80020b8:	2101      	movs	r1, #1
 80020ba:	4854      	ldr	r0, [pc, #336]	@ (800220c <_Z13Handle_NoteOnhhh+0x1f4>)
 80020bc:	f000 fa06 	bl	80024cc <ADSR_SetGateSignal>
        config2.val[0] = pitch1_CV; // 12-bit DAC value for channel A
 80020c0:	4b51      	ldr	r3, [pc, #324]	@ (8002208 <_Z13Handle_NoteOnhhh+0x1f0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	817b      	strh	r3, [r7, #10]
        config2.val[1] = velo_CV;  // 12-bit DAC value for channel B
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	81bb      	strh	r3, [r7, #12]
        DACx61FW(&hi2c1, config2);
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d4:	484e      	ldr	r0, [pc, #312]	@ (8002210 <_Z13Handle_NoteOnhhh+0x1f8>)
 80020d6:	f001 f84d 	bl	8003174 <DACx61FW>
//        DACx61SW(&hi2c1, config2, 0);
//        DACx61SW(&hi2c1, config2, 1);

//        HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PIN_SET);  // Indicate first note is on via gate3_Pin
        first_note_active = true;  // First note is now active
 80020da:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <_Z13Handle_NoteOnhhh+0x1ec>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
        first_note = note;  // Store the note value
 80020e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002214 <_Z13Handle_NoteOnhhh+0x1fc>)
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	7013      	strb	r3, [r2, #0]

//        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_SET);  // Indicate fourth note is on via gate4_Pin
        fourth_note_active = true;  // Fourth note is now active
        fourth_note = note;  // Store the note value
    }
}
 80020e6:	e078      	b.n	80021da <_Z13Handle_NoteOnhhh+0x1c2>
    } else if (!second_note_active) {
 80020e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002218 <_Z13Handle_NoteOnhhh+0x200>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01a      	beq.n	800212c <_Z13Handle_NoteOnhhh+0x114>
        pitch2_CV = pitch_CV;
 80020f6:	4a49      	ldr	r2, [pc, #292]	@ (800221c <_Z13Handle_NoteOnhhh+0x204>)
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	6013      	str	r3, [r2, #0]
        ADSR_SetGateSignal(&envelopes[1], 1);
 80020fc:	2101      	movs	r1, #1
 80020fe:	4848      	ldr	r0, [pc, #288]	@ (8002220 <_Z13Handle_NoteOnhhh+0x208>)
 8002100:	f000 f9e4 	bl	80024cc <ADSR_SetGateSignal>
        config2.val[2] = pitch2_CV; // 12-bit DAC value for channel A
 8002104:	4b45      	ldr	r3, [pc, #276]	@ (800221c <_Z13Handle_NoteOnhhh+0x204>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	81fb      	strh	r3, [r7, #14]
        config2.val[3] = velo_CV;  // 12-bit DAC value for channel B
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	b29b      	uxth	r3, r3
 8002110:	823b      	strh	r3, [r7, #16]
        DACx61FW(&hi2c1, config2);
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002118:	483d      	ldr	r0, [pc, #244]	@ (8002210 <_Z13Handle_NoteOnhhh+0x1f8>)
 800211a:	f001 f82b 	bl	8003174 <DACx61FW>
        second_note_active = true;  // Second note is now active
 800211e:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <_Z13Handle_NoteOnhhh+0x200>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
        second_note = note;  // Store the note value
 8002124:	4a3f      	ldr	r2, [pc, #252]	@ (8002224 <_Z13Handle_NoteOnhhh+0x20c>)
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	7013      	strb	r3, [r2, #0]
}
 800212a:	e056      	b.n	80021da <_Z13Handle_NoteOnhhh+0x1c2>
    } else if (!third_note_active) {
 800212c:	4b3e      	ldr	r3, [pc, #248]	@ (8002228 <_Z13Handle_NoteOnhhh+0x210>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f083 0301 	eor.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d024      	beq.n	8002184 <_Z13Handle_NoteOnhhh+0x16c>
        pitch3_CV = pitch_CV;
 800213a:	4a3c      	ldr	r2, [pc, #240]	@ (800222c <_Z13Handle_NoteOnhhh+0x214>)
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	6013      	str	r3, [r2, #0]
        ADSR_SetGateSignal(&envelopes[2], 1);
 8002140:	2101      	movs	r1, #1
 8002142:	483b      	ldr	r0, [pc, #236]	@ (8002230 <_Z13Handle_NoteOnhhh+0x218>)
 8002144:	f000 f9c2 	bl	80024cc <ADSR_SetGateSignal>
        config.val[2] = pitch3_CV; // 12-bit DAC value for channel A
 8002148:	4b38      	ldr	r3, [pc, #224]	@ (800222c <_Z13Handle_NoteOnhhh+0x214>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	837b      	strh	r3, [r7, #26]
        config2.val[2] = velo_CV;  // 12-bit DAC value for channel B
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	b29b      	uxth	r3, r3
 8002154:	81fb      	strh	r3, [r7, #14]
        DACx60SW(&hi2c1, config, 2);
 8002156:	2302      	movs	r3, #2
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002160:	482b      	ldr	r0, [pc, #172]	@ (8002210 <_Z13Handle_NoteOnhhh+0x1f8>)
 8002162:	f001 f852 	bl	800320a <DACx60SW>
        DACx61SW(&hi2c1, config2, 2);
 8002166:	2302      	movs	r3, #2
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002170:	4827      	ldr	r0, [pc, #156]	@ (8002210 <_Z13Handle_NoteOnhhh+0x1f8>)
 8002172:	f001 f8a4 	bl	80032be <DACx61SW>
        third_note_active = true;  // Third note is now active
 8002176:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <_Z13Handle_NoteOnhhh+0x210>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
        third_note = note;  // Store the note value
 800217c:	4a2d      	ldr	r2, [pc, #180]	@ (8002234 <_Z13Handle_NoteOnhhh+0x21c>)
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	7013      	strb	r3, [r2, #0]
}
 8002182:	e02a      	b.n	80021da <_Z13Handle_NoteOnhhh+0x1c2>
    } else if (!fourth_note_active) {
 8002184:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <_Z13Handle_NoteOnhhh+0x220>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d023      	beq.n	80021da <_Z13Handle_NoteOnhhh+0x1c2>
        pitch4_CV = pitch_CV;
 8002192:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <_Z13Handle_NoteOnhhh+0x224>)
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	6013      	str	r3, [r2, #0]
        ADSR_SetGateSignal(&envelopes[3], 1);
 8002198:	2101      	movs	r1, #1
 800219a:	4829      	ldr	r0, [pc, #164]	@ (8002240 <_Z13Handle_NoteOnhhh+0x228>)
 800219c:	f000 f996 	bl	80024cc <ADSR_SetGateSignal>
        config.val[3] = pitch4_CV; // 12-bit DAC value for channel A
 80021a0:	4b26      	ldr	r3, [pc, #152]	@ (800223c <_Z13Handle_NoteOnhhh+0x224>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	83bb      	strh	r3, [r7, #28]
        config2.val[3] = velo_CV;  // 12-bit DAC value for channel B
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	823b      	strh	r3, [r7, #16]
        DACx60SW(&hi2c1, config, 3);
 80021ae:	2303      	movs	r3, #3
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	4815      	ldr	r0, [pc, #84]	@ (8002210 <_Z13Handle_NoteOnhhh+0x1f8>)
 80021ba:	f001 f826 	bl	800320a <DACx60SW>
        DACx61SW(&hi2c1, config2, 3);
 80021be:	2303      	movs	r3, #3
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c8:	4811      	ldr	r0, [pc, #68]	@ (8002210 <_Z13Handle_NoteOnhhh+0x1f8>)
 80021ca:	f001 f878 	bl	80032be <DACx61SW>
        fourth_note_active = true;  // Fourth note is now active
 80021ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <_Z13Handle_NoteOnhhh+0x220>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
        fourth_note = note;  // Store the note value
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <_Z13Handle_NoteOnhhh+0x22c>)
 80021d6:	79bb      	ldrb	r3, [r7, #6]
 80021d8:	7013      	strb	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	3728      	adds	r7, #40	@ 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	f3af 8000 	nop.w
 80021e8:	e734d9b4 	.word	0xe734d9b4
 80021ec:	3f4a680c 	.word	0x3f4a680c
 80021f0:	00000000 	.word	0x00000000
 80021f4:	405fc000 	.word	0x405fc000
 80021f8:	00000000 	.word	0x00000000
 80021fc:	40affe00 	.word	0x40affe00
 8002200:	3fd00000 	.word	0x3fd00000
 8002204:	2000002c 	.word	0x2000002c
 8002208:	20000030 	.word	0x20000030
 800220c:	200003b0 	.word	0x200003b0
 8002210:	20000058 	.word	0x20000058
 8002214:	20000040 	.word	0x20000040
 8002218:	2000002d 	.word	0x2000002d
 800221c:	20000034 	.word	0x20000034
 8002220:	200003cc 	.word	0x200003cc
 8002224:	20000041 	.word	0x20000041
 8002228:	2000002e 	.word	0x2000002e
 800222c:	20000038 	.word	0x20000038
 8002230:	200003e8 	.word	0x200003e8
 8002234:	20000042 	.word	0x20000042
 8002238:	2000002f 	.word	0x2000002f
 800223c:	2000003c 	.word	0x2000003c
 8002240:	20000404 	.word	0x20000404
 8002244:	20000043 	.word	0x20000043
 8002248:	5530aed6 	.word	0x5530aed6
 800224c:	3fb55555 	.word	0x3fb55555

08002250 <_Z14Handle_NoteOffhhh>:

void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
 800225a:	460b      	mov	r3, r1
 800225c:	71bb      	strb	r3, [r7, #6]
 800225e:	4613      	mov	r3, r2
 8002260:	717b      	strb	r3, [r7, #5]
    if (first_note_active && note == first_note) {
 8002262:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <_Z14Handle_NoteOffhhh+0xa4>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <_Z14Handle_NoteOffhhh+0x34>
 800226a:	4b23      	ldr	r3, [pc, #140]	@ (80022f8 <_Z14Handle_NoteOffhhh+0xa8>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	79ba      	ldrb	r2, [r7, #6]
 8002270:	429a      	cmp	r2, r3
 8002272:	d107      	bne.n	8002284 <_Z14Handle_NoteOffhhh+0x34>
        ADSR_SetGateSignal(&envelopes[0], 0);
 8002274:	2100      	movs	r1, #0
 8002276:	4821      	ldr	r0, [pc, #132]	@ (80022fc <_Z14Handle_NoteOffhhh+0xac>)
 8002278:	f000 f928 	bl	80024cc <ADSR_SetGateSignal>

//        HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PIN_RESET);  // PB2 Turn off gate for first note
        first_note_active = false;  // First note is no longer active
 800227c:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <_Z14Handle_NoteOffhhh+0xa4>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e032      	b.n	80022ea <_Z14Handle_NoteOffhhh+0x9a>
    } else if (second_note_active && note == second_note) {
 8002284:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <_Z14Handle_NoteOffhhh+0xb0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <_Z14Handle_NoteOffhhh+0x56>
 800228c:	4b1d      	ldr	r3, [pc, #116]	@ (8002304 <_Z14Handle_NoteOffhhh+0xb4>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	79ba      	ldrb	r2, [r7, #6]
 8002292:	429a      	cmp	r2, r3
 8002294:	d107      	bne.n	80022a6 <_Z14Handle_NoteOffhhh+0x56>
        ADSR_SetGateSignal(&envelopes[1], 0);
 8002296:	2100      	movs	r1, #0
 8002298:	481b      	ldr	r0, [pc, #108]	@ (8002308 <_Z14Handle_NoteOffhhh+0xb8>)
 800229a:	f000 f917 	bl	80024cc <ADSR_SetGateSignal>
//       HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PIN_RESET);  // Turn off gate for second note
        second_note_active = false;  // Second note is no longer active
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <_Z14Handle_NoteOffhhh+0xb0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e021      	b.n	80022ea <_Z14Handle_NoteOffhhh+0x9a>
    } else if (third_note_active && note == third_note) {
 80022a6:	4b19      	ldr	r3, [pc, #100]	@ (800230c <_Z14Handle_NoteOffhhh+0xbc>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <_Z14Handle_NoteOffhhh+0x78>
 80022ae:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <_Z14Handle_NoteOffhhh+0xc0>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	79ba      	ldrb	r2, [r7, #6]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d107      	bne.n	80022c8 <_Z14Handle_NoteOffhhh+0x78>
        ADSR_SetGateSignal(&envelopes[2], 0);
 80022b8:	2100      	movs	r1, #0
 80022ba:	4816      	ldr	r0, [pc, #88]	@ (8002314 <_Z14Handle_NoteOffhhh+0xc4>)
 80022bc:	f000 f906 	bl	80024cc <ADSR_SetGateSignal>
//        HAL_GPIO_WritePin(GPIOB, gate3_Pin, GPIO_PIN_RESET);  // Turn off gate for third note
        third_note_active = false;  // Third note is no longer active
 80022c0:	4b12      	ldr	r3, [pc, #72]	@ (800230c <_Z14Handle_NoteOffhhh+0xbc>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e010      	b.n	80022ea <_Z14Handle_NoteOffhhh+0x9a>
    } else if (fourth_note_active && note == fourth_note) {
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <_Z14Handle_NoteOffhhh+0xc8>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00c      	beq.n	80022ea <_Z14Handle_NoteOffhhh+0x9a>
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <_Z14Handle_NoteOffhhh+0xcc>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	79ba      	ldrb	r2, [r7, #6]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d107      	bne.n	80022ea <_Z14Handle_NoteOffhhh+0x9a>
        ADSR_SetGateSignal(&envelopes[3], 0);
 80022da:	2100      	movs	r1, #0
 80022dc:	4810      	ldr	r0, [pc, #64]	@ (8002320 <_Z14Handle_NoteOffhhh+0xd0>)
 80022de:	f000 f8f5 	bl	80024cc <ADSR_SetGateSignal>
//        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_RESET);  // Turn off gate for fourth note
        fourth_note_active = false;  // Fourth note is no longer active
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <_Z14Handle_NoteOffhhh+0xc8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
    }
}
 80022e8:	e7ff      	b.n	80022ea <_Z14Handle_NoteOffhhh+0x9a>
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000002c 	.word	0x2000002c
 80022f8:	20000040 	.word	0x20000040
 80022fc:	200003b0 	.word	0x200003b0
 8002300:	2000002d 	.word	0x2000002d
 8002304:	20000041 	.word	0x20000041
 8002308:	200003cc 	.word	0x200003cc
 800230c:	2000002e 	.word	0x2000002e
 8002310:	20000042 	.word	0x20000042
 8002314:	200003e8 	.word	0x200003e8
 8002318:	2000002f 	.word	0x2000002f
 800231c:	20000043 	.word	0x20000043
 8002320:	20000404 	.word	0x20000404

08002324 <ADSR_Init>:
//    adsr->gate_signal = 0;
//    adsr->amplitude = 1;      // Default amplitude is 1.0 (full volume)
//}
//extern float lookup_t[128];

void ADSR_Init(ADSR_t *adsr, int num_envelopes) {
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < num_envelopes; i++) {
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e03c      	b.n	80023ae <ADSR_Init+0x8a>
        adsr[i].attack_rate = attack_rate_lookup[64];
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	4a1f      	ldr	r2, [pc, #124]	@ (80023c4 <ADSR_Init+0xa0>)
 8002346:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 800234a:	601a      	str	r2, [r3, #0]
        adsr[i].decay_rate = attack_rate_lookup[64];
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <ADSR_Init+0xa0>)
 800235e:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8002362:	605a      	str	r2, [r3, #4]
        adsr[i].sustain_level = 0.5f;
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002378:	609a      	str	r2, [r3, #8]
        adsr[i].release_rate = attack_rate_lookup[64];
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a0e      	ldr	r2, [pc, #56]	@ (80023c4 <ADSR_Init+0xa0>)
 800238c:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8002390:	60da      	str	r2, [r3, #12]
        adsr[i].amplitude = 1.0f;
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	461a      	mov	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023a6:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < num_envelopes; i++) {
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dbbe      	blt.n	8002334 <ADSR_Init+0x10>
    }
}
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	080092b8 	.word	0x080092b8

080023c8 <ADSR_UpdateEnvelope>:
//            break;
//    }
//}}}

// Updates the envelope for a specific ADSR instance
void ADSR_UpdateEnvelope(ADSR_t *adsr) {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

    switch (adsr->state) {
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7e1b      	ldrb	r3, [r3, #24]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d871      	bhi.n	80024be <ADSR_UpdateEnvelope+0xf6>
 80023da:	a201      	add	r2, pc, #4	@ (adr r2, 80023e0 <ADSR_UpdateEnvelope+0x18>)
 80023dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e0:	080023f5 	.word	0x080023f5
 80023e4:	08002431 	.word	0x08002431
 80023e8:	0800246f 	.word	0x0800246f
 80023ec:	08002481 	.word	0x08002481
 80023f0:	080024b9 	.word	0x080024b9
        case ATTACK:
            adsr->envelope_value += adsr->attack_rate;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value >= 1.0f) {
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	da00      	bge.n	8002420 <ADSR_UpdateEnvelope+0x58>
                adsr->envelope_value = 1.0f;
                adsr->state = DECAY;
            }
            break;
 800241e:	e04e      	b.n	80024be <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 1.0f;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002426:	615a      	str	r2, [r3, #20]
                adsr->state = DECAY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	761a      	strb	r2, [r3, #24]
            break;
 800242e:	e046      	b.n	80024be <ADSR_UpdateEnvelope+0xf6>

        case DECAY:
            adsr->envelope_value -= adsr->decay_rate;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	ed93 7a05 	vldr	s14, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	edd3 7a01 	vldr	s15, [r3, #4]
 800243c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= adsr->sustain_level) {
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	ed93 7a05 	vldr	s14, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	d900      	bls.n	800245e <ADSR_UpdateEnvelope+0x96>
                adsr->envelope_value = adsr->sustain_level;
                adsr->state = SUSTAIN;
            }
            break;
 800245c:	e02f      	b.n	80024be <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = adsr->sustain_level;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	615a      	str	r2, [r3, #20]
                adsr->state = SUSTAIN;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	761a      	strb	r2, [r3, #24]
            break;
 800246c:	e027      	b.n	80024be <ADSR_UpdateEnvelope+0xf6>

        case SUSTAIN:
            if (!adsr->gate_signal) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7e5b      	ldrb	r3, [r3, #25]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d121      	bne.n	80024bc <ADSR_UpdateEnvelope+0xf4>
                adsr->state = RELEASE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	761a      	strb	r2, [r3, #24]
            }
            break;
 800247e:	e01d      	b.n	80024bc <ADSR_UpdateEnvelope+0xf4>

        case RELEASE:
            adsr->envelope_value -= adsr->release_rate;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	ed93 7a05 	vldr	s14, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	edd3 7a03 	vldr	s15, [r3, #12]
 800248c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= 0.0f) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	edd3 7a05 	vldr	s15, [r3, #20]
 800249c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d900      	bls.n	80024a8 <ADSR_UpdateEnvelope+0xe0>
                adsr->envelope_value = 0.0f;
                adsr->state = IDLE;
            }
            break;
 80024a6:	e00a      	b.n	80024be <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 0.0f;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
                adsr->state = IDLE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2204      	movs	r2, #4
 80024b4:	761a      	strb	r2, [r3, #24]
            break;
 80024b6:	e002      	b.n	80024be <ADSR_UpdateEnvelope+0xf6>

        case IDLE:
            // Do nothing
            break;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <ADSR_UpdateEnvelope+0xf6>
            break;
 80024bc:	bf00      	nop
    }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <ADSR_SetGateSignal>:

// Sets the gate signal for a specific ADSR instance
void ADSR_SetGateSignal(ADSR_t *adsr, uint8_t gate_signal_value) {
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
    adsr->gate_signal = gate_signal_value;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	765a      	strb	r2, [r3, #25]
    if (adsr->gate_signal) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7e5b      	ldrb	r3, [r3, #25]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <ADSR_SetGateSignal+0x24>
        adsr->state = ATTACK;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	761a      	strb	r2, [r3, #24]
    } else {
        adsr->state = RELEASE;
    }
}
 80024ee:	e002      	b.n	80024f6 <ADSR_SetGateSignal+0x2a>
        adsr->state = RELEASE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2203      	movs	r2, #3
 80024f4:	761a      	strb	r2, [r3, #24]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <ADSR_GetEnvelopeValue>:
    }
    adsr->amplitude = amplitude;
}

// Returns the envelope value (scaled by the amplitude) for a specific ADSR instance
float ADSR_GetEnvelopeValue(const ADSR_t *adsr) {
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
    return adsr->envelope_value * adsr->amplitude;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	edd3 7a04 	vldr	s15, [r3, #16]
 8002516:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800251a:	eeb0 0a67 	vmov.f32	s0, s15
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_Z21envelope_to_dac_valuef>:
//void Handle_NoteOn(uint8_t status, uint8_t data1, uint8_t data2);
//void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity);



uint32_t envelope_to_dac_value(float envelope_value) {
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(envelope_value * 4095.0f);
 8002532:	edd7 7a01 	vldr	s15, [r7, #4]
 8002536:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002554 <_Z21envelope_to_dac_valuef+0x2c>
 800253a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002542:	ee17 3a90 	vmov	r3, s15
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	457ff000 	.word	0x457ff000

08002558 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
//    if (htim->Instance == TIM13) {
//        update_adsr_flag = true;  // Set the flag to update ADSR parameters
// //       oled("ADSR Flag = TRUE");
//    }

    if (htim->Instance == TIM7) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a23      	ldr	r2, [pc, #140]	@ (80025f4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d13f      	bne.n	80025ea <HAL_TIM_PeriodElapsedCallback+0x92>
/*  ADSR kreivių formavimas naudojant laikmatį.  */
        // Update the first envelope
        ADSR_UpdateEnvelope(&envelopes[0]);
 800256a:	4823      	ldr	r0, [pc, #140]	@ (80025f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800256c:	f7ff ff2c 	bl	80023c8 <ADSR_UpdateEnvelope>
        uint32_t dac_value1 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[0]));
 8002570:	4821      	ldr	r0, [pc, #132]	@ (80025f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002572:	f7ff ffc6 	bl	8002502 <ADSR_GetEnvelopeValue>
 8002576:	eef0 7a40 	vmov.f32	s15, s0
 800257a:	eeb0 0a67 	vmov.f32	s0, s15
 800257e:	f7ff ffd3 	bl	8002528 <_Z21envelope_to_dac_valuef>
 8002582:	6178      	str	r0, [r7, #20]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value1);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	481c      	ldr	r0, [pc, #112]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800258c:	f001 fcf6 	bl	8003f7c <HAL_DAC_SetValue>
        // Update the second envelope
        ADSR_UpdateEnvelope(&envelopes[1]);
 8002590:	481b      	ldr	r0, [pc, #108]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002592:	f7ff ff19 	bl	80023c8 <ADSR_UpdateEnvelope>
        uint32_t dac_value2 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[1]));
 8002596:	481a      	ldr	r0, [pc, #104]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002598:	f7ff ffb3 	bl	8002502 <ADSR_GetEnvelopeValue>
 800259c:	eef0 7a40 	vmov.f32	s15, s0
 80025a0:	eeb0 0a67 	vmov.f32	s0, s15
 80025a4:	f7ff ffc0 	bl	8002528 <_Z21envelope_to_dac_valuef>
 80025a8:	6138      	str	r0, [r7, #16]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value2);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2110      	movs	r1, #16
 80025b0:	4812      	ldr	r0, [pc, #72]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80025b2:	f001 fce3 	bl	8003f7c <HAL_DAC_SetValue>
        //
        ADSR_UpdateEnvelope(&envelopes[2]);
 80025b6:	4813      	ldr	r0, [pc, #76]	@ (8002604 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80025b8:	f7ff ff06 	bl	80023c8 <ADSR_UpdateEnvelope>
        uint32_t dac_value3 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[2]));
 80025bc:	4811      	ldr	r0, [pc, #68]	@ (8002604 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80025be:	f7ff ffa0 	bl	8002502 <ADSR_GetEnvelopeValue>
 80025c2:	eef0 7a40 	vmov.f32	s15, s0
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ca:	f7ff ffad 	bl	8002528 <_Z21envelope_to_dac_valuef>
 80025ce:	60f8      	str	r0, [r7, #12]
        //
        ADSR_UpdateEnvelope(&envelopes[3]);
 80025d0:	480d      	ldr	r0, [pc, #52]	@ (8002608 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80025d2:	f7ff fef9 	bl	80023c8 <ADSR_UpdateEnvelope>
        uint32_t dac_value4 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[3]));
 80025d6:	480c      	ldr	r0, [pc, #48]	@ (8002608 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80025d8:	f7ff ff93 	bl	8002502 <ADSR_GetEnvelopeValue>
 80025dc:	eef0 7a40 	vmov.f32	s15, s0
 80025e0:	eeb0 0a67 	vmov.f32	s0, s15
 80025e4:	f7ff ffa0 	bl	8002528 <_Z21envelope_to_dac_valuef>
 80025e8:	60b8      	str	r0, [r7, #8]
//        if (ramp_counter > 4095) {
//            ramp_counter = 0;
//        }
//        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ramp_counter);
//    }
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40001400 	.word	0x40001400
 80025f8:	200003b0 	.word	0x200003b0
 80025fc:	20000044 	.word	0x20000044
 8002600:	200003cc 	.word	0x200003cc
 8002604:	200003e8 	.word	0x200003e8
 8002608:	20000404 	.word	0x20000404

0800260c <HAL_TIM_IC_CaptureCallback>:

int speed =0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_TIM_IC_CaptureCallback+0x50>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	4a11      	ldr	r2, [pc, #68]	@ (8002660 <HAL_TIM_IC_CaptureCallback+0x54>)
 800261c:	6013      	str	r3, [r2, #0]
	counter2 = __HAL_TIM_GET_COUNTER(&htim3);
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	4a10      	ldr	r2, [pc, #64]	@ (8002668 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002626:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8002628:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <HAL_TIM_IC_CaptureCallback+0x54>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b21a      	sxth	r2, r3
 800262e:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002630:	801a      	strh	r2, [r3, #0]
	count2 = (int16_t)counter2;
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b21a      	sxth	r2, r3
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_TIM_IC_CaptureCallback+0x64>)
 800263a:	801a      	strh	r2, [r3, #0]

	position = count/4;
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_TIM_IC_CaptureCallback+0x60>)
 800263e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002642:	2b00      	cmp	r3, #0
 8002644:	da00      	bge.n	8002648 <HAL_TIM_IC_CaptureCallback+0x3c>
 8002646:	3303      	adds	r3, #3
 8002648:	109b      	asrs	r3, r3, #2
 800264a:	b21a      	sxth	r2, r3
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_TIM_IC_CaptureCallback+0x68>)
 800264e:	801a      	strh	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	200001b8 	.word	0x200001b8
 8002660:	20000510 	.word	0x20000510
 8002664:	20000200 	.word	0x20000200
 8002668:	20000518 	.word	0x20000518
 800266c:	20000514 	.word	0x20000514
 8002670:	2000051c 	.word	0x2000051c
 8002674:	2000051e 	.word	0x2000051e

08002678 <HAL_GPIO_EXTI_Callback>:
//        }
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_Pin) {
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002688:	d117      	bne.n	80026ba <HAL_GPIO_EXTI_Callback+0x42>
        // Debounce logic
//        HAL_Delay(20);
        if (HAL_GPIO_ReadPin(M1_GPIO_Port, M1_Pin) == GPIO_PIN_RESET) {
 800268a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800268e:	481b      	ldr	r0, [pc, #108]	@ (80026fc <HAL_GPIO_EXTI_Callback+0x84>)
 8002690:	f002 fab0 	bl	8004bf4 <HAL_GPIO_ReadPin>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_GPIO_EXTI_Callback+0x38>
            // Button is pressed
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80026a4:	2201      	movs	r2, #1
 80026a6:	2101      	movs	r1, #1
 80026a8:	4814      	ldr	r0, [pc, #80]	@ (80026fc <HAL_GPIO_EXTI_Callback+0x84>)
 80026aa:	f002 fabb 	bl	8004c24 <HAL_GPIO_WritePin>
 80026ae:	e004      	b.n	80026ba <HAL_GPIO_EXTI_Callback+0x42>
        } else {
            // Set LED_D1_GPIO_Port to low
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2101      	movs	r1, #1
 80026b4:	4811      	ldr	r0, [pc, #68]	@ (80026fc <HAL_GPIO_EXTI_Callback+0x84>)
 80026b6:	f002 fab5 	bl	8004c24 <HAL_GPIO_WritePin>
        }
    }
    if (GPIO_Pin == M2_Pin) {
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026c0:	d117      	bne.n	80026f2 <HAL_GPIO_EXTI_Callback+0x7a>
        // Debounce logic
//        HAL_Delay(20);
        if (HAL_GPIO_ReadPin(M2_GPIO_Port, M2_Pin) == GPIO_PIN_RESET) {
 80026c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026c6:	480d      	ldr	r0, [pc, #52]	@ (80026fc <HAL_GPIO_EXTI_Callback+0x84>)
 80026c8:	f002 fa94 	bl	8004bf4 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_GPIO_EXTI_Callback+0x70>
            // Button is pressed
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	2102      	movs	r1, #2
 80026e0:	4806      	ldr	r0, [pc, #24]	@ (80026fc <HAL_GPIO_EXTI_Callback+0x84>)
 80026e2:	f002 fa9f 	bl	8004c24 <HAL_GPIO_WritePin>
        } else {
            // Set LED_D1_GPIO_Port to low
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
        }
    }
}
 80026e6:	e004      	b.n	80026f2 <HAL_GPIO_EXTI_Callback+0x7a>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2102      	movs	r1, #2
 80026ec:	4803      	ldr	r0, [pc, #12]	@ (80026fc <HAL_GPIO_EXTI_Callback+0x84>)
 80026ee:	f002 fa99 	bl	8004c24 <HAL_GPIO_WritePin>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40020800 	.word	0x40020800

08002700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002706:	f001 fa3d 	bl	8003b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270a:	f000 f87f 	bl	800280c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800270e:	f000 fc07 	bl	8002f20 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002712:	f000 fbe5 	bl	8002ee0 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002716:	f000 f931 	bl	800297c <_ZL12MX_I2C1_Initv>
  MX_DAC_Init();
 800271a:	f000 f8eb 	bl	80028f4 <_ZL11MX_DAC_Initv>
  MX_SPI2_Init();
 800271e:	f000 f995 	bl	8002a4c <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 8002722:	f000 f9cf 	bl	8002ac4 <_ZL12MX_TIM2_Initv>
  MX_TIM7_Init();
 8002726:	f000 fb45 	bl	8002db4 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 800272a:	f000 fb83 	bl	8002e34 <_ZL13MX_TIM13_Initv>
  MX_I2C2_Init();
 800272e:	f000 f959 	bl	80029e4 <_ZL12MX_I2C2_Initv>
  MX_USART3_UART_Init();
 8002732:	f000 fba7 	bl	8002e84 <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 8002736:	f000 fa23 	bl	8002b80 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800273a:	f000 fa7f 	bl	8002c3c <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 800273e:	f000 fadb 	bl	8002cf8 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

	Port.begin(1, &huart3, &huart3);
 8002742:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <main+0xd8>)
 8002744:	4a24      	ldr	r2, [pc, #144]	@ (80027d8 <main+0xd8>)
 8002746:	2101      	movs	r1, #1
 8002748:	4824      	ldr	r0, [pc, #144]	@ (80027dc <main+0xdc>)
 800274a:	f7fe fbaa 	bl	8000ea2 <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>
	Port.setHandleClock(Handle_Clock);
 800274e:	4924      	ldr	r1, [pc, #144]	@ (80027e0 <main+0xe0>)
 8002750:	4822      	ldr	r0, [pc, #136]	@ (80027dc <main+0xdc>)
 8002752:	f7ff f8de 	bl	8001912 <_ZN13MidiInterface14setHandleClockEPFvvE>
	Port.setHandleStart(Handle_Start);
 8002756:	4923      	ldr	r1, [pc, #140]	@ (80027e4 <main+0xe4>)
 8002758:	4820      	ldr	r0, [pc, #128]	@ (80027dc <main+0xdc>)
 800275a:	f7ff f8e8 	bl	800192e <_ZN13MidiInterface14setHandleStartEPFvvE>
	Port.setHandleStop(Handle_Stop);
 800275e:	4922      	ldr	r1, [pc, #136]	@ (80027e8 <main+0xe8>)
 8002760:	481e      	ldr	r0, [pc, #120]	@ (80027dc <main+0xdc>)
 8002762:	f7ff f8f2 	bl	800194a <_ZN13MidiInterface13setHandleStopEPFvvE>
	Port.setHandleNoteOn(Handle_NoteOn);
 8002766:	4921      	ldr	r1, [pc, #132]	@ (80027ec <main+0xec>)
 8002768:	481c      	ldr	r0, [pc, #112]	@ (80027dc <main+0xdc>)
 800276a:	f7ff f8c4 	bl	80018f6 <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>
	Port.setHandleNoteOff(Handle_NoteOff);
 800276e:	4920      	ldr	r1, [pc, #128]	@ (80027f0 <main+0xf0>)
 8002770:	481a      	ldr	r0, [pc, #104]	@ (80027dc <main+0xdc>)
 8002772:	f7ff f8b2 	bl	80018da <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>

    HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8002776:	2110      	movs	r1, #16
 8002778:	481e      	ldr	r0, [pc, #120]	@ (80027f4 <main+0xf4>)
 800277a:	f001 fba8 	bl	8003ece <HAL_DAC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800277e:	2100      	movs	r1, #0
 8002780:	481c      	ldr	r0, [pc, #112]	@ (80027f4 <main+0xf4>)
 8002782:	f001 fba4 	bl	8003ece <HAL_DAC_Start>

    ChannelConfig config;
    ChannelConfig_2 config2;
    dac_init(&config, &config2);
 8002786:	f107 0208 	add.w	r2, r7, #8
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fca1 	bl	80030d8 <dac_init>
//    ssd1306_Init();
//    ssd1306_SetCursor(5, 50);
//    ssd1306_WriteString(tekstas, Font_7x10, White);
//    ssd1306_UpdateScreen();

    HAL_TIM_Base_Start_IT(&htim7);
 8002796:	4818      	ldr	r0, [pc, #96]	@ (80027f8 <main+0xf8>)
 8002798:	f005 f886 	bl	80078a8 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim13);
    //HAL_TIM_Base_Start(&htim2);
    ADSR_Init(envelopes, NUM_ENVELOPES);
 800279c:	2104      	movs	r1, #4
 800279e:	4817      	ldr	r0, [pc, #92]	@ (80027fc <main+0xfc>)
 80027a0:	f7ff fdc0 	bl	8002324 <ADSR_Init>

    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80027a4:	213c      	movs	r1, #60	@ 0x3c
 80027a6:	4816      	ldr	r0, [pc, #88]	@ (8002800 <main+0x100>)
 80027a8:	f005 f994 	bl	8007ad4 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80027ac:	213c      	movs	r1, #60	@ 0x3c
 80027ae:	4815      	ldr	r0, [pc, #84]	@ (8002804 <main+0x104>)
 80027b0:	f005 f990 	bl	8007ad4 <HAL_TIM_Encoder_Start_IT>
//    HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
//    HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b4:	2300      	movs	r3, #0
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <main+0x108>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <main+0x108>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c4:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <main+0x108>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Port.read();
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <main+0xdc>)
 80027d2:	f7fe fd13 	bl	80011fc <_ZN13MidiInterface4readEv>
 80027d6:	e7fb      	b.n	80027d0 <main+0xd0>
 80027d8:	20000368 	.word	0x20000368
 80027dc:	20000420 	.word	0x20000420
 80027e0:	08001fb9 	.word	0x08001fb9
 80027e4:	08001fed 	.word	0x08001fed
 80027e8:	08002005 	.word	0x08002005
 80027ec:	08002019 	.word	0x08002019
 80027f0:	08002251 	.word	0x08002251
 80027f4:	20000044 	.word	0x20000044
 80027f8:	200002d8 	.word	0x200002d8
 80027fc:	200003b0 	.word	0x200003b0
 8002800:	200001b8 	.word	0x200001b8
 8002804:	20000200 	.word	0x20000200
 8002808:	40023800 	.word	0x40023800

0800280c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b094      	sub	sp, #80	@ 0x50
 8002810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	2230      	movs	r2, #48	@ 0x30
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f006 fd06 	bl	800922c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <_Z18SystemClock_Configv+0xe0>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	4a2c      	ldr	r2, [pc, #176]	@ (80028ec <_Z18SystemClock_Configv+0xe0>)
 800283a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800283e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002840:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <_Z18SystemClock_Configv+0xe0>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800284c:	2300      	movs	r3, #0
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <_Z18SystemClock_Configv+0xe4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a26      	ldr	r2, [pc, #152]	@ (80028f0 <_Z18SystemClock_Configv+0xe4>)
 8002856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <_Z18SystemClock_Configv+0xe4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002868:	2301      	movs	r3, #1
 800286a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800286c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002872:	2302      	movs	r3, #2
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800287c:	2304      	movs	r3, #4
 800287e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002880:	23a8      	movs	r3, #168	@ 0xa8
 8002882:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002884:	2302      	movs	r3, #2
 8002886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002888:	2304      	movs	r3, #4
 800288a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288c:	f107 0320 	add.w	r3, r7, #32
 8002890:	4618      	mov	r0, r3
 8002892:	f004 f985 	bl	8006ba0 <HAL_RCC_OscConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80028a6:	f000 fbde 	bl	8003066 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028aa:	230f      	movs	r3, #15
 80028ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ae:	2302      	movs	r3, #2
 80028b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	2105      	movs	r1, #5
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 fbe1 	bl	8007090 <HAL_RCC_ClockConfig>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80028de:	f000 fbc2 	bl	8003066 <Error_Handler>
  }
}
 80028e2:	bf00      	nop
 80028e4:	3750      	adds	r7, #80	@ 0x50
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40007000 	.word	0x40007000

080028f4 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80028fa:	463b      	mov	r3, r7
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002902:	4b1c      	ldr	r3, [pc, #112]	@ (8002974 <_ZL11MX_DAC_Initv+0x80>)
 8002904:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <_ZL11MX_DAC_Initv+0x84>)
 8002906:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002908:	481a      	ldr	r0, [pc, #104]	@ (8002974 <_ZL11MX_DAC_Initv+0x80>)
 800290a:	f001 fabe 	bl	8003e8a <HAL_DAC_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 800291e:	f000 fba2 	bl	8003066 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800292a:	463b      	mov	r3, r7
 800292c:	2200      	movs	r2, #0
 800292e:	4619      	mov	r1, r3
 8002930:	4810      	ldr	r0, [pc, #64]	@ (8002974 <_ZL11MX_DAC_Initv+0x80>)
 8002932:	f001 fb4d 	bl	8003fd0 <HAL_DAC_ConfigChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 8002946:	f000 fb8e 	bl	8003066 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800294a:	463b      	mov	r3, r7
 800294c:	2210      	movs	r2, #16
 800294e:	4619      	mov	r1, r3
 8002950:	4808      	ldr	r0, [pc, #32]	@ (8002974 <_ZL11MX_DAC_Initv+0x80>)
 8002952:	f001 fb3d 	bl	8003fd0 <HAL_DAC_ConfigChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <_ZL11MX_DAC_Initv+0x76>
  {
    Error_Handler();
 8002966:	f000 fb7e 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000044 	.word	0x20000044
 8002978:	40007400 	.word	0x40007400

0800297c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002982:	4a16      	ldr	r2, [pc, #88]	@ (80029dc <_ZL12MX_I2C1_Initv+0x60>)
 8002984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002986:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002988:	4a15      	ldr	r2, [pc, #84]	@ (80029e0 <_ZL12MX_I2C1_Initv+0x64>)
 800298a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002998:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 800299a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800299e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a0:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029a6:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029b8:	4807      	ldr	r0, [pc, #28]	@ (80029d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80029ba:	f002 f97f 	bl	8004cbc <HAL_I2C_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80029ce:	f000 fb4a 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000058 	.word	0x20000058
 80029dc:	40005400 	.word	0x40005400
 80029e0:	000186a0 	.word	0x000186a0

080029e4 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029e8:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 80029ea:	4a16      	ldr	r2, [pc, #88]	@ (8002a44 <_ZL12MX_I2C2_Initv+0x60>)
 80029ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80029ee:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 80029f0:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <_ZL12MX_I2C2_Initv+0x64>)
 80029f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a1a:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a20:	4807      	ldr	r0, [pc, #28]	@ (8002a40 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a22:	f002 f94b 	bl	8004cbc <HAL_I2C_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8002a36:	f000 fb16 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200000ac 	.word	0x200000ac
 8002a44:	40005800 	.word	0x40005800
 8002a48:	00061a80 	.word	0x00061a80

08002a4c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac0 <_ZL12MX_SPI2_Initv+0x74>)
 8002a54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a56:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a5e:	4b17      	ldr	r3, [pc, #92]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002a64:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a6a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a6e:	2202      	movs	r2, #2
 8002a70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a78:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a80:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002a9a:	220a      	movs	r2, #10
 8002a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a9e:	4807      	ldr	r0, [pc, #28]	@ (8002abc <_ZL12MX_SPI2_Initv+0x70>)
 8002aa0:	f004 fd16 	bl	80074d0 <HAL_SPI_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <_ZL12MX_SPI2_Initv+0x6c>
  {
    Error_Handler();
 8002ab4:	f000 fad7 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000160 	.word	0x20000160
 8002ac0:	40003800 	.word	0x40003800

08002ac4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	@ 0x30
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002aca:	f107 030c 	add.w	r3, r7, #12
 8002ace:	2224      	movs	r2, #36	@ 0x24
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f006 fbaa 	bl	800922c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae0:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <_ZL12MX_TIM2_Initv+0xb8>)
 8002ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ae8:	4b24      	ldr	r3, [pc, #144]	@ (8002b7c <_ZL12MX_TIM2_Initv+0xb8>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <_ZL12MX_TIM2_Initv+0xb8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002af4:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <_ZL12MX_TIM2_Initv+0xb8>)
 8002af6:	f04f 32ff 	mov.w	r2, #4294967295
 8002afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <_ZL12MX_TIM2_Initv+0xb8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b02:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <_ZL12MX_TIM2_Initv+0xb8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b10:	2301      	movs	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b20:	2301      	movs	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	4619      	mov	r1, r3
 8002b32:	4812      	ldr	r0, [pc, #72]	@ (8002b7c <_ZL12MX_TIM2_Initv+0xb8>)
 8002b34:	f004 ff28 	bl	8007988 <HAL_TIM_Encoder_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8002b48:	f000 fa8d 	bl	8003066 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4808      	ldr	r0, [pc, #32]	@ (8002b7c <_ZL12MX_TIM2_Initv+0xb8>)
 8002b5a:	f005 fa49 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8002b6e:	f000 fa7a 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b72:	bf00      	nop
 8002b74:	3730      	adds	r7, #48	@ 0x30
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200001b8 	.word	0x200001b8

08002b80 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08c      	sub	sp, #48	@ 0x30
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b86:	f107 030c 	add.w	r3, r7, #12
 8002b8a:	2224      	movs	r2, #36	@ 0x24
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f006 fb4c 	bl	800922c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b9c:	4b25      	ldr	r3, [pc, #148]	@ (8002c34 <_ZL12MX_TIM3_Initv+0xb4>)
 8002b9e:	4a26      	ldr	r2, [pc, #152]	@ (8002c38 <_ZL12MX_TIM3_Initv+0xb8>)
 8002ba0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ba2:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <_ZL12MX_TIM3_Initv+0xb4>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba8:	4b22      	ldr	r3, [pc, #136]	@ (8002c34 <_ZL12MX_TIM3_Initv+0xb4>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bae:	4b21      	ldr	r3, [pc, #132]	@ (8002c34 <_ZL12MX_TIM3_Initv+0xb4>)
 8002bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c34 <_ZL12MX_TIM3_Initv+0xb4>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c34 <_ZL12MX_TIM3_Initv+0xb4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	4619      	mov	r1, r3
 8002bec:	4811      	ldr	r0, [pc, #68]	@ (8002c34 <_ZL12MX_TIM3_Initv+0xb4>)
 8002bee:	f004 fecb 	bl	8007988 <HAL_TIM_Encoder_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8002c02:	f000 fa30 	bl	8003066 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4808      	ldr	r0, [pc, #32]	@ (8002c34 <_ZL12MX_TIM3_Initv+0xb4>)
 8002c14:	f005 f9ec 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8002c28:	f000 fa1d 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	3730      	adds	r7, #48	@ 0x30
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000200 	.word	0x20000200
 8002c38:	40000400 	.word	0x40000400

08002c3c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	@ 0x30
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	2224      	movs	r2, #36	@ 0x24
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f006 faee 	bl	800922c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c58:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c5a:	4a26      	ldr	r2, [pc, #152]	@ (8002cf4 <_ZL12MX_TIM4_Initv+0xb8>)
 8002c5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c5e:	4b24      	ldr	r3, [pc, #144]	@ (8002cf0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c64:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c6a:	4b21      	ldr	r3, [pc, #132]	@ (8002cf0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c72:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c86:	2301      	movs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c96:	2301      	movs	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4811      	ldr	r0, [pc, #68]	@ (8002cf0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002caa:	f004 fe6d 	bl	8007988 <HAL_TIM_Encoder_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf14      	ite	ne
 8002cb4:	2301      	movne	r3, #1
 8002cb6:	2300      	moveq	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002cbe:	f000 f9d2 	bl	8003066 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4808      	ldr	r0, [pc, #32]	@ (8002cf0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002cd0:	f005 f98e 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002ce4:	f000 f9bf 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	3730      	adds	r7, #48	@ 0x30
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000248 	.word	0x20000248
 8002cf4:	40000800 	.word	0x40000800

08002cf8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	@ 0x30
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	2224      	movs	r2, #36	@ 0x24
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f006 fa90 	bl	800922c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d14:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <_ZL12MX_TIM5_Initv+0xb4>)
 8002d16:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <_ZL12MX_TIM5_Initv+0xb8>)
 8002d18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d1a:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <_ZL12MX_TIM5_Initv+0xb4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d20:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <_ZL12MX_TIM5_Initv+0xb4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d26:	4b21      	ldr	r3, [pc, #132]	@ (8002dac <_ZL12MX_TIM5_Initv+0xb4>)
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dac <_ZL12MX_TIM5_Initv+0xb4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <_ZL12MX_TIM5_Initv+0xb4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d42:	2301      	movs	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d52:	2301      	movs	r3, #1
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	4619      	mov	r1, r3
 8002d64:	4811      	ldr	r0, [pc, #68]	@ (8002dac <_ZL12MX_TIM5_Initv+0xb4>)
 8002d66:	f004 fe0f 	bl	8007988 <HAL_TIM_Encoder_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8002d7a:	f000 f974 	bl	8003066 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4808      	ldr	r0, [pc, #32]	@ (8002dac <_ZL12MX_TIM5_Initv+0xb4>)
 8002d8c:	f005 f930 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8002da0:	f000 f961 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002da4:	bf00      	nop
 8002da6:	3730      	adds	r7, #48	@ 0x30
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000290 	.word	0x20000290
 8002db0:	40000c00 	.word	0x40000c00

08002db4 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dba:	463b      	mov	r3, r7
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e2c <_ZL12MX_TIM7_Initv+0x78>)
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e30 <_ZL12MX_TIM7_Initv+0x7c>)
 8002dc6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16799;
 8002dc8:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <_ZL12MX_TIM7_Initv+0x78>)
 8002dca:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002dce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <_ZL12MX_TIM7_Initv+0x78>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8002dd6:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <_ZL12MX_TIM7_Initv+0x78>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ddc:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <_ZL12MX_TIM7_Initv+0x78>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002de2:	4812      	ldr	r0, [pc, #72]	@ (8002e2c <_ZL12MX_TIM7_Initv+0x78>)
 8002de4:	f004 fd10 	bl	8007808 <HAL_TIM_Base_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	bf14      	ite	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	2300      	moveq	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8002df8:	f000 f935 	bl	8003066 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e04:	463b      	mov	r3, r7
 8002e06:	4619      	mov	r1, r3
 8002e08:	4808      	ldr	r0, [pc, #32]	@ (8002e2c <_ZL12MX_TIM7_Initv+0x78>)
 8002e0a:	f005 f8f1 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8002e1e:	f000 f922 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200002d8 	.word	0x200002d8
 8002e30:	40001400 	.word	0x40001400

08002e34 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002e38:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <_ZL13MX_TIM13_Initv+0x48>)
 8002e3a:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <_ZL13MX_TIM13_Initv+0x4c>)
 8002e3c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <_ZL13MX_TIM13_Initv+0x48>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e44:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <_ZL13MX_TIM13_Initv+0x48>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <_ZL13MX_TIM13_Initv+0x48>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e50:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <_ZL13MX_TIM13_Initv+0x48>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e56:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <_ZL13MX_TIM13_Initv+0x48>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e5c:	4807      	ldr	r0, [pc, #28]	@ (8002e7c <_ZL13MX_TIM13_Initv+0x48>)
 8002e5e:	f004 fcd3 	bl	8007808 <HAL_TIM_Base_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <_ZL13MX_TIM13_Initv+0x42>
  {
    Error_Handler();
 8002e72:	f000 f8f8 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000320 	.word	0x20000320
 8002e80:	40001c00 	.word	0x40001c00

08002e84 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e88:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e8a:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <_ZL19MX_USART3_UART_Initv+0x58>)
 8002e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 31250;
 8002e8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e90:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8002e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002eaa:	2204      	movs	r2, #4
 8002eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eba:	4807      	ldr	r0, [pc, #28]	@ (8002ed8 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002ebc:	f005 f928 	bl	8008110 <HAL_UART_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002ed0:	f000 f8c9 	bl	8003066 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000368 	.word	0x20000368
 8002edc:	40004800 	.word	0x40004800

08002ee0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <_ZL11MX_DMA_Initv+0x3c>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	4a0b      	ldr	r2, [pc, #44]	@ (8002f1c <_ZL11MX_DMA_Initv+0x3c>)
 8002ef0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <_ZL11MX_DMA_Initv+0x3c>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	2011      	movs	r0, #17
 8002f08:	f000 ff89 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002f0c:	2011      	movs	r0, #17
 8002f0e:	f000 ffa2 	bl	8003e56 <HAL_NVIC_EnableIRQ>

}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	@ 0x28
 8002f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	4b42      	ldr	r3, [pc, #264]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	4a41      	ldr	r2, [pc, #260]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f46:	4b3f      	ldr	r3, [pc, #252]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b3b      	ldr	r3, [pc, #236]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	4a3a      	ldr	r2, [pc, #232]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f62:	4b38      	ldr	r3, [pc, #224]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b34      	ldr	r3, [pc, #208]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	4a33      	ldr	r2, [pc, #204]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7e:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a2c      	ldr	r2, [pc, #176]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	4b26      	ldr	r3, [pc, #152]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	4a25      	ldr	r2, [pc, #148]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb6:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2103      	movs	r1, #3
 8002fc6:	4820      	ldr	r0, [pc, #128]	@ (8003048 <_ZL12MX_GPIO_Initv+0x128>)
 8002fc8:	f001 fe2c 	bl	8004c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2104      	movs	r1, #4
 8002fd0:	481e      	ldr	r0, [pc, #120]	@ (800304c <_ZL12MX_GPIO_Initv+0x12c>)
 8002fd2:	f001 fe27 	bl	8004c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_Pin M2_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M2_Pin;
 8002fd6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002fdc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	4816      	ldr	r0, [pc, #88]	@ (8003048 <_ZL12MX_GPIO_Initv+0x128>)
 8002fee:	f001 fc65 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4619      	mov	r1, r3
 8003008:	480f      	ldr	r0, [pc, #60]	@ (8003048 <_ZL12MX_GPIO_Initv+0x128>)
 800300a:	f001 fc57 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D1_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin;
 800300e:	2304      	movs	r3, #4
 8003010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003012:	2301      	movs	r3, #1
 8003014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D1_GPIO_Port, &GPIO_InitStruct);
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	4619      	mov	r1, r3
 8003024:	4809      	ldr	r0, [pc, #36]	@ (800304c <_ZL12MX_GPIO_Initv+0x12c>)
 8003026:	f001 fc49 	bl	80048bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	2028      	movs	r0, #40	@ 0x28
 8003030:	f000 fef5 	bl	8003e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003034:	2028      	movs	r0, #40	@ 0x28
 8003036:	f000 ff0e 	bl	8003e56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800303a:	bf00      	nop
 800303c:	3728      	adds	r7, #40	@ 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40020800 	.word	0x40020800
 800304c:	40020c00 	.word	0x40020c00

08003050 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	__NOP();
 8003058:	bf00      	nop
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800306a:	b672      	cpsid	i
}
 800306c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800306e:	bf00      	nop
 8003070:	e7fd      	b.n	800306e <Error_Handler+0x8>
	...

08003074 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800308a:	4293      	cmp	r3, r2
 800308c:	d102      	bne.n	8003094 <_Z41__static_initialization_and_destruction_0ii+0x20>
MidiInterface Port;
 800308e:	4809      	ldr	r0, [pc, #36]	@ (80030b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003090:	f7fd fe46 	bl	8000d20 <_ZN13MidiInterfaceC1Ev>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d107      	bne.n	80030aa <_Z41__static_initialization_and_destruction_0ii+0x36>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d102      	bne.n	80030aa <_Z41__static_initialization_and_destruction_0ii+0x36>
 80030a4:	4803      	ldr	r0, [pc, #12]	@ (80030b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80030a6:	f7fd fef1 	bl	8000e8c <_ZN13MidiInterfaceD1Ev>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000420 	.word	0x20000420

080030b8 <_GLOBAL__sub_I_hdac>:
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80030c0:	2001      	movs	r0, #1
 80030c2:	f7ff ffd7 	bl	8003074 <_Z41__static_initialization_and_destruction_0ii>
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_GLOBAL__sub_D_hdac>:
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7ff ffcf 	bl	8003074 <_Z41__static_initialization_and_destruction_0ii>
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <dac_init>:
 */

#include <mcp4728_mod.h>


void dac_init(ChannelConfig *config ,ChannelConfig_2 *config2) {
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
    config->vref = 0x0;  // Use VDD as reference voltage
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
    config->gain = 0x1;  // Gain of 1x
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	705a      	strb	r2, [r3, #1]
    config->val[0] = 0;  // 12-bit DAC value for channel A
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	805a      	strh	r2, [r3, #2]
    config->val[1] = 0;  // 12-bit DAC value for channel B
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	809a      	strh	r2, [r3, #4]
    config->val[2] = 0;  // 12-bit DAC value for channel C
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	80da      	strh	r2, [r3, #6]
    config->val[3] = 0;  // 12-bit DAC value for channel D
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	811a      	strh	r2, [r3, #8]


    config2->vref = 0x0;  // Use VDD as reference voltage
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
    config2->gain = 0x1;  // Gain of 1x
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2201      	movs	r2, #1
 8003110:	705a      	strb	r2, [r3, #1]
    config2->val[0] = 0;  // 12-bit DAC value for channel A
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	805a      	strh	r2, [r3, #2]
    config2->val[1] = 0;  // 12-bit DAC value for channel B
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2200      	movs	r2, #0
 800311c:	809a      	strh	r2, [r3, #4]
    config2->val[2] = 0;  // 12-bit DAC value for channel C
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	80da      	strh	r2, [r3, #6]
    config2->val[3] = 0;  // 12-bit DAC value for channel D
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2200      	movs	r2, #0
 8003128:	811a      	strh	r2, [r3, #8]

}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <mcp4728_generalCall>:
//HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
//    // Transmit the general call command
//    return HAL_I2C_Master_Transmit(i2cHandler, 0x00, &command, 1, HAL_MAX_DELAY);
//}

HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
    // Transmit the general call command
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, 0x00, &command, 1);
 8003142:	1cfa      	adds	r2, r7, #3
 8003144:	2301      	movs	r3, #1
 8003146:	2100      	movs	r1, #0
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f001 ff11 	bl	8004f70 <HAL_I2C_Master_Transmit_DMA>
 800314e:	4603      	mov	r3, r0
 8003150:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <mcp4728_generalCall+0x26>
        return ret;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	e007      	b.n	800316c <mcp4728_generalCall+0x36>
    }

    // Wait for the DMA transfer to complete
    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 800315c:	bf00      	nop
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f002 f9ed 	bl	800553e <HAL_I2C_GetState>
 8003164:	4603      	mov	r3, r0
 8003166:	2b20      	cmp	r3, #32
 8003168:	d1f9      	bne.n	800315e <mcp4728_generalCall+0x28>

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <DACx61FW>:
    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
}



HAL_StatusTypeDef DACx61FW(I2C_HandleTypeDef *i2cHandler, ChannelConfig_2 config_0x61) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	4638      	mov	r0, r7
 800317e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[8]; // Buffer to hold the data for 4 channels, 2 bytes each

    for (uint8_t i = 0; i < 4; i++) {
 8003182:	2300      	movs	r3, #0
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e01f      	b.n	80031c8 <DACx61FW+0x54>
        buf[2 * i] = (config_0x61.val[i] >> 8); // Upper 8 bits of DAC value
 8003188:	7ffb      	ldrb	r3, [r7, #31]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	3320      	adds	r3, #32
 800318e:	443b      	add	r3, r7
 8003190:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	b29a      	uxth	r2, r3
 8003198:	7ffb      	ldrb	r3, [r7, #31]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	3320      	adds	r3, #32
 80031a0:	443b      	add	r3, r7
 80031a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        buf[2 * i + 1] = config_0x61.val[i] & 0xFF; // Lower 8 bits of DAC value
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	3320      	adds	r3, #32
 80031ac:	443b      	add	r3, r7
 80031ae:	f833 2c1e 	ldrh.w	r2, [r3, #-30]
 80031b2:	7ffb      	ldrb	r3, [r7, #31]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	3301      	adds	r3, #1
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	3320      	adds	r3, #32
 80031bc:	443b      	add	r3, r7
 80031be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
 80031c4:	3301      	adds	r3, #1
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	7ffb      	ldrb	r3, [r7, #31]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d9dc      	bls.n	8003188 <DACx61FW+0x14>
    }

    HAL_StatusTypeDef ret =  HAL_I2C_Master_Transmit_DMA(i2cHandler, dac2, buf, sizeof(buf));
 80031ce:	f107 0214 	add.w	r2, r7, #20
 80031d2:	2308      	movs	r3, #8
 80031d4:	21c2      	movs	r1, #194	@ 0xc2
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f001 feca 	bl	8004f70 <HAL_I2C_Master_Transmit_DMA>
 80031dc:	4603      	mov	r3, r0
 80031de:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) {
 80031e0:	7fbb      	ldrb	r3, [r7, #30]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <DACx61FW+0x76>
        return ret;
 80031e6:	7fbb      	ldrb	r3, [r7, #30]
 80031e8:	e00b      	b.n	8003202 <DACx61FW+0x8e>
    }

    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 80031ea:	bf00      	nop
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f002 f9a6 	bl	800553e <HAL_I2C_GetState>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d1f9      	bne.n	80031ec <DACx61FW+0x78>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 80031f8:	2108      	movs	r1, #8
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7ff ff9b 	bl	8003136 <mcp4728_generalCall>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <DACx60SW>:
 * @param i2cHandler Pointer to the I2C handler.
 * @param config Configuration structure containing the DAC value and configuration for the channel.
 * @param channel The channel to be updated (0 for A, 1 for B, 2 for C, 3 for D).
 * @return HAL_StatusTypeDef HAL status indicating success or failure.
 */
HAL_StatusTypeDef DACx60SW(I2C_HandleTypeDef *i2cHandler, ChannelConfig config, uint8_t channel) {
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	4638      	mov	r0, r7
 8003214:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[3];
    buf[0] = MCP4728_SINGLE_WRITE | (channel << 1); // Command and channel
 8003218:	f897 3020 	ldrb.w	r3, [r7, #32]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	b25b      	sxtb	r3, r3
 8003220:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 8003224:	b25b      	sxtb	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	753b      	strb	r3, [r7, #20]
    buf[1] = ((config.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 800322a:	783b      	ldrb	r3, [r7, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003232:	fa42 f303 	asr.w	r3, r2, r3
 8003236:	01db      	lsls	r3, r3, #7
 8003238:	b25a      	sxtb	r2, r3
             ((config.gain & (1 << channel)) ? 0x10 : 0) | // Gain bit (4th bit)
 800323a:	787b      	ldrb	r3, [r7, #1]
 800323c:	4619      	mov	r1, r3
 800323e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003242:	fa41 f303 	asr.w	r3, r1, r3
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	b25b      	sxtb	r3, r3
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	b25b      	sxtb	r3, r3
    buf[1] = ((config.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8003250:	4313      	orrs	r3, r2
 8003252:	b25a      	sxtb	r2, r3
             (config.val[channel] >> 8); // Upper 8 bits of the 12-bit DAC value
 8003254:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	3318      	adds	r3, #24
 800325c:	443b      	add	r3, r7
 800325e:	f833 3c16 	ldrh.w	r3, [r3, #-22]
             ((config.gain & (1 << channel)) ? 0x10 : 0) | // Gain bit (4th bit)
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	b29b      	uxth	r3, r3
 8003266:	b25b      	sxtb	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b25b      	sxtb	r3, r3
 800326c:	b2db      	uxtb	r3, r3
    buf[1] = ((config.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 800326e:	757b      	strb	r3, [r7, #21]
    buf[2] = config.val[channel] & 0xFF; // Lower 8 bits of the 12-bit DAC value
 8003270:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	3318      	adds	r3, #24
 8003278:	443b      	add	r3, r7
 800327a:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	75bb      	strb	r3, [r7, #22]

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, dac1, buf, sizeof(buf));
 8003282:	f107 0214 	add.w	r2, r7, #20
 8003286:	2303      	movs	r3, #3
 8003288:	21c0      	movs	r1, #192	@ 0xc0
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f001 fe70 	bl	8004f70 <HAL_I2C_Master_Transmit_DMA>
 8003290:	4603      	mov	r3, r0
 8003292:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <DACx60SW+0x94>
        return ret;
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	e00b      	b.n	80032b6 <DACx60SW+0xac>
    }

    // Wait for the DMA transfer to complete and then send the general call command
    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 800329e:	bf00      	nop
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f002 f94c 	bl	800553e <HAL_I2C_GetState>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d1f9      	bne.n	80032a0 <DACx60SW+0x96>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 80032ac:	2108      	movs	r1, #8
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff ff41 	bl	8003136 <mcp4728_generalCall>
 80032b4:	4603      	mov	r3, r0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <DACx61SW>:



HAL_StatusTypeDef DACx61SW(I2C_HandleTypeDef *i2cHandler, ChannelConfig_2 config_0x61, uint8_t channel) {
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	4638      	mov	r0, r7
 80032c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[3];
    buf[0] = MCP4728_SINGLE_WRITE | (channel << 1); // Command and channel
 80032cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	753b      	strb	r3, [r7, #20]
    buf[1] = ((config_0x61.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 80032de:	783b      	ldrb	r3, [r7, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032e6:	fa42 f303 	asr.w	r3, r2, r3
 80032ea:	01db      	lsls	r3, r3, #7
 80032ec:	b25a      	sxtb	r2, r3
             ((config_0x61.gain & (1 << channel)) ? 0x10 : 0) | // Gain bit (4th bit)
 80032ee:	787b      	ldrb	r3, [r7, #1]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032f6:	fa41 f303 	asr.w	r3, r1, r3
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	b25b      	sxtb	r3, r3
    buf[1] = ((config_0x61.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8003304:	4313      	orrs	r3, r2
 8003306:	b25a      	sxtb	r2, r3
             (config_0x61.val[channel] >> 8); // Upper 8 bits of the 12-bit DAC value
 8003308:	f897 3020 	ldrb.w	r3, [r7, #32]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	3318      	adds	r3, #24
 8003310:	443b      	add	r3, r7
 8003312:	f833 3c16 	ldrh.w	r3, [r3, #-22]
             ((config_0x61.gain & (1 << channel)) ? 0x10 : 0) | // Gain bit (4th bit)
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	b29b      	uxth	r3, r3
 800331a:	b25b      	sxtb	r3, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	b25b      	sxtb	r3, r3
 8003320:	b2db      	uxtb	r3, r3
    buf[1] = ((config_0x61.vref & (1 << channel)) ? 0x80 : 0) | // VREF bit (7th bit)
 8003322:	757b      	strb	r3, [r7, #21]
    buf[2] = config_0x61.val[channel] & 0xFF; // Lower 8 bits of the 12-bit DAC value
 8003324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	3318      	adds	r3, #24
 800332c:	443b      	add	r3, r7
 800332e:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	75bb      	strb	r3, [r7, #22]

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, dac2, buf, sizeof(buf));
 8003336:	f107 0214 	add.w	r2, r7, #20
 800333a:	2303      	movs	r3, #3
 800333c:	21c2      	movs	r1, #194	@ 0xc2
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f001 fe16 	bl	8004f70 <HAL_I2C_Master_Transmit_DMA>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <DACx61SW+0x94>
        return ret;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	e00b      	b.n	800336a <DACx61SW+0xac>
    }

    // Wait for the DMA transfer to complete and then send the general call command
    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 8003352:	bf00      	nop
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f002 f8f2 	bl	800553e <HAL_I2C_GetState>
 800335a:	4603      	mov	r3, r0
 800335c:	2b20      	cmp	r3, #32
 800335e:	d1f9      	bne.n	8003354 <DACx61SW+0x96>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 8003360:	2108      	movs	r1, #8
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff fee7 	bl	8003136 <mcp4728_generalCall>
 8003368:	4603      	mov	r3, r0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <HAL_MspInit+0x4c>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	4a0f      	ldr	r2, [pc, #60]	@ (80033c0 <HAL_MspInit+0x4c>)
 8003384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003388:	6453      	str	r3, [r2, #68]	@ 0x44
 800338a:	4b0d      	ldr	r3, [pc, #52]	@ (80033c0 <HAL_MspInit+0x4c>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_MspInit+0x4c>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	4a08      	ldr	r2, [pc, #32]	@ (80033c0 <HAL_MspInit+0x4c>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_MspInit+0x4c>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	@ 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <HAL_DAC_MspInit+0x7c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d127      	bne.n	8003436 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	4b16      	ldr	r3, [pc, #88]	@ (8003444 <HAL_DAC_MspInit+0x80>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <HAL_DAC_MspInit+0x80>)
 80033f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f6:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_DAC_MspInit+0x80>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	4b0f      	ldr	r3, [pc, #60]	@ (8003444 <HAL_DAC_MspInit+0x80>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	4a0e      	ldr	r2, [pc, #56]	@ (8003444 <HAL_DAC_MspInit+0x80>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6313      	str	r3, [r2, #48]	@ 0x30
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_DAC_MspInit+0x80>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800341e:	2330      	movs	r3, #48	@ 0x30
 8003420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003422:	2303      	movs	r3, #3
 8003424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342a:	f107 0314 	add.w	r3, r7, #20
 800342e:	4619      	mov	r1, r3
 8003430:	4805      	ldr	r0, [pc, #20]	@ (8003448 <HAL_DAC_MspInit+0x84>)
 8003432:	f001 fa43 	bl	80048bc <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8003436:	bf00      	nop
 8003438:	3728      	adds	r7, #40	@ 0x28
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40007400 	.word	0x40007400
 8003444:	40023800 	.word	0x40023800
 8003448:	40020000 	.word	0x40020000

0800344c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	@ 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003454:	f107 031c 	add.w	r3, r7, #28
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a4e      	ldr	r2, [pc, #312]	@ (80035a4 <HAL_I2C_MspInit+0x158>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d164      	bne.n	8003538 <HAL_I2C_MspInit+0xec>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	4b4d      	ldr	r3, [pc, #308]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	4a4c      	ldr	r2, [pc, #304]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	6313      	str	r3, [r2, #48]	@ 0x30
 800347e:	4b4a      	ldr	r3, [pc, #296]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800348a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800348e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003490:	2312      	movs	r3, #18
 8003492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800349c:	2304      	movs	r3, #4
 800349e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a0:	f107 031c 	add.w	r3, r7, #28
 80034a4:	4619      	mov	r1, r3
 80034a6:	4841      	ldr	r0, [pc, #260]	@ (80035ac <HAL_I2C_MspInit+0x160>)
 80034a8:	f001 fa08 	bl	80048bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	4b3d      	ldr	r3, [pc, #244]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	4a3c      	ldr	r2, [pc, #240]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 80034b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80034bc:	4b3a      	ldr	r3, [pc, #232]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80034c8:	4b39      	ldr	r3, [pc, #228]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034ca:	4a3a      	ldr	r2, [pc, #232]	@ (80035b4 <HAL_I2C_MspInit+0x168>)
 80034cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80034ce:	4b38      	ldr	r3, [pc, #224]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034d6:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034d8:	2240      	movs	r2, #64	@ 0x40
 80034da:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034dc:	4b34      	ldr	r3, [pc, #208]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034e2:	4b33      	ldr	r3, [pc, #204]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ea:	4b31      	ldr	r3, [pc, #196]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034f0:	4b2f      	ldr	r3, [pc, #188]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80034f6:	4b2e      	ldr	r3, [pc, #184]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80034fc:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 80034fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003502:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003504:	4b2a      	ldr	r3, [pc, #168]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 8003506:	2200      	movs	r2, #0
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800350a:	4829      	ldr	r0, [pc, #164]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 800350c:	f000 fdba 	bl	8004084 <HAL_DMA_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003516:	f7ff fda6 	bl	8003066 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 800351e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003520:	4a23      	ldr	r2, [pc, #140]	@ (80035b0 <HAL_I2C_MspInit+0x164>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	201f      	movs	r0, #31
 800352c:	f000 fc77 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003530:	201f      	movs	r0, #31
 8003532:	f000 fc90 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003536:	e031      	b.n	800359c <HAL_I2C_MspInit+0x150>
  else if(hi2c->Instance==I2C2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1e      	ldr	r2, [pc, #120]	@ (80035b8 <HAL_I2C_MspInit+0x16c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d12c      	bne.n	800359c <HAL_I2C_MspInit+0x150>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	6313      	str	r3, [r2, #48]	@ 0x30
 8003552:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800355e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003564:	2312      	movs	r3, #18
 8003566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356c:	2303      	movs	r3, #3
 800356e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003570:	2304      	movs	r3, #4
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	4619      	mov	r1, r3
 800357a:	480c      	ldr	r0, [pc, #48]	@ (80035ac <HAL_I2C_MspInit+0x160>)
 800357c:	f001 f99e 	bl	80048bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	4b08      	ldr	r3, [pc, #32]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	4a07      	ldr	r2, [pc, #28]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 800358a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800358e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_I2C_MspInit+0x15c>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	bf00      	nop
 800359e:	3730      	adds	r7, #48	@ 0x30
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40005400 	.word	0x40005400
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40020400 	.word	0x40020400
 80035b0:	20000100 	.word	0x20000100
 80035b4:	400260a0 	.word	0x400260a0
 80035b8:	40005800 	.word	0x40005800

080035bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_SPI_MspInit+0x94>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d134      	bne.n	8003648 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003654 <HAL_SPI_MspInit+0x98>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <HAL_SPI_MspInit+0x98>)
 80035e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ee:	4b19      	ldr	r3, [pc, #100]	@ (8003654 <HAL_SPI_MspInit+0x98>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	4b15      	ldr	r3, [pc, #84]	@ (8003654 <HAL_SPI_MspInit+0x98>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <HAL_SPI_MspInit+0x98>)
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	6313      	str	r3, [r2, #48]	@ 0x30
 800360a:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <HAL_SPI_MspInit+0x98>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003616:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800361a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003624:	2303      	movs	r3, #3
 8003626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003628:	2305      	movs	r3, #5
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4619      	mov	r1, r3
 8003632:	4809      	ldr	r0, [pc, #36]	@ (8003658 <HAL_SPI_MspInit+0x9c>)
 8003634:	f001 f942 	bl	80048bc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	2100      	movs	r1, #0
 800363c:	2024      	movs	r0, #36	@ 0x24
 800363e:	f000 fbee 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003642:	2024      	movs	r0, #36	@ 0x24
 8003644:	f000 fc07 	bl	8003e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003648:	bf00      	nop
 800364a:	3728      	adds	r7, #40	@ 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40003800 	.word	0x40003800
 8003654:	40023800 	.word	0x40023800
 8003658:	40020400 	.word	0x40020400

0800365c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b090      	sub	sp, #64	@ 0x40
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367c:	d153      	bne.n	8003726 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003682:	4b81      	ldr	r3, [pc, #516]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	4a80      	ldr	r2, [pc, #512]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6413      	str	r3, [r2, #64]	@ 0x40
 800368e:	4b7e      	ldr	r3, [pc, #504]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
 800369e:	4b7a      	ldr	r3, [pc, #488]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	4a79      	ldr	r2, [pc, #484]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036aa:	4b77      	ldr	r3, [pc, #476]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	4b73      	ldr	r3, [pc, #460]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	4a72      	ldr	r2, [pc, #456]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c6:	4b70      	ldr	r3, [pc, #448]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ROT1_A_Pin;
 80036d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036dc:	2301      	movs	r3, #1
 80036de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e0:	2300      	movs	r3, #0
 80036e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036e4:	2301      	movs	r3, #1
 80036e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROT1_A_GPIO_Port, &GPIO_InitStruct);
 80036e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036ec:	4619      	mov	r1, r3
 80036ee:	4867      	ldr	r0, [pc, #412]	@ (800388c <HAL_TIM_Encoder_MspInit+0x230>)
 80036f0:	f001 f8e4 	bl	80048bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ROT1_B_Pin;
 80036f4:	2308      	movs	r3, #8
 80036f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036fc:	2301      	movs	r3, #1
 80036fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003704:	2301      	movs	r3, #1
 8003706:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROT1_B_GPIO_Port, &GPIO_InitStruct);
 8003708:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800370c:	4619      	mov	r1, r3
 800370e:	4860      	ldr	r0, [pc, #384]	@ (8003890 <HAL_TIM_Encoder_MspInit+0x234>)
 8003710:	f001 f8d4 	bl	80048bc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003714:	2200      	movs	r2, #0
 8003716:	2100      	movs	r1, #0
 8003718:	201c      	movs	r0, #28
 800371a:	f000 fb80 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800371e:	201c      	movs	r0, #28
 8003720:	f000 fb99 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003724:	e0ac      	b.n	8003880 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5a      	ldr	r2, [pc, #360]	@ (8003894 <HAL_TIM_Encoder_MspInit+0x238>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d134      	bne.n	800379a <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	4b54      	ldr	r3, [pc, #336]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	4a53      	ldr	r2, [pc, #332]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 800373a:	f043 0302 	orr.w	r3, r3, #2
 800373e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003740:	4b51      	ldr	r3, [pc, #324]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	4b4d      	ldr	r3, [pc, #308]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	4a4c      	ldr	r2, [pc, #304]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6313      	str	r3, [r2, #48]	@ 0x30
 800375c:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ROT2_A_Pin|ROT2_B_Pin;
 8003768:	23c0      	movs	r3, #192	@ 0xc0
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003770:	2301      	movs	r3, #1
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	2300      	movs	r3, #0
 8003776:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003778:	2302      	movs	r3, #2
 800377a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003780:	4619      	mov	r1, r3
 8003782:	4842      	ldr	r0, [pc, #264]	@ (800388c <HAL_TIM_Encoder_MspInit+0x230>)
 8003784:	f001 f89a 	bl	80048bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003788:	2200      	movs	r2, #0
 800378a:	2100      	movs	r1, #0
 800378c:	201d      	movs	r0, #29
 800378e:	f000 fb46 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003792:	201d      	movs	r0, #29
 8003794:	f000 fb5f 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 8003798:	e072      	b.n	8003880 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3e      	ldr	r2, [pc, #248]	@ (8003898 <HAL_TIM_Encoder_MspInit+0x23c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d134      	bne.n	800380e <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	4b37      	ldr	r3, [pc, #220]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	4a36      	ldr	r2, [pc, #216]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b4:	4b34      	ldr	r3, [pc, #208]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	4b30      	ldr	r3, [pc, #192]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ROT3_A_Pin|ROT3_B_Pin;
 80037dc:	23c0      	movs	r3, #192	@ 0xc0
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e4:	2301      	movs	r3, #1
 80037e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	2300      	movs	r3, #0
 80037ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037ec:	2302      	movs	r3, #2
 80037ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037f4:	4619      	mov	r1, r3
 80037f6:	4826      	ldr	r0, [pc, #152]	@ (8003890 <HAL_TIM_Encoder_MspInit+0x234>)
 80037f8:	f001 f860 	bl	80048bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	201e      	movs	r0, #30
 8003802:	f000 fb0c 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003806:	201e      	movs	r0, #30
 8003808:	f000 fb25 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 800380c:	e038      	b.n	8003880 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a22      	ldr	r2, [pc, #136]	@ (800389c <HAL_TIM_Encoder_MspInit+0x240>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d133      	bne.n	8003880 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	4a19      	ldr	r2, [pc, #100]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003822:	f043 0308 	orr.w	r3, r3, #8
 8003826:	6413      	str	r3, [r2, #64]	@ 0x40
 8003828:	4b17      	ldr	r3, [pc, #92]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4a12      	ldr	r2, [pc, #72]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6313      	str	r3, [r2, #48]	@ 0x30
 8003844:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ROT4_A_Pin|ROT4_B_Pin;
 8003850:	2303      	movs	r3, #3
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003854:	2302      	movs	r3, #2
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003858:	2301      	movs	r3, #1
 800385a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385c:	2300      	movs	r3, #0
 800385e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003860:	2302      	movs	r3, #2
 8003862:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003868:	4619      	mov	r1, r3
 800386a:	4808      	ldr	r0, [pc, #32]	@ (800388c <HAL_TIM_Encoder_MspInit+0x230>)
 800386c:	f001 f826 	bl	80048bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003870:	2200      	movs	r2, #0
 8003872:	2100      	movs	r1, #0
 8003874:	2032      	movs	r0, #50	@ 0x32
 8003876:	f000 fad2 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800387a:	2032      	movs	r0, #50	@ 0x32
 800387c:	f000 faeb 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 8003880:	bf00      	nop
 8003882:	3740      	adds	r7, #64	@ 0x40
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	40020000 	.word	0x40020000
 8003890:	40020400 	.word	0x40020400
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00

080038a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003920 <HAL_TIM_Base_MspInit+0x80>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d116      	bne.n	80038e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_TIM_Base_MspInit+0x84>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003924 <HAL_TIM_Base_MspInit+0x84>)
 80038bc:	f043 0320 	orr.w	r3, r3, #32
 80038c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c2:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <HAL_TIM_Base_MspInit+0x84>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	2037      	movs	r0, #55	@ 0x37
 80038d4:	f000 faa3 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038d8:	2037      	movs	r0, #55	@ 0x37
 80038da:	f000 fabc 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80038de:	e01a      	b.n	8003916 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM13)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a10      	ldr	r2, [pc, #64]	@ (8003928 <HAL_TIM_Base_MspInit+0x88>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d115      	bne.n	8003916 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <HAL_TIM_Base_MspInit+0x84>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003924 <HAL_TIM_Base_MspInit+0x84>)
 80038f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003924 <HAL_TIM_Base_MspInit+0x84>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	202c      	movs	r0, #44	@ 0x2c
 800390c:	f000 fa87 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003910:	202c      	movs	r0, #44	@ 0x2c
 8003912:	f000 faa0 	bl	8003e56 <HAL_NVIC_EnableIRQ>
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40001400 	.word	0x40001400
 8003924:	40023800 	.word	0x40023800
 8003928:	40001c00 	.word	0x40001c00

0800392c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	@ 0x28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <HAL_UART_MspInit+0x94>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d134      	bne.n	80039b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	4b1c      	ldr	r3, [pc, #112]	@ (80039c4 <HAL_UART_MspInit+0x98>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	4a1b      	ldr	r2, [pc, #108]	@ (80039c4 <HAL_UART_MspInit+0x98>)
 8003958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800395c:	6413      	str	r3, [r2, #64]	@ 0x40
 800395e:	4b19      	ldr	r3, [pc, #100]	@ (80039c4 <HAL_UART_MspInit+0x98>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	4b15      	ldr	r3, [pc, #84]	@ (80039c4 <HAL_UART_MspInit+0x98>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <HAL_UART_MspInit+0x98>)
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	6313      	str	r3, [r2, #48]	@ 0x30
 800397a:	4b12      	ldr	r3, [pc, #72]	@ (80039c4 <HAL_UART_MspInit+0x98>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003986:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800398a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	2303      	movs	r3, #3
 8003996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003998:	2307      	movs	r3, #7
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	4619      	mov	r1, r3
 80039a2:	4809      	ldr	r0, [pc, #36]	@ (80039c8 <HAL_UART_MspInit+0x9c>)
 80039a4:	f000 ff8a 	bl	80048bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2100      	movs	r1, #0
 80039ac:	2027      	movs	r0, #39	@ 0x27
 80039ae:	f000 fa36 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039b2:	2027      	movs	r0, #39	@ 0x27
 80039b4:	f000 fa4f 	bl	8003e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80039b8:	bf00      	nop
 80039ba:	3728      	adds	r7, #40	@ 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40004800 	.word	0x40004800
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40020800 	.word	0x40020800

080039cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039d0:	bf00      	nop
 80039d2:	e7fd      	b.n	80039d0 <NMI_Handler+0x4>

080039d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039d8:	bf00      	nop
 80039da:	e7fd      	b.n	80039d8 <HardFault_Handler+0x4>

080039dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e0:	bf00      	nop
 80039e2:	e7fd      	b.n	80039e0 <MemManage_Handler+0x4>

080039e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <BusFault_Handler+0x4>

080039ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039f0:	bf00      	nop
 80039f2:	e7fd      	b.n	80039f0 <UsageFault_Handler+0x4>

080039f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a22:	f000 f901 	bl	8003c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003a30:	4802      	ldr	r0, [pc, #8]	@ (8003a3c <DMA1_Stream6_IRQHandler+0x10>)
 8003a32:	f000 fcbf 	bl	80043b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000100 	.word	0x20000100

08003a40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a44:	4802      	ldr	r0, [pc, #8]	@ (8003a50 <TIM2_IRQHandler+0x10>)
 8003a46:	f004 f8f3 	bl	8007c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200001b8 	.word	0x200001b8

08003a54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a58:	4802      	ldr	r0, [pc, #8]	@ (8003a64 <TIM3_IRQHandler+0x10>)
 8003a5a:	f004 f8e9 	bl	8007c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000200 	.word	0x20000200

08003a68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a6c:	4802      	ldr	r0, [pc, #8]	@ (8003a78 <TIM4_IRQHandler+0x10>)
 8003a6e:	f004 f8df 	bl	8007c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000248 	.word	0x20000248

08003a7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003a80:	4802      	ldr	r0, [pc, #8]	@ (8003a8c <I2C1_EV_IRQHandler+0x10>)
 8003a82:	f001 fba1 	bl	80051c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000058 	.word	0x20000058

08003a90 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003a94:	4802      	ldr	r0, [pc, #8]	@ (8003aa0 <SPI2_IRQHandler+0x10>)
 8003a96:	f003 fda5 	bl	80075e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000160 	.word	0x20000160

08003aa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003aa8:	4802      	ldr	r0, [pc, #8]	@ (8003ab4 <USART3_IRQHandler+0x10>)
 8003aaa:	f004 fca3 	bl	80083f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000368 	.word	0x20000368

08003ab8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_Pin);
 8003abc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003ac0:	f001 f8e4 	bl	8004c8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M1_Pin);
 8003ac4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003ac8:	f001 f8e0 	bl	8004c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003acc:	bf00      	nop
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003ad4:	4802      	ldr	r0, [pc, #8]	@ (8003ae0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003ad6:	f004 f8ab 	bl	8007c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000320 	.word	0x20000320

08003ae4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ae8:	4802      	ldr	r0, [pc, #8]	@ (8003af4 <TIM5_IRQHandler+0x10>)
 8003aea:	f004 f8a1 	bl	8007c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000290 	.word	0x20000290

08003af8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <TIM7_IRQHandler+0x10>)
 8003afe:	f004 f897 	bl	8007c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200002d8 	.word	0x200002d8

08003b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b10:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <SystemInit+0x20>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b16:	4a05      	ldr	r2, [pc, #20]	@ (8003b2c <SystemInit+0x20>)
 8003b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b34:	f7ff ffea 	bl	8003b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b38:	480c      	ldr	r0, [pc, #48]	@ (8003b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b3a:	490d      	ldr	r1, [pc, #52]	@ (8003b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b40:	e002      	b.n	8003b48 <LoopCopyDataInit>

08003b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b46:	3304      	adds	r3, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b4c:	d3f9      	bcc.n	8003b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b50:	4c0a      	ldr	r4, [pc, #40]	@ (8003b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b54:	e001      	b.n	8003b5a <LoopFillZerobss>

08003b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b58:	3204      	adds	r2, #4

08003b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b5c:	d3fb      	bcc.n	8003b56 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003b5e:	f005 fb6d 	bl	800923c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b62:	f7fe fdcd 	bl	8002700 <main>
  bx  lr    
 8003b66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003b74:	080094f0 	.word	0x080094f0
  ldr r2, =_sbss
 8003b78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003b7c:	20000524 	.word	0x20000524

08003b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b80:	e7fe      	b.n	8003b80 <ADC_IRQHandler>
	...

08003b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b88:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <HAL_Init+0x40>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc4 <HAL_Init+0x40>)
 8003b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <HAL_Init+0x40>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <HAL_Init+0x40>)
 8003b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba0:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <HAL_Init+0x40>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a07      	ldr	r2, [pc, #28]	@ (8003bc4 <HAL_Init+0x40>)
 8003ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bac:	2003      	movs	r0, #3
 8003bae:	f000 f92b 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bb2:	200f      	movs	r0, #15
 8003bb4:	f000 f808 	bl	8003bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bb8:	f7ff fbdc 	bl	8003374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023c00 	.word	0x40023c00

08003bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd0:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_InitTick+0x54>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <HAL_InitTick+0x58>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f943 	bl	8003e72 <HAL_SYSTICK_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e00e      	b.n	8003c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0f      	cmp	r3, #15
 8003bfa:	d80a      	bhi.n	8003c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	f000 f90b 	bl	8003e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c08:	4a06      	ldr	r2, [pc, #24]	@ (8003c24 <HAL_InitTick+0x5c>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000008 	.word	0x20000008
 8003c24:	20000004 	.word	0x20000004

08003c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <HAL_IncTick+0x20>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_IncTick+0x24>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	4a04      	ldr	r2, [pc, #16]	@ (8003c4c <HAL_IncTick+0x24>)
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000008 	.word	0x20000008
 8003c4c:	20000520 	.word	0x20000520

08003c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return uwTick;
 8003c54:	4b03      	ldr	r3, [pc, #12]	@ (8003c64 <HAL_GetTick+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000520 	.word	0x20000520

08003c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9a:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60d3      	str	r3, [r2, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0307 	and.w	r3, r3, #7
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db0b      	blt.n	8003cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	4907      	ldr	r1, [pc, #28]	@ (8003d04 <__NVIC_EnableIRQ+0x38>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000e100 	.word	0xe000e100

08003d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	db0a      	blt.n	8003d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	490c      	ldr	r1, [pc, #48]	@ (8003d54 <__NVIC_SetPriority+0x4c>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d30:	e00a      	b.n	8003d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4908      	ldr	r1, [pc, #32]	@ (8003d58 <__NVIC_SetPriority+0x50>)
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3b04      	subs	r3, #4
 8003d40:	0112      	lsls	r2, r2, #4
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	440b      	add	r3, r1
 8003d46:	761a      	strb	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000e100 	.word	0xe000e100
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	@ 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f1c3 0307 	rsb	r3, r3, #7
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	bf28      	it	cs
 8003d7a:	2304      	movcs	r3, #4
 8003d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d902      	bls.n	8003d8c <NVIC_EncodePriority+0x30>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3b03      	subs	r3, #3
 8003d8a:	e000      	b.n	8003d8e <NVIC_EncodePriority+0x32>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	401a      	ands	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da4:	f04f 31ff 	mov.w	r1, #4294967295
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	43d9      	mvns	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	4313      	orrs	r3, r2
         );
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	@ 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd4:	d301      	bcc.n	8003dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00f      	b.n	8003dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <SysTick_Config+0x40>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003de2:	210f      	movs	r1, #15
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f7ff ff8e 	bl	8003d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dec:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <SysTick_Config+0x40>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003df2:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <SysTick_Config+0x40>)
 8003df4:	2207      	movs	r2, #7
 8003df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000e010 	.word	0xe000e010

08003e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff29 	bl	8003c68 <__NVIC_SetPriorityGrouping>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e30:	f7ff ff3e 	bl	8003cb0 <__NVIC_GetPriorityGrouping>
 8003e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f7ff ff8e 	bl	8003d5c <NVIC_EncodePriority>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff5d 	bl	8003d08 <__NVIC_SetPriority>
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff31 	bl	8003ccc <__NVIC_EnableIRQ>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffa2 	bl	8003dc4 <SysTick_Config>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e014      	b.n	8003ec6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	791b      	ldrb	r3, [r3, #4]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fa89 	bl	80033c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e046      	b.n	8003f70 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	795b      	ldrb	r3, [r3, #5]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_DAC_Start+0x20>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e040      	b.n	8003f70 <HAL_DAC_Start+0xa2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2201      	movs	r2, #1
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10f      	bne.n	8003f38 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003f22:	2b3c      	cmp	r3, #60	@ 0x3c
 8003f24:	d11d      	bne.n	8003f62 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	e014      	b.n	8003f62 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	213c      	movs	r1, #60	@ 0x3c
 8003f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d107      	bne.n	8003f62 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0202 	orr.w	r2, r2, #2
 8003f60:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e015      	b.n	8003fc4 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3308      	adds	r3, #8
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e004      	b.n	8003fba <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	@ 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_DAC_ConfigChannel+0x1c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e042      	b.n	8004076 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	795b      	ldrb	r3, [r3, #5]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_DAC_ConfigChannel+0x2c>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e03c      	b.n	8004076 <HAL_DAC_ConfigChannel+0xa6>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2202      	movs	r2, #2
 8004006:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	22c0      	movs	r2, #192	@ 0xc0
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43da      	mvns	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	400a      	ands	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004074:	7ffb      	ldrb	r3, [r7, #31]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	@ 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004090:	f7ff fdde 	bl	8003c50 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e099      	b.n	80041d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040c0:	e00f      	b.n	80040e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c2:	f7ff fdc5 	bl	8003c50 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	d908      	bls.n	80040e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2203      	movs	r2, #3
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e078      	b.n	80041d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e8      	bne.n	80040c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4b38      	ldr	r3, [pc, #224]	@ (80041dc <HAL_DMA_Init+0x158>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800410e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	2b04      	cmp	r3, #4
 800413a:	d107      	bne.n	800414c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004144:	4313      	orrs	r3, r2
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0307 	bic.w	r3, r3, #7
 8004162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	2b04      	cmp	r3, #4
 8004174:	d117      	bne.n	80041a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fb1b 	bl	80047c4 <DMA_CheckFifoParam>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2240      	movs	r2, #64	@ 0x40
 8004198:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80041a2:	2301      	movs	r3, #1
 80041a4:	e016      	b.n	80041d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fad2 	bl	8004758 <DMA_CalcBaseAndBitshift>
 80041b4:	4603      	mov	r3, r0
 80041b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	223f      	movs	r2, #63	@ 0x3f
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	f010803f 	.word	0xf010803f

080041e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_DMA_Start_IT+0x26>
 8004202:	2302      	movs	r3, #2
 8004204:	e040      	b.n	8004288 <HAL_DMA_Start_IT+0xa8>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d12f      	bne.n	800427a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa64 	bl	80046fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	223f      	movs	r2, #63	@ 0x3f
 800423a:	409a      	lsls	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0216 	orr.w	r2, r2, #22
 800424e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0208 	orr.w	r2, r2, #8
 8004266:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e005      	b.n	8004286 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800429e:	f7ff fcd7 	bl	8003c50 <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d008      	beq.n	80042c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	@ 0x80
 80042b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e052      	b.n	8004368 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0216 	bic.w	r2, r2, #22
 80042d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <HAL_DMA_Abort+0x62>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0208 	bic.w	r2, r2, #8
 8004300:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004312:	e013      	b.n	800433c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004314:	f7ff fc9c 	bl	8003c50 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b05      	cmp	r3, #5
 8004320:	d90c      	bls.n	800433c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2203      	movs	r2, #3
 800432c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e015      	b.n	8004368 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e4      	bne.n	8004314 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	223f      	movs	r2, #63	@ 0x3f
 8004350:	409a      	lsls	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d004      	beq.n	800438e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2280      	movs	r2, #128	@ 0x80
 8004388:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00c      	b.n	80043a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2205      	movs	r2, #5
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043c0:	4b8e      	ldr	r3, [pc, #568]	@ (80045fc <HAL_DMA_IRQHandler+0x248>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004600 <HAL_DMA_IRQHandler+0x24c>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0a9b      	lsrs	r3, r3, #10
 80043cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043de:	2208      	movs	r2, #8
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01a      	beq.n	8004420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0204 	bic.w	r2, r2, #4
 8004406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	2208      	movs	r2, #8
 800440e:	409a      	lsls	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d012      	beq.n	8004456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	2201      	movs	r2, #1
 8004444:	409a      	lsls	r2, r3
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444e:	f043 0202 	orr.w	r2, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	2204      	movs	r2, #4
 800445c:	409a      	lsls	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d012      	beq.n	800448c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004478:	2204      	movs	r2, #4
 800447a:	409a      	lsls	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f043 0204 	orr.w	r2, r3, #4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004490:	2210      	movs	r2, #16
 8004492:	409a      	lsls	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d043      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03c      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ae:	2210      	movs	r2, #16
 80044b0:	409a      	lsls	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d024      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
 80044e2:	e01f      	b.n	8004524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
 80044f4:	e016      	b.n	8004524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d107      	bne.n	8004514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0208 	bic.w	r2, r2, #8
 8004512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	2220      	movs	r2, #32
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 808f 	beq.w	8004654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8087 	beq.w	8004654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454a:	2220      	movs	r2, #32
 800454c:	409a      	lsls	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b05      	cmp	r3, #5
 800455c:	d136      	bne.n	80045cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0216 	bic.w	r2, r2, #22
 800456c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800457c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <HAL_DMA_IRQHandler+0x1da>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0208 	bic.w	r2, r2, #8
 800459c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a2:	223f      	movs	r2, #63	@ 0x3f
 80045a4:	409a      	lsls	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d07e      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
        }
        return;
 80045ca:	e079      	b.n	80046c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01d      	beq.n	8004616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d031      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
 80045f8:	e02c      	b.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
 80045fa:	bf00      	nop
 80045fc:	20000000 	.word	0x20000000
 8004600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d023      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
 8004614:	e01e      	b.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10f      	bne.n	8004644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0210 	bic.w	r2, r2, #16
 8004632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004658:	2b00      	cmp	r3, #0
 800465a:	d032      	beq.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d022      	beq.n	80046ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2205      	movs	r2, #5
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3301      	adds	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	429a      	cmp	r2, r3
 800468a:	d307      	bcc.n	800469c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f2      	bne.n	8004680 <HAL_DMA_IRQHandler+0x2cc>
 800469a:	e000      	b.n	800469e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800469c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
 80046be:	e000      	b.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80046c0:	bf00      	nop
    }
  }
}
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046d6:	b2db      	uxtb	r3, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004718:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b40      	cmp	r3, #64	@ 0x40
 8004728:	d108      	bne.n	800473c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800473a:	e007      	b.n	800474c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	3b10      	subs	r3, #16
 8004768:	4a14      	ldr	r2, [pc, #80]	@ (80047bc <DMA_CalcBaseAndBitshift+0x64>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004772:	4a13      	ldr	r2, [pc, #76]	@ (80047c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d909      	bls.n	800479a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	1d1a      	adds	r2, r3, #4
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	659a      	str	r2, [r3, #88]	@ 0x58
 8004798:	e007      	b.n	80047aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	aaaaaaab 	.word	0xaaaaaaab
 80047c0:	080094d0 	.word	0x080094d0

080047c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11f      	bne.n	800481e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d856      	bhi.n	8004892 <DMA_CheckFifoParam+0xce>
 80047e4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ec <DMA_CheckFifoParam+0x28>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	0800480f 	.word	0x0800480f
 80047f4:	080047fd 	.word	0x080047fd
 80047f8:	08004893 	.word	0x08004893
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d046      	beq.n	8004896 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480c:	e043      	b.n	8004896 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004816:	d140      	bne.n	800489a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800481c:	e03d      	b.n	800489a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004826:	d121      	bne.n	800486c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d837      	bhi.n	800489e <DMA_CheckFifoParam+0xda>
 800482e:	a201      	add	r2, pc, #4	@ (adr r2, 8004834 <DMA_CheckFifoParam+0x70>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004845 	.word	0x08004845
 8004838:	0800484b 	.word	0x0800484b
 800483c:	08004845 	.word	0x08004845
 8004840:	0800485d 	.word	0x0800485d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      break;
 8004848:	e030      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d025      	beq.n	80048a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800485a:	e022      	b.n	80048a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004864:	d11f      	bne.n	80048a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800486a:	e01c      	b.n	80048a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d903      	bls.n	800487a <DMA_CheckFifoParam+0xb6>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d003      	beq.n	8004880 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004878:	e018      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
      break;
 800487e:	e015      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00e      	beq.n	80048aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e00b      	b.n	80048aa <DMA_CheckFifoParam+0xe6>
      break;
 8004892:	bf00      	nop
 8004894:	e00a      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
      break;
 8004896:	bf00      	nop
 8004898:	e008      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
      break;
 800489a:	bf00      	nop
 800489c:	e006      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
      break;
 800489e:	bf00      	nop
 80048a0:	e004      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
      break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
      break;   
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <DMA_CheckFifoParam+0xe8>
      break;
 80048aa:	bf00      	nop
    }
  } 
  
  return status; 
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop

080048bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	@ 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	e16b      	b.n	8004bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048d8:	2201      	movs	r2, #1
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	f040 815a 	bne.w	8004baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d005      	beq.n	800490e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800490a:	2b02      	cmp	r3, #2
 800490c:	d130      	bne.n	8004970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004944:	2201      	movs	r2, #1
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 0201 	and.w	r2, r3, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b03      	cmp	r3, #3
 800497a:	d017      	beq.n	80049ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2203      	movs	r2, #3
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d123      	bne.n	8004a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	08da      	lsrs	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3208      	adds	r2, #8
 80049c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	220f      	movs	r2, #15
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	08da      	lsrs	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3208      	adds	r2, #8
 80049fa:	69b9      	ldr	r1, [r7, #24]
 80049fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 0203 	and.w	r2, r3, #3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80b4 	beq.w	8004baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	4b60      	ldr	r3, [pc, #384]	@ (8004bc8 <HAL_GPIO_Init+0x30c>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	4a5f      	ldr	r2, [pc, #380]	@ (8004bc8 <HAL_GPIO_Init+0x30c>)
 8004a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a52:	4b5d      	ldr	r3, [pc, #372]	@ (8004bc8 <HAL_GPIO_Init+0x30c>)
 8004a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8004bcc <HAL_GPIO_Init+0x310>)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	3302      	adds	r3, #2
 8004a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	220f      	movs	r2, #15
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a52      	ldr	r2, [pc, #328]	@ (8004bd0 <HAL_GPIO_Init+0x314>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d02b      	beq.n	8004ae2 <HAL_GPIO_Init+0x226>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a51      	ldr	r2, [pc, #324]	@ (8004bd4 <HAL_GPIO_Init+0x318>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d025      	beq.n	8004ade <HAL_GPIO_Init+0x222>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a50      	ldr	r2, [pc, #320]	@ (8004bd8 <HAL_GPIO_Init+0x31c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01f      	beq.n	8004ada <HAL_GPIO_Init+0x21e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a4f      	ldr	r2, [pc, #316]	@ (8004bdc <HAL_GPIO_Init+0x320>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d019      	beq.n	8004ad6 <HAL_GPIO_Init+0x21a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a4e      	ldr	r2, [pc, #312]	@ (8004be0 <HAL_GPIO_Init+0x324>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_GPIO_Init+0x216>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a4d      	ldr	r2, [pc, #308]	@ (8004be4 <HAL_GPIO_Init+0x328>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00d      	beq.n	8004ace <HAL_GPIO_Init+0x212>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a4c      	ldr	r2, [pc, #304]	@ (8004be8 <HAL_GPIO_Init+0x32c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <HAL_GPIO_Init+0x20e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a4b      	ldr	r2, [pc, #300]	@ (8004bec <HAL_GPIO_Init+0x330>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <HAL_GPIO_Init+0x20a>
 8004ac2:	2307      	movs	r3, #7
 8004ac4:	e00e      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	e00c      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004aca:	2306      	movs	r3, #6
 8004acc:	e00a      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ace:	2305      	movs	r3, #5
 8004ad0:	e008      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	e006      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e004      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e002      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	f002 0203 	and.w	r2, r2, #3
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	4093      	lsls	r3, r2
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004af4:	4935      	ldr	r1, [pc, #212]	@ (8004bcc <HAL_GPIO_Init+0x310>)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	3302      	adds	r3, #2
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b02:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b26:	4a32      	ldr	r2, [pc, #200]	@ (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b2c:	4b30      	ldr	r3, [pc, #192]	@ (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b50:	4a27      	ldr	r2, [pc, #156]	@ (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b56:	4b26      	ldr	r3, [pc, #152]	@ (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ba4:	4a12      	ldr	r2, [pc, #72]	@ (8004bf0 <HAL_GPIO_Init+0x334>)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3301      	adds	r3, #1
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	f67f ae90 	bls.w	80048d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3724      	adds	r7, #36	@ 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40013800 	.word	0x40013800
 8004bd0:	40020000 	.word	0x40020000
 8004bd4:	40020400 	.word	0x40020400
 8004bd8:	40020800 	.word	0x40020800
 8004bdc:	40020c00 	.word	0x40020c00
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40021400 	.word	0x40021400
 8004be8:	40021800 	.word	0x40021800
 8004bec:	40021c00 	.word	0x40021c00
 8004bf0:	40013c00 	.word	0x40013c00

08004bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	887b      	ldrh	r3, [r7, #2]
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e001      	b.n	8004c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	807b      	strh	r3, [r7, #2]
 8004c30:	4613      	mov	r3, r2
 8004c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c34:	787b      	ldrb	r3, [r7, #1]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c40:	e003      	b.n	8004c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c42:	887b      	ldrh	r3, [r7, #2]
 8004c44:	041a      	lsls	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	619a      	str	r2, [r3, #24]
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c68:	887a      	ldrh	r2, [r7, #2]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	041a      	lsls	r2, r3, #16
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	43d9      	mvns	r1, r3
 8004c74:	887b      	ldrh	r3, [r7, #2]
 8004c76:	400b      	ands	r3, r1
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	619a      	str	r2, [r3, #24]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c96:	4b08      	ldr	r3, [pc, #32]	@ (8004cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ca2:	4a05      	ldr	r2, [pc, #20]	@ (8004cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fce4 	bl	8002678 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40013c00 	.word	0x40013c00

08004cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e12b      	b.n	8004f26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fe fbb2 	bl	800344c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	@ 0x24
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d20:	f002 fbae 	bl	8007480 <HAL_RCC_GetPCLK1Freq>
 8004d24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a81      	ldr	r2, [pc, #516]	@ (8004f30 <HAL_I2C_Init+0x274>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d807      	bhi.n	8004d40 <HAL_I2C_Init+0x84>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a80      	ldr	r2, [pc, #512]	@ (8004f34 <HAL_I2C_Init+0x278>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bf94      	ite	ls
 8004d38:	2301      	movls	r3, #1
 8004d3a:	2300      	movhi	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e006      	b.n	8004d4e <HAL_I2C_Init+0x92>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a7d      	ldr	r2, [pc, #500]	@ (8004f38 <HAL_I2C_Init+0x27c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bf94      	ite	ls
 8004d48:	2301      	movls	r3, #1
 8004d4a:	2300      	movhi	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0e7      	b.n	8004f26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a78      	ldr	r2, [pc, #480]	@ (8004f3c <HAL_I2C_Init+0x280>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	0c9b      	lsrs	r3, r3, #18
 8004d60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4a6a      	ldr	r2, [pc, #424]	@ (8004f30 <HAL_I2C_Init+0x274>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d802      	bhi.n	8004d90 <HAL_I2C_Init+0xd4>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	e009      	b.n	8004da4 <HAL_I2C_Init+0xe8>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	4a69      	ldr	r2, [pc, #420]	@ (8004f40 <HAL_I2C_Init+0x284>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	099b      	lsrs	r3, r3, #6
 8004da2:	3301      	adds	r3, #1
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004db6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	495c      	ldr	r1, [pc, #368]	@ (8004f30 <HAL_I2C_Init+0x274>)
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	d819      	bhi.n	8004df8 <HAL_I2C_Init+0x13c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1e59      	subs	r1, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dd2:	1c59      	adds	r1, r3, #1
 8004dd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004dd8:	400b      	ands	r3, r1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_I2C_Init+0x138>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1e59      	subs	r1, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dec:	3301      	adds	r3, #1
 8004dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df2:	e051      	b.n	8004e98 <HAL_I2C_Init+0x1dc>
 8004df4:	2304      	movs	r3, #4
 8004df6:	e04f      	b.n	8004e98 <HAL_I2C_Init+0x1dc>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d111      	bne.n	8004e24 <HAL_I2C_Init+0x168>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1e58      	subs	r0, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	440b      	add	r3, r1
 8004e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e12:	3301      	adds	r3, #1
 8004e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e012      	b.n	8004e4a <HAL_I2C_Init+0x18e>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e58      	subs	r0, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	0099      	lsls	r1, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_I2C_Init+0x196>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e022      	b.n	8004e98 <HAL_I2C_Init+0x1dc>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10e      	bne.n	8004e78 <HAL_I2C_Init+0x1bc>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1e58      	subs	r0, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6859      	ldr	r1, [r3, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	440b      	add	r3, r1
 8004e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e76:	e00f      	b.n	8004e98 <HAL_I2C_Init+0x1dc>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1e58      	subs	r0, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6859      	ldr	r1, [r3, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	0099      	lsls	r1, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	6809      	ldr	r1, [r1, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ec6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6911      	ldr	r1, [r2, #16]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68d2      	ldr	r2, [r2, #12]
 8004ed2:	4311      	orrs	r1, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	000186a0 	.word	0x000186a0
 8004f34:	001e847f 	.word	0x001e847f
 8004f38:	003d08ff 	.word	0x003d08ff
 8004f3c:	431bde83 	.word	0x431bde83
 8004f40:	10624dd3 	.word	0x10624dd3

08004f44 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f56:	2b80      	cmp	r3, #128	@ 0x80
 8004f58:	d103      	bne.n	8004f62 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
  }
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	817b      	strh	r3, [r7, #10]
 8004f80:	4613      	mov	r3, r2
 8004f82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	f040 8109 	bne.w	80051a8 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f96:	4b87      	ldr	r3, [pc, #540]	@ (80051b4 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	08db      	lsrs	r3, r3, #3
 8004f9c:	4a86      	ldr	r2, [pc, #536]	@ (80051b8 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	0a1a      	lsrs	r2, r3, #8
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009a      	lsls	r2, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d112      	bne.n	8004fe2 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0e3      	b.n	80051aa <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d0df      	beq.n	8004fb0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2C_Master_Transmit_DMA+0x8e>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e0d5      	b.n	80051aa <HAL_I2C_Master_Transmit_DMA+0x23a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d007      	beq.n	8005024 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	@ 0x21
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2210      	movs	r2, #16
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	893a      	ldrh	r2, [r7, #8]
 8005054:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a56      	ldr	r2, [pc, #344]	@ (80051bc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8005064:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005066:	897a      	ldrh	r2, [r7, #10]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d07b      	beq.n	800516c <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	d02a      	beq.n	80050d2 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005080:	4a4f      	ldr	r2, [pc, #316]	@ (80051c0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8005082:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005088:	4a4e      	ldr	r2, [pc, #312]	@ (80051c4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800508a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005098:	2200      	movs	r2, #0
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a0:	2200      	movs	r2, #0
 80050a2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a8:	2200      	movs	r2, #0
 80050aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	4619      	mov	r1, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3310      	adds	r3, #16
 80050bc:	461a      	mov	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c2:	f7ff f88d 	bl	80041e0 <HAL_DMA_Start_IT>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d139      	bne.n	8005144 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 80050d0:	e013      	b.n	80050fa <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e057      	b.n	80051aa <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005110:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005120:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005130:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e02f      	b.n	80051a4 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	f043 0210 	orr.w	r2, r3, #16
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e01e      	b.n	80051aa <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800517a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800518a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80051a2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e000      	b.n	80051aa <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80051a8:	2302      	movs	r3, #2
  }
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000000 	.word	0x20000000
 80051b8:	14f8b589 	.word	0x14f8b589
 80051bc:	ffff0000 	.word	0xffff0000
 80051c0:	0800677d 	.word	0x0800677d
 80051c4:	0800693b 	.word	0x0800693b

080051c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d003      	beq.n	8005200 <HAL_I2C_EV_IRQHandler+0x38>
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	f040 80b1 	bne.w	8005362 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <HAL_I2C_EV_IRQHandler+0x6e>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005220:	d003      	beq.n	800522a <HAL_I2C_EV_IRQHandler+0x62>
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005228:	d101      	bne.n	800522e <HAL_I2C_EV_IRQHandler+0x66>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <HAL_I2C_EV_IRQHandler+0x68>
 800522e:	2300      	movs	r3, #0
 8005230:	2b01      	cmp	r3, #1
 8005232:	f000 8114 	beq.w	800545e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <HAL_I2C_EV_IRQHandler+0x90>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 fc8c 	bl	8006b68 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fce9 	bl	8005c28 <I2C_Master_SB>
 8005256:	e083      	b.n	8005360 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_I2C_EV_IRQHandler+0xac>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fd61 	bl	8005d34 <I2C_Master_ADD10>
 8005272:	e075      	b.n	8005360 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_I2C_EV_IRQHandler+0xc8>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fd7d 	bl	8005d88 <I2C_Master_ADDR>
 800528e:	e067      	b.n	8005360 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d036      	beq.n	8005308 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a8:	f000 80db 	beq.w	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00d      	beq.n	80052d2 <HAL_I2C_EV_IRQHandler+0x10a>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_I2C_EV_IRQHandler+0x10a>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f945 	bl	800555a <I2C_MasterTransmit_TXE>
 80052d0:	e046      	b.n	8005360 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80c2 	beq.w	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80bc 	beq.w	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052ea:	7bbb      	ldrb	r3, [r7, #14]
 80052ec:	2b21      	cmp	r3, #33	@ 0x21
 80052ee:	d103      	bne.n	80052f8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f9ce 	bl	8005692 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052f6:	e0b4      	b.n	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b40      	cmp	r3, #64	@ 0x40
 80052fc:	f040 80b1 	bne.w	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fa3c 	bl	800577e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005306:	e0ac      	b.n	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005312:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005316:	f000 80a4 	beq.w	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00d      	beq.n	8005340 <HAL_I2C_EV_IRQHandler+0x178>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <HAL_I2C_EV_IRQHandler+0x178>
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fab8 	bl	80058ae <I2C_MasterReceive_RXNE>
 800533e:	e00f      	b.n	8005360 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 808b 	beq.w	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8085 	beq.w	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fb70 	bl	8005a3e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800535e:	e080      	b.n	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
 8005360:	e07f      	b.n	8005462 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e007      	b.n	8005384 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d011      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x1ea>
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 ff3b 	bl	8006226 <I2C_Slave_ADDR>
 80053b0:	e05a      	b.n	8005468 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x206>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 ff76 	bl	80062b8 <I2C_Slave_STOPF>
 80053cc:	e04c      	b.n	8005468 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053ce:	7bbb      	ldrb	r3, [r7, #14]
 80053d0:	2b21      	cmp	r3, #33	@ 0x21
 80053d2:	d002      	beq.n	80053da <HAL_I2C_EV_IRQHandler+0x212>
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	2b29      	cmp	r3, #41	@ 0x29
 80053d8:	d120      	bne.n	800541c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <HAL_I2C_EV_IRQHandler+0x238>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d008      	beq.n	8005400 <HAL_I2C_EV_IRQHandler+0x238>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fe56 	bl	80060aa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053fe:	e032      	b.n	8005466 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d02d      	beq.n	8005466 <HAL_I2C_EV_IRQHandler+0x29e>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005410:	2b00      	cmp	r3, #0
 8005412:	d028      	beq.n	8005466 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fe85 	bl	8006124 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800541a:	e024      	b.n	8005466 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <HAL_I2C_EV_IRQHandler+0x27a>
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_I2C_EV_IRQHandler+0x27a>
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fe93 	bl	8006166 <I2C_SlaveReceive_RXNE>
 8005440:	e012      	b.n	8005468 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00d      	beq.n	8005468 <HAL_I2C_EV_IRQHandler+0x2a0>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005452:	2b00      	cmp	r3, #0
 8005454:	d008      	beq.n	8005468 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fec3 	bl	80061e2 <I2C_SlaveReceive_BTF>
 800545c:	e004      	b.n	8005468 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800545e:	bf00      	nop
 8005460:	e002      	b.n	8005468 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005466:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	460b      	mov	r3, r1
 80054c8:	70fb      	strb	r3, [r7, #3]
 80054ca:	4613      	mov	r3, r2
 80054cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800554c:	b2db      	uxtb	r3, r3
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005568:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005570:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005576:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557c:	2b00      	cmp	r3, #0
 800557e:	d150      	bne.n	8005622 <I2C_MasterTransmit_TXE+0xc8>
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b21      	cmp	r3, #33	@ 0x21
 8005584:	d14d      	bne.n	8005622 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d01d      	beq.n	80055c8 <I2C_MasterTransmit_TXE+0x6e>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b20      	cmp	r3, #32
 8005590:	d01a      	beq.n	80055c8 <I2C_MasterTransmit_TXE+0x6e>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005598:	d016      	beq.n	80055c8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055a8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2211      	movs	r2, #17
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ff54 	bl	800546e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055c6:	e060      	b.n	800568a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055d6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d107      	bne.n	8005612 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff6f 	bl	80054ee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005610:	e03b      	b.n	800568a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff ff27 	bl	800546e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005620:	e033      	b.n	800568a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b21      	cmp	r3, #33	@ 0x21
 8005626:	d005      	beq.n	8005634 <I2C_MasterTransmit_TXE+0xda>
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	2b40      	cmp	r3, #64	@ 0x40
 800562c:	d12d      	bne.n	800568a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b22      	cmp	r3, #34	@ 0x22
 8005632:	d12a      	bne.n	800568a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d108      	bne.n	8005650 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800564c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800564e:	e01c      	b.n	800568a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b40      	cmp	r3, #64	@ 0x40
 800565a:	d103      	bne.n	8005664 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f88e 	bl	800577e <I2C_MemoryTransmit_TXE_BTF>
}
 8005662:	e012      	b.n	800568a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005688:	e7ff      	b.n	800568a <I2C_MasterTransmit_TXE+0x130>
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b21      	cmp	r3, #33	@ 0x21
 80056aa:	d164      	bne.n	8005776 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d012      	beq.n	80056dc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80056da:	e04c      	b.n	8005776 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d01d      	beq.n	800571e <I2C_MasterTransmit_BTF+0x8c>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d01a      	beq.n	800571e <I2C_MasterTransmit_BTF+0x8c>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056ee:	d016      	beq.n	800571e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056fe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2211      	movs	r2, #17
 8005704:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fea9 	bl	800546e <HAL_I2C_MasterTxCpltCallback>
}
 800571c:	e02b      	b.n	8005776 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800572c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b40      	cmp	r3, #64	@ 0x40
 8005756:	d107      	bne.n	8005768 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff fec4 	bl	80054ee <HAL_I2C_MemTxCpltCallback>
}
 8005766:	e006      	b.n	8005776 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff fe7c 	bl	800546e <HAL_I2C_MasterTxCpltCallback>
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11d      	bne.n	80057d2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d10b      	bne.n	80057b6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80057b4:	e077      	b.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	121b      	asrs	r3, r3, #8
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057d0:	e069      	b.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d10b      	bne.n	80057f2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057f0:	e059      	b.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d152      	bne.n	80058a0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	2b22      	cmp	r3, #34	@ 0x22
 80057fe:	d10d      	bne.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800580e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800581a:	e044      	b.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d015      	beq.n	8005852 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b21      	cmp	r3, #33	@ 0x21
 800582a:	d112      	bne.n	8005852 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005850:	e029      	b.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d124      	bne.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b21      	cmp	r3, #33	@ 0x21
 8005860:	d121      	bne.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005870:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005880:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fe28 	bl	80054ee <HAL_I2C_MemTxCpltCallback>
}
 800589e:	e002      	b.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fb4f 	bl	8004f44 <I2C_Flush_DR>
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b22      	cmp	r3, #34	@ 0x22
 80058c0:	f040 80b9 	bne.w	8005a36 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d921      	bls.n	800591c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b03      	cmp	r3, #3
 8005906:	f040 8096 	bne.w	8005a36 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005918:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800591a:	e08c      	b.n	8005a36 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	2b02      	cmp	r3, #2
 8005922:	d07f      	beq.n	8005a24 <I2C_MasterReceive_RXNE+0x176>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d002      	beq.n	8005930 <I2C_MasterReceive_RXNE+0x82>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d179      	bne.n	8005a24 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 f8e7 	bl	8006b04 <I2C_WaitOnSTOPRequestThroughIT>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d14c      	bne.n	80059d6 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800594a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800595a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b40      	cmp	r3, #64	@ 0x40
 8005994:	d10a      	bne.n	80059ac <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff fdac 	bl	8005502 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059aa:	e044      	b.n	8005a36 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d002      	beq.n	80059c0 <I2C_MasterReceive_RXNE+0x112>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d103      	bne.n	80059c8 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80059c6:	e002      	b.n	80059ce <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2212      	movs	r2, #18
 80059cc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fd57 	bl	8005482 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059d4:	e02f      	b.n	8005a36 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fd7a 	bl	8005516 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a22:	e008      	b.n	8005a36 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a32:	605a      	str	r2, [r3, #4]
}
 8005a34:	e7ff      	b.n	8005a36 <I2C_MasterReceive_RXNE+0x188>
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d11b      	bne.n	8005a8e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a64:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005a8c:	e0c8      	b.n	8005c20 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d129      	bne.n	8005aec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d00a      	beq.n	8005ac4 <I2C_MasterReceive_BTF+0x86>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d007      	beq.n	8005ac4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005aea:	e099      	b.n	8005c20 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	f040 8081 	bne.w	8005bfa <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d002      	beq.n	8005b04 <I2C_MasterReceive_BTF+0xc6>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d108      	bne.n	8005b16 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e019      	b.n	8005b4a <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d002      	beq.n	8005b22 <I2C_MasterReceive_BTF+0xe4>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d108      	bne.n	8005b34 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	e00a      	b.n	8005b4a <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d007      	beq.n	8005b4a <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005ba4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b40      	cmp	r3, #64	@ 0x40
 8005bb8:	d10a      	bne.n	8005bd0 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fc9a 	bl	8005502 <HAL_I2C_MemRxCpltCallback>
}
 8005bce:	e027      	b.n	8005c20 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d002      	beq.n	8005be4 <I2C_MasterReceive_BTF+0x1a6>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d103      	bne.n	8005bec <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bea:	e002      	b.n	8005bf2 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2212      	movs	r2, #18
 8005bf0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fc45 	bl	8005482 <HAL_I2C_MasterRxCpltCallback>
}
 8005bf8:	e012      	b.n	8005c20 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b40      	cmp	r3, #64	@ 0x40
 8005c3a:	d117      	bne.n	8005c6c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c54:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005c56:	e067      	b.n	8005d28 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	611a      	str	r2, [r3, #16]
}
 8005c6a:	e05d      	b.n	8005d28 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c74:	d133      	bne.n	8005cde <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b21      	cmp	r3, #33	@ 0x21
 8005c80:	d109      	bne.n	8005c96 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c92:	611a      	str	r2, [r3, #16]
 8005c94:	e008      	b.n	8005ca8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <I2C_Master_SB+0x92>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d108      	bne.n	8005ccc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d032      	beq.n	8005d28 <I2C_Master_SB+0x100>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02d      	beq.n	8005d28 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cda:	605a      	str	r2, [r3, #4]
}
 8005cdc:	e024      	b.n	8005d28 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10e      	bne.n	8005d04 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	11db      	asrs	r3, r3, #7
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0306 	and.w	r3, r3, #6
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f063 030f 	orn	r3, r3, #15
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	611a      	str	r2, [r3, #16]
}
 8005d02:	e011      	b.n	8005d28 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d10d      	bne.n	8005d28 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	11db      	asrs	r3, r3, #7
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 0306 	and.w	r3, r3, #6
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f063 030e 	orn	r3, r3, #14
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	611a      	str	r2, [r3, #16]
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <I2C_Master_ADD10+0x26>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d108      	bne.n	8005d6c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <I2C_Master_ADD10+0x48>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d7a:	605a      	str	r2, [r3, #4]
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b091      	sub	sp, #68	@ 0x44
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b22      	cmp	r3, #34	@ 0x22
 8005db0:	f040 8169 	bne.w	8006086 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10f      	bne.n	8005ddc <I2C_Master_ADDR+0x54>
 8005dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005dc0:	2b40      	cmp	r3, #64	@ 0x40
 8005dc2:	d10b      	bne.n	8005ddc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dda:	e160      	b.n	800609e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11d      	bne.n	8005e20 <I2C_Master_ADDR+0x98>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005dec:	d118      	bne.n	8005e20 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dee:	2300      	movs	r3, #0
 8005df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e12:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e1e:	e13e      	b.n	800609e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d113      	bne.n	8005e52 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e115      	b.n	800607e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	f040 808a 	bne.w	8005f72 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e64:	d137      	bne.n	8005ed6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e74:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e84:	d113      	bne.n	8005eae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e94:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e96:	2300      	movs	r3, #0
 8005e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	e0e7      	b.n	800607e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	623b      	str	r3, [r7, #32]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e0d3      	b.n	800607e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d02e      	beq.n	8005f3a <I2C_Master_ADDR+0x1b2>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d02b      	beq.n	8005f3a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee4:	2b12      	cmp	r3, #18
 8005ee6:	d102      	bne.n	8005eee <I2C_Master_ADDR+0x166>
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d125      	bne.n	8005f3a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d00e      	beq.n	8005f12 <I2C_Master_ADDR+0x18a>
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d00b      	beq.n	8005f12 <I2C_Master_ADDR+0x18a>
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d008      	beq.n	8005f12 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e007      	b.n	8005f22 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f20:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	61fb      	str	r3, [r7, #28]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	e0a1      	b.n	800607e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f48:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e085      	b.n	800607e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d14d      	bne.n	8006018 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d016      	beq.n	8005fb0 <I2C_Master_ADDR+0x228>
 8005f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d013      	beq.n	8005fb0 <I2C_Master_ADDR+0x228>
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	2b10      	cmp	r3, #16
 8005f8c:	d010      	beq.n	8005fb0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f9c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	e007      	b.n	8005fc0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fbe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fce:	d117      	bne.n	8006000 <I2C_Master_ADDR+0x278>
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fd6:	d00b      	beq.n	8005ff0 <I2C_Master_ADDR+0x268>
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d008      	beq.n	8005ff0 <I2C_Master_ADDR+0x268>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d005      	beq.n	8005ff0 <I2C_Master_ADDR+0x268>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d002      	beq.n	8005ff0 <I2C_Master_ADDR+0x268>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d107      	bne.n	8006000 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ffe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	e032      	b.n	800607e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006026:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006036:	d117      	bne.n	8006068 <I2C_Master_ADDR+0x2e0>
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800603e:	d00b      	beq.n	8006058 <I2C_Master_ADDR+0x2d0>
 8006040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006042:	2b01      	cmp	r3, #1
 8006044:	d008      	beq.n	8006058 <I2C_Master_ADDR+0x2d0>
 8006046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006048:	2b08      	cmp	r3, #8
 800604a:	d005      	beq.n	8006058 <I2C_Master_ADDR+0x2d0>
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	2b10      	cmp	r3, #16
 8006050:	d002      	beq.n	8006058 <I2C_Master_ADDR+0x2d0>
 8006052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006054:	2b20      	cmp	r3, #32
 8006056:	d107      	bne.n	8006068 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006066:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006084:	e00b      	b.n	800609e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
}
 800609c:	e7ff      	b.n	800609e <I2C_Master_ADDR+0x316>
 800609e:	bf00      	nop
 80060a0:	3744      	adds	r7, #68	@ 0x44
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02b      	beq.n	800611c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c8:	781a      	ldrb	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d114      	bne.n	800611c <I2C_SlaveTransmit_TXE+0x72>
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b29      	cmp	r3, #41	@ 0x29
 80060f6:	d111      	bne.n	800611c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006106:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2221      	movs	r2, #33	@ 0x21
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2228      	movs	r2, #40	@ 0x28
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff f9bd 	bl	8005496 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d011      	beq.n	800615a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613a:	781a      	ldrb	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006174:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d02c      	beq.n	80061da <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d114      	bne.n	80061da <I2C_SlaveReceive_RXNE+0x74>
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061b4:	d111      	bne.n	80061da <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2222      	movs	r2, #34	@ 0x22
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2228      	movs	r2, #40	@ 0x28
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff f968 	bl	80054aa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d012      	beq.n	800621a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006230:	2300      	movs	r3, #0
 8006232:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006240:	2b28      	cmp	r3, #40	@ 0x28
 8006242:	d125      	bne.n	8006290 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006252:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800625e:	2301      	movs	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	81bb      	strh	r3, [r7, #12]
 8006272:	e002      	b.n	800627a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006282:	89ba      	ldrh	r2, [r7, #12]
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff f918 	bl	80054be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800628e:	e00e      	b.n	80062ae <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006290:	2300      	movs	r3, #0
 8006292:	60bb      	str	r3, [r7, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	60bb      	str	r3, [r7, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80062d8:	2300      	movs	r3, #0
 80062da:	60bb      	str	r3, [r7, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	60bb      	str	r3, [r7, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006304:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006314:	d172      	bne.n	80063fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b22      	cmp	r3, #34	@ 0x22
 800631a:	d002      	beq.n	8006322 <I2C_Slave_STOPF+0x6a>
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006320:	d135      	bne.n	800638e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	b29a      	uxth	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	f043 0204 	orr.w	r2, r3, #4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006354:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe f9b4 	bl	80046c8 <HAL_DMA_GetState>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d049      	beq.n	80063fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	4a69      	ldr	r2, [pc, #420]	@ (8006510 <I2C_Slave_STOPF+0x258>)
 800636c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006372:	4618      	mov	r0, r3
 8006374:	f7fd fffc 	bl	8004370 <HAL_DMA_Abort_IT>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03d      	beq.n	80063fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006388:	4610      	mov	r0, r2
 800638a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800638c:	e035      	b.n	80063fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	f043 0204 	orr.w	r2, r3, #4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe f97e 	bl	80046c8 <HAL_DMA_GetState>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d014      	beq.n	80063fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006510 <I2C_Slave_STOPF+0x258>)
 80063d8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fd ffc6 	bl	8004370 <HAL_DMA_Abort_IT>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d008      	beq.n	80063fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	e000      	b.n	80063fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d03e      	beq.n	8006484 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b04      	cmp	r3, #4
 8006412:	d112      	bne.n	800643a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006444:	2b40      	cmp	r3, #64	@ 0x40
 8006446:	d112      	bne.n	800646e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006464:	b29b      	uxth	r3, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	f043 0204 	orr.w	r2, r3, #4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f843 	bl	8006518 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006492:	e039      	b.n	8006508 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	2b2a      	cmp	r3, #42	@ 0x2a
 8006498:	d109      	bne.n	80064ae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2228      	movs	r2, #40	@ 0x28
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fe fffe 	bl	80054aa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b28      	cmp	r3, #40	@ 0x28
 80064b8:	d111      	bne.n	80064de <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a15      	ldr	r2, [pc, #84]	@ (8006514 <I2C_Slave_STOPF+0x25c>)
 80064be:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fe ffff 	bl	80054da <HAL_I2C_ListenCpltCallback>
}
 80064dc:	e014      	b.n	8006508 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	2b22      	cmp	r3, #34	@ 0x22
 80064e4:	d002      	beq.n	80064ec <I2C_Slave_STOPF+0x234>
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b22      	cmp	r3, #34	@ 0x22
 80064ea:	d10d      	bne.n	8006508 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fe ffd1 	bl	80054aa <HAL_I2C_SlaveRxCpltCallback>
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	080069b5 	.word	0x080069b5
 8006514:	ffff0000 	.word	0xffff0000

08006518 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006526:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800652e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	2b10      	cmp	r3, #16
 8006534:	d002      	beq.n	800653c <I2C_ITError+0x24>
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	2b40      	cmp	r3, #64	@ 0x40
 800653a:	d10a      	bne.n	8006552 <I2C_ITError+0x3a>
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b22      	cmp	r3, #34	@ 0x22
 8006540:	d107      	bne.n	8006552 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006550:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006558:	2b28      	cmp	r3, #40	@ 0x28
 800655a:	d107      	bne.n	800656c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2228      	movs	r2, #40	@ 0x28
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800656a:	e015      	b.n	8006598 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800657a:	d00a      	beq.n	8006592 <I2C_ITError+0x7a>
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b60      	cmp	r3, #96	@ 0x60
 8006580:	d007      	beq.n	8006592 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2220      	movs	r2, #32
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a6:	d162      	bne.n	800666e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d020      	beq.n	8006608 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ca:	4a6a      	ldr	r2, [pc, #424]	@ (8006774 <I2C_ITError+0x25c>)
 80065cc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fecc 	bl	8004370 <HAL_DMA_Abort_IT>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8089 	beq.w	80066f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006602:	4610      	mov	r0, r2
 8006604:	4798      	blx	r3
 8006606:	e074      	b.n	80066f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660c:	4a59      	ldr	r2, [pc, #356]	@ (8006774 <I2C_ITError+0x25c>)
 800660e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	4618      	mov	r0, r3
 8006616:	f7fd feab 	bl	8004370 <HAL_DMA_Abort_IT>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d068      	beq.n	80066f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662a:	2b40      	cmp	r3, #64	@ 0x40
 800662c:	d10b      	bne.n	8006646 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	e041      	b.n	80066f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b60      	cmp	r3, #96	@ 0x60
 8006678:	d125      	bne.n	80066c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006692:	2b40      	cmp	r3, #64	@ 0x40
 8006694:	d10b      	bne.n	80066ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fe ff33 	bl	800552a <HAL_I2C_AbortCpltCallback>
 80066c4:	e015      	b.n	80066f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d0:	2b40      	cmp	r3, #64	@ 0x40
 80066d2:	d10b      	bne.n	80066ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fe ff12 	bl	8005516 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10e      	bne.n	8006720 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006708:	2b00      	cmp	r3, #0
 800670a:	d109      	bne.n	8006720 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800672e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006736:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b04      	cmp	r3, #4
 8006742:	d113      	bne.n	800676c <I2C_ITError+0x254>
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	2b28      	cmp	r3, #40	@ 0x28
 8006748:	d110      	bne.n	800676c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a0a      	ldr	r2, [pc, #40]	@ (8006778 <I2C_ITError+0x260>)
 800674e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fe feb7 	bl	80054da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	080069b5 	.word	0x080069b5
 8006778:	ffff0000 	.word	0xffff0000

0800677c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006788:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006790:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006798:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80067ae:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067bc:	2200      	movs	r2, #0
 80067be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067cc:	2200      	movs	r2, #0
 80067ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80067d0:	7cfb      	ldrb	r3, [r7, #19]
 80067d2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80067d6:	2b21      	cmp	r3, #33	@ 0x21
 80067d8:	d007      	beq.n	80067ea <I2C_DMAXferCplt+0x6e>
 80067da:	7cfb      	ldrb	r3, [r7, #19]
 80067dc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80067e0:	2b22      	cmp	r3, #34	@ 0x22
 80067e2:	d131      	bne.n	8006848 <I2C_DMAXferCplt+0xcc>
 80067e4:	7cbb      	ldrb	r3, [r7, #18]
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d12e      	bne.n	8006848 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067f8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2200      	movs	r2, #0
 80067fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006800:	7cfb      	ldrb	r3, [r7, #19]
 8006802:	2b29      	cmp	r3, #41	@ 0x29
 8006804:	d10a      	bne.n	800681c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2221      	movs	r2, #33	@ 0x21
 800680a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2228      	movs	r2, #40	@ 0x28
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006814:	6978      	ldr	r0, [r7, #20]
 8006816:	f7fe fe3e 	bl	8005496 <HAL_I2C_SlaveTxCpltCallback>
 800681a:	e00c      	b.n	8006836 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800681c:	7cfb      	ldrb	r3, [r7, #19]
 800681e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006820:	d109      	bne.n	8006836 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2222      	movs	r2, #34	@ 0x22
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2228      	movs	r2, #40	@ 0x28
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006830:	6978      	ldr	r0, [r7, #20]
 8006832:	f7fe fe3a 	bl	80054aa <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006844:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006846:	e074      	b.n	8006932 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d06e      	beq.n	8006932 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b01      	cmp	r3, #1
 800685c:	d107      	bne.n	800686e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800687c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006884:	d009      	beq.n	800689a <I2C_DMAXferCplt+0x11e>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d006      	beq.n	800689a <I2C_DMAXferCplt+0x11e>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006892:	d002      	beq.n	800689a <I2C_DMAXferCplt+0x11e>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b20      	cmp	r3, #32
 8006898:	d107      	bne.n	80068aa <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068b8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068c8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2200      	movs	r2, #0
 80068ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80068d8:	6978      	ldr	r0, [r7, #20]
 80068da:	f7fe fe1c 	bl	8005516 <HAL_I2C_ErrorCallback>
}
 80068de:	e028      	b.n	8006932 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d10a      	bne.n	800690a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2200      	movs	r2, #0
 8006900:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006902:	6978      	ldr	r0, [r7, #20]
 8006904:	f7fe fdfd 	bl	8005502 <HAL_I2C_MemRxCpltCallback>
}
 8006908:	e013      	b.n	8006932 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d002      	beq.n	800691e <I2C_DMAXferCplt+0x1a2>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b20      	cmp	r3, #32
 800691c:	d103      	bne.n	8006926 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	@ 0x30
 8006924:	e002      	b.n	800692c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2212      	movs	r2, #18
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800692c:	6978      	ldr	r0, [r7, #20]
 800692e:	f7fe fda8 	bl	8005482 <HAL_I2C_MasterRxCpltCallback>
}
 8006932:	bf00      	nop
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006946:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006954:	2200      	movs	r2, #0
 8006956:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	2200      	movs	r2, #0
 8006966:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7fd febb 	bl	80046e4 <HAL_DMA_GetError>
 800696e:	4603      	mov	r3, r0
 8006970:	2b02      	cmp	r3, #2
 8006972:	d01b      	beq.n	80069ac <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006982:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	f043 0210 	orr.w	r2, r3, #16
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7fe fdb5 	bl	8005516 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80069ce:	4b4b      	ldr	r3, [pc, #300]	@ (8006afc <I2C_DMAAbort+0x148>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006b00 <I2C_DMAAbort+0x14c>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	0a1a      	lsrs	r2, r3, #8
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	00da      	lsls	r2, r3, #3
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	f043 0220 	orr.w	r2, r3, #32
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80069fa:	e00a      	b.n	8006a12 <I2C_DMAAbort+0x5e>
    }
    count--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a10:	d0ea      	beq.n	80069e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1e:	2200      	movs	r2, #0
 8006a20:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	2200      	movs	r2, #0
 8006a30:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2200      	movs	r2, #0
 8006a46:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a54:	2200      	movs	r2, #0
 8006a56:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a64:	2200      	movs	r2, #0
 8006a66:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b60      	cmp	r3, #96	@ 0x60
 8006a82:	d10e      	bne.n	8006aa2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2200      	movs	r2, #0
 8006a98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a9a:	6978      	ldr	r0, [r7, #20]
 8006a9c:	f7fe fd45 	bl	800552a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006aa0:	e027      	b.n	8006af2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aa8:	2b28      	cmp	r3, #40	@ 0x28
 8006aaa:	d117      	bne.n	8006adc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006aca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2228      	movs	r2, #40	@ 0x28
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006ada:	e007      	b.n	8006aec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006aec:	6978      	ldr	r0, [r7, #20]
 8006aee:	f7fe fd12 	bl	8005516 <HAL_I2C_ErrorCallback>
}
 8006af2:	bf00      	nop
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000000 	.word	0x20000000
 8006b00:	14f8b589 	.word	0x14f8b589

08006b04 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b10:	4b13      	ldr	r3, [pc, #76]	@ (8006b60 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	08db      	lsrs	r3, r3, #3
 8006b16:	4a13      	ldr	r2, [pc, #76]	@ (8006b64 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b18:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1c:	0a1a      	lsrs	r2, r3, #8
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d107      	bne.n	8006b42 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	f043 0220 	orr.w	r2, r3, #32
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e008      	b.n	8006b54 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b50:	d0e9      	beq.n	8006b26 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20000000 	.word	0x20000000
 8006b64:	14f8b589 	.word	0x14f8b589

08006b68 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006b78:	d103      	bne.n	8006b82 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b80:	e007      	b.n	8006b92 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b86:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006b8a:	d102      	bne.n	8006b92 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2208      	movs	r2, #8
 8006b90:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e267      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d075      	beq.n	8006caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bbe:	4b88      	ldr	r3, [pc, #544]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d00c      	beq.n	8006be4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bca:	4b85      	ldr	r3, [pc, #532]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d112      	bne.n	8006bfc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bd6:	4b82      	ldr	r3, [pc, #520]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be2:	d10b      	bne.n	8006bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be4:	4b7e      	ldr	r3, [pc, #504]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d05b      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x108>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d157      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e242      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c04:	d106      	bne.n	8006c14 <HAL_RCC_OscConfig+0x74>
 8006c06:	4b76      	ldr	r3, [pc, #472]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a75      	ldr	r2, [pc, #468]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e01d      	b.n	8006c50 <HAL_RCC_OscConfig+0xb0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c1c:	d10c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x98>
 8006c1e:	4b70      	ldr	r3, [pc, #448]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a6f      	ldr	r2, [pc, #444]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e00b      	b.n	8006c50 <HAL_RCC_OscConfig+0xb0>
 8006c38:	4b69      	ldr	r3, [pc, #420]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a68      	ldr	r2, [pc, #416]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	4b66      	ldr	r3, [pc, #408]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a65      	ldr	r2, [pc, #404]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d013      	beq.n	8006c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c58:	f7fc fffa 	bl	8003c50 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fc fff6 	bl	8003c50 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b64      	cmp	r3, #100	@ 0x64
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e207      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c72:	4b5b      	ldr	r3, [pc, #364]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0xc0>
 8006c7e:	e014      	b.n	8006caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c80:	f7fc ffe6 	bl	8003c50 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c88:	f7fc ffe2 	bl	8003c50 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	@ 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e1f3      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c9a:	4b51      	ldr	r3, [pc, #324]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f0      	bne.n	8006c88 <HAL_RCC_OscConfig+0xe8>
 8006ca6:	e000      	b.n	8006caa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d063      	beq.n	8006d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc2:	4b47      	ldr	r3, [pc, #284]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d11c      	bne.n	8006d08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cce:	4b44      	ldr	r3, [pc, #272]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d116      	bne.n	8006d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cda:	4b41      	ldr	r3, [pc, #260]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x152>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d001      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e1c7      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4937      	ldr	r1, [pc, #220]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d06:	e03a      	b.n	8006d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d10:	4b34      	ldr	r3, [pc, #208]	@ (8006de4 <HAL_RCC_OscConfig+0x244>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d16:	f7fc ff9b 	bl	8003c50 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d1e:	f7fc ff97 	bl	8003c50 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e1a8      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d30:	4b2b      	ldr	r3, [pc, #172]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0f0      	beq.n	8006d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d3c:	4b28      	ldr	r3, [pc, #160]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4925      	ldr	r1, [pc, #148]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]
 8006d50:	e015      	b.n	8006d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d52:	4b24      	ldr	r3, [pc, #144]	@ (8006de4 <HAL_RCC_OscConfig+0x244>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d58:	f7fc ff7a 	bl	8003c50 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d60:	f7fc ff76 	bl	8003c50 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e187      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d72:	4b1b      	ldr	r3, [pc, #108]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d036      	beq.n	8006df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d92:	4b15      	ldr	r3, [pc, #84]	@ (8006de8 <HAL_RCC_OscConfig+0x248>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d98:	f7fc ff5a 	bl	8003c50 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006da0:	f7fc ff56 	bl	8003c50 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e167      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db2:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0x200>
 8006dbe:	e01b      	b.n	8006df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc0:	4b09      	ldr	r3, [pc, #36]	@ (8006de8 <HAL_RCC_OscConfig+0x248>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc6:	f7fc ff43 	bl	8003c50 <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dcc:	e00e      	b.n	8006dec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dce:	f7fc ff3f 	bl	8003c50 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d907      	bls.n	8006dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e150      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
 8006de0:	40023800 	.word	0x40023800
 8006de4:	42470000 	.word	0x42470000
 8006de8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dec:	4b88      	ldr	r3, [pc, #544]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1ea      	bne.n	8006dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8097 	beq.w	8006f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e0a:	4b81      	ldr	r3, [pc, #516]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10f      	bne.n	8006e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e26:	4b7a      	ldr	r3, [pc, #488]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e36:	4b77      	ldr	r3, [pc, #476]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d118      	bne.n	8006e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e42:	4b74      	ldr	r3, [pc, #464]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a73      	ldr	r2, [pc, #460]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e4e:	f7fc feff 	bl	8003c50 <HAL_GetTick>
 8006e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e54:	e008      	b.n	8006e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e56:	f7fc fefb 	bl	8003c50 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e10c      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e68:	4b6a      	ldr	r3, [pc, #424]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0f0      	beq.n	8006e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d106      	bne.n	8006e8a <HAL_RCC_OscConfig+0x2ea>
 8006e7c:	4b64      	ldr	r3, [pc, #400]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e80:	4a63      	ldr	r2, [pc, #396]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e88:	e01c      	b.n	8006ec4 <HAL_RCC_OscConfig+0x324>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b05      	cmp	r3, #5
 8006e90:	d10c      	bne.n	8006eac <HAL_RCC_OscConfig+0x30c>
 8006e92:	4b5f      	ldr	r3, [pc, #380]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	4a5e      	ldr	r2, [pc, #376]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e98:	f043 0304 	orr.w	r3, r3, #4
 8006e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eaa:	e00b      	b.n	8006ec4 <HAL_RCC_OscConfig+0x324>
 8006eac:	4b58      	ldr	r3, [pc, #352]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb0:	4a57      	ldr	r2, [pc, #348]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	f023 0301 	bic.w	r3, r3, #1
 8006eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eb8:	4b55      	ldr	r3, [pc, #340]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebc:	4a54      	ldr	r2, [pc, #336]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ebe:	f023 0304 	bic.w	r3, r3, #4
 8006ec2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d015      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ecc:	f7fc fec0 	bl	8003c50 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed2:	e00a      	b.n	8006eea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed4:	f7fc febc 	bl	8003c50 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e0cb      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eea:	4b49      	ldr	r3, [pc, #292]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0ee      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x334>
 8006ef6:	e014      	b.n	8006f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef8:	f7fc feaa 	bl	8003c50 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f00:	f7fc fea6 	bl	8003c50 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e0b5      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f16:	4b3e      	ldr	r3, [pc, #248]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1ee      	bne.n	8006f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d105      	bne.n	8006f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f28:	4b39      	ldr	r3, [pc, #228]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2c:	4a38      	ldr	r2, [pc, #224]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80a1 	beq.w	8007080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f3e:	4b34      	ldr	r3, [pc, #208]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 030c 	and.w	r3, r3, #12
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d05c      	beq.n	8007004 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d141      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f52:	4b31      	ldr	r3, [pc, #196]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fc fe7a 	bl	8003c50 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fc fe76 	bl	8003c50 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e087      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f72:	4b27      	ldr	r3, [pc, #156]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	019b      	lsls	r3, r3, #6
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	3b01      	subs	r3, #1
 8006f98:	041b      	lsls	r3, r3, #16
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	061b      	lsls	r3, r3, #24
 8006fa2:	491b      	ldr	r1, [pc, #108]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fae:	f7fc fe4f 	bl	8003c50 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb6:	f7fc fe4b 	bl	8003c50 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e05c      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc8:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0f0      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x416>
 8006fd4:	e054      	b.n	8007080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fdc:	f7fc fe38 	bl	8003c50 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe4:	f7fc fe34 	bl	8003c50 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e045      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff6:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f0      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x444>
 8007002:	e03d      	b.n	8007080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d107      	bne.n	800701c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e038      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
 8007010:	40023800 	.word	0x40023800
 8007014:	40007000 	.word	0x40007000
 8007018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800701c:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <HAL_RCC_OscConfig+0x4ec>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d028      	beq.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007034:	429a      	cmp	r2, r3
 8007036:	d121      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d11a      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800704c:	4013      	ands	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007054:	4293      	cmp	r3, r2
 8007056:	d111      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	3b01      	subs	r3, #1
 8007066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007068:	429a      	cmp	r2, r3
 800706a:	d107      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40023800 	.word	0x40023800

08007090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0cc      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070a4:	4b68      	ldr	r3, [pc, #416]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d90c      	bls.n	80070cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b65      	ldr	r3, [pc, #404]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ba:	4b63      	ldr	r3, [pc, #396]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d001      	beq.n	80070cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0b8      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070e4:	4b59      	ldr	r3, [pc, #356]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4a58      	ldr	r2, [pc, #352]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80070ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070fc:	4b53      	ldr	r3, [pc, #332]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4a52      	ldr	r2, [pc, #328]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007108:	4b50      	ldr	r3, [pc, #320]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	494d      	ldr	r1, [pc, #308]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	4313      	orrs	r3, r2
 8007118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d044      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712e:	4b47      	ldr	r3, [pc, #284]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d119      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e07f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d003      	beq.n	800714e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800714a:	2b03      	cmp	r3, #3
 800714c:	d107      	bne.n	800715e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800714e:	4b3f      	ldr	r3, [pc, #252]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e06f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800715e:	4b3b      	ldr	r3, [pc, #236]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e067      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800716e:	4b37      	ldr	r3, [pc, #220]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 0203 	bic.w	r2, r3, #3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4934      	ldr	r1, [pc, #208]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	4313      	orrs	r3, r2
 800717e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007180:	f7fc fd66 	bl	8003c50 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007186:	e00a      	b.n	800719e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007188:	f7fc fd62 	bl	8003c50 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e04f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719e:	4b2b      	ldr	r3, [pc, #172]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 020c 	and.w	r2, r3, #12
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1eb      	bne.n	8007188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071b0:	4b25      	ldr	r3, [pc, #148]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d20c      	bcs.n	80071d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071be:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b20      	ldr	r3, [pc, #128]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e032      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e4:	4b19      	ldr	r3, [pc, #100]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4916      	ldr	r1, [pc, #88]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007202:	4b12      	ldr	r3, [pc, #72]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	490e      	ldr	r1, [pc, #56]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	4313      	orrs	r3, r2
 8007214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007216:	f000 f821 	bl	800725c <HAL_RCC_GetSysClockFreq>
 800721a:	4602      	mov	r2, r0
 800721c:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	091b      	lsrs	r3, r3, #4
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	490a      	ldr	r1, [pc, #40]	@ (8007250 <HAL_RCC_ClockConfig+0x1c0>)
 8007228:	5ccb      	ldrb	r3, [r1, r3]
 800722a:	fa22 f303 	lsr.w	r3, r2, r3
 800722e:	4a09      	ldr	r2, [pc, #36]	@ (8007254 <HAL_RCC_ClockConfig+0x1c4>)
 8007230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007232:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <HAL_RCC_ClockConfig+0x1c8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f7fc fcc6 	bl	8003bc8 <HAL_InitTick>

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40023c00 	.word	0x40023c00
 800724c:	40023800 	.word	0x40023800
 8007250:	080094b8 	.word	0x080094b8
 8007254:	20000000 	.word	0x20000000
 8007258:	20000004 	.word	0x20000004

0800725c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800725c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007260:	b094      	sub	sp, #80	@ 0x50
 8007262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007274:	4b79      	ldr	r3, [pc, #484]	@ (800745c <HAL_RCC_GetSysClockFreq+0x200>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 030c 	and.w	r3, r3, #12
 800727c:	2b08      	cmp	r3, #8
 800727e:	d00d      	beq.n	800729c <HAL_RCC_GetSysClockFreq+0x40>
 8007280:	2b08      	cmp	r3, #8
 8007282:	f200 80e1 	bhi.w	8007448 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_RCC_GetSysClockFreq+0x34>
 800728a:	2b04      	cmp	r3, #4
 800728c:	d003      	beq.n	8007296 <HAL_RCC_GetSysClockFreq+0x3a>
 800728e:	e0db      	b.n	8007448 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007290:	4b73      	ldr	r3, [pc, #460]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x204>)
 8007292:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007294:	e0db      	b.n	800744e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007296:	4b73      	ldr	r3, [pc, #460]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x208>)
 8007298:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800729a:	e0d8      	b.n	800744e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800729c:	4b6f      	ldr	r3, [pc, #444]	@ (800745c <HAL_RCC_GetSysClockFreq+0x200>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072a6:	4b6d      	ldr	r3, [pc, #436]	@ (800745c <HAL_RCC_GetSysClockFreq+0x200>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d063      	beq.n	800737a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b2:	4b6a      	ldr	r3, [pc, #424]	@ (800745c <HAL_RCC_GetSysClockFreq+0x200>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	2200      	movs	r2, #0
 80072ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c6:	2300      	movs	r3, #0
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80072ce:	4622      	mov	r2, r4
 80072d0:	462b      	mov	r3, r5
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f04f 0100 	mov.w	r1, #0
 80072da:	0159      	lsls	r1, r3, #5
 80072dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072e0:	0150      	lsls	r0, r2, #5
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4621      	mov	r1, r4
 80072e8:	1a51      	subs	r1, r2, r1
 80072ea:	6139      	str	r1, [r7, #16]
 80072ec:	4629      	mov	r1, r5
 80072ee:	eb63 0301 	sbc.w	r3, r3, r1
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007300:	4659      	mov	r1, fp
 8007302:	018b      	lsls	r3, r1, #6
 8007304:	4651      	mov	r1, sl
 8007306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800730a:	4651      	mov	r1, sl
 800730c:	018a      	lsls	r2, r1, #6
 800730e:	4651      	mov	r1, sl
 8007310:	ebb2 0801 	subs.w	r8, r2, r1
 8007314:	4659      	mov	r1, fp
 8007316:	eb63 0901 	sbc.w	r9, r3, r1
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800732a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800732e:	4690      	mov	r8, r2
 8007330:	4699      	mov	r9, r3
 8007332:	4623      	mov	r3, r4
 8007334:	eb18 0303 	adds.w	r3, r8, r3
 8007338:	60bb      	str	r3, [r7, #8]
 800733a:	462b      	mov	r3, r5
 800733c:	eb49 0303 	adc.w	r3, r9, r3
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800734e:	4629      	mov	r1, r5
 8007350:	024b      	lsls	r3, r1, #9
 8007352:	4621      	mov	r1, r4
 8007354:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007358:	4621      	mov	r1, r4
 800735a:	024a      	lsls	r2, r1, #9
 800735c:	4610      	mov	r0, r2
 800735e:	4619      	mov	r1, r3
 8007360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007362:	2200      	movs	r2, #0
 8007364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800736c:	f7f9 fb1a 	bl	80009a4 <__aeabi_uldivmod>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4613      	mov	r3, r2
 8007376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007378:	e058      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800737a:	4b38      	ldr	r3, [pc, #224]	@ (800745c <HAL_RCC_GetSysClockFreq+0x200>)
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	099b      	lsrs	r3, r3, #6
 8007380:	2200      	movs	r2, #0
 8007382:	4618      	mov	r0, r3
 8007384:	4611      	mov	r1, r2
 8007386:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800738a:	623b      	str	r3, [r7, #32]
 800738c:	2300      	movs	r3, #0
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007390:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007394:	4642      	mov	r2, r8
 8007396:	464b      	mov	r3, r9
 8007398:	f04f 0000 	mov.w	r0, #0
 800739c:	f04f 0100 	mov.w	r1, #0
 80073a0:	0159      	lsls	r1, r3, #5
 80073a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073a6:	0150      	lsls	r0, r2, #5
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4641      	mov	r1, r8
 80073ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80073b2:	4649      	mov	r1, r9
 80073b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073cc:	ebb2 040a 	subs.w	r4, r2, sl
 80073d0:	eb63 050b 	sbc.w	r5, r3, fp
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	00eb      	lsls	r3, r5, #3
 80073de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073e2:	00e2      	lsls	r2, r4, #3
 80073e4:	4614      	mov	r4, r2
 80073e6:	461d      	mov	r5, r3
 80073e8:	4643      	mov	r3, r8
 80073ea:	18e3      	adds	r3, r4, r3
 80073ec:	603b      	str	r3, [r7, #0]
 80073ee:	464b      	mov	r3, r9
 80073f0:	eb45 0303 	adc.w	r3, r5, r3
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	f04f 0300 	mov.w	r3, #0
 80073fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007402:	4629      	mov	r1, r5
 8007404:	028b      	lsls	r3, r1, #10
 8007406:	4621      	mov	r1, r4
 8007408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800740c:	4621      	mov	r1, r4
 800740e:	028a      	lsls	r2, r1, #10
 8007410:	4610      	mov	r0, r2
 8007412:	4619      	mov	r1, r3
 8007414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007416:	2200      	movs	r2, #0
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	61fa      	str	r2, [r7, #28]
 800741c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007420:	f7f9 fac0 	bl	80009a4 <__aeabi_uldivmod>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4613      	mov	r3, r2
 800742a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800742c:	4b0b      	ldr	r3, [pc, #44]	@ (800745c <HAL_RCC_GetSysClockFreq+0x200>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	3301      	adds	r3, #1
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800743c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800743e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007440:	fbb2 f3f3 	udiv	r3, r2, r3
 8007444:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007446:	e002      	b.n	800744e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007448:	4b05      	ldr	r3, [pc, #20]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x204>)
 800744a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800744c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800744e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007450:	4618      	mov	r0, r3
 8007452:	3750      	adds	r7, #80	@ 0x50
 8007454:	46bd      	mov	sp, r7
 8007456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745a:	bf00      	nop
 800745c:	40023800 	.word	0x40023800
 8007460:	00f42400 	.word	0x00f42400
 8007464:	007a1200 	.word	0x007a1200

08007468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800746c:	4b03      	ldr	r3, [pc, #12]	@ (800747c <HAL_RCC_GetHCLKFreq+0x14>)
 800746e:	681b      	ldr	r3, [r3, #0]
}
 8007470:	4618      	mov	r0, r3
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	20000000 	.word	0x20000000

08007480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007484:	f7ff fff0 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 8007488:	4602      	mov	r2, r0
 800748a:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	0a9b      	lsrs	r3, r3, #10
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	4903      	ldr	r1, [pc, #12]	@ (80074a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007496:	5ccb      	ldrb	r3, [r1, r3]
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800749c:	4618      	mov	r0, r3
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40023800 	.word	0x40023800
 80074a4:	080094c8 	.word	0x080094c8

080074a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074ac:	f7ff ffdc 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 80074b0:	4602      	mov	r2, r0
 80074b2:	4b05      	ldr	r3, [pc, #20]	@ (80074c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	0b5b      	lsrs	r3, r3, #13
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	4903      	ldr	r1, [pc, #12]	@ (80074cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80074be:	5ccb      	ldrb	r3, [r1, r3]
 80074c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40023800 	.word	0x40023800
 80074cc:	080094c8 	.word	0x080094c8

080074d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e07b      	b.n	80075da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d108      	bne.n	80074fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074f2:	d009      	beq.n	8007508 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	61da      	str	r2, [r3, #28]
 80074fa:	e005      	b.n	8007508 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fc f84a 	bl	80035bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800753e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758c:	ea42 0103 	orr.w	r1, r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007594:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	f003 0104 	and.w	r1, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ae:	f003 0210 	and.w	r2, r3, #16
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69da      	ldr	r2, [r3, #28]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10e      	bne.n	8007624 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800760c:	2b00      	cmp	r3, #0
 800760e:	d009      	beq.n	8007624 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
    return;
 8007622:	e0ce      	b.n	80077c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_SPI_IRQHandler+0x5e>
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
    return;
 8007640:	e0bf      	b.n	80077c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <HAL_SPI_IRQHandler+0x7e>
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80b0 	beq.w	80077c2 <HAL_SPI_IRQHandler+0x1de>
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 80aa 	beq.w	80077c2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d023      	beq.n	80076c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b03      	cmp	r3, #3
 8007682:	d011      	beq.n	80076a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007688:	f043 0204 	orr.w	r2, r3, #4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007690:	2300      	movs	r3, #0
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	e00b      	b.n	80076c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	693b      	ldr	r3, [r7, #16]
        return;
 80076be:	e080      	b.n	80077c2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ce:	f043 0201 	orr.w	r2, r3, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00c      	beq.n	8007718 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007702:	f043 0208 	orr.w	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771c:	2b00      	cmp	r3, #0
 800771e:	d04f      	beq.n	80077c0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800772e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d104      	bne.n	800774c <HAL_SPI_IRQHandler+0x168>
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d034      	beq.n	80077b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0203 	bic.w	r2, r2, #3
 800775a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d011      	beq.n	8007788 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007768:	4a17      	ldr	r2, [pc, #92]	@ (80077c8 <HAL_SPI_IRQHandler+0x1e4>)
 800776a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007770:	4618      	mov	r0, r3
 8007772:	f7fc fdfd 	bl	8004370 <HAL_DMA_Abort_IT>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007780:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800778c:	2b00      	cmp	r3, #0
 800778e:	d016      	beq.n	80077be <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007794:	4a0c      	ldr	r2, [pc, #48]	@ (80077c8 <HAL_SPI_IRQHandler+0x1e4>)
 8007796:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800779c:	4618      	mov	r0, r3
 800779e:	f7fc fde7 	bl	8004370 <HAL_DMA_Abort_IT>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80077b4:	e003      	b.n	80077be <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f808 	bl	80077cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077bc:	e000      	b.n	80077c0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80077be:	bf00      	nop
    return;
 80077c0:	bf00      	nop
  }
}
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	080077e1 	.word	0x080077e1

080077cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7ff ffe6 	bl	80077cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e041      	b.n	800789e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fc f836 	bl	80038a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f000 fb00 	bl	8007e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d001      	beq.n	80078c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e04e      	b.n	800795e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a23      	ldr	r2, [pc, #140]	@ (800796c <HAL_TIM_Base_Start_IT+0xc4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ea:	d01d      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007970 <HAL_TIM_Base_Start_IT+0xc8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007974 <HAL_TIM_Base_Start_IT+0xcc>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1c      	ldr	r2, [pc, #112]	@ (8007978 <HAL_TIM_Base_Start_IT+0xd0>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1b      	ldr	r2, [pc, #108]	@ (800797c <HAL_TIM_Base_Start_IT+0xd4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a19      	ldr	r2, [pc, #100]	@ (8007980 <HAL_TIM_Base_Start_IT+0xd8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a18      	ldr	r2, [pc, #96]	@ (8007984 <HAL_TIM_Base_Start_IT+0xdc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d111      	bne.n	800794c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b06      	cmp	r3, #6
 8007938:	d010      	beq.n	800795c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f042 0201 	orr.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794a:	e007      	b.n	800795c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40010000 	.word	0x40010000
 8007970:	40000400 	.word	0x40000400
 8007974:	40000800 	.word	0x40000800
 8007978:	40000c00 	.word	0x40000c00
 800797c:	40010400 	.word	0x40010400
 8007980:	40014000 	.word	0x40014000
 8007984:	40001800 	.word	0x40001800

08007988 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e097      	b.n	8007acc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7fb fe53 	bl	800365c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6812      	ldr	r2, [r2, #0]
 80079c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079cc:	f023 0307 	bic.w	r3, r3, #7
 80079d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f000 fa35 	bl	8007e4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007a28:	f023 030c 	bic.w	r3, r3, #12
 8007a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	4313      	orrs	r3, r2
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	011a      	lsls	r2, r3, #4
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	031b      	lsls	r3, r3, #12
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007a66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007a6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ae4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007aec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007af4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007afc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d110      	bne.n	8007b26 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d102      	bne.n	8007b10 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b0a:	7b7b      	ldrb	r3, [r7, #13]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d001      	beq.n	8007b14 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e089      	b.n	8007c28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b24:	e031      	b.n	8007b8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d110      	bne.n	8007b4e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d102      	bne.n	8007b38 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b32:	7b3b      	ldrb	r3, [r7, #12]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d001      	beq.n	8007b3c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e075      	b.n	8007c28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b4c:	e01d      	b.n	8007b8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d108      	bne.n	8007b66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b5a:	7b7b      	ldrb	r3, [r7, #13]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d102      	bne.n	8007b66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b60:	7b3b      	ldrb	r3, [r7, #12]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d001      	beq.n	8007b6a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e05e      	b.n	8007c28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2202      	movs	r2, #2
 8007b86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d010      	beq.n	8007bb8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007b96:	e01f      	b.n	8007bd8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f9ff 	bl	8007fa4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0202 	orr.w	r2, r2, #2
 8007bb4:	60da      	str	r2, [r3, #12]
      break;
 8007bb6:	e02e      	b.n	8007c16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	2104      	movs	r1, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f9ef 	bl	8007fa4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0204 	orr.w	r2, r2, #4
 8007bd4:	60da      	str	r2, [r3, #12]
      break;
 8007bd6:	e01e      	b.n	8007c16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	2100      	movs	r1, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f9df 	bl	8007fa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2201      	movs	r2, #1
 8007bec:	2104      	movs	r1, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f9d8 	bl	8007fa4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0202 	orr.w	r2, r2, #2
 8007c02:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0204 	orr.w	r2, r2, #4
 8007c12:	60da      	str	r2, [r3, #12]
      break;
 8007c14:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0201 	orr.w	r2, r2, #1
 8007c24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d020      	beq.n	8007c94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01b      	beq.n	8007c94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f06f 0202 	mvn.w	r2, #2
 8007c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fa fcc6 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8007c80:	e005      	b.n	8007c8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8c4 	bl	8007e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8cb 	bl	8007e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f003 0304 	and.w	r3, r3, #4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d020      	beq.n	8007ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01b      	beq.n	8007ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0204 	mvn.w	r2, #4
 8007cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fa fca0 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8007ccc:	e005      	b.n	8007cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f89e 	bl	8007e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f8a5 	bl	8007e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d020      	beq.n	8007d2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01b      	beq.n	8007d2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0208 	mvn.w	r2, #8
 8007cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2204      	movs	r2, #4
 8007d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fa fc7a 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8007d18:	e005      	b.n	8007d26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f878 	bl	8007e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f87f 	bl	8007e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 0310 	and.w	r3, r3, #16
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d020      	beq.n	8007d78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f003 0310 	and.w	r3, r3, #16
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01b      	beq.n	8007d78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0210 	mvn.w	r2, #16
 8007d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fa fc54 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8007d64:	e005      	b.n	8007d72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f852 	bl	8007e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f859 	bl	8007e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00c      	beq.n	8007d9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0201 	mvn.w	r2, #1
 8007d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fa fbde 	bl	8002558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00c      	beq.n	8007dc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f99e 	bl	80080fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00c      	beq.n	8007de4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f82a 	bl	8007e38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0220 	mvn.w	r2, #32
 8007e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f970 	bl	80080e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a46      	ldr	r2, [pc, #280]	@ (8007f78 <TIM_Base_SetConfig+0x12c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d013      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6a:	d00f      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a43      	ldr	r2, [pc, #268]	@ (8007f7c <TIM_Base_SetConfig+0x130>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00b      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a42      	ldr	r2, [pc, #264]	@ (8007f80 <TIM_Base_SetConfig+0x134>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d007      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a41      	ldr	r2, [pc, #260]	@ (8007f84 <TIM_Base_SetConfig+0x138>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d003      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a40      	ldr	r2, [pc, #256]	@ (8007f88 <TIM_Base_SetConfig+0x13c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d108      	bne.n	8007e9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a35      	ldr	r2, [pc, #212]	@ (8007f78 <TIM_Base_SetConfig+0x12c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d02b      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eac:	d027      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a32      	ldr	r2, [pc, #200]	@ (8007f7c <TIM_Base_SetConfig+0x130>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d023      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a31      	ldr	r2, [pc, #196]	@ (8007f80 <TIM_Base_SetConfig+0x134>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d01f      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a30      	ldr	r2, [pc, #192]	@ (8007f84 <TIM_Base_SetConfig+0x138>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d01b      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8007f88 <TIM_Base_SetConfig+0x13c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d017      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8007f8c <TIM_Base_SetConfig+0x140>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d013      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8007f90 <TIM_Base_SetConfig+0x144>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00f      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8007f94 <TIM_Base_SetConfig+0x148>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00b      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8007f98 <TIM_Base_SetConfig+0x14c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d007      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f9c <TIM_Base_SetConfig+0x150>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d003      	beq.n	8007efe <TIM_Base_SetConfig+0xb2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a29      	ldr	r2, [pc, #164]	@ (8007fa0 <TIM_Base_SetConfig+0x154>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d108      	bne.n	8007f10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	689a      	ldr	r2, [r3, #8]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a10      	ldr	r2, [pc, #64]	@ (8007f78 <TIM_Base_SetConfig+0x12c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d003      	beq.n	8007f44 <TIM_Base_SetConfig+0xf8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a12      	ldr	r2, [pc, #72]	@ (8007f88 <TIM_Base_SetConfig+0x13c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d103      	bne.n	8007f4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d105      	bne.n	8007f6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f023 0201 	bic.w	r2, r3, #1
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	611a      	str	r2, [r3, #16]
  }
}
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	40010400 	.word	0x40010400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800
 8007f98:	40001800 	.word	0x40001800
 8007f9c:	40001c00 	.word	0x40001c00
 8007fa0:	40002000 	.word	0x40002000

08007fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 031f 	and.w	r3, r3, #31
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1a      	ldr	r2, [r3, #32]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	401a      	ands	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a1a      	ldr	r2, [r3, #32]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
	...

08007ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008004:	2302      	movs	r3, #2
 8008006:	e05a      	b.n	80080be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800802e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a21      	ldr	r2, [pc, #132]	@ (80080cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d022      	beq.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008054:	d01d      	beq.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a1d      	ldr	r2, [pc, #116]	@ (80080d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d018      	beq.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a1b      	ldr	r2, [pc, #108]	@ (80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1a      	ldr	r2, [pc, #104]	@ (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00e      	beq.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a18      	ldr	r2, [pc, #96]	@ (80080dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d009      	beq.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a17      	ldr	r2, [pc, #92]	@ (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d004      	beq.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a15      	ldr	r2, [pc, #84]	@ (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d10c      	bne.n	80080ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40010000 	.word	0x40010000
 80080d0:	40000400 	.word	0x40000400
 80080d4:	40000800 	.word	0x40000800
 80080d8:	40000c00 	.word	0x40000c00
 80080dc:	40010400 	.word	0x40010400
 80080e0:	40014000 	.word	0x40014000
 80080e4:	40001800 	.word	0x40001800

080080e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e042      	b.n	80081a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fb fbf8 	bl	800392c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2224      	movs	r2, #36	@ 0x24
 8008140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fdf5 	bl	8008d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691a      	ldr	r2, [r3, #16]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	695a      	ldr	r2, [r3, #20]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08a      	sub	sp, #40	@ 0x28
 80081b4:	af02      	add	r7, sp, #8
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	4613      	mov	r3, r2
 80081be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b20      	cmp	r3, #32
 80081ce:	d175      	bne.n	80082bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <HAL_UART_Transmit+0x2c>
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e06e      	b.n	80082be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2221      	movs	r2, #33	@ 0x21
 80081ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081ee:	f7fb fd2f 	bl	8003c50 <HAL_GetTick>
 80081f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	88fa      	ldrh	r2, [r7, #6]
 80081f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	88fa      	ldrh	r2, [r7, #6]
 80081fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008208:	d108      	bne.n	800821c <HAL_UART_Transmit+0x6c>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d104      	bne.n	800821c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	61bb      	str	r3, [r7, #24]
 800821a:	e003      	b.n	8008224 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008220:	2300      	movs	r3, #0
 8008222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008224:	e02e      	b.n	8008284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2200      	movs	r2, #0
 800822e:	2180      	movs	r1, #128	@ 0x80
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 fb91 	bl	8008958 <UART_WaitOnFlagUntilTimeout>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e03a      	b.n	80082be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10b      	bne.n	8008266 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800825c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	3302      	adds	r3, #2
 8008262:	61bb      	str	r3, [r7, #24]
 8008264:	e007      	b.n	8008276 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	781a      	ldrb	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	3301      	adds	r3, #1
 8008274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1cb      	bne.n	8008226 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2200      	movs	r2, #0
 8008296:	2140      	movs	r1, #64	@ 0x40
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fb5d 	bl	8008958 <UART_WaitOnFlagUntilTimeout>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e006      	b.n	80082be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	e000      	b.n	80082be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80082bc:	2302      	movs	r3, #2
  }
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b08a      	sub	sp, #40	@ 0x28
 80082ca:	af02      	add	r7, sp, #8
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	603b      	str	r3, [r7, #0]
 80082d2:	4613      	mov	r3, r2
 80082d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	f040 8081 	bne.w	80083ea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <HAL_UART_Receive+0x2e>
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e079      	b.n	80083ec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2222      	movs	r2, #34	@ 0x22
 8008302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800830c:	f7fb fca0 	bl	8003c50 <HAL_GetTick>
 8008310:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	88fa      	ldrh	r2, [r7, #6]
 8008316:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008326:	d108      	bne.n	800833a <HAL_UART_Receive+0x74>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008330:	2300      	movs	r3, #0
 8008332:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	61bb      	str	r3, [r7, #24]
 8008338:	e003      	b.n	8008342 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008342:	e047      	b.n	80083d4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2200      	movs	r2, #0
 800834c:	2120      	movs	r1, #32
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fb02 	bl	8008958 <UART_WaitOnFlagUntilTimeout>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2220      	movs	r2, #32
 800835e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e042      	b.n	80083ec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10c      	bne.n	8008386 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	b29b      	uxth	r3, r3
 8008374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008378:	b29a      	uxth	r2, r3
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3302      	adds	r3, #2
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	e01f      	b.n	80083c6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800838e:	d007      	beq.n	80083a0 <HAL_UART_Receive+0xda>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <HAL_UART_Receive+0xe8>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e008      	b.n	80083c0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3301      	adds	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1b2      	bne.n	8008344 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e000      	b.n	80083ec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80083ea:	2302      	movs	r3, #2
  }
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3720      	adds	r7, #32
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b0ba      	sub	sp, #232	@ 0xe8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800841a:	2300      	movs	r3, #0
 800841c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008420:	2300      	movs	r3, #0
 8008422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10f      	bne.n	800845a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800843a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b00      	cmp	r3, #0
 8008444:	d009      	beq.n	800845a <HAL_UART_IRQHandler+0x66>
 8008446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fbb8 	bl	8008bc8 <UART_Receive_IT>
      return;
 8008458:	e25b      	b.n	8008912 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800845a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80de 	beq.w	8008620 <HAL_UART_IRQHandler+0x22c>
 8008464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d106      	bne.n	800847e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008474:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80d1 	beq.w	8008620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800847e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <HAL_UART_IRQHandler+0xae>
 800848a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800848e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800849a:	f043 0201 	orr.w	r2, r3, #1
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a6:	f003 0304 	and.w	r3, r3, #4
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <HAL_UART_IRQHandler+0xd2>
 80084ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084be:	f043 0202 	orr.w	r2, r3, #2
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <HAL_UART_IRQHandler+0xf6>
 80084d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e2:	f043 0204 	orr.w	r2, r3, #4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d011      	beq.n	800851a <HAL_UART_IRQHandler+0x126>
 80084f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008512:	f043 0208 	orr.w	r2, r3, #8
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 81f2 	beq.w	8008908 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <HAL_UART_IRQHandler+0x14e>
 8008530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fb43 	bl	8008bc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854c:	2b40      	cmp	r3, #64	@ 0x40
 800854e:	bf0c      	ite	eq
 8008550:	2301      	moveq	r3, #1
 8008552:	2300      	movne	r3, #0
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d103      	bne.n	800856e <HAL_UART_IRQHandler+0x17a>
 8008566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800856a:	2b00      	cmp	r3, #0
 800856c:	d04f      	beq.n	800860e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa4b 	bl	8008a0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800857e:	2b40      	cmp	r3, #64	@ 0x40
 8008580:	d141      	bne.n	8008606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3314      	adds	r3, #20
 8008588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800859c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3314      	adds	r3, #20
 80085aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80085ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80085b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80085ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80085c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1d9      	bne.n	8008582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d013      	beq.n	80085fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085da:	4a7e      	ldr	r2, [pc, #504]	@ (80087d4 <HAL_UART_IRQHandler+0x3e0>)
 80085dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fb fec4 	bl	8004370 <HAL_DMA_Abort_IT>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d016      	beq.n	800861c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085fc:	e00e      	b.n	800861c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f994 	bl	800892c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008604:	e00a      	b.n	800861c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f990 	bl	800892c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800860c:	e006      	b.n	800861c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f98c 	bl	800892c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800861a:	e175      	b.n	8008908 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861c:	bf00      	nop
    return;
 800861e:	e173      	b.n	8008908 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008624:	2b01      	cmp	r3, #1
 8008626:	f040 814f 	bne.w	80088c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800862a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862e:	f003 0310 	and.w	r3, r3, #16
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 8148 	beq.w	80088c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8141 	beq.w	80088c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008646:	2300      	movs	r3, #0
 8008648:	60bb      	str	r3, [r7, #8]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60bb      	str	r3, [r7, #8]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	60bb      	str	r3, [r7, #8]
 800865a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008666:	2b40      	cmp	r3, #64	@ 0x40
 8008668:	f040 80b6 	bne.w	80087d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 8145 	beq.w	800890c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800868a:	429a      	cmp	r2, r3
 800868c:	f080 813e 	bcs.w	800890c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008696:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a2:	f000 8088 	beq.w	80087b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	330c      	adds	r3, #12
 80086ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80086bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80086d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80086d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80086de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80086ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1d9      	bne.n	80086a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3314      	adds	r3, #20
 80086f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008704:	f023 0301 	bic.w	r3, r3, #1
 8008708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3314      	adds	r3, #20
 8008712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800871a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800871e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e1      	bne.n	80086f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3314      	adds	r3, #20
 8008734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800873e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3314      	adds	r3, #20
 800874e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e3      	bne.n	800872e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008786:	f023 0310 	bic.w	r3, r3, #16
 800878a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	330c      	adds	r3, #12
 8008794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008798:	65ba      	str	r2, [r7, #88]	@ 0x58
 800879a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800879e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e3      	bne.n	8008774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fb fd6d 	bl	8004290 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2202      	movs	r2, #2
 80087ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f8b7 	bl	8008940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087d2:	e09b      	b.n	800890c <HAL_UART_IRQHandler+0x518>
 80087d4:	08008ad1 	.word	0x08008ad1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 808e 	beq.w	8008910 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80087f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 8089 	beq.w	8008910 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	330c      	adds	r3, #12
 8008804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800880e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008814:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	330c      	adds	r3, #12
 800881e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008822:	647a      	str	r2, [r7, #68]	@ 0x44
 8008824:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e3      	bne.n	80087fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3314      	adds	r3, #20
 800883c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	623b      	str	r3, [r7, #32]
   return(result);
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	f023 0301 	bic.w	r3, r3, #1
 800884c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3314      	adds	r3, #20
 8008856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800885a:	633a      	str	r2, [r7, #48]	@ 0x30
 800885c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e3      	bne.n	8008836 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	330c      	adds	r3, #12
 8008882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	60fb      	str	r3, [r7, #12]
   return(result);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 0310 	bic.w	r3, r3, #16
 8008892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	330c      	adds	r3, #12
 800889c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80088a0:	61fa      	str	r2, [r7, #28]
 80088a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	69b9      	ldr	r1, [r7, #24]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	617b      	str	r3, [r7, #20]
   return(result);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e3      	bne.n	800887c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f83d 	bl	8008940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088c6:	e023      	b.n	8008910 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d009      	beq.n	80088e8 <HAL_UART_IRQHandler+0x4f4>
 80088d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f909 	bl	8008af8 <UART_Transmit_IT>
    return;
 80088e6:	e014      	b.n	8008912 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00e      	beq.n	8008912 <HAL_UART_IRQHandler+0x51e>
 80088f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d008      	beq.n	8008912 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f949 	bl	8008b98 <UART_EndTransmit_IT>
    return;
 8008906:	e004      	b.n	8008912 <HAL_UART_IRQHandler+0x51e>
    return;
 8008908:	bf00      	nop
 800890a:	e002      	b.n	8008912 <HAL_UART_IRQHandler+0x51e>
      return;
 800890c:	bf00      	nop
 800890e:	e000      	b.n	8008912 <HAL_UART_IRQHandler+0x51e>
      return;
 8008910:	bf00      	nop
  }
}
 8008912:	37e8      	adds	r7, #232	@ 0xe8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	4613      	mov	r3, r2
 8008966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008968:	e03b      	b.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d037      	beq.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008972:	f7fb f96d 	bl	8003c50 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	6a3a      	ldr	r2, [r7, #32]
 800897e:	429a      	cmp	r2, r3
 8008980:	d302      	bcc.n	8008988 <UART_WaitOnFlagUntilTimeout+0x30>
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e03a      	b.n	8008a02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b00      	cmp	r3, #0
 8008998:	d023      	beq.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b80      	cmp	r3, #128	@ 0x80
 800899e:	d020      	beq.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b40      	cmp	r3, #64	@ 0x40
 80089a4:	d01d      	beq.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0308 	and.w	r3, r3, #8
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d116      	bne.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f81d 	bl	8008a0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2208      	movs	r2, #8
 80089d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e00f      	b.n	8008a02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4013      	ands	r3, r2
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	bf0c      	ite	eq
 80089f2:	2301      	moveq	r3, #1
 80089f4:	2300      	movne	r3, #0
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	461a      	mov	r2, r3
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d0b4      	beq.n	800896a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b095      	sub	sp, #84	@ 0x54
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	330c      	adds	r3, #12
 8008a18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a32:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e5      	bne.n	8008a12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3314      	adds	r3, #20
 8008a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f023 0301 	bic.w	r3, r3, #1
 8008a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3314      	adds	r3, #20
 8008a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d119      	bne.n	8008ab6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	330c      	adds	r3, #12
 8008a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f023 0310 	bic.w	r3, r3, #16
 8008a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	330c      	adds	r3, #12
 8008aa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008aa2:	61ba      	str	r2, [r7, #24]
 8008aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6979      	ldr	r1, [r7, #20]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e5      	bne.n	8008a82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008ac4:	bf00      	nop
 8008ac6:	3754      	adds	r7, #84	@ 0x54
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008adc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f7ff ff1e 	bl	800892c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008af0:	bf00      	nop
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b21      	cmp	r3, #33	@ 0x21
 8008b0a:	d13e      	bne.n	8008b8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b14:	d114      	bne.n	8008b40 <UART_Transmit_IT+0x48>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d110      	bne.n	8008b40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	1c9a      	adds	r2, r3, #2
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	621a      	str	r2, [r3, #32]
 8008b3e:	e008      	b.n	8008b52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	1c59      	adds	r1, r3, #1
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6211      	str	r1, [r2, #32]
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10f      	bne.n	8008b86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68da      	ldr	r2, [r3, #12]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e000      	b.n	8008b8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b8a:	2302      	movs	r3, #2
  }
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fead 	bl	8008918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08c      	sub	sp, #48	@ 0x30
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b22      	cmp	r3, #34	@ 0x22
 8008bda:	f040 80ae 	bne.w	8008d3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008be6:	d117      	bne.n	8008c18 <UART_Receive_IT+0x50>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d113      	bne.n	8008c18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c10:	1c9a      	adds	r2, r3, #2
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c16:	e026      	b.n	8008c66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c2a:	d007      	beq.n	8008c3c <UART_Receive_IT+0x74>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <UART_Receive_IT+0x82>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d106      	bne.n	8008c4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	e008      	b.n	8008c5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	4619      	mov	r1, r3
 8008c74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d15d      	bne.n	8008d36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0220 	bic.w	r2, r2, #32
 8008c88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	695a      	ldr	r2, [r3, #20]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 0201 	bic.w	r2, r2, #1
 8008ca8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d135      	bne.n	8008d2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	330c      	adds	r3, #12
 8008ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f023 0310 	bic.w	r3, r3, #16
 8008cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	330c      	adds	r3, #12
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ce6:	623a      	str	r2, [r7, #32]
 8008ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	69f9      	ldr	r1, [r7, #28]
 8008cec:	6a3a      	ldr	r2, [r7, #32]
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e5      	bne.n	8008cc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0310 	and.w	r3, r3, #16
 8008d04:	2b10      	cmp	r3, #16
 8008d06:	d10a      	bne.n	8008d1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff fe0b 	bl	8008940 <HAL_UARTEx_RxEventCallback>
 8008d2a:	e002      	b.n	8008d32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7fa f98f 	bl	8003050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e002      	b.n	8008d3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e000      	b.n	8008d3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008d3a:	2302      	movs	r3, #2
  }
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3730      	adds	r7, #48	@ 0x30
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d48:	b0c0      	sub	sp, #256	@ 0x100
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d60:	68d9      	ldr	r1, [r3, #12]
 8008d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	ea40 0301 	orr.w	r3, r0, r1
 8008d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	431a      	orrs	r2, r3
 8008d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008d9c:	f021 010c 	bic.w	r1, r1, #12
 8008da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008daa:	430b      	orrs	r3, r1
 8008dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dbe:	6999      	ldr	r1, [r3, #24]
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	ea40 0301 	orr.w	r3, r0, r1
 8008dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8009010 <UART_SetConfig+0x2cc>)
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d005      	beq.n	8008de4 <UART_SetConfig+0xa0>
 8008dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	4b8d      	ldr	r3, [pc, #564]	@ (8009014 <UART_SetConfig+0x2d0>)
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d104      	bne.n	8008dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008de4:	f7fe fb60 	bl	80074a8 <HAL_RCC_GetPCLK2Freq>
 8008de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008dec:	e003      	b.n	8008df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dee:	f7fe fb47 	bl	8007480 <HAL_RCC_GetPCLK1Freq>
 8008df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e00:	f040 810c 	bne.w	800901c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e16:	4622      	mov	r2, r4
 8008e18:	462b      	mov	r3, r5
 8008e1a:	1891      	adds	r1, r2, r2
 8008e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e1e:	415b      	adcs	r3, r3
 8008e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e26:	4621      	mov	r1, r4
 8008e28:	eb12 0801 	adds.w	r8, r2, r1
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	eb43 0901 	adc.w	r9, r3, r1
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e46:	4690      	mov	r8, r2
 8008e48:	4699      	mov	r9, r3
 8008e4a:	4623      	mov	r3, r4
 8008e4c:	eb18 0303 	adds.w	r3, r8, r3
 8008e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e54:	462b      	mov	r3, r5
 8008e56:	eb49 0303 	adc.w	r3, r9, r3
 8008e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e72:	460b      	mov	r3, r1
 8008e74:	18db      	adds	r3, r3, r3
 8008e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e78:	4613      	mov	r3, r2
 8008e7a:	eb42 0303 	adc.w	r3, r2, r3
 8008e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008e88:	f7f7 fd8c 	bl	80009a4 <__aeabi_uldivmod>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4b61      	ldr	r3, [pc, #388]	@ (8009018 <UART_SetConfig+0x2d4>)
 8008e92:	fba3 2302 	umull	r2, r3, r3, r2
 8008e96:	095b      	lsrs	r3, r3, #5
 8008e98:	011c      	lsls	r4, r3, #4
 8008e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008eac:	4642      	mov	r2, r8
 8008eae:	464b      	mov	r3, r9
 8008eb0:	1891      	adds	r1, r2, r2
 8008eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008eb4:	415b      	adcs	r3, r3
 8008eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ebc:	4641      	mov	r1, r8
 8008ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ec8:	f04f 0200 	mov.w	r2, #0
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008edc:	4692      	mov	sl, r2
 8008ede:	469b      	mov	fp, r3
 8008ee0:	4643      	mov	r3, r8
 8008ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8008ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008eea:	464b      	mov	r3, r9
 8008eec:	eb4b 0303 	adc.w	r3, fp, r3
 8008ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	18db      	adds	r3, r3, r3
 8008f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f0e:	4613      	mov	r3, r2
 8008f10:	eb42 0303 	adc.w	r3, r2, r3
 8008f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f1e:	f7f7 fd41 	bl	80009a4 <__aeabi_uldivmod>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4611      	mov	r1, r2
 8008f28:	4b3b      	ldr	r3, [pc, #236]	@ (8009018 <UART_SetConfig+0x2d4>)
 8008f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f2e:	095b      	lsrs	r3, r3, #5
 8008f30:	2264      	movs	r2, #100	@ 0x64
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	1acb      	subs	r3, r1, r3
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f3e:	4b36      	ldr	r3, [pc, #216]	@ (8009018 <UART_SetConfig+0x2d4>)
 8008f40:	fba3 2302 	umull	r2, r3, r3, r2
 8008f44:	095b      	lsrs	r3, r3, #5
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f4c:	441c      	add	r4, r3
 8008f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f60:	4642      	mov	r2, r8
 8008f62:	464b      	mov	r3, r9
 8008f64:	1891      	adds	r1, r2, r2
 8008f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008f68:	415b      	adcs	r3, r3
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008f70:	4641      	mov	r1, r8
 8008f72:	1851      	adds	r1, r2, r1
 8008f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8008f76:	4649      	mov	r1, r9
 8008f78:	414b      	adcs	r3, r1
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	f04f 0300 	mov.w	r3, #0
 8008f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008f88:	4659      	mov	r1, fp
 8008f8a:	00cb      	lsls	r3, r1, #3
 8008f8c:	4651      	mov	r1, sl
 8008f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f92:	4651      	mov	r1, sl
 8008f94:	00ca      	lsls	r2, r1, #3
 8008f96:	4610      	mov	r0, r2
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	189b      	adds	r3, r3, r2
 8008fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	eb42 0303 	adc.w	r3, r2, r3
 8008fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	18db      	adds	r3, r3, r3
 8008fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fca:	4613      	mov	r3, r2
 8008fcc:	eb42 0303 	adc.w	r3, r2, r3
 8008fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008fda:	f7f7 fce3 	bl	80009a4 <__aeabi_uldivmod>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8009018 <UART_SetConfig+0x2d4>)
 8008fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe8:	095b      	lsrs	r3, r3, #5
 8008fea:	2164      	movs	r1, #100	@ 0x64
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	3332      	adds	r3, #50	@ 0x32
 8008ff6:	4a08      	ldr	r2, [pc, #32]	@ (8009018 <UART_SetConfig+0x2d4>)
 8008ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffc:	095b      	lsrs	r3, r3, #5
 8008ffe:	f003 0207 	and.w	r2, r3, #7
 8009002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4422      	add	r2, r4
 800900a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800900c:	e106      	b.n	800921c <UART_SetConfig+0x4d8>
 800900e:	bf00      	nop
 8009010:	40011000 	.word	0x40011000
 8009014:	40011400 	.word	0x40011400
 8009018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800901c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009020:	2200      	movs	r2, #0
 8009022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800902a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800902e:	4642      	mov	r2, r8
 8009030:	464b      	mov	r3, r9
 8009032:	1891      	adds	r1, r2, r2
 8009034:	6239      	str	r1, [r7, #32]
 8009036:	415b      	adcs	r3, r3
 8009038:	627b      	str	r3, [r7, #36]	@ 0x24
 800903a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800903e:	4641      	mov	r1, r8
 8009040:	1854      	adds	r4, r2, r1
 8009042:	4649      	mov	r1, r9
 8009044:	eb43 0501 	adc.w	r5, r3, r1
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	00eb      	lsls	r3, r5, #3
 8009052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009056:	00e2      	lsls	r2, r4, #3
 8009058:	4614      	mov	r4, r2
 800905a:	461d      	mov	r5, r3
 800905c:	4643      	mov	r3, r8
 800905e:	18e3      	adds	r3, r4, r3
 8009060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009064:	464b      	mov	r3, r9
 8009066:	eb45 0303 	adc.w	r3, r5, r3
 800906a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800906e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800907a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800907e:	f04f 0200 	mov.w	r2, #0
 8009082:	f04f 0300 	mov.w	r3, #0
 8009086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800908a:	4629      	mov	r1, r5
 800908c:	008b      	lsls	r3, r1, #2
 800908e:	4621      	mov	r1, r4
 8009090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009094:	4621      	mov	r1, r4
 8009096:	008a      	lsls	r2, r1, #2
 8009098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800909c:	f7f7 fc82 	bl	80009a4 <__aeabi_uldivmod>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4b60      	ldr	r3, [pc, #384]	@ (8009228 <UART_SetConfig+0x4e4>)
 80090a6:	fba3 2302 	umull	r2, r3, r3, r2
 80090aa:	095b      	lsrs	r3, r3, #5
 80090ac:	011c      	lsls	r4, r3, #4
 80090ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80090bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80090c0:	4642      	mov	r2, r8
 80090c2:	464b      	mov	r3, r9
 80090c4:	1891      	adds	r1, r2, r2
 80090c6:	61b9      	str	r1, [r7, #24]
 80090c8:	415b      	adcs	r3, r3
 80090ca:	61fb      	str	r3, [r7, #28]
 80090cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090d0:	4641      	mov	r1, r8
 80090d2:	1851      	adds	r1, r2, r1
 80090d4:	6139      	str	r1, [r7, #16]
 80090d6:	4649      	mov	r1, r9
 80090d8:	414b      	adcs	r3, r1
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	f04f 0200 	mov.w	r2, #0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090e8:	4659      	mov	r1, fp
 80090ea:	00cb      	lsls	r3, r1, #3
 80090ec:	4651      	mov	r1, sl
 80090ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090f2:	4651      	mov	r1, sl
 80090f4:	00ca      	lsls	r2, r1, #3
 80090f6:	4610      	mov	r0, r2
 80090f8:	4619      	mov	r1, r3
 80090fa:	4603      	mov	r3, r0
 80090fc:	4642      	mov	r2, r8
 80090fe:	189b      	adds	r3, r3, r2
 8009100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009104:	464b      	mov	r3, r9
 8009106:	460a      	mov	r2, r1
 8009108:	eb42 0303 	adc.w	r3, r2, r3
 800910c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800911a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	f04f 0300 	mov.w	r3, #0
 8009124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009128:	4649      	mov	r1, r9
 800912a:	008b      	lsls	r3, r1, #2
 800912c:	4641      	mov	r1, r8
 800912e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009132:	4641      	mov	r1, r8
 8009134:	008a      	lsls	r2, r1, #2
 8009136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800913a:	f7f7 fc33 	bl	80009a4 <__aeabi_uldivmod>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4611      	mov	r1, r2
 8009144:	4b38      	ldr	r3, [pc, #224]	@ (8009228 <UART_SetConfig+0x4e4>)
 8009146:	fba3 2301 	umull	r2, r3, r3, r1
 800914a:	095b      	lsrs	r3, r3, #5
 800914c:	2264      	movs	r2, #100	@ 0x64
 800914e:	fb02 f303 	mul.w	r3, r2, r3
 8009152:	1acb      	subs	r3, r1, r3
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	3332      	adds	r3, #50	@ 0x32
 8009158:	4a33      	ldr	r2, [pc, #204]	@ (8009228 <UART_SetConfig+0x4e4>)
 800915a:	fba2 2303 	umull	r2, r3, r2, r3
 800915e:	095b      	lsrs	r3, r3, #5
 8009160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009164:	441c      	add	r4, r3
 8009166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800916a:	2200      	movs	r2, #0
 800916c:	673b      	str	r3, [r7, #112]	@ 0x70
 800916e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009174:	4642      	mov	r2, r8
 8009176:	464b      	mov	r3, r9
 8009178:	1891      	adds	r1, r2, r2
 800917a:	60b9      	str	r1, [r7, #8]
 800917c:	415b      	adcs	r3, r3
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009184:	4641      	mov	r1, r8
 8009186:	1851      	adds	r1, r2, r1
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	4649      	mov	r1, r9
 800918c:	414b      	adcs	r3, r1
 800918e:	607b      	str	r3, [r7, #4]
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	f04f 0300 	mov.w	r3, #0
 8009198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800919c:	4659      	mov	r1, fp
 800919e:	00cb      	lsls	r3, r1, #3
 80091a0:	4651      	mov	r1, sl
 80091a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091a6:	4651      	mov	r1, sl
 80091a8:	00ca      	lsls	r2, r1, #3
 80091aa:	4610      	mov	r0, r2
 80091ac:	4619      	mov	r1, r3
 80091ae:	4603      	mov	r3, r0
 80091b0:	4642      	mov	r2, r8
 80091b2:	189b      	adds	r3, r3, r2
 80091b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091b6:	464b      	mov	r3, r9
 80091b8:	460a      	mov	r2, r1
 80091ba:	eb42 0303 	adc.w	r3, r2, r3
 80091be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80091ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80091d8:	4649      	mov	r1, r9
 80091da:	008b      	lsls	r3, r1, #2
 80091dc:	4641      	mov	r1, r8
 80091de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091e2:	4641      	mov	r1, r8
 80091e4:	008a      	lsls	r2, r1, #2
 80091e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80091ea:	f7f7 fbdb 	bl	80009a4 <__aeabi_uldivmod>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009228 <UART_SetConfig+0x4e4>)
 80091f4:	fba3 1302 	umull	r1, r3, r3, r2
 80091f8:	095b      	lsrs	r3, r3, #5
 80091fa:	2164      	movs	r1, #100	@ 0x64
 80091fc:	fb01 f303 	mul.w	r3, r1, r3
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	3332      	adds	r3, #50	@ 0x32
 8009206:	4a08      	ldr	r2, [pc, #32]	@ (8009228 <UART_SetConfig+0x4e4>)
 8009208:	fba2 2303 	umull	r2, r3, r2, r3
 800920c:	095b      	lsrs	r3, r3, #5
 800920e:	f003 020f 	and.w	r2, r3, #15
 8009212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4422      	add	r2, r4
 800921a:	609a      	str	r2, [r3, #8]
}
 800921c:	bf00      	nop
 800921e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009222:	46bd      	mov	sp, r7
 8009224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009228:	51eb851f 	.word	0x51eb851f

0800922c <memset>:
 800922c:	4402      	add	r2, r0
 800922e:	4603      	mov	r3, r0
 8009230:	4293      	cmp	r3, r2
 8009232:	d100      	bne.n	8009236 <memset+0xa>
 8009234:	4770      	bx	lr
 8009236:	f803 1b01 	strb.w	r1, [r3], #1
 800923a:	e7f9      	b.n	8009230 <memset+0x4>

0800923c <__libc_init_array>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4d0d      	ldr	r5, [pc, #52]	@ (8009274 <__libc_init_array+0x38>)
 8009240:	4c0d      	ldr	r4, [pc, #52]	@ (8009278 <__libc_init_array+0x3c>)
 8009242:	1b64      	subs	r4, r4, r5
 8009244:	10a4      	asrs	r4, r4, #2
 8009246:	2600      	movs	r6, #0
 8009248:	42a6      	cmp	r6, r4
 800924a:	d109      	bne.n	8009260 <__libc_init_array+0x24>
 800924c:	4d0b      	ldr	r5, [pc, #44]	@ (800927c <__libc_init_array+0x40>)
 800924e:	4c0c      	ldr	r4, [pc, #48]	@ (8009280 <__libc_init_array+0x44>)
 8009250:	f000 f826 	bl	80092a0 <_init>
 8009254:	1b64      	subs	r4, r4, r5
 8009256:	10a4      	asrs	r4, r4, #2
 8009258:	2600      	movs	r6, #0
 800925a:	42a6      	cmp	r6, r4
 800925c:	d105      	bne.n	800926a <__libc_init_array+0x2e>
 800925e:	bd70      	pop	{r4, r5, r6, pc}
 8009260:	f855 3b04 	ldr.w	r3, [r5], #4
 8009264:	4798      	blx	r3
 8009266:	3601      	adds	r6, #1
 8009268:	e7ee      	b.n	8009248 <__libc_init_array+0xc>
 800926a:	f855 3b04 	ldr.w	r3, [r5], #4
 800926e:	4798      	blx	r3
 8009270:	3601      	adds	r6, #1
 8009272:	e7f2      	b.n	800925a <__libc_init_array+0x1e>
 8009274:	080094e0 	.word	0x080094e0
 8009278:	080094e0 	.word	0x080094e0
 800927c:	080094e0 	.word	0x080094e0
 8009280:	080094e8 	.word	0x080094e8

08009284 <memcpy>:
 8009284:	440a      	add	r2, r1
 8009286:	4291      	cmp	r1, r2
 8009288:	f100 33ff 	add.w	r3, r0, #4294967295
 800928c:	d100      	bne.n	8009290 <memcpy+0xc>
 800928e:	4770      	bx	lr
 8009290:	b510      	push	{r4, lr}
 8009292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800929a:	4291      	cmp	r1, r2
 800929c:	d1f9      	bne.n	8009292 <memcpy+0xe>
 800929e:	bd10      	pop	{r4, pc}

080092a0 <_init>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr

080092ac <_fini>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr
