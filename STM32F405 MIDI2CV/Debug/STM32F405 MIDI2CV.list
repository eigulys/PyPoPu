
STM32F405 MIDI2CV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800936c  0800936c  0000a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  0000b00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a0  080096a0  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080096a8  080096a8  0000a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080096b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b00c  2**0
                  CONTENTS
 10 .bss          0000051c  2000000c  2000000c  0000b00c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  0000b00c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a265  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000321c  00000000  00000000  000252a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  000284c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117d  00000000  00000000  00029b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023969  00000000  00000000  0002ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001943b  00000000  00000000  0004e606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbe80  00000000  00000000  00067a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001338c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006138  00000000  00000000  00133904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00139a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009354 	.word	0x08009354

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08009354 	.word	0x08009354

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b988 	b.w	8000ccc <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	468e      	mov	lr, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	4688      	mov	r8, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d962      	bls.n	8000ab0 <__udivmoddi4+0xdc>
 80009ea:	fab2 f682 	clz	r6, r2
 80009ee:	b14e      	cbz	r6, 8000a04 <__udivmoddi4+0x30>
 80009f0:	f1c6 0320 	rsb	r3, r6, #32
 80009f4:	fa01 f806 	lsl.w	r8, r1, r6
 80009f8:	fa20 f303 	lsr.w	r3, r0, r3
 80009fc:	40b7      	lsls	r7, r6
 80009fe:	ea43 0808 	orr.w	r8, r3, r8
 8000a02:	40b4      	lsls	r4, r6
 8000a04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a08:	fa1f fc87 	uxth.w	ip, r7
 8000a0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a10:	0c23      	lsrs	r3, r4, #16
 8000a12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d909      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a28:	f080 80ea 	bcs.w	8000c00 <__udivmoddi4+0x22c>
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f240 80e7 	bls.w	8000c00 <__udivmoddi4+0x22c>
 8000a32:	3902      	subs	r1, #2
 8000a34:	443b      	add	r3, r7
 8000a36:	1a9a      	subs	r2, r3, r2
 8000a38:	b2a3      	uxth	r3, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a4a:	459c      	cmp	ip, r3
 8000a4c:	d909      	bls.n	8000a62 <__udivmoddi4+0x8e>
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a54:	f080 80d6 	bcs.w	8000c04 <__udivmoddi4+0x230>
 8000a58:	459c      	cmp	ip, r3
 8000a5a:	f240 80d3 	bls.w	8000c04 <__udivmoddi4+0x230>
 8000a5e:	443b      	add	r3, r7
 8000a60:	3802      	subs	r0, #2
 8000a62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a66:	eba3 030c 	sub.w	r3, r3, ip
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11d      	cbz	r5, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40f3      	lsrs	r3, r6
 8000a70:	2200      	movs	r2, #0
 8000a72:	e9c5 3200 	strd	r3, r2, [r5]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d905      	bls.n	8000a8a <__udivmoddi4+0xb6>
 8000a7e:	b10d      	cbz	r5, 8000a84 <__udivmoddi4+0xb0>
 8000a80:	e9c5 0100 	strd	r0, r1, [r5]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	e7f5      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000a8a:	fab3 f183 	clz	r1, r3
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d146      	bne.n	8000b20 <__udivmoddi4+0x14c>
 8000a92:	4573      	cmp	r3, lr
 8000a94:	d302      	bcc.n	8000a9c <__udivmoddi4+0xc8>
 8000a96:	4282      	cmp	r2, r0
 8000a98:	f200 8105 	bhi.w	8000ca6 <__udivmoddi4+0x2d2>
 8000a9c:	1a84      	subs	r4, r0, r2
 8000a9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d0e5      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000aaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000aae:	e7e2      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	f000 8090 	beq.w	8000bd6 <__udivmoddi4+0x202>
 8000ab6:	fab2 f682 	clz	r6, r2
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f040 80a4 	bne.w	8000c08 <__udivmoddi4+0x234>
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	0c03      	lsrs	r3, r0, #16
 8000ac4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	b2bc      	uxth	r4, r7
 8000acc:	2101      	movs	r1, #1
 8000ace:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ad2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ada:	fb04 f20c 	mul.w	r2, r4, ip
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d907      	bls.n	8000af2 <__udivmoddi4+0x11e>
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x11c>
 8000aea:	429a      	cmp	r2, r3
 8000aec:	f200 80e0 	bhi.w	8000cb0 <__udivmoddi4+0x2dc>
 8000af0:	46c4      	mov	ip, r8
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000af8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000afc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b00:	fb02 f404 	mul.w	r4, r2, r4
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x144>
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x142>
 8000b10:	429c      	cmp	r4, r3
 8000b12:	f200 80ca 	bhi.w	8000caa <__udivmoddi4+0x2d6>
 8000b16:	4602      	mov	r2, r0
 8000b18:	1b1b      	subs	r3, r3, r4
 8000b1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b20:	f1c1 0620 	rsb	r6, r1, #32
 8000b24:	408b      	lsls	r3, r1
 8000b26:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2a:	431f      	orrs	r7, r3
 8000b2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b30:	fa20 f306 	lsr.w	r3, r0, r6
 8000b34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b3c:	4323      	orrs	r3, r4
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	fa1f fc87 	uxth.w	ip, r7
 8000b46:	fbbe f0f9 	udiv	r0, lr, r9
 8000b4a:	0c1c      	lsrs	r4, r3, #16
 8000b4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b5e:	d909      	bls.n	8000b74 <__udivmoddi4+0x1a0>
 8000b60:	193c      	adds	r4, r7, r4
 8000b62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b66:	f080 809c 	bcs.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f240 8099 	bls.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b70:	3802      	subs	r0, #2
 8000b72:	443c      	add	r4, r7
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	fa1f fe83 	uxth.w	lr, r3
 8000b7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b80:	fb09 4413 	mls	r4, r9, r3, r4
 8000b84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x1ce>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b96:	f080 8082 	bcs.w	8000c9e <__udivmoddi4+0x2ca>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	d97f      	bls.n	8000c9e <__udivmoddi4+0x2ca>
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ba6:	eba4 040c 	sub.w	r4, r4, ip
 8000baa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bae:	4564      	cmp	r4, ip
 8000bb0:	4673      	mov	r3, lr
 8000bb2:	46e1      	mov	r9, ip
 8000bb4:	d362      	bcc.n	8000c7c <__udivmoddi4+0x2a8>
 8000bb6:	d05f      	beq.n	8000c78 <__udivmoddi4+0x2a4>
 8000bb8:	b15d      	cbz	r5, 8000bd2 <__udivmoddi4+0x1fe>
 8000bba:	ebb8 0203 	subs.w	r2, r8, r3
 8000bbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000bc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bca:	431e      	orrs	r6, r3
 8000bcc:	40cc      	lsrs	r4, r1
 8000bce:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	e74f      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000bd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bda:	0c01      	lsrs	r1, r0, #16
 8000bdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000be0:	b280      	uxth	r0, r0
 8000be2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000be6:	463b      	mov	r3, r7
 8000be8:	4638      	mov	r0, r7
 8000bea:	463c      	mov	r4, r7
 8000bec:	46b8      	mov	r8, r7
 8000bee:	46be      	mov	lr, r7
 8000bf0:	2620      	movs	r6, #32
 8000bf2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bf6:	eba2 0208 	sub.w	r2, r2, r8
 8000bfa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bfe:	e766      	b.n	8000ace <__udivmoddi4+0xfa>
 8000c00:	4601      	mov	r1, r0
 8000c02:	e718      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c04:	4610      	mov	r0, r2
 8000c06:	e72c      	b.n	8000a62 <__udivmoddi4+0x8e>
 8000c08:	f1c6 0220 	rsb	r2, r6, #32
 8000c0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	40b1      	lsls	r1, r6
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb08 f904 	mul.w	r9, r8, r4
 8000c32:	40b0      	lsls	r0, r6
 8000c34:	4589      	cmp	r9, r1
 8000c36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c3a:	b280      	uxth	r0, r0
 8000c3c:	d93e      	bls.n	8000cbc <__udivmoddi4+0x2e8>
 8000c3e:	1879      	adds	r1, r7, r1
 8000c40:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c44:	d201      	bcs.n	8000c4a <__udivmoddi4+0x276>
 8000c46:	4589      	cmp	r9, r1
 8000c48:	d81f      	bhi.n	8000c8a <__udivmoddi4+0x2b6>
 8000c4a:	eba1 0109 	sub.w	r1, r1, r9
 8000c4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c52:	fb09 f804 	mul.w	r8, r9, r4
 8000c56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c5a:	b292      	uxth	r2, r2
 8000c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d229      	bcs.n	8000cb8 <__udivmoddi4+0x2e4>
 8000c64:	18ba      	adds	r2, r7, r2
 8000c66:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c6a:	d2c4      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c6c:	4542      	cmp	r2, r8
 8000c6e:	d2c2      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c70:	f1a9 0102 	sub.w	r1, r9, #2
 8000c74:	443a      	add	r2, r7
 8000c76:	e7be      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000c78:	45f0      	cmp	r8, lr
 8000c7a:	d29d      	bcs.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c84:	3801      	subs	r0, #1
 8000c86:	46e1      	mov	r9, ip
 8000c88:	e796      	b.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c8a:	eba7 0909 	sub.w	r9, r7, r9
 8000c8e:	4449      	add	r1, r9
 8000c90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c98:	fb09 f804 	mul.w	r8, r9, r4
 8000c9c:	e7db      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c9e:	4673      	mov	r3, lr
 8000ca0:	e77f      	b.n	8000ba2 <__udivmoddi4+0x1ce>
 8000ca2:	4650      	mov	r0, sl
 8000ca4:	e766      	b.n	8000b74 <__udivmoddi4+0x1a0>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e6fd      	b.n	8000aa6 <__udivmoddi4+0xd2>
 8000caa:	443b      	add	r3, r7
 8000cac:	3a02      	subs	r2, #2
 8000cae:	e733      	b.n	8000b18 <__udivmoddi4+0x144>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	443b      	add	r3, r7
 8000cb6:	e71c      	b.n	8000af2 <__udivmoddi4+0x11e>
 8000cb8:	4649      	mov	r1, r9
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000cbc:	eba1 0109 	sub.w	r1, r1, r9
 8000cc0:	46c4      	mov	ip, r8
 8000cc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc6:	fb09 f804 	mul.w	r8, r9, r4
 8000cca:	e7c4      	b.n	8000c56 <__udivmoddi4+0x282>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <_ZN8mMessage12getSysExSizeEv>:
	Channel channel = 0;
	uint8_t data1 = 0;
	uint8_t data2 = 0;

	uint8_t SysExMaxSize;
	 unsigned getSysExSize()  {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
		 unsigned size = unsigned(data2) << 8 | data1;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	78d2      	ldrb	r2, [r2, #3]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
		return size > SysExMaxSize ? SysExMaxSize : size;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	795b      	ldrb	r3, [r3, #5]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	bf28      	it	cs
 8000cf2:	4613      	movcs	r3, r2
	}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_ZN9mSettingsC1Ev>:
	uint8_t sysexArray[];
};

struct mSettings {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	705a      	strb	r2, [r3, #1]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	709a      	strb	r2, [r3, #2]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN8mMessageC1Ev>:
struct mMessage {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	705a      	strb	r2, [r3, #1]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	709a      	strb	r2, [r3, #2]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	70da      	strb	r2, [r3, #3]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	711a      	strb	r2, [r3, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_ZN13MidiInterfaceC1Ev>:
 *
 */

#include "MIDI.h"
#include "stm32f4xx_hal.h"
MidiInterface::MidiInterface() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	33e5      	adds	r3, #229	@ 0xe5
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffc9 	bl	8000d00 <_ZN9mSettingsC1Ev>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	33e8      	adds	r3, #232	@ 0xe8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ffd8 	bl	8000d28 <_ZN8mMessageC1Ev>
	mRunningStatus_TX = InvalidType;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	mRunningStatus_RX = InvalidType;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9

	mPendingMessageIndex = 0;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mPendingMessageExpectedLenght = 0;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

	mCurrentRpnNumber = 0xffff;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d9e:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	mCurrentNrpnNumber = 0xffff;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da8:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2

	mMessage.valid = false;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	mMessage.type = InvalidType;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
	mMessage.channel = 0;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	mMessage.data1 = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
	mMessage.data2 = 0;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	mMessage.SysExMaxSize = Settings.SysExMaxSize;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	mThruFilterMode = Thru::Full;
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000de2:	2101      	movs	r1, #1
 8000de4:	f361 0347 	bfi	r3, r1, #1, #7
 8000de8:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mThruActivated = true;
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4

	mInputChannel = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
	mRunningStatus_RX = InvalidType;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
	mRunningStatus_TX = InvalidType;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	mPendingMessageExpectedLenght = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	mPendingMessageIndex = 0;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mCurrentRpnNumber = 0xffff;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e28:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	mCurrentNrpnNumber = 0xffff;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e32:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
	mThruActivated = false;
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mThruFilterMode = Thru::Off;
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000e4a:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8000e4e:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mNoteOffCallback = 0;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
	mNoteOnCallback = 0;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
	mAfterTouchPolyCallback = 0;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
	mControlChangeCallback = 0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
	mProgramChangeCallback = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
	mAfterTouchChannelCallback = 0;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
	mPitchBendCallback = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
	mSystemExclusiveCallback = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
	mTimeCodeQuarterFrameCallback = 0;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
	mSongPositionCallback = 0;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
	mSongSelectCallback = 0;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
	mTuneRequestCallback = 0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	@ 0x2c
	mClockCallback = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	@ 0x30
	mStartCallback = 0;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	635a      	str	r2, [r3, #52]	@ 0x34
	mContinueCallback = 0;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
	mStopCallback = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	mActiveSensingCallback = 0;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	641a      	str	r2, [r3, #64]	@ 0x40
	mSystemResetCallback = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZN13MidiInterfaceD1Ev>:
MidiInterface::~MidiInterface() {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
}
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>:
 - Input channel set to 1 if no value is specified

 */

void MidiInterface::begin(Channel inChannel, UART_HandleTypeDef *huart_in,
		UART_HandleTypeDef *huart_out) {
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	460b      	mov	r3, r1
 8000eec:	72fb      	strb	r3, [r7, #11]
	serial_in = *huart_in;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	3390      	adds	r3, #144	@ 0x90
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	2248      	movs	r2, #72	@ 0x48
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f008 fa1d 	bl	8009338 <memcpy>
	serial_out = *huart_out;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	3348      	adds	r3, #72	@ 0x48
 8000f04:	4611      	mov	r1, r2
 8000f06:	2248      	movs	r2, #72	@ 0x48
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f008 fa15 	bl	8009338 <memcpy>
	mInputChannel = inChannel;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	7afa      	ldrb	r2, [r7, #11]
 8000f12:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8

}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZN13MidiInterface4sendE8MidiTypehhh>:
 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */

void MidiInterface::send(MidiType inType, DataByte inData1, DataByte inData2,
		Channel inChannel) {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	4608      	mov	r0, r1
 8000f28:	4611      	mov	r1, r2
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	70fb      	strb	r3, [r7, #3]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70bb      	strb	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
	// Then test if channel is valid
	if (inChannel >= MIDI_CHANNEL_OFF || inChannel == MIDI_CHANNEL_OMNI
 8000f38:	7e3b      	ldrb	r3, [r7, #24]
 8000f3a:	2b10      	cmp	r3, #16
 8000f3c:	d85e      	bhi.n	8000ffc <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
 8000f3e:	7e3b      	ldrb	r3, [r7, #24]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d05b      	beq.n	8000ffc <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
			|| inType < 0x80) {
 8000f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da57      	bge.n	8000ffc <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
		return; // Don't send anything
	}

	if (inType <= PitchBend)  // Channel messages
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	2be0      	cmp	r3, #224	@ 0xe0
 8000f50:	d84b      	bhi.n	8000fea <_ZN13MidiInterface4sendE8MidiTypehhh+0xcc>
			{
// Protection: remove MSBs on data
		inData1 &= 0x7f;
 8000f52:	78bb      	ldrb	r3, [r7, #2]
 8000f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	70bb      	strb	r3, [r7, #2]
		inData2 &= 0x7f;
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	707b      	strb	r3, [r7, #1]

		StatusByte status = getStatus(inType, inChannel);
 8000f66:	7e3a      	ldrb	r2, [r7, #24]
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f94a 	bl	8001206 <_ZN13MidiInterface9getStatusE8MidiTypeh>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]

		if (Settings.UseRunningStatus) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d014      	beq.n	8000faa <_ZN13MidiInterface4sendE8MidiTypehhh+0x8c>
			if (mRunningStatus_TX != status) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 20da 	ldrb.w	r2, [r3, #218]	@ 0xda
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d017      	beq.n	8000fbc <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
// New message, memorise and send header
				mRunningStatus_TX = status;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				HAL_UART_Transmit(&serial_out, &mRunningStatus_TX, 1,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f103 01da 	add.w	r1, r3, #218	@ 0xda
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f007 f95e 	bl	8008264 <HAL_UART_Transmit>
 8000fa8:	e008      	b.n	8000fbc <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
				MidiTimeout);
			}
		} else {
			// Don't care about running status, send the status byte.
			HAL_UART_Transmit(&serial_out, &status, 1, MidiTimeout);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000fb0:	f107 010f 	add.w	r1, r7, #15
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f007 f954 	bl	8008264 <HAL_UART_Transmit>
		}

// Then send data
		HAL_UART_Transmit(&serial_out, &inData1, 1, MidiTimeout);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000fc2:	1cb9      	adds	r1, r7, #2
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f007 f94c 	bl	8008264 <HAL_UART_Transmit>
		if (inType != ProgramChange && inType != AfterTouchChannel) {
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fd0:	d015      	beq.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	2bd0      	cmp	r3, #208	@ 0xd0
 8000fd6:	d012      	beq.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
			HAL_UART_Transmit(&serial_out, &inData2, 1, MidiTimeout);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000fde:	1c79      	adds	r1, r7, #1
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f007 f93e 	bl	8008264 <HAL_UART_Transmit>
 8000fe8:	e009      	b.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		}
	} else if (inType >= Clock && inType <= SystemReset) {
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2bf7      	cmp	r3, #247	@ 0xf7
 8000fee:	d906      	bls.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		sendRealTime(inType); // System Real-time and 1 byte.
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f8dc 	bl	80011b2 <_ZN13MidiInterface12sendRealTimeE8MidiType>
 8000ffa:	e000      	b.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		return; // Don't send anything
 8000ffc:	bf00      	nop
	}
}
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZN13MidiInterface9sendSysExEhPhb>:
 default value for ArrayContainsBoundaries is set to 'false' for compatibility
 with previous versions of the library.
 */

void MidiInterface::sendSysEx(uint8_t inLength, byte *inArray,
		bool inArrayContainsBoundaries) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	461a      	mov	r2, r3
 8001010:	460b      	mov	r3, r1
 8001012:	72fb      	strb	r3, [r7, #11]
 8001014:	4613      	mov	r3, r2
 8001016:	72bb      	strb	r3, [r7, #10]
	bool writeBeginEndBytes = !inArrayContainsBoundaries;
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	75fb      	strb	r3, [r7, #23]
	uint8_t StartByte = 0xf0;
 8001020:	23f0      	movs	r3, #240	@ 0xf0
 8001022:	75bb      	strb	r3, [r7, #22]
	uint8_t EndByte = 0xf7;
 8001024:	23f7      	movs	r3, #247	@ 0xf7
 8001026:	757b      	strb	r3, [r7, #21]
	if (writeBeginEndBytes) {
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <_ZN13MidiInterface9sendSysExEhPhb+0x3c>
		HAL_UART_Transmit(&serial_out, &StartByte, 1, MidiTimeout);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001034:	f107 0116 	add.w	r1, r7, #22
 8001038:	230a      	movs	r3, #10
 800103a:	2201      	movs	r2, #1
 800103c:	f007 f912 	bl	8008264 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&serial_out, inArray, sizeof(inLength), MidiTimeout);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001046:	230a      	movs	r3, #10
 8001048:	2201      	movs	r2, #1
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f007 f90a 	bl	8008264 <HAL_UART_Transmit>

	if (writeBeginEndBytes) {
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d008      	beq.n	8001068 <_ZN13MidiInterface9sendSysExEhPhb+0x64>
		HAL_UART_Transmit(&serial_out, &EndByte, 1, MidiTimeout);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800105c:	f107 0115 	add.w	r1, r7, #21
 8001060:	230a      	movs	r3, #10
 8001062:	2201      	movs	r2, #1
 8001064:	f007 f8fe 	bl	8008264 <HAL_UART_Transmit>
	}

	if (Settings.UseRunningStatus) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <_ZN13MidiInterface9sendSysExEhPhb+0x76>
		mRunningStatus_TX = InvalidType;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>:
 \param inValuesNibble    MTC data
 See MIDI Specification for more information.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
		DataByte inValuesNibble) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	4613      	mov	r3, r2
 8001090:	70bb      	strb	r3, [r7, #2]
	byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
 8001092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	73fb      	strb	r3, [r7, #15]
	sendTimeCodeQuarterFrame(data);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f804 	bl	80010c2 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>:
 See MIDI Specification for more information.
 \param inData  if you want to encode directly the nibbles in your program,
 you can send the byte here.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inData) {
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70fb      	strb	r3, [r7, #3]
	uint8_t TimeCodeMessage[] = { TimeCodeQuarterFrame, inData };
 80010ce:	2300      	movs	r3, #0
 80010d0:	81bb      	strh	r3, [r7, #12]
 80010d2:	23f1      	movs	r3, #241	@ 0xf1
 80010d4:	733b      	strb	r3, [r7, #12]
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, TimeCodeMessage, 2, MidiTimeout);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80010e0:	f107 010c 	add.w	r1, r7, #12
 80010e4:	230a      	movs	r3, #10
 80010e6:	2202      	movs	r2, #2
 80010e8:	f007 f8bc 	bl	8008264 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh+0x3c>
		mRunningStatus_TX = InvalidType;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN13MidiInterface16sendSongPositionEj>:

/*! \brief Send a Song Position Pointer message.
 \param inBeats    The number of beats since the start of the song.
 */

void MidiInterface::sendSongPosition(unsigned inBeats) {
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
	uint8_t SongPositionMessage[] = { SongPosition, (uint8_t) (inBeats & 0x7f),
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2100      	movs	r1, #0
 8001116:	460a      	mov	r2, r1
 8001118:	801a      	strh	r2, [r3, #0]
 800111a:	460a      	mov	r2, r1
 800111c:	709a      	strb	r2, [r3, #2]
 800111e:	23f2      	movs	r3, #242	@ 0xf2
 8001120:	733b      	strb	r3, [r7, #12]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800112a:	b2db      	uxtb	r3, r3
			(uint8_t) ((inBeats >> 7) & 0x7f) };
 800112c:	737b      	strb	r3, [r7, #13]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	09db      	lsrs	r3, r3, #7
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&serial_out, SongPositionMessage, 3, MidiTimeout);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001142:	f107 010c 	add.w	r1, r7, #12
 8001146:	230a      	movs	r3, #10
 8001148:	2203      	movs	r2, #3
 800114a:	f007 f88b 	bl	8008264 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <_ZN13MidiInterface16sendSongPositionEj+0x5a>
		mRunningStatus_TX = InvalidType;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN13MidiInterface14sendSongSelectEh>:

/*! \brief Send a Song Select message */

void MidiInterface::sendSongSelect(DataByte inSongNumber) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
	uint8_t SongSelectMessage[] =
 8001174:	2300      	movs	r3, #0
 8001176:	81bb      	strh	r3, [r7, #12]
 8001178:	23f3      	movs	r3, #243	@ 0xf3
 800117a:	733b      	strb	r3, [r7, #12]
			{ SongSelect, (uint8_t) (inSongNumber & 0x7f) };
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001182:	b2db      	uxtb	r3, r3
 8001184:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, SongSelectMessage, 2, MidiTimeout);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800118c:	f107 010c 	add.w	r1, r7, #12
 8001190:	230a      	movs	r3, #10
 8001192:	2202      	movs	r2, #2
 8001194:	f007 f866 	bl	8008264 <HAL_UART_Transmit>
	if (Settings.UseRunningStatus) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <_ZN13MidiInterface14sendSongSelectEh+0x42>
		mRunningStatus_TX = InvalidType;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZN13MidiInterface12sendRealTimeE8MidiType>:
 \param inType    The available Real Time types are:
 Start, Stop, Continue, Clock, ActiveSensing and SystemReset.
 @see MidiType
 */

void MidiInterface::sendRealTime(MidiType inType) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70fb      	strb	r3, [r7, #3]
	// Do not invalidate Running Status for real-time messages
	// as they can be interleaved within any message.
	uint8_t RealTimeMessage;
	switch (inType) {
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	3bf8      	subs	r3, #248	@ 0xf8
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	bf8c      	ite	hi
 80011c6:	2201      	movhi	r2, #1
 80011c8:	2200      	movls	r2, #0
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d115      	bne.n	80011fc <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
 80011d0:	22dd      	movs	r2, #221	@ 0xdd
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d009      	beq.n	80011fc <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
	case Start:
	case Stop:
	case Continue:
	case ActiveSensing:
	case SystemReset:
		HAL_UART_Transmit(&serial_out, &RealTimeMessage, 1, MidiTimeout);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80011ee:	f107 010f 	add.w	r1, r7, #15
 80011f2:	230a      	movs	r3, #10
 80011f4:	2201      	movs	r2, #1
 80011f6:	f007 f835 	bl	8008264 <HAL_UART_Transmit>
		break;
 80011fa:	e000      	b.n	80011fe <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4c>
	default:
// Invalid Real Time marker
		break;
 80011fc:	bf00      	nop
	}
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZN13MidiInterface9getStatusE8MidiTypeh>:
	mCurrentNrpnNumber = 0xffff;
}

/*! @} */ // End of doc group MIDI Output
// -----------------------------------------------------------------------------
StatusByte MidiInterface::getStatus(MidiType inType, Channel inChannel) {
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	70fb      	strb	r3, [r7, #3]
 8001212:	4613      	mov	r3, r2
 8001214:	70bb      	strb	r3, [r7, #2]
	return ((byte) inType | ((inChannel - 1) & 0x0f));
 8001216:	78bb      	ldrb	r3, [r7, #2]
 8001218:	3b01      	subs	r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	b25b      	sxtb	r3, r3
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	b25a      	sxtb	r2, r3
 8001224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001228:	4313      	orrs	r3, r2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_ZN13MidiInterface4readEv>:
 If the Thru is enabled and the message matches the filter,
 it is sent back on the MIDI output.
 @see see setInputChannel()
 */

bool MidiInterface::read() {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	return read(mInputChannel);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001248:	4619      	mov	r1, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f805 	bl	800125a <_ZN13MidiInterface4readEh>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_ZN13MidiInterface4readEh>:

/*! \brief Read messages on a specified channel.
 */

bool MidiInterface::read(Channel inChannel) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	70fb      	strb	r3, [r7, #3]
	if (inChannel >= MIDI_CHANNEL_OFF)
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	2b10      	cmp	r3, #16
 800126a:	d901      	bls.n	8001270 <_ZN13MidiInterface4readEh+0x16>
		return false; // MIDI Input disabled.
 800126c:	2300      	movs	r3, #0
 800126e:	e020      	b.n	80012b2 <_ZN13MidiInterface4readEh+0x58>

	if (!parse())
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f823 	bl	80012bc <_ZN13MidiInterface5parseEv>
 8001276:	4603      	mov	r3, r0
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <_ZN13MidiInterface4readEh+0x2c>
		return false;
 8001282:	2300      	movs	r3, #0
 8001284:	e015      	b.n	80012b2 <_ZN13MidiInterface4readEh+0x58>

	handleNullVelocityNoteOnAsNoteOff();
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fa5c 	bl	8001744 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>
	bool channelMatch = inputFilter(inChannel);
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fa79 	bl	8001788 <_ZN13MidiInterface11inputFilterEh>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]

	if (channelMatch) {
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <_ZN13MidiInterface4readEh+0x4c>
		launchCallback();
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fb81 	bl	80019a8 <_ZN13MidiInterface14launchCallbackEv>
	}

	thruFilter(inChannel);
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fdb2 	bl	8001e14 <_ZN13MidiInterface10thruFilterEh>

	return channelMatch;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <_ZN13MidiInterface5parseEv>:
		break;
	}
}
// Private method: MIDI parser

bool MidiInterface::parse() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	byte extracted;
	if (HAL_UART_Receive(&serial_in, &extracted, 1, MidiTimeout) != HAL_OK) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80012ca:	f107 010f 	add.w	r1, r7, #15
 80012ce:	230a      	movs	r3, #10
 80012d0:	2201      	movs	r2, #1
 80012d2:	f007 f852 	bl	800837a <HAL_UART_Receive>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <_ZN13MidiInterface5parseEv+0x2e>
		return false;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e228      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
	// Ignore Undefined




	if (extracted == 0xf9 || extracted == 0xfd) {
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2bf9      	cmp	r3, #249	@ 0xf9
 80012ee:	d002      	beq.n	80012f6 <_ZN13MidiInterface5parseEv+0x3a>
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2bfd      	cmp	r3, #253	@ 0xfd
 80012f4:	d10b      	bne.n	800130e <_ZN13MidiInterface5parseEv+0x52>
		if (Settings.Use1ByteParsing) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <_ZN13MidiInterface5parseEv+0x48>
			return false;
 8001300:	2300      	movs	r3, #0
 8001302:	e21b      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		} else {
			return parse();
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffd9 	bl	80012bc <_ZN13MidiInterface5parseEv>
 800130a:	4603      	mov	r3, r0
 800130c:	e216      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		}
	}

	if (mPendingMessageIndex == 0) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001314:	2b00      	cmp	r3, #0
 8001316:	f040 80f9 	bne.w	800150c <_ZN13MidiInterface5parseEv+0x250>
// Start a new pending message
		mPendingMessage[0] = extracted;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

// Check for running status first
		if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fa9c 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 800132e:	4603      	mov	r3, r0
 8001330:	4618      	mov	r0, r3
 8001332:	f000 facf 	bl	80018d4 <_ZN13MidiInterface16isChannelMessageE8MidiType>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d011      	beq.n	8001360 <_ZN13MidiInterface5parseEv+0xa4>
			// Only these types allow Running Status

			// If the status byte is not received, prepend it
			// to the pending message
			if (extracted < 0x80) {
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0d      	blt.n	8001360 <_ZN13MidiInterface5parseEv+0xa4>
				mPendingMessage[0] = mRunningStatus_RX;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 20d9 	ldrb.w	r2, [r3, #217]	@ 0xd9
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
				mPendingMessage[1] = extracted;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
				mPendingMessageIndex = 1;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf





		switch (getTypeFromStatusByte(mPendingMessage[0])) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fa7d 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 800136c:	4603      	mov	r3, r0
 800136e:	2bff      	cmp	r3, #255	@ 0xff
 8001370:	dc7b      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 8001372:	2bf1      	cmp	r3, #241	@ 0xf1
 8001374:	da1c      	bge.n	80013b0 <_ZN13MidiInterface5parseEv+0xf4>
 8001376:	2bf0      	cmp	r3, #240	@ 0xf0
 8001378:	d06a      	beq.n	8001450 <_ZN13MidiInterface5parseEv+0x194>
 800137a:	2bf0      	cmp	r3, #240	@ 0xf0
 800137c:	dc75      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 800137e:	2be0      	cmp	r3, #224	@ 0xe0
 8001380:	d061      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 8001382:	2be0      	cmp	r3, #224	@ 0xe0
 8001384:	dc71      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 8001386:	2bd0      	cmp	r3, #208	@ 0xd0
 8001388:	d058      	beq.n	800143c <_ZN13MidiInterface5parseEv+0x180>
 800138a:	2bd0      	cmp	r3, #208	@ 0xd0
 800138c:	dc6d      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 800138e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001390:	d054      	beq.n	800143c <_ZN13MidiInterface5parseEv+0x180>
 8001392:	2bc0      	cmp	r3, #192	@ 0xc0
 8001394:	dc69      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 8001396:	2bb0      	cmp	r3, #176	@ 0xb0
 8001398:	d055      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 800139a:	2bb0      	cmp	r3, #176	@ 0xb0
 800139c:	dc65      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 800139e:	2ba0      	cmp	r3, #160	@ 0xa0
 80013a0:	d051      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 80013a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80013a4:	dc61      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 80013a6:	2b80      	cmp	r3, #128	@ 0x80
 80013a8:	d04d      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 80013aa:	2b90      	cmp	r3, #144	@ 0x90
 80013ac:	d04b      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 80013ae:	e05c      	b.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 80013b0:	3bf1      	subs	r3, #241	@ 0xf1
 80013b2:	2201      	movs	r2, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	f646 62a0 	movw	r2, #28320	@ 0x6ea0
 80013bc:	401a      	ands	r2, r3
 80013be:	2a00      	cmp	r2, #0
 80013c0:	bf14      	ite	ne
 80013c2:	2201      	movne	r2, #1
 80013c4:	2200      	moveq	r2, #0
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d112      	bne.n	80013f2 <_ZN13MidiInterface5parseEv+0x136>
 80013cc:	f003 0205 	and.w	r2, r3, #5
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2201      	movne	r2, #1
 80013d6:	2200      	moveq	r2, #0
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	2a00      	cmp	r2, #0
 80013dc:	d12e      	bne.n	800143c <_ZN13MidiInterface5parseEv+0x180>
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d12a      	bne.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 80013f0:	e03b      	b.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
		case Clock:
		case ActiveSensing:
		case SystemReset:
		case TuneRequest:
			// Handle the message type directly here.
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fa34 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
			mMessage.channel = 0;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
			mMessage.data1 = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
			mMessage.data2 = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
			mMessage.valid = true;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

			// Do not reset all input attributes, Running Status must remain unchanged.
			// We still need to reset these
			mPendingMessageIndex = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

			return true;
 8001438:	2301      	movs	r3, #1
 800143a:	e17f      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
			// 2 bytes messages
		case ProgramChange:
		case AfterTouchChannel:
		case TimeCodeQuarterFrame:
		case SongSelect:
			mPendingMessageExpectedLenght = 2;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			break;
 8001444:	e016      	b.n	8001474 <_ZN13MidiInterface5parseEv+0x1b8>
		case NoteOff:
		case ControlChange:
		case PitchBend:
		case AfterTouchPoly:
		case SongPosition:
			mPendingMessageExpectedLenght = 3;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			break;
 800144e:	e011      	b.n	8001474 <_ZN13MidiInterface5parseEv+0x1b8>

		case SystemExclusive:
			// The message can be any lenght
			// between 3 and Settings.SysExMaxSize bytes
			mPendingMessageExpectedLenght = Settings.SysExMaxSize;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			mRunningStatus_RX = InvalidType;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
			mMessage.sysexArray[0] = SystemExclusive;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22f0      	movs	r2, #240	@ 0xf0
 8001464:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
			break;
 8001468:	e004      	b.n	8001474 <_ZN13MidiInterface5parseEv+0x1b8>

		case InvalidType:
		default:
			// This is obviously wrong. Let's get the hell out'a here.
			resetInput();
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f9b1 	bl	80017d2 <_ZN13MidiInterface10resetInputEv>
			return false;
 8001470:	2300      	movs	r3, #0
 8001472:	e163      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
			break;
		}

		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8001482:	3b01      	subs	r3, #1
 8001484:	429a      	cmp	r2, r3
 8001486:	db2d      	blt.n	80014e4 <_ZN13MidiInterface5parseEv+0x228>
			// Reception complete
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f9e9 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
			mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fa04 	bl	80018b2 <_ZN13MidiInterface24getChannelFromStatusByteEh>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
			mMessage.data1 = mPendingMessage[1];
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 20dc 	ldrb.w	r2, [r3, #220]	@ 0xdc
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
			mMessage.data2 = 0;			// Completed new message has 1 data byte
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

			mPendingMessageIndex = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			mMessage.valid = true;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
			return true;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e12b      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Waiting for more data
			mPendingMessageIndex++;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80014ea:	3301      	adds	r3, #1
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
		}

		if (Settings.Use1ByteParsing) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <_ZN13MidiInterface5parseEv+0x246>
			// Message is not complete.
			return false;
 80014fe:	2300      	movs	r3, #0
 8001500:	e11c      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Call the parser recursively
			// to parse the rest of the message.
			return parse();
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff feda 	bl	80012bc <_ZN13MidiInterface5parseEv>
 8001508:	4603      	mov	r3, r0
 800150a:	e117      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		}
	} else {
// First, test if this is a status byte
		if (extracted >= 0x80) {
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	da67      	bge.n	80015e4 <_ZN13MidiInterface5parseEv+0x328>
			// Reception of status bytes in the middle of an uncompleted message
			// are allowed only for interleaved Real Time message or EOX
			switch (extracted) {
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	3bf7      	subs	r3, #247	@ 0xf7
 8001518:	2b08      	cmp	r3, #8
 800151a:	d862      	bhi.n	80015e2 <_ZN13MidiInterface5parseEv+0x326>
 800151c:	a201      	add	r2, pc, #4	@ (adr r2, 8001524 <_ZN13MidiInterface5parseEv+0x268>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001575 	.word	0x08001575
 8001528:	08001549 	.word	0x08001549
 800152c:	080015e3 	.word	0x080015e3
 8001530:	08001549 	.word	0x08001549
 8001534:	08001549 	.word	0x08001549
 8001538:	08001549 	.word	0x08001549
 800153c:	080015e3 	.word	0x080015e3
 8001540:	08001549 	.word	0x08001549
 8001544:	08001549 	.word	0x08001549
// the MIDI class, and recompose the message it was
// interleaved into. Oh, and without killing the running status..
// This is done by leaving the pending message as is,
// it will be completed on next calls.

				mMessage.type = (MidiType) extracted;
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
				mMessage.data1 = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
				mMessage.data2 = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
				mMessage.channel = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
				mMessage.valid = true;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				return true;
 8001570:	2301      	movs	r3, #1
 8001572:	e0e3      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>

// End of Exclusive
			case 0xf7:
				if (mMessage.sysexArray[0] == SystemExclusive) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 30ee 	ldrb.w	r3, [r3, #238]	@ 0xee
 800157a:	2bf0      	cmp	r3, #240	@ 0xf0
 800157c:	d12c      	bne.n	80015d8 <_ZN13MidiInterface5parseEv+0x31c>
					// Store the last byte (EOX)
					mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	b2d1      	uxtb	r1, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	f882 10df 	strb.w	r1, [r2, #223]	@ 0xdf
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	22f7      	movs	r2, #247	@ 0xf7
 8001596:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
					mMessage.type = SystemExclusive;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	22f0      	movs	r2, #240	@ 0xf0
 800159e:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9

					// Get length
					mMessage.data1 = mPendingMessageIndex & 0xff;		// LSB
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
					mMessage.data2 = mPendingMessageIndex >> 8;			// MSB
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80015b4:	121b      	asrs	r3, r3, #8
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
					mMessage.channel = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
					mMessage.valid = true;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

					resetInput();
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8ff 	bl	80017d2 <_ZN13MidiInterface10resetInputEv>
					return true;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b1      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
				} else {
					// Well well well.. error.
					resetInput();
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8fa 	bl	80017d2 <_ZN13MidiInterface10resetInputEv>
					return false;
 80015de:	2300      	movs	r3, #0
 80015e0:	e0ac      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
				}

			default:
				break; // LCOV_EXCL_LINE - Coverage blind spot
 80015e2:	bf00      	nop
			}
		}

// Add extracted data byte to pending message
		if (mPendingMessage[0] == SystemExclusive)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80015ea:	2bf0      	cmp	r3, #240	@ 0xf0
 80015ec:	d109      	bne.n	8001602 <_ZN13MidiInterface5parseEv+0x346>
			mMessage.sysexArray[mPendingMessageIndex] = extracted;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80015f4:	4619      	mov	r1, r3
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8001600:	e008      	b.n	8001614 <_ZN13MidiInterface5parseEv+0x358>
		else
			mPendingMessage[mPendingMessageIndex] = extracted;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001608:	4619      	mov	r1, r3
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	440b      	add	r3, r1
 8001610:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

// Now we are going to check if we have reached the end of the message
		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8001622:	3b01      	subs	r3, #1
 8001624:	429a      	cmp	r2, r3
 8001626:	db75      	blt.n	8001714 <_ZN13MidiInterface5parseEv+0x458>
			// "FML" case: fall down here with an overflown SysEx..
			// This means we received the last possible data byte that can fit
			// the buffer. If this happens, try increasing Settings.SysExMaxSize.
			if (mPendingMessage[0] == SystemExclusive) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800162e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001630:	d104      	bne.n	800163c <_ZN13MidiInterface5parseEv+0x380>
				resetInput();
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8cd 	bl	80017d2 <_ZN13MidiInterface10resetInputEv>
				return false;
 8001638:	2300      	movs	r3, #0
 800163a:	e07f      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
			}

			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f90f 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9

			if (isChannelMessage(mMessage.type))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f93b 	bl	80018d4 <_ZN13MidiInterface16isChannelMessageE8MidiType>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <_ZN13MidiInterface5parseEv+0x3c0>
				mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f921 	bl	80018b2 <_ZN13MidiInterface24getChannelFromStatusByteEh>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 800167a:	e003      	b.n	8001684 <_ZN13MidiInterface5parseEv+0x3c8>
			else
				mMessage.channel = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea

			mMessage.data1 = mPendingMessage[1];
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 20dc 	ldrb.w	r2, [r3, #220]	@ 0xdc
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb

			// Save data2 only if applicable
			mMessage.data2 =
					mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
			mMessage.data2 =
 8001696:	2b03      	cmp	r3, #3
 8001698:	d103      	bne.n	80016a2 <_ZN13MidiInterface5parseEv+0x3e6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 80016a0:	e000      	b.n	80016a4 <_ZN13MidiInterface5parseEv+0x3e8>
 80016a2:	2200      	movs	r2, #0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

			// Reset local variables
			mPendingMessageIndex = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

			mMessage.valid = true;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

			// Activate running status (if enabled for the received type)
			switch (mMessage.type) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 80016c8:	2be0      	cmp	r3, #224	@ 0xe0
 80016ca:	d015      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016cc:	2be0      	cmp	r3, #224	@ 0xe0
 80016ce:	dc1a      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016d0:	2bd0      	cmp	r3, #208	@ 0xd0
 80016d2:	d011      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016d4:	2bd0      	cmp	r3, #208	@ 0xd0
 80016d6:	dc16      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80016da:	d00d      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80016de:	dc12      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016e0:	2bb0      	cmp	r3, #176	@ 0xb0
 80016e2:	d009      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016e4:	2bb0      	cmp	r3, #176	@ 0xb0
 80016e6:	dc0e      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80016ea:	d005      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80016ee:	dc0a      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016f0:	2b80      	cmp	r3, #128	@ 0x80
 80016f2:	d001      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016f4:	2b90      	cmp	r3, #144	@ 0x90
 80016f6:	d106      	bne.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
			case ControlChange:
			case ProgramChange:
			case AfterTouchChannel:
			case PitchBend:
// Running status enabled: store it from received message
				mRunningStatus_RX = mPendingMessage[0];
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 20db 	ldrb.w	r2, [r3, #219]	@ 0xdb
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				break;
 8001704:	e004      	b.n	8001710 <_ZN13MidiInterface5parseEv+0x454>

			default:
// No running status
				mRunningStatus_RX = InvalidType;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				break;
 800170e:	bf00      	nop
			}
			return true;
 8001710:	2301      	movs	r3, #1
 8001712:	e013      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Then update the index of the pending message.
			mPendingMessageIndex++;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf

			if (Settings.Use1ByteParsing) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZN13MidiInterface5parseEv+0x476>
// Message is not complete.
				return false;
 800172e:	2300      	movs	r3, #0
 8001730:	e004      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
			} else {
// Call the parser recursively to parse the rest of the message.
				return parse();
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fdc2 	bl	80012bc <_ZN13MidiInterface5parseEv>
 8001738:	4603      	mov	r3, r0
 800173a:	bf00      	nop
			}
		}
	}
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>:

void MidiInterface::handleNullVelocityNoteOnAsNoteOff() {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
			&& getData2() == 0) {
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00d      	beq.n	8001772 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f851 	bl	80017fe <_ZN13MidiInterface7getTypeEv>
 800175c:	4603      	mov	r3, r0
 800175e:	2b90      	cmp	r3, #144	@ 0x90
 8001760:	d107      	bne.n	8001772 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
			&& getData2() == 0) {
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f858 	bl	8001818 <_ZN13MidiInterface8getData2Ev>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x30>
 8001772:	2300      	movs	r3, #0
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x3c>
		mMessage.type = NoteOff;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	@ 0x80
 800177c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
	}
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN13MidiInterface11inputFilterEh>:

// Private method: check if the received message is on the listened channel

bool MidiInterface::inputFilter(Channel inChannel) {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
	// This method handles recognition of channel
	// (to know if the message is destinated to the Arduino)

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 800179a:	b25b      	sxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	da11      	bge.n	80017c4 <_ZN13MidiInterface11inputFilterEh+0x3c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 80017a6:	2be0      	cmp	r3, #224	@ 0xe0
 80017a8:	d80c      	bhi.n	80017c4 <_ZN13MidiInterface11inputFilterEh+0x3c>
// Then we need to know if we listen to it
		if ((mMessage.channel == inChannel)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d002      	beq.n	80017bc <_ZN13MidiInterface11inputFilterEh+0x34>
				|| (inChannel == MIDI_CHANNEL_OMNI)) {
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <_ZN13MidiInterface11inputFilterEh+0x38>
			return true;
 80017bc:	2301      	movs	r3, #1
 80017be:	e002      	b.n	80017c6 <_ZN13MidiInterface11inputFilterEh+0x3e>
		} else {
			// We don't listen to this channel
			return false;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e000      	b.n	80017c6 <_ZN13MidiInterface11inputFilterEh+0x3e>
		}
	} else {
// System messages are always received
		return true;
 80017c4:	2301      	movs	r3, #1
	}
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_ZN13MidiInterface10resetInputEv>:

// Private method: reset input attributes

void MidiInterface::resetInput() {
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
	mPendingMessageIndex = 0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mPendingMessageExpectedLenght = 0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	mRunningStatus_RX = InvalidType;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_ZN13MidiInterface7getTypeEv>:
/*! \brief Get the last received message's type

 Returns an enumerated type. @see MidiType
 */

MidiType MidiInterface::getType() {
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	return mMessage.type;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_ZN13MidiInterface8getData2Ev>:
	return mMessage.data1;
}

/*! \brief Get the second data byte of the last received message. */

DataByte MidiInterface::getData2() {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	return mMessage.data2;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_ZN13MidiInterface13getSysExArrayEv>:
/*! \brief Get the System Exclusive byte array.

 @see getSysExArrayLength to get the array's length in bytes.
 */

byte* MidiInterface::getSysExArray() {
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return mMessage.sysexArray;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	33ee      	adds	r3, #238	@ 0xee
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_ZN13MidiInterface19getSysExArrayLengthEv>:

 It is coded using data1 as LSB and data2 as MSB.
 \return The array's length, in bytes.
 */

unsigned MidiInterface::getSysExArrayLength() {
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return mMessage.getSysExSize();
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	33e8      	adds	r3, #232	@ 0xe8
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fa3a 	bl	8000cd0 <_ZN8mMessage12getSysExSizeEv>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>:
 This is a utility static method, used internally,
 made public so you can handle MidiTypes more easily.
 */

MidiType MidiInterface::getTypeFromStatusByte(
byte inStatus) {
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
	if ((inStatus < 0x80) || (inStatus == 0xf4) || (inStatus == 0xf5)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da0b      	bge.n	8001890 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2bf4      	cmp	r3, #244	@ 0xf4
 800187c:	d008      	beq.n	8001890 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2bf5      	cmp	r3, #245	@ 0xf5
 8001882:	d005      	beq.n	8001890 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
			|| (inStatus == 0xf9) || (inStatus == 0xfD)) {
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2bf9      	cmp	r3, #249	@ 0xf9
 8001888:	d002      	beq.n	8001890 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2bfd      	cmp	r3, #253	@ 0xfd
 800188e:	d101      	bne.n	8001894 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2e>
// Data bytes and undefined.
		return InvalidType;
 8001890:	2300      	movs	r3, #0
 8001892:	e008      	b.n	80018a6 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}
	if (inStatus < 0xf0) {
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2bef      	cmp	r3, #239	@ 0xef
 8001898:	d804      	bhi.n	80018a4 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x3e>
// Channel message, remove channel nibble.
		return MidiType(inStatus & 0xf0);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f023 030f 	bic.w	r3, r3, #15
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	e000      	b.n	80018a6 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}

	return MidiType(inStatus);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_ZN13MidiInterface24getChannelFromStatusByteEh>:

/*! \brief Returns channel in the range 1-16
 */

Channel MidiInterface::getChannelFromStatusByte(
byte inStatus) {
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
	return (inStatus & 0x0f) + 1;
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2db      	uxtb	r3, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_ZN13MidiInterface16isChannelMessageE8MidiType>:

bool MidiInterface::isChannelMessage(MidiType inType) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
			|| inType == PitchBend || inType == ProgramChange);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b80      	cmp	r3, #128	@ 0x80
 80018e2:	d011      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b90      	cmp	r3, #144	@ 0x90
 80018e8:	d00e      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2bb0      	cmp	r3, #176	@ 0xb0
 80018ee:	d00b      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80018f4:	d008      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2bd0      	cmp	r3, #208	@ 0xd0
 80018fa:	d005      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == PitchBend || inType == ProgramChange);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2be0      	cmp	r3, #224	@ 0xe0
 8001900:	d002      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2bc0      	cmp	r3, #192	@ 0xc0
 8001906:	d101      	bne.n	800190c <_ZN13MidiInterface16isChannelMessageE8MidiType+0x38>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <_ZN13MidiInterface16isChannelMessageE8MidiType+0x3a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>:

void MidiInterface::setHandleNoteOff(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	mNoteOffCallback = fptr;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>:
void MidiInterface::setHandleNoteOn(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	mNoteOnCallback = fptr;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	605a      	str	r2, [r3, #4]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_ZN13MidiInterface14setHandleClockEPFvvE>:
	mSongSelectCallback = fptr;
}
void MidiInterface::setHandleTuneRequest(void (*fptr)(void)) {
	mTuneRequestCallback = fptr;
}
void MidiInterface::setHandleClock(void (*fptr)(void)) {
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
	mClockCallback = fptr;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_ZN13MidiInterface14setHandleStartEPFvvE>:
void MidiInterface::setHandleStart(void (*fptr)(void)) {
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
	mStartCallback = fptr;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_ZN13MidiInterface13setHandleStopEPFvvE>:
void MidiInterface::setHandleContinue(void (*fptr)(void)) {
	mContinueCallback = fptr;
}
void MidiInterface::setHandleStop(void (*fptr)(void)) {
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
	mStopCallback = fptr;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <_ZN13MidiInterface14launchCallbackEv>:
	}
}

/*! @} */ // End of doc group MIDI Callbacks
// Private - launch callback function based on received type.
void MidiInterface::launchCallback() {
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	// The order is mixed to allow frequent messages to trigger their callback faster.
	switch (mMessage.type) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 80019b6:	3b80      	subs	r3, #128	@ 0x80
 80019b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80019ba:	f200 8201 	bhi.w	8001dc0 <_ZN13MidiInterface14launchCallbackEv+0x418>
 80019be:	a201      	add	r2, pc, #4	@ (adr r2, 80019c4 <_ZN13MidiInterface14launchCallbackEv+0x1c>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001bc5 	.word	0x08001bc5
 80019c8:	08001dc1 	.word	0x08001dc1
 80019cc:	08001dc1 	.word	0x08001dc1
 80019d0:	08001dc1 	.word	0x08001dc1
 80019d4:	08001dc1 	.word	0x08001dc1
 80019d8:	08001dc1 	.word	0x08001dc1
 80019dc:	08001dc1 	.word	0x08001dc1
 80019e0:	08001dc1 	.word	0x08001dc1
 80019e4:	08001dc1 	.word	0x08001dc1
 80019e8:	08001dc1 	.word	0x08001dc1
 80019ec:	08001dc1 	.word	0x08001dc1
 80019f0:	08001dc1 	.word	0x08001dc1
 80019f4:	08001dc1 	.word	0x08001dc1
 80019f8:	08001dc1 	.word	0x08001dc1
 80019fc:	08001dc1 	.word	0x08001dc1
 8001a00:	08001dc1 	.word	0x08001dc1
 8001a04:	08001be9 	.word	0x08001be9
 8001a08:	08001dc1 	.word	0x08001dc1
 8001a0c:	08001dc1 	.word	0x08001dc1
 8001a10:	08001dc1 	.word	0x08001dc1
 8001a14:	08001dc1 	.word	0x08001dc1
 8001a18:	08001dc1 	.word	0x08001dc1
 8001a1c:	08001dc1 	.word	0x08001dc1
 8001a20:	08001dc1 	.word	0x08001dc1
 8001a24:	08001dc1 	.word	0x08001dc1
 8001a28:	08001dc1 	.word	0x08001dc1
 8001a2c:	08001dc1 	.word	0x08001dc1
 8001a30:	08001dc1 	.word	0x08001dc1
 8001a34:	08001dc1 	.word	0x08001dc1
 8001a38:	08001dc1 	.word	0x08001dc1
 8001a3c:	08001dc1 	.word	0x08001dc1
 8001a40:	08001dc1 	.word	0x08001dc1
 8001a44:	08001cc1 	.word	0x08001cc1
 8001a48:	08001dc1 	.word	0x08001dc1
 8001a4c:	08001dc1 	.word	0x08001dc1
 8001a50:	08001dc1 	.word	0x08001dc1
 8001a54:	08001dc1 	.word	0x08001dc1
 8001a58:	08001dc1 	.word	0x08001dc1
 8001a5c:	08001dc1 	.word	0x08001dc1
 8001a60:	08001dc1 	.word	0x08001dc1
 8001a64:	08001dc1 	.word	0x08001dc1
 8001a68:	08001dc1 	.word	0x08001dc1
 8001a6c:	08001dc1 	.word	0x08001dc1
 8001a70:	08001dc1 	.word	0x08001dc1
 8001a74:	08001dc1 	.word	0x08001dc1
 8001a78:	08001dc1 	.word	0x08001dc1
 8001a7c:	08001dc1 	.word	0x08001dc1
 8001a80:	08001dc1 	.word	0x08001dc1
 8001a84:	08001c67 	.word	0x08001c67
 8001a88:	08001dc1 	.word	0x08001dc1
 8001a8c:	08001dc1 	.word	0x08001dc1
 8001a90:	08001dc1 	.word	0x08001dc1
 8001a94:	08001dc1 	.word	0x08001dc1
 8001a98:	08001dc1 	.word	0x08001dc1
 8001a9c:	08001dc1 	.word	0x08001dc1
 8001aa0:	08001dc1 	.word	0x08001dc1
 8001aa4:	08001dc1 	.word	0x08001dc1
 8001aa8:	08001dc1 	.word	0x08001dc1
 8001aac:	08001dc1 	.word	0x08001dc1
 8001ab0:	08001dc1 	.word	0x08001dc1
 8001ab4:	08001dc1 	.word	0x08001dc1
 8001ab8:	08001dc1 	.word	0x08001dc1
 8001abc:	08001dc1 	.word	0x08001dc1
 8001ac0:	08001dc1 	.word	0x08001dc1
 8001ac4:	08001d03 	.word	0x08001d03
 8001ac8:	08001dc1 	.word	0x08001dc1
 8001acc:	08001dc1 	.word	0x08001dc1
 8001ad0:	08001dc1 	.word	0x08001dc1
 8001ad4:	08001dc1 	.word	0x08001dc1
 8001ad8:	08001dc1 	.word	0x08001dc1
 8001adc:	08001dc1 	.word	0x08001dc1
 8001ae0:	08001dc1 	.word	0x08001dc1
 8001ae4:	08001dc1 	.word	0x08001dc1
 8001ae8:	08001dc1 	.word	0x08001dc1
 8001aec:	08001dc1 	.word	0x08001dc1
 8001af0:	08001dc1 	.word	0x08001dc1
 8001af4:	08001dc1 	.word	0x08001dc1
 8001af8:	08001dc1 	.word	0x08001dc1
 8001afc:	08001dc1 	.word	0x08001dc1
 8001b00:	08001dc1 	.word	0x08001dc1
 8001b04:	08001ce5 	.word	0x08001ce5
 8001b08:	08001dc1 	.word	0x08001dc1
 8001b0c:	08001dc1 	.word	0x08001dc1
 8001b10:	08001dc1 	.word	0x08001dc1
 8001b14:	08001dc1 	.word	0x08001dc1
 8001b18:	08001dc1 	.word	0x08001dc1
 8001b1c:	08001dc1 	.word	0x08001dc1
 8001b20:	08001dc1 	.word	0x08001dc1
 8001b24:	08001dc1 	.word	0x08001dc1
 8001b28:	08001dc1 	.word	0x08001dc1
 8001b2c:	08001dc1 	.word	0x08001dc1
 8001b30:	08001dc1 	.word	0x08001dc1
 8001b34:	08001dc1 	.word	0x08001dc1
 8001b38:	08001dc1 	.word	0x08001dc1
 8001b3c:	08001dc1 	.word	0x08001dc1
 8001b40:	08001dc1 	.word	0x08001dc1
 8001b44:	08001c8b 	.word	0x08001c8b
 8001b48:	08001dc1 	.word	0x08001dc1
 8001b4c:	08001dc1 	.word	0x08001dc1
 8001b50:	08001dc1 	.word	0x08001dc1
 8001b54:	08001dc1 	.word	0x08001dc1
 8001b58:	08001dc1 	.word	0x08001dc1
 8001b5c:	08001dc1 	.word	0x08001dc1
 8001b60:	08001dc1 	.word	0x08001dc1
 8001b64:	08001dc1 	.word	0x08001dc1
 8001b68:	08001dc1 	.word	0x08001dc1
 8001b6c:	08001dc1 	.word	0x08001dc1
 8001b70:	08001dc1 	.word	0x08001dc1
 8001b74:	08001dc1 	.word	0x08001dc1
 8001b78:	08001dc1 	.word	0x08001dc1
 8001b7c:	08001dc1 	.word	0x08001dc1
 8001b80:	08001dc1 	.word	0x08001dc1
 8001b84:	08001d21 	.word	0x08001d21
 8001b88:	08001d47 	.word	0x08001d47
 8001b8c:	08001d5f 	.word	0x08001d5f
 8001b90:	08001d89 	.word	0x08001d89
 8001b94:	08001dc1 	.word	0x08001dc1
 8001b98:	08001dc1 	.word	0x08001dc1
 8001b9c:	08001da1 	.word	0x08001da1
 8001ba0:	08001dc1 	.word	0x08001dc1
 8001ba4:	08001c0d 	.word	0x08001c0d
 8001ba8:	08001dc1 	.word	0x08001dc1
 8001bac:	08001c1f 	.word	0x08001c1f
 8001bb0:	08001c31 	.word	0x08001c31
 8001bb4:	08001c43 	.word	0x08001c43
 8001bb8:	08001dc1 	.word	0x08001dc1
 8001bbc:	08001c55 	.word	0x08001c55
 8001bc0:	08001db1 	.word	0x08001db1
	// Notes
	case NoteOff:
		if (mNoteOffCallback != 0)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80fb 	beq.w	8001dc4 <_ZN13MidiInterface14launchCallbackEv+0x41c>
			mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001be4:	4798      	blx	r3
		break;
 8001be6:	e0ed      	b.n	8001dc4 <_ZN13MidiInterface14launchCallbackEv+0x41c>
	case NoteOn:
		if (mNoteOnCallback != 0)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80eb 	beq.w	8001dc8 <_ZN13MidiInterface14launchCallbackEv+0x420>
			mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001c08:	4798      	blx	r3
		break;
 8001c0a:	e0dd      	b.n	8001dc8 <_ZN13MidiInterface14launchCallbackEv+0x420>

// Real-time messages
	case Clock:
		if (mClockCallback != 0)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80db 	beq.w	8001dcc <_ZN13MidiInterface14launchCallbackEv+0x424>
			mClockCallback();
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4798      	blx	r3
		break;
 8001c1c:	e0d6      	b.n	8001dcc <_ZN13MidiInterface14launchCallbackEv+0x424>
	case Start:
		if (mStartCallback != 0)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80d4 	beq.w	8001dd0 <_ZN13MidiInterface14launchCallbackEv+0x428>
			mStartCallback();
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2c:	4798      	blx	r3
		break;
 8001c2e:	e0cf      	b.n	8001dd0 <_ZN13MidiInterface14launchCallbackEv+0x428>
	case Continue:
		if (mContinueCallback != 0)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80cd 	beq.w	8001dd4 <_ZN13MidiInterface14launchCallbackEv+0x42c>
			mContinueCallback();
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3e:	4798      	blx	r3
		break;
 8001c40:	e0c8      	b.n	8001dd4 <_ZN13MidiInterface14launchCallbackEv+0x42c>
	case Stop:
		if (mStopCallback != 0)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80c6 	beq.w	8001dd8 <_ZN13MidiInterface14launchCallbackEv+0x430>
			mStopCallback();
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c50:	4798      	blx	r3
		break;
 8001c52:	e0c1      	b.n	8001dd8 <_ZN13MidiInterface14launchCallbackEv+0x430>
	case ActiveSensing:
		if (mActiveSensingCallback != 0)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80bf 	beq.w	8001ddc <_ZN13MidiInterface14launchCallbackEv+0x434>
			mActiveSensingCallback();
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4798      	blx	r3
		break;
 8001c64:	e0ba      	b.n	8001ddc <_ZN13MidiInterface14launchCallbackEv+0x434>

// Continuous controllers
	case ControlChange:
		if (mControlChangeCallback != 0)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80b8 	beq.w	8001de0 <_ZN13MidiInterface14launchCallbackEv+0x438>
			mControlChangeCallback(mMessage.channel, mMessage.data1,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001c86:	4798      	blx	r3
					mMessage.data2);
		break;
 8001c88:	e0aa      	b.n	8001de0 <_ZN13MidiInterface14launchCallbackEv+0x438>
	case PitchBend:
		if (mPitchBendCallback != 0)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80a8 	beq.w	8001de4 <_ZN13MidiInterface14launchCallbackEv+0x43c>
			mPitchBendCallback(mMessage.channel,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
					(int) ((mMessage.data1 & 0x7f)
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001ca4:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
							| ((mMessage.data2 & 0x7f) << 7))
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001cae:	01d2      	lsls	r2, r2, #7
 8001cb0:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001cb4:	430a      	orrs	r2, r1
			mPitchBendCallback(mMessage.channel,
 8001cb6:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4798      	blx	r3
							+ MIDI_PITCHBEND_MIN);
		break;
 8001cbe:	e091      	b.n	8001de4 <_ZN13MidiInterface14launchCallbackEv+0x43c>
	case AfterTouchPoly:
		if (mAfterTouchPolyCallback != 0)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 808f 	beq.w	8001de8 <_ZN13MidiInterface14launchCallbackEv+0x440>
			mAfterTouchPolyCallback(mMessage.channel, mMessage.data1,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001ce0:	4798      	blx	r3
					mMessage.data2);
		break;
 8001ce2:	e081      	b.n	8001de8 <_ZN13MidiInterface14launchCallbackEv+0x440>
	case AfterTouchChannel:
		if (mAfterTouchChannelCallback != 0)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d07f      	beq.n	8001dec <_ZN13MidiInterface14launchCallbackEv+0x444>
			mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4798      	blx	r3
		break;
 8001d00:	e074      	b.n	8001dec <_ZN13MidiInterface14launchCallbackEv+0x444>

	case ProgramChange:
		if (mProgramChangeCallback != 0)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d072      	beq.n	8001df0 <_ZN13MidiInterface14launchCallbackEv+0x448>
			mProgramChangeCallback(mMessage.channel, mMessage.data1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4798      	blx	r3
		break;
 8001d1e:	e067      	b.n	8001df0 <_ZN13MidiInterface14launchCallbackEv+0x448>
	case SystemExclusive:
		if (mSystemExclusiveCallback != 0)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d065      	beq.n	8001df4 <_ZN13MidiInterface14launchCallbackEv+0x44c>
			mSystemExclusiveCallback(mMessage.sysexArray,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69dc      	ldr	r4, [r3, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f103 05ee 	add.w	r5, r3, #238	@ 0xee
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	33e8      	adds	r3, #232	@ 0xe8
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ffca 	bl	8000cd0 <_ZN8mMessage12getSysExSizeEv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4628      	mov	r0, r5
 8001d42:	47a0      	blx	r4
					mMessage.getSysExSize());
		break;
 8001d44:	e056      	b.n	8001df4 <_ZN13MidiInterface14launchCallbackEv+0x44c>

// Occasional messages
	case TimeCodeQuarterFrame:
		if (mTimeCodeQuarterFrameCallback != 0)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d054      	beq.n	8001df8 <_ZN13MidiInterface14launchCallbackEv+0x450>
			mTimeCodeQuarterFrameCallback(mMessage.data1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4798      	blx	r3
		break;
 8001d5c:	e04c      	b.n	8001df8 <_ZN13MidiInterface14launchCallbackEv+0x450>
	case SongPosition:
		if (mSongPositionCallback != 0)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d04a      	beq.n	8001dfc <_ZN13MidiInterface14launchCallbackEv+0x454>
			mSongPositionCallback(
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
					(mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d70:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001d7a:	01d2      	lsls	r2, r2, #7
 8001d7c:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001d80:	430a      	orrs	r2, r1
			mSongPositionCallback(
 8001d82:	4610      	mov	r0, r2
 8001d84:	4798      	blx	r3
		break;
 8001d86:	e039      	b.n	8001dfc <_ZN13MidiInterface14launchCallbackEv+0x454>
	case SongSelect:
		if (mSongSelectCallback != 0)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d037      	beq.n	8001e00 <_ZN13MidiInterface14launchCallbackEv+0x458>
			mSongSelectCallback(mMessage.data1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4798      	blx	r3
		break;
 8001d9e:	e02f      	b.n	8001e00 <_ZN13MidiInterface14launchCallbackEv+0x458>
	case TuneRequest:
		if (mTuneRequestCallback != 0)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d02d      	beq.n	8001e04 <_ZN13MidiInterface14launchCallbackEv+0x45c>
			mTuneRequestCallback();
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	4798      	blx	r3
		break;
 8001dae:	e029      	b.n	8001e04 <_ZN13MidiInterface14launchCallbackEv+0x45c>

	case SystemReset:
		if (mSystemResetCallback != 0)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d027      	beq.n	8001e08 <_ZN13MidiInterface14launchCallbackEv+0x460>
			mSystemResetCallback();
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbc:	4798      	blx	r3
		break;
 8001dbe:	e023      	b.n	8001e08 <_ZN13MidiInterface14launchCallbackEv+0x460>

	case InvalidType:
	default:
		break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001dc0:	bf00      	nop
 8001dc2:	e022      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dc4:	bf00      	nop
 8001dc6:	e020      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dc8:	bf00      	nop
 8001dca:	e01e      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dcc:	bf00      	nop
 8001dce:	e01c      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dd0:	bf00      	nop
 8001dd2:	e01a      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dd4:	bf00      	nop
 8001dd6:	e018      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dd8:	bf00      	nop
 8001dda:	e016      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001ddc:	bf00      	nop
 8001dde:	e014      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001de0:	bf00      	nop
 8001de2:	e012      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001de4:	bf00      	nop
 8001de6:	e010      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001de8:	bf00      	nop
 8001dea:	e00e      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dec:	bf00      	nop
 8001dee:	e00c      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001df0:	bf00      	nop
 8001df2:	e00a      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001df4:	bf00      	nop
 8001df6:	e008      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001df8:	bf00      	nop
 8001dfa:	e006      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dfc:	bf00      	nop
 8001dfe:	e004      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e00:	bf00      	nop
 8001e02:	e002      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e04:	bf00      	nop
 8001e06:	e000      	b.n	8001e0a <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e08:	bf00      	nop
	}
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bdb0      	pop	{r4, r5, r7, pc}
 8001e12:	bf00      	nop

08001e14 <_ZN13MidiInterface10thruFilterEh>:

void MidiInterface::thruFilter(Channel inChannel) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
	// If the feature is disabled, don't do anything.
	if (!mThruActivated || (mThruFilterMode == Thru::Off))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001e26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 80da 	bne.w	8001fec <_ZN13MidiInterface10thruFilterEh+0x1d8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80d1 	beq.w	8001fec <_ZN13MidiInterface10thruFilterEh+0x1d8>
		return;

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da65      	bge.n	8001f22 <_ZN13MidiInterface10thruFilterEh+0x10e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001e5c:	2be0      	cmp	r3, #224	@ 0xe0
 8001e5e:	d860      	bhi.n	8001f22 <_ZN13MidiInterface10thruFilterEh+0x10e>
		bool filter_condition = ((mMessage.channel == inChannel)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
				|| (inChannel == MIDI_CHANNEL_OMNI));
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d002      	beq.n	8001e72 <_ZN13MidiInterface10thruFilterEh+0x5e>
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <_ZN13MidiInterface10thruFilterEh+0x62>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <_ZN13MidiInterface10thruFilterEh+0x64>
 8001e76:	2300      	movs	r3, #0
		bool filter_condition = ((mMessage.channel == inChannel)
 8001e78:	73fb      	strb	r3, [r7, #15]

		// Now let's pass it to the output
		switch (mThruFilterMode) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001e80:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d02d      	beq.n	8001ee6 <_ZN13MidiInterface10thruFilterEh+0xd2>
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	dc43      	bgt.n	8001f16 <_ZN13MidiInterface10thruFilterEh+0x102>
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d002      	beq.n	8001e98 <_ZN13MidiInterface10thruFilterEh+0x84>
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d012      	beq.n	8001ebc <_ZN13MidiInterface10thruFilterEh+0xa8>
						mMessage.channel);
			}
			break;

		default:
			break;
 8001e96:	e03e      	b.n	8001f16 <_ZN13MidiInterface10thruFilterEh+0x102>
			send(mMessage.type, mMessage.data1, mMessage.data2,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff f832 	bl	8000f1e <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001eba:	e031      	b.n	8001f20 <_ZN13MidiInterface10thruFilterEh+0x10c>
			if (filter_condition) {
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d02b      	beq.n	8001f1a <_ZN13MidiInterface10thruFilterEh+0x106>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	4603      	mov	r3, r0
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff f81d 	bl	8000f1e <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001ee4:	e019      	b.n	8001f1a <_ZN13MidiInterface10thruFilterEh+0x106>
			if (!filter_condition) {
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	f083 0301 	eor.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d015      	beq.n	8001f1e <_ZN13MidiInterface10thruFilterEh+0x10a>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff f805 	bl	8000f1e <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001f14:	e003      	b.n	8001f1e <_ZN13MidiInterface10thruFilterEh+0x10a>
			break;
 8001f16:	bf00      	nop
 8001f18:	e06b      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001f1a:	bf00      	nop
 8001f1c:	e069      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001f1e:	bf00      	nop
		}
	} else {
 8001f20:	e067      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
		// Send the message to the output
		switch (mMessage.type) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001f28:	2bff      	cmp	r3, #255	@ 0xff
 8001f2a:	dc61      	bgt.n	8001ff0 <_ZN13MidiInterface10thruFilterEh+0x1dc>
 8001f2c:	2bf2      	cmp	r3, #242	@ 0xf2
 8001f2e:	da04      	bge.n	8001f3a <_ZN13MidiInterface10thruFilterEh+0x126>
 8001f30:	2bf0      	cmp	r3, #240	@ 0xf0
 8001f32:	d02b      	beq.n	8001f8c <_ZN13MidiInterface10thruFilterEh+0x178>
 8001f34:	2bf1      	cmp	r3, #241	@ 0xf1
 8001f36:	d04e      	beq.n	8001fd6 <_ZN13MidiInterface10thruFilterEh+0x1c2>
		case TimeCodeQuarterFrame:
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
			break;

		default:
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001f38:	e05a      	b.n	8001ff0 <_ZN13MidiInterface10thruFilterEh+0x1dc>
		switch (mMessage.type) {
 8001f3a:	3bf2      	subs	r3, #242	@ 0xf2
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001f46:	401a      	ands	r2, r3
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2201      	movne	r2, #1
 8001f4e:	2200      	moveq	r2, #0
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d112      	bne.n	8001f7c <_ZN13MidiInterface10thruFilterEh+0x168>
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	2a00      	cmp	r2, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2201      	movne	r2, #1
 8001f60:	2200      	moveq	r2, #0
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	2a00      	cmp	r2, #0
 8001f66:	d128      	bne.n	8001fba <_ZN13MidiInterface10thruFilterEh+0x1a6>
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d117      	bne.n	8001faa <_ZN13MidiInterface10thruFilterEh+0x196>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001f7a:	e039      	b.n	8001ff0 <_ZN13MidiInterface10thruFilterEh+0x1dc>
			sendRealTime(mMessage.type);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff f914 	bl	80011b2 <_ZN13MidiInterface12sendRealTimeE8MidiType>
			break;
 8001f8a:	e032      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSysEx(getSysExArrayLength(), getSysExArray(), true);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fc5c 	bl	800184a <_ZN13MidiInterface19getSysExArrayLengthEv>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b2dc      	uxtb	r4, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fc4b 	bl	8001832 <_ZN13MidiInterface13getSysExArrayEv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff f82e 	bl	8001004 <_ZN13MidiInterface9sendSysExEhPhb>
			break;
 8001fa8:	e023      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongSelect(mMessage.data1);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff f8d8 	bl	8001168 <_ZN13MidiInterface14sendSongSelectEh>
			break;
 8001fb8:	e01b      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongPosition(mMessage.data1 | ((unsigned) mMessage.data2 << 7));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001fc8:	01db      	lsls	r3, r3, #7
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff f899 	bl	8001106 <_ZN13MidiInterface16sendSongPositionEj>
			break;
 8001fd4:	e00d      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 10eb 	ldrb.w	r1, [r3, #235]	@ 0xeb
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff f84c 	bl	8001082 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>
			break;
 8001fea:	e002      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
		return;
 8001fec:	bf00      	nop
 8001fee:	e000      	b.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1de>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001ff0:	bf00      	nop
		}
	}
}
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <_Z12Handle_Clockv>:
uint8_t first_note, range_idx;
uint8_t second_note;
uint8_t third_note;
uint8_t fourth_note;
uint16_t coarse_DAC, coarse_start, fine_index, fine_DAC;
void Handle_Clock() {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	i++;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <_Z12Handle_Clockv+0x2c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4a08      	ldr	r2, [pc, #32]	@ (8002024 <_Z12Handle_Clockv+0x2c>)
 8002004:	6013      	str	r3, [r2, #0]
	if (i / 12 == 1) {
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <_Z12Handle_Clockv+0x2c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3b0c      	subs	r3, #12
 800200c:	2b0b      	cmp	r3, #11
 800200e:	d806      	bhi.n	800201e <_Z12Handle_Clockv+0x26>
		HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
 8002010:	2104      	movs	r1, #4
 8002012:	4805      	ldr	r0, [pc, #20]	@ (8002028 <_Z12Handle_Clockv+0x30>)
 8002014:	f002 fe4d 	bl	8004cb2 <HAL_GPIO_TogglePin>
		i = 0;
 8002018:	4b02      	ldr	r3, [pc, #8]	@ (8002024 <_Z12Handle_Clockv+0x2c>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
	}
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000028 	.word	0x20000028
 8002028:	40020c00 	.word	0x40020c00

0800202c <_Z12Handle_Startv>:

void Handle_Start() {
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
	i = 0;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <_Z12Handle_Startv+0x14>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_SET);
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20000028 	.word	0x20000028

08002044 <_Z11Handle_Stopv>:
void Handle_Stop() {
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_RESET);
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	0000      	movs	r0, r0
 8002054:	0000      	movs	r0, r0
	...

08002058 <_Z13Handle_NoteOnhhh>:

// Callback function for when a Note On is received


// Callback function for when a Note Off is received
void Handle_NoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
 8002062:	460b      	mov	r3, r1
 8002064:	71bb      	strb	r3, [r7, #6]
 8002066:	4613      	mov	r3, r2
 8002068:	717b      	strb	r3, [r7, #5]
//    uint32_t pitch_CV = (uint32_t)((note * 0.0833333333 * X) / (3.3 / 4095));  // Calculate pitch CV from MIDI note
    uint32_t velo_CV = (uint32_t)((velocity / 127.0) * 4095);
 800206a:	797b      	ldrb	r3, [r7, #5]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe f9fd 	bl	800046c <__aeabi_i2d>
 8002072:	a345      	add	r3, pc, #276	@ (adr r3, 8002188 <_Z13Handle_NoteOnhhh+0x130>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe fb8c 	bl	8000794 <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	a342      	add	r3, pc, #264	@ (adr r3, 8002190 <_Z13Handle_NoteOnhhh+0x138>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe fa59 	bl	8000540 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fc65 	bl	8000964 <__aeabi_d2uiz>
 800209a:	4603      	mov	r3, r0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24

/*  Natos aukščio skaičiavimai  */
    range_idx = note / 24;         // Integer division
 800209e:	79bb      	ldrb	r3, [r7, #6]
 80020a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002158 <_Z13Handle_NoteOnhhh+0x100>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b2c      	ldr	r3, [pc, #176]	@ (800215c <_Z13Handle_NoteOnhhh+0x104>)
 80020ac:	701a      	strb	r2, [r3, #0]
    range_idx = (range_idx > 4) ? 4 : range_idx; // Clamp to 4
 80020ae:	4b2b      	ldr	r3, [pc, #172]	@ (800215c <_Z13Handle_NoteOnhhh+0x104>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b28      	ldr	r3, [pc, #160]	@ (800215c <_Z13Handle_NoteOnhhh+0x104>)
 80020bc:	701a      	strb	r2, [r3, #0]
    coarse_DAC = coarse_cv[range_idx];
 80020be:	4b27      	ldr	r3, [pc, #156]	@ (800215c <_Z13Handle_NoteOnhhh+0x104>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <_Z13Handle_NoteOnhhh+0x108>)
 80020c6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80020ca:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <_Z13Handle_NoteOnhhh+0x10c>)
 80020cc:	801a      	strh	r2, [r3, #0]

    fine_DAC = fine_cv[note];
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	4a25      	ldr	r2, [pc, #148]	@ (8002168 <_Z13Handle_NoteOnhhh+0x110>)
 80020d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020d6:	4b25      	ldr	r3, [pc, #148]	@ (800216c <_Z13Handle_NoteOnhhh+0x114>)
 80020d8:	801a      	strh	r2, [r3, #0]

    ChannelConfig config;
    ChannelConfig_2 config2;

    if (!first_note_active) {
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <_Z13Handle_NoteOnhhh+0x118>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	f083 0301 	eor.w	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d033      	beq.n	8002150 <_Z13Handle_NoteOnhhh+0xf8>
//        pitch1_CV = pitch_CV;
        tt=0;
 80020e8:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <_Z13Handle_NoteOnhhh+0x11c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
        yy=0;
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <_Z13Handle_NoteOnhhh+0x120>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
        ADSR_SetGateSignal(&envelopes[0], 1);
 80020f4:	2101      	movs	r1, #1
 80020f6:	4821      	ldr	r0, [pc, #132]	@ (800217c <_Z13Handle_NoteOnhhh+0x124>)
 80020f8:	f000 f9f2 	bl	80024e0 <ADSR_SetGateSignal>
        config.val[0] = fine_DAC; // 12-bit DAC value for channel A
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <_Z13Handle_NoteOnhhh+0x114>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	837b      	strh	r3, [r7, #26]
        config.val[1] = coarse_DAC;  // 12-bit DAC value for channel B
 8002102:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <_Z13Handle_NoteOnhhh+0x10c>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	83bb      	strh	r3, [r7, #28]
        config.val[2] = 4094; // 12-bit DAC value for channel C
 8002108:	f640 73fe 	movw	r3, #4094	@ 0xffe
 800210c:	83fb      	strh	r3, [r7, #30]
        config.val[3] = 4094;  // 12-bit DAC value for channel D
 800210e:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8002112:	843b      	strh	r3, [r7, #32]

          DACx60FW(&hi2c1, config);
 8002114:	f107 0318 	add.w	r3, r7, #24
 8002118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211a:	4819      	ldr	r0, [pc, #100]	@ (8002180 <_Z13Handle_NoteOnhhh+0x128>)
 800211c:	f000 ffe6 	bl	80030ec <DACx60FW>

          config2.val[0] = 4095; // 12-bit DAC value for channel A
 8002120:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002124:	81fb      	strh	r3, [r7, #14]
          config2.val[1] = 4095;  // 12-bit DAC value for channel B
 8002126:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800212a:	823b      	strh	r3, [r7, #16]
          config2.val[2] = 4095; // 12-bit DAC value for channel C
 800212c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002130:	827b      	strh	r3, [r7, #18]
          config2.val[3] = 4095;  // 12-bit DAC value for channel D
 8002132:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002136:	82bb      	strh	r3, [r7, #20]
          DACx61FW(&hi2c1, config2);
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213e:	4810      	ldr	r0, [pc, #64]	@ (8002180 <_Z13Handle_NoteOnhhh+0x128>)
 8002140:	f001 f81f 	bl	8003182 <DACx61FW>
//        mcp4728_multiWrite(&hi2c1, config, 1);
//        DACx60SW(&hi2c1, config, 0);
//        DACx60SW(&hi2c1, config, 1);

//        HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PIN_SET);  // Indicate first note is on via gate3_Pin
        first_note_active = true;  // First note is now active
 8002144:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <_Z13Handle_NoteOnhhh+0x118>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
        first_note = note;  // Store the note value
 800214a:	4a0e      	ldr	r2, [pc, #56]	@ (8002184 <_Z13Handle_NoteOnhhh+0x12c>)
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	7013      	strb	r3, [r2, #0]
//
////        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_SET);  // Indicate fourth note is on via gate4_Pin
//        fourth_note_active = true;  // Fourth note is now active
//        fourth_note = note;  // Store the note value
//    }
}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	@ 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	aaaaaaab 	.word	0xaaaaaaab
 800215c:	20000037 	.word	0x20000037
 8002160:	0800966c 	.word	0x0800966c
 8002164:	2000003a 	.word	0x2000003a
 8002168:	0800956c 	.word	0x0800956c
 800216c:	2000003c 	.word	0x2000003c
 8002170:	20000034 	.word	0x20000034
 8002174:	2000002c 	.word	0x2000002c
 8002178:	20000030 	.word	0x20000030
 800217c:	200003b0 	.word	0x200003b0
 8002180:	20000054 	.word	0x20000054
 8002184:	20000036 	.word	0x20000036
 8002188:	00000000 	.word	0x00000000
 800218c:	405fc000 	.word	0x405fc000
 8002190:	00000000 	.word	0x00000000
 8002194:	40affe00 	.word	0x40affe00

08002198 <_Z14Handle_NoteOffhhh>:

void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	460b      	mov	r3, r1
 80021a4:	71bb      	strb	r3, [r7, #6]
 80021a6:	4613      	mov	r3, r2
 80021a8:	717b      	strb	r3, [r7, #5]
    if (first_note_active && note == first_note) {
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <_Z14Handle_NoteOffhhh+0x5c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <_Z14Handle_NoteOffhhh+0x34>
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <_Z14Handle_NoteOffhhh+0x60>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	79ba      	ldrb	r2, [r7, #6]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <_Z14Handle_NoteOffhhh+0x34>
        ADSR_SetGateSignal(&envelopes[0], 0);
 80021bc:	2100      	movs	r1, #0
 80021be:	480f      	ldr	r0, [pc, #60]	@ (80021fc <_Z14Handle_NoteOffhhh+0x64>)
 80021c0:	f000 f98e 	bl	80024e0 <ADSR_SetGateSignal>

//        HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PIN_RESET);  // PB2 Turn off gate for first note
        first_note_active = false;  // First note is no longer active
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <_Z14Handle_NoteOffhhh+0x5c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
//    else if (fourth_note_active && note == fourth_note) {
//        ADSR_SetGateSignal(&envelopes[3], 0);
////        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_RESET);  // Turn off gate for fourth note
//        fourth_note_active = false;  // Fourth note is no longer active
//    }
}
 80021ca:	e00f      	b.n	80021ec <_Z14Handle_NoteOffhhh+0x54>
    	else if (second_note_active && note == second_note) {
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <_Z14Handle_NoteOffhhh+0x68>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00b      	beq.n	80021ec <_Z14Handle_NoteOffhhh+0x54>
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <_Z14Handle_NoteOffhhh+0x6c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	79ba      	ldrb	r2, [r7, #6]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d106      	bne.n	80021ec <_Z14Handle_NoteOffhhh+0x54>
        ADSR_SetGateSignal(&envelopes[1], 0);
 80021de:	2100      	movs	r1, #0
 80021e0:	4809      	ldr	r0, [pc, #36]	@ (8002208 <_Z14Handle_NoteOffhhh+0x70>)
 80021e2:	f000 f97d 	bl	80024e0 <ADSR_SetGateSignal>
        second_note_active = false;  // Second note is no longer active
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <_Z14Handle_NoteOffhhh+0x68>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000034 	.word	0x20000034
 80021f8:	20000036 	.word	0x20000036
 80021fc:	200003b0 	.word	0x200003b0
 8002200:	20000035 	.word	0x20000035
 8002204:	20000038 	.word	0x20000038
 8002208:	200003d0 	.word	0x200003d0

0800220c <ADSR_Init>:
//    adsr->gate_signal = 0;
//    adsr->amplitude = 1;      // Default amplitude is 1.0 (full volume)
//}
//extern float lookup_t[128];

void ADSR_Init(ADSR_t *adsr, int num_envelopes) {
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < num_envelopes; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e02e      	b.n	800227a <ADSR_Init+0x6e>
    	adsr[i].attack_index = 64;  // Set default index
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	2240      	movs	r2, #64	@ 0x40
 8002226:	61da      	str	r2, [r3, #28]
        adsr[i].attack_rate = attack_rate_lookup[64];
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015b      	lsls	r3, r3, #5
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	4a17      	ldr	r2, [pc, #92]	@ (8002290 <ADSR_Init+0x84>)
 8002232:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8002236:	601a      	str	r2, [r3, #0]
        adsr[i].decay_rate = attack_rate_lookup[64];
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015b      	lsls	r3, r3, #5
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	4a13      	ldr	r2, [pc, #76]	@ (8002290 <ADSR_Init+0x84>)
 8002242:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8002246:	605a      	str	r2, [r3, #4]
        adsr[i].sustain_level = 0.5f;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015b      	lsls	r3, r3, #5
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002254:	609a      	str	r2, [r3, #8]
        adsr[i].release_rate = attack_rate_lookup[64];
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	015b      	lsls	r3, r3, #5
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <ADSR_Init+0x84>)
 8002260:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8002264:	60da      	str	r2, [r3, #12]
        adsr[i].amplitude = 1.0f;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015b      	lsls	r3, r3, #5
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002272:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < num_envelopes; i++) {
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3301      	adds	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	dbcc      	blt.n	800221c <ADSR_Init+0x10>
    }
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	0800936c 	.word	0x0800936c

08002294 <ADSR_SetAttackRate>:
//    } else if (index >= 128) {
//        index = 127;  // Maximum limit
//    }
//    adsr->attack_rate = attack_rate_lookup[index];
//}
void ADSR_SetAttackRate(ADSR_t *adsr, int increment) {
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
    adsr->attack_index += increment;  // Increment or decrement the index
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	441a      	add	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	61da      	str	r2, [r3, #28]

    // Limit checking
    if (adsr->attack_index < 0) {
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da03      	bge.n	80022ba <ADSR_SetAttackRate+0x26>
        adsr->attack_index = 0;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	61da      	str	r2, [r3, #28]
 80022b8:	e006      	b.n	80022c8 <ADSR_SetAttackRate+0x34>
    } else if (adsr->attack_index >= 128) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b7f      	cmp	r3, #127	@ 0x7f
 80022c0:	dd02      	ble.n	80022c8 <ADSR_SetAttackRate+0x34>
        adsr->attack_index = 127;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	227f      	movs	r2, #127	@ 0x7f
 80022c6:	61da      	str	r2, [r3, #28]
    }

    // Update attack rate from lookup table using current index
    adsr->attack_rate = attack_rate_lookup[adsr->attack_index];
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <ADSR_SetAttackRate+0x50>)
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	0800936c 	.word	0x0800936c

080022e8 <ADSR_SetDecayRate>:

void ADSR_SetDecayRate(ADSR_t *adsr, int index) {
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    if (index < 0) {
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da02      	bge.n	80022fe <ADSR_SetDecayRate+0x16>
        index = 0;  // Minimum limit
 80022f8:	2300      	movs	r3, #0
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	e004      	b.n	8002308 <ADSR_SetDecayRate+0x20>
    } else if (index >= 128) {
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b7f      	cmp	r3, #127	@ 0x7f
 8002302:	dd01      	ble.n	8002308 <ADSR_SetDecayRate+0x20>
        index = 127;  // Maximum limit
 8002304:	237f      	movs	r3, #127	@ 0x7f
 8002306:	603b      	str	r3, [r7, #0]
    }
    adsr->decay_rate = attack_rate_lookup[index];
 8002308:	4a06      	ldr	r2, [pc, #24]	@ (8002324 <ADSR_SetDecayRate+0x3c>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	605a      	str	r2, [r3, #4]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	0800936c 	.word	0x0800936c

08002328 <ADSR_SetSustainLevel>:

void ADSR_SetSustainLevel(ADSR_t *adsr, float sustain_level) {
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	ed87 0a00 	vstr	s0, [r7]
	sustain_level += sustain_level * 0.02f;
 8002334:	edd7 7a00 	vldr	s15, [r7]
 8002338:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002398 <ADSR_SetSustainLevel+0x70>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	ed97 7a00 	vldr	s14, [r7]
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	edc7 7a00 	vstr	s15, [r7]
    if (sustain_level < 0.0f) {
 800234c:	edd7 7a00 	vldr	s15, [r7]
 8002350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	d503      	bpl.n	8002362 <ADSR_SetSustainLevel+0x3a>
        sustain_level = 0.0f;  // Minimum limit
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	e00b      	b.n	800237a <ADSR_SetSustainLevel+0x52>
    } else if (sustain_level > 1.0f) {
 8002362:	edd7 7a00 	vldr	s15, [r7]
 8002366:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800236a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	dd02      	ble.n	800237a <ADSR_SetSustainLevel+0x52>
        sustain_level = 1.0f;  // Maximum limit
 8002374:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002378:	603b      	str	r3, [r7, #0]
    }
    adsr->sustain_level = (sustain_level * 0.02f);
 800237a:	edd7 7a00 	vldr	s15, [r7]
 800237e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002398 <ADSR_SetSustainLevel+0x70>
 8002382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	3ca3d70a 	.word	0x3ca3d70a

0800239c <ADSR_SetReleaseRate>:

void ADSR_SetReleaseRate(ADSR_t *adsr, int index) {
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
    if (index < 0) {
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da02      	bge.n	80023b2 <ADSR_SetReleaseRate+0x16>
        index = 0;  // Minimum limit
 80023ac:	2300      	movs	r3, #0
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	e004      	b.n	80023bc <ADSR_SetReleaseRate+0x20>
    } else if (index >= 128) {
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80023b6:	dd01      	ble.n	80023bc <ADSR_SetReleaseRate+0x20>
        index = 127;  // Maximum limit
 80023b8:	237f      	movs	r3, #127	@ 0x7f
 80023ba:	603b      	str	r3, [r7, #0]
    }
    adsr->release_rate = attack_rate_lookup[index];
 80023bc:	4a06      	ldr	r2, [pc, #24]	@ (80023d8 <ADSR_SetReleaseRate+0x3c>)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60da      	str	r2, [r3, #12]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	0800936c 	.word	0x0800936c

080023dc <ADSR_UpdateEnvelope>:
//            break;
//    }
//}}}

// Updates the envelope for a specific ADSR instance
void ADSR_UpdateEnvelope(ADSR_t *adsr) {
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

    switch (adsr->state) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e1b      	ldrb	r3, [r3, #24]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d871      	bhi.n	80024d2 <ADSR_UpdateEnvelope+0xf6>
 80023ee:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <ADSR_UpdateEnvelope+0x18>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002409 	.word	0x08002409
 80023f8:	08002445 	.word	0x08002445
 80023fc:	08002483 	.word	0x08002483
 8002400:	08002495 	.word	0x08002495
 8002404:	080024cd 	.word	0x080024cd
        case ATTACK:
            adsr->envelope_value += adsr->attack_rate;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	ed93 7a05 	vldr	s14, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value >= 1.0f) {
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	edd3 7a05 	vldr	s15, [r3, #20]
 8002424:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	da00      	bge.n	8002434 <ADSR_UpdateEnvelope+0x58>
                adsr->envelope_value = 1.0f;
                adsr->state = DECAY;
            }
            break;
 8002432:	e04e      	b.n	80024d2 <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 1.0f;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800243a:	615a      	str	r2, [r3, #20]
                adsr->state = DECAY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	761a      	strb	r2, [r3, #24]
            break;
 8002442:	e046      	b.n	80024d2 <ADSR_UpdateEnvelope+0xf6>

        case DECAY:
            adsr->envelope_value -= adsr->decay_rate;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	ed93 7a05 	vldr	s14, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= adsr->sustain_level) {
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	edd3 7a02 	vldr	s15, [r3, #8]
 8002466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	d900      	bls.n	8002472 <ADSR_UpdateEnvelope+0x96>
                adsr->envelope_value = adsr->sustain_level;
                adsr->state = SUSTAIN;
            }
            break;
 8002470:	e02f      	b.n	80024d2 <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = adsr->sustain_level;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	615a      	str	r2, [r3, #20]
                adsr->state = SUSTAIN;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	761a      	strb	r2, [r3, #24]
            break;
 8002480:	e027      	b.n	80024d2 <ADSR_UpdateEnvelope+0xf6>

        case SUSTAIN:
            if (!adsr->gate_signal) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7e5b      	ldrb	r3, [r3, #25]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d121      	bne.n	80024d0 <ADSR_UpdateEnvelope+0xf4>
                adsr->state = RELEASE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2203      	movs	r2, #3
 8002490:	761a      	strb	r2, [r3, #24]
            }
            break;
 8002492:	e01d      	b.n	80024d0 <ADSR_UpdateEnvelope+0xf4>

        case RELEASE:
            adsr->envelope_value -= adsr->release_rate;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	ed93 7a05 	vldr	s14, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	edd3 7a03 	vldr	s15, [r3, #12]
 80024a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= 0.0f) {
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80024b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d900      	bls.n	80024bc <ADSR_UpdateEnvelope+0xe0>
                adsr->envelope_value = 0.0f;
                adsr->state = IDLE;
            }
            break;
 80024ba:	e00a      	b.n	80024d2 <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 0.0f;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
                adsr->state = IDLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2204      	movs	r2, #4
 80024c8:	761a      	strb	r2, [r3, #24]
            break;
 80024ca:	e002      	b.n	80024d2 <ADSR_UpdateEnvelope+0xf6>

        case IDLE:
            // Do nothing
            break;
 80024cc:	bf00      	nop
 80024ce:	e000      	b.n	80024d2 <ADSR_UpdateEnvelope+0xf6>
            break;
 80024d0:	bf00      	nop
    }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <ADSR_SetGateSignal>:

// Sets the gate signal for a specific ADSR instance
void ADSR_SetGateSignal(ADSR_t *adsr, uint8_t gate_signal_value) {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
    adsr->gate_signal = gate_signal_value;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	765a      	strb	r2, [r3, #25]
    if (adsr->gate_signal) {
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7e5b      	ldrb	r3, [r3, #25]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <ADSR_SetGateSignal+0x24>
        adsr->state = ATTACK;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	761a      	strb	r2, [r3, #24]
    } else {
        adsr->state = RELEASE;
    }
}
 8002502:	e002      	b.n	800250a <ADSR_SetGateSignal+0x2a>
        adsr->state = RELEASE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	761a      	strb	r2, [r3, #24]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <ADSR_GetEnvelopeValue>:
//    }
//    adsr->amplitude = amplitude;
//}

// Returns the envelope value (scaled by the amplitude) for a specific ADSR instance
float ADSR_GetEnvelopeValue(const ADSR_t *adsr) {
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
    return adsr->envelope_value * adsr->amplitude;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	ed93 7a05 	vldr	s14, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edd3 7a04 	vldr	s15, [r3, #16]
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800252e:	eeb0 0a67 	vmov.f32	s0, s15
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_Z21envelope_to_dac_valuef>:
//void Handle_NoteOn(uint8_t status, uint8_t data1, uint8_t data2);
//void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity);



uint32_t envelope_to_dac_value(float envelope_value) {
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(envelope_value * 4095.0f);
 8002546:	edd7 7a01 	vldr	s15, [r7, #4]
 800254a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002568 <_Z21envelope_to_dac_valuef+0x2c>
 800254e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002556:	ee17 3a90 	vmov	r3, s15
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	457ff000 	.word	0x457ff000

0800256c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
//    if (htim->Instance == TIM13) {
//        update_adsr_flag = true;  // Set the flag to update ADSR parameters
// //       oled("ADSR Flag = TRUE");
//    }

    if (htim->Instance == TIM7) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d125      	bne.n	80025ca <HAL_TIM_PeriodElapsedCallback+0x5e>
/*  ADSR kreivių formavimas naudojant laikmatį.  */
        // Update the first envelope
//    	ADSR_UpdateParametersWithEncoders(&adsr);
        ADSR_UpdateEnvelope(&envelopes[0]);
 800257e:	4816      	ldr	r0, [pc, #88]	@ (80025d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002580:	f7ff ff2c 	bl	80023dc <ADSR_UpdateEnvelope>
        uint32_t dac_value1 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[0]));
 8002584:	4814      	ldr	r0, [pc, #80]	@ (80025d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002586:	f7ff ffc6 	bl	8002516 <ADSR_GetEnvelopeValue>
 800258a:	eef0 7a40 	vmov.f32	s15, s0
 800258e:	eeb0 0a67 	vmov.f32	s0, s15
 8002592:	f7ff ffd3 	bl	800253c <_Z21envelope_to_dac_valuef>
 8002596:	60f8      	str	r0, [r7, #12]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value1);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	480f      	ldr	r0, [pc, #60]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80025a0:	f001 fd1a 	bl	8003fd8 <HAL_DAC_SetValue>
        // Update the second envelope
        ADSR_UpdateEnvelope(&envelopes[1]);
 80025a4:	480e      	ldr	r0, [pc, #56]	@ (80025e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80025a6:	f7ff ff19 	bl	80023dc <ADSR_UpdateEnvelope>
        uint32_t dac_value2 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[1]));
 80025aa:	480d      	ldr	r0, [pc, #52]	@ (80025e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80025ac:	f7ff ffb3 	bl	8002516 <ADSR_GetEnvelopeValue>
 80025b0:	eef0 7a40 	vmov.f32	s15, s0
 80025b4:	eeb0 0a67 	vmov.f32	s0, s15
 80025b8:	f7ff ffc0 	bl	800253c <_Z21envelope_to_dac_valuef>
 80025bc:	60b8      	str	r0, [r7, #8]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value2);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	2110      	movs	r1, #16
 80025c4:	4805      	ldr	r0, [pc, #20]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80025c6:	f001 fd07 	bl	8003fd8 <HAL_DAC_SetValue>
//        if (ramp_counter > 4095) {
//            ramp_counter = 0;
//        }
//        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ramp_counter);
//    }
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40001400 	.word	0x40001400
 80025d8:	200003b0 	.word	0x200003b0
 80025dc:	20000040 	.word	0x20000040
 80025e0:	200003d0 	.word	0x200003d0

080025e4 <HAL_TIM_IC_CaptureCallback>:

int speed =0;
int busena = M_ADSR;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	ROT1 = ((int16_t)__HAL_TIM_GET_COUNTER(&htim2))/4;
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_TIM_IC_CaptureCallback+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da00      	bge.n	80025fa <HAL_TIM_IC_CaptureCallback+0x16>
 80025f8:	3303      	adds	r3, #3
 80025fa:	109b      	asrs	r3, r3, #2
 80025fc:	b21a      	sxth	r2, r3
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002600:	801a      	strh	r2, [r3, #0]
	ROT2 = ((int16_t)__HAL_TIM_GET_COUNTER(&htim3))/4;
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_TIM_IC_CaptureCallback+0x48>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	b21b      	sxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	da00      	bge.n	8002610 <HAL_TIM_IC_CaptureCallback+0x2c>
 800260e:	3303      	adds	r3, #3
 8002610:	109b      	asrs	r3, r3, #2
 8002612:	b21a      	sxth	r2, r3
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8002616:	801a      	strh	r2, [r3, #0]
//	ROT3 = ((int16_t)__HAL_TIM_GET_COUNTER(&htim4))/4;
//	ROT4 = ((int16_t)__HAL_TIM_GET_COUNTER(&htim5))/4;

//    ADSR_SetAttackRate(&envelopes[0], ROT1);
//    ADSR_SetDecayRate(&envelopes[0], ROT2);
	meniu_mygtukai();
 8002618:	f000 fe8e 	bl	8003338 <meniu_mygtukai>
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200001b4 	.word	0x200001b4
 8002628:	200003ac 	.word	0x200003ac
 800262c:	200001fc 	.word	0x200001fc
 8002630:	200003ae 	.word	0x200003ae

08002634 <HAL_GPIO_EXTI_Callback>:
    }

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
	meniu_mygtukai();
 800263e:	f000 fe7b 	bl	8003338 <meniu_mygtukai>
    if (GPIO_Pin == M1_Pin) {
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002648:	d109      	bne.n	800265e <HAL_GPIO_EXTI_Callback+0x2a>
    	busena = M_ADSR;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x50>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        // Debounce logic
//        HAL_Delay(20);
      if  (HAL_GPIO_ReadPin(M1_GPIO_Port, M1_Pin) == GPIO_PIN_RESET) {
 8002650:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002654:	480c      	ldr	r0, [pc, #48]	@ (8002688 <HAL_GPIO_EXTI_Callback+0x54>)
 8002656:	f002 fafb 	bl	8004c50 <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
      } else {
          // Set LED_D1_GPIO_Port to low
//            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
      }}

    if (GPIO_Pin == M2_Pin) {
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002664:	d109      	bne.n	800267a <HAL_GPIO_EXTI_Callback+0x46>
    	busena = M_DAC;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x50>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]
        // Debounce logic
//        HAL_Delay(20);
        if (HAL_GPIO_ReadPin(M2_GPIO_Port, M2_Pin) == GPIO_PIN_RESET) {
 800266c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002670:	4805      	ldr	r0, [pc, #20]	@ (8002688 <HAL_GPIO_EXTI_Callback+0x54>)
 8002672:	f002 faed 	bl	8004c50 <HAL_GPIO_ReadPin>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
        } else {
            // Set LED_D1_GPIO_Port to low
//            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
        }
    }
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000520 	.word	0x20000520
 8002688:	40020800 	.word	0x40020800

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	@ 0x28
 8002690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002692:	f001 faa5 	bl	8003be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002696:	f000 f88b 	bl	80027b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269a:	f000 fc11 	bl	8002ec0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800269e:	f000 fbef 	bl	8002e80 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80026a2:	f000 f93d 	bl	8002920 <_ZL12MX_I2C1_Initv>
  MX_DAC_Init();
 80026a6:	f000 f8f7 	bl	8002898 <_ZL11MX_DAC_Initv>
  MX_SPI2_Init();
 80026aa:	f000 f99f 	bl	80029ec <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 80026ae:	f000 f9d9 	bl	8002a64 <_ZL12MX_TIM2_Initv>
  MX_TIM7_Init();
 80026b2:	f000 fb4f 	bl	8002d54 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 80026b6:	f000 fb8d 	bl	8002dd4 <_ZL13MX_TIM13_Initv>
  MX_I2C2_Init();
 80026ba:	f000 f963 	bl	8002984 <_ZL12MX_I2C2_Initv>
  MX_USART3_UART_Init();
 80026be:	f000 fbb1 	bl	8002e24 <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 80026c2:	f000 fa2d 	bl	8002b20 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80026c6:	f000 fa89 	bl	8002bdc <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 80026ca:	f000 fae5 	bl	8002c98 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

	Port.begin(1, &huart3, &huart3);
 80026ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <main+0xec>)
 80026d0:	4a29      	ldr	r2, [pc, #164]	@ (8002778 <main+0xec>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	4829      	ldr	r0, [pc, #164]	@ (800277c <main+0xf0>)
 80026d6:	f7fe fc02 	bl	8000ede <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>
	Port.setHandleClock(Handle_Clock);
 80026da:	4929      	ldr	r1, [pc, #164]	@ (8002780 <main+0xf4>)
 80026dc:	4827      	ldr	r0, [pc, #156]	@ (800277c <main+0xf0>)
 80026de:	f7ff f938 	bl	8001952 <_ZN13MidiInterface14setHandleClockEPFvvE>
	Port.setHandleStart(Handle_Start);
 80026e2:	4928      	ldr	r1, [pc, #160]	@ (8002784 <main+0xf8>)
 80026e4:	4825      	ldr	r0, [pc, #148]	@ (800277c <main+0xf0>)
 80026e6:	f7ff f942 	bl	800196e <_ZN13MidiInterface14setHandleStartEPFvvE>
	Port.setHandleStop(Handle_Stop);
 80026ea:	4927      	ldr	r1, [pc, #156]	@ (8002788 <main+0xfc>)
 80026ec:	4823      	ldr	r0, [pc, #140]	@ (800277c <main+0xf0>)
 80026ee:	f7ff f94c 	bl	800198a <_ZN13MidiInterface13setHandleStopEPFvvE>
	Port.setHandleNoteOn(Handle_NoteOn);
 80026f2:	4926      	ldr	r1, [pc, #152]	@ (800278c <main+0x100>)
 80026f4:	4821      	ldr	r0, [pc, #132]	@ (800277c <main+0xf0>)
 80026f6:	f7ff f91e 	bl	8001936 <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>
	Port.setHandleNoteOff(Handle_NoteOff);
 80026fa:	4925      	ldr	r1, [pc, #148]	@ (8002790 <main+0x104>)
 80026fc:	481f      	ldr	r0, [pc, #124]	@ (800277c <main+0xf0>)
 80026fe:	f7ff f90c 	bl	800191a <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>

    HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8002702:	2110      	movs	r1, #16
 8002704:	4823      	ldr	r0, [pc, #140]	@ (8002794 <main+0x108>)
 8002706:	f001 fc10 	bl	8003f2a <HAL_DAC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800270a:	2100      	movs	r1, #0
 800270c:	4821      	ldr	r0, [pc, #132]	@ (8002794 <main+0x108>)
 800270e:	f001 fc0c 	bl	8003f2a <HAL_DAC_Start>

//    mcp4728_generalCall(&hi2c1, MCP4728_GENERAL_RESET);
//    HAL_Delay(10);
        ChannelConfig config;
        ChannelConfig_2 config2;
        dac_init(&config, &config2);
 8002712:	f107 0208 	add.w	r2, r7, #8
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fc97 	bl	8003050 <dac_init>

        mcp4728_sequentialWrite(&hi2c1, config, 0);
 8002722:	2300      	movs	r3, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272c:	481a      	ldr	r0, [pc, #104]	@ (8002798 <main+0x10c>)
 800272e:	f000 fd73 	bl	8003218 <mcp4728_sequentialWrite>
//    ssd1306_Init();
//    ssd1306_SetCursor(5, 50);
//    ssd1306_WriteString(tekstas, Font_7x10, White);
//    ssd1306_UpdateScreen();

    HAL_TIM_Base_Start_IT(&htim7);
 8002732:	481a      	ldr	r0, [pc, #104]	@ (800279c <main+0x110>)
 8002734:	f005 f912 	bl	800795c <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim13);
    //HAL_TIM_Base_Start(&htim2);
    ADSR_Init(envelopes, NUM_ENVELOPES);
 8002738:	2104      	movs	r1, #4
 800273a:	4819      	ldr	r0, [pc, #100]	@ (80027a0 <main+0x114>)
 800273c:	f7ff fd66 	bl	800220c <ADSR_Init>

    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8002740:	213c      	movs	r1, #60	@ 0x3c
 8002742:	4818      	ldr	r0, [pc, #96]	@ (80027a4 <main+0x118>)
 8002744:	f005 fa20 	bl	8007b88 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002748:	213c      	movs	r1, #60	@ 0x3c
 800274a:	4817      	ldr	r0, [pc, #92]	@ (80027a8 <main+0x11c>)
 800274c:	f005 fa1c 	bl	8007b88 <HAL_TIM_Encoder_Start_IT>
//    HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
//    HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002750:	2300      	movs	r3, #0
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <main+0x120>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <main+0x120>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <main+0x120>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
    meniu_mygtukai();
 800276c:	f000 fde4 	bl	8003338 <meniu_mygtukai>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Port.read();
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <main+0xf0>)
 8002772:	f7fe fd62 	bl	800123a <_ZN13MidiInterface4readEv>
 8002776:	e7fb      	b.n	8002770 <main+0xe4>
 8002778:	20000364 	.word	0x20000364
 800277c:	20000430 	.word	0x20000430
 8002780:	08001ff9 	.word	0x08001ff9
 8002784:	0800202d 	.word	0x0800202d
 8002788:	08002045 	.word	0x08002045
 800278c:	08002059 	.word	0x08002059
 8002790:	08002199 	.word	0x08002199
 8002794:	20000040 	.word	0x20000040
 8002798:	20000054 	.word	0x20000054
 800279c:	200002d4 	.word	0x200002d4
 80027a0:	200003b0 	.word	0x200003b0
 80027a4:	200001b4 	.word	0x200001b4
 80027a8:	200001fc 	.word	0x200001fc
 80027ac:	40023800 	.word	0x40023800

080027b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b094      	sub	sp, #80	@ 0x50
 80027b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027b6:	f107 0320 	add.w	r3, r7, #32
 80027ba:	2230      	movs	r2, #48	@ 0x30
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f006 fd8e 	bl	80092e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <_Z18SystemClock_Configv+0xe0>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002890 <_Z18SystemClock_Configv+0xe0>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <_Z18SystemClock_Configv+0xe0>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <_Z18SystemClock_Configv+0xe4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a26      	ldr	r2, [pc, #152]	@ (8002894 <_Z18SystemClock_Configv+0xe4>)
 80027fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <_Z18SystemClock_Configv+0xe4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800280c:	2301      	movs	r3, #1
 800280e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002810:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002816:	2302      	movs	r3, #2
 8002818:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800281a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002820:	2304      	movs	r3, #4
 8002822:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002824:	23a8      	movs	r3, #168	@ 0xa8
 8002826:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002828:	2302      	movs	r3, #2
 800282a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800282c:	2304      	movs	r3, #4
 800282e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	4618      	mov	r0, r3
 8002836:	f004 fa01 	bl	8006c3c <HAL_RCC_OscConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800284a:	f000 fbdc 	bl	8003006 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284e:	230f      	movs	r3, #15
 8002850:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002852:	2302      	movs	r3, #2
 8002854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800285a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800285e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002864:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	2105      	movs	r1, #5
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fc5d 	bl	800712c <HAL_RCC_ClockConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002882:	f000 fbc0 	bl	8003006 <Error_Handler>
  }
}
 8002886:	bf00      	nop
 8002888:	3750      	adds	r7, #80	@ 0x50
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000

08002898 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800289e:	463b      	mov	r3, r7
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80028a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002918 <_ZL11MX_DAC_Initv+0x80>)
 80028a8:	4a1c      	ldr	r2, [pc, #112]	@ (800291c <_ZL11MX_DAC_Initv+0x84>)
 80028aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80028ac:	481a      	ldr	r0, [pc, #104]	@ (8002918 <_ZL11MX_DAC_Initv+0x80>)
 80028ae:	f001 fb1a 	bl	8003ee6 <HAL_DAC_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 80028c2:	f000 fba0 	bl	8003006 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80028ce:	463b      	mov	r3, r7
 80028d0:	2200      	movs	r2, #0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4810      	ldr	r0, [pc, #64]	@ (8002918 <_ZL11MX_DAC_Initv+0x80>)
 80028d6:	f001 fba9 	bl	800402c <HAL_DAC_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 80028ea:	f000 fb8c 	bl	8003006 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80028ee:	463b      	mov	r3, r7
 80028f0:	2210      	movs	r2, #16
 80028f2:	4619      	mov	r1, r3
 80028f4:	4808      	ldr	r0, [pc, #32]	@ (8002918 <_ZL11MX_DAC_Initv+0x80>)
 80028f6:	f001 fb99 	bl	800402c <HAL_DAC_ConfigChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <_ZL11MX_DAC_Initv+0x76>
  {
    Error_Handler();
 800290a:	f000 fb7c 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000040 	.word	0x20000040
 800291c:	40007400 	.word	0x40007400

08002920 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002924:	4b15      	ldr	r3, [pc, #84]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 8002926:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <_ZL12MX_I2C1_Initv+0x60>)
 8002928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 30000;
 800292a:	4b14      	ldr	r3, [pc, #80]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 800292c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002930:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002932:	4b12      	ldr	r3, [pc, #72]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002938:	4b10      	ldr	r3, [pc, #64]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 8002940:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800294c:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002958:	4b08      	ldr	r3, [pc, #32]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800295e:	4807      	ldr	r0, [pc, #28]	@ (800297c <_ZL12MX_I2C1_Initv+0x5c>)
 8002960:	f002 f9da 	bl	8004d18 <HAL_I2C_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <_ZL12MX_I2C1_Initv+0x58>
  {
    Error_Handler();
 8002974:	f000 fb47 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000054 	.word	0x20000054
 8002980:	40005400 	.word	0x40005400

08002984 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002988:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 800298a:	4a16      	ldr	r2, [pc, #88]	@ (80029e4 <_ZL12MX_I2C2_Initv+0x60>)
 800298c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800298e:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 8002990:	4a15      	ldr	r2, [pc, #84]	@ (80029e8 <_ZL12MX_I2C2_Initv+0x64>)
 8002992:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800299a:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80029a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a8:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80029ae:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ba:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029c0:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80029c2:	f002 f9a9 	bl	8004d18 <HAL_I2C_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80029d6:	f000 fb16 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200000a8 	.word	0x200000a8
 80029e4:	40005800 	.word	0x40005800
 80029e8:	00061a80 	.word	0x00061a80

080029ec <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 80029f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <_ZL12MX_SPI2_Initv+0x74>)
 80029f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029f6:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 80029f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029fe:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002a04:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a0e:	2202      	movs	r2, #2
 8002a10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a18:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a20:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a38:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a3a:	220a      	movs	r2, #10
 8002a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a3e:	4807      	ldr	r0, [pc, #28]	@ (8002a5c <_ZL12MX_SPI2_Initv+0x70>)
 8002a40:	f004 fd94 	bl	800756c <HAL_SPI_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <_ZL12MX_SPI2_Initv+0x6c>
  {
    Error_Handler();
 8002a54:	f000 fad7 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2000015c 	.word	0x2000015c
 8002a60:	40003800 	.word	0x40003800

08002a64 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	@ 0x30
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	2224      	movs	r2, #36	@ 0x24
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f006 fc34 	bl	80092e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a80:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <_ZL12MX_TIM2_Initv+0xb8>)
 8002a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a88:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <_ZL12MX_TIM2_Initv+0xb8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a8e:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <_ZL12MX_TIM2_Initv+0xb8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a94:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <_ZL12MX_TIM2_Initv+0xb8>)
 8002a96:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <_ZL12MX_TIM2_Initv+0xb8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b1c <_ZL12MX_TIM2_Initv+0xb8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4812      	ldr	r0, [pc, #72]	@ (8002b1c <_ZL12MX_TIM2_Initv+0xb8>)
 8002ad4:	f004 ffb2 	bl	8007a3c <HAL_TIM_Encoder_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8002ae8:	f000 fa8d 	bl	8003006 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4808      	ldr	r0, [pc, #32]	@ (8002b1c <_ZL12MX_TIM2_Initv+0xb8>)
 8002afa:	f005 fad3 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8002b0e:	f000 fa7a 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	3730      	adds	r7, #48	@ 0x30
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200001b4 	.word	0x200001b4

08002b20 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	@ 0x30
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	2224      	movs	r2, #36	@ 0x24
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f006 fbd6 	bl	80092e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b3c:	4b25      	ldr	r3, [pc, #148]	@ (8002bd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002b3e:	4a26      	ldr	r2, [pc, #152]	@ (8002bd8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002b40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b42:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b48:	4b22      	ldr	r3, [pc, #136]	@ (8002bd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b4e:	4b21      	ldr	r3, [pc, #132]	@ (8002bd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b56:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b86:	f107 030c 	add.w	r3, r7, #12
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4811      	ldr	r0, [pc, #68]	@ (8002bd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002b8e:	f004 ff55 	bl	8007a3c <HAL_TIM_Encoder_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8002ba2:	f000 fa30 	bl	8003006 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4808      	ldr	r0, [pc, #32]	@ (8002bd4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002bb4:	f005 fa76 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8002bc8:	f000 fa1d 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bcc:	bf00      	nop
 8002bce:	3730      	adds	r7, #48	@ 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200001fc 	.word	0x200001fc
 8002bd8:	40000400 	.word	0x40000400

08002bdc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08c      	sub	sp, #48	@ 0x30
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	2224      	movs	r2, #36	@ 0x24
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f006 fb78 	bl	80092e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bf8:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <_ZL12MX_TIM4_Initv+0xb4>)
 8002bfa:	4a26      	ldr	r2, [pc, #152]	@ (8002c94 <_ZL12MX_TIM4_Initv+0xb8>)
 8002bfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c04:	4b22      	ldr	r3, [pc, #136]	@ (8002c90 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c0a:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c12:	4b1f      	ldr	r3, [pc, #124]	@ (8002c90 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c26:	2301      	movs	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c36:	2301      	movs	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	4619      	mov	r1, r3
 8002c48:	4811      	ldr	r0, [pc, #68]	@ (8002c90 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c4a:	f004 fef7 	bl	8007a3c <HAL_TIM_Encoder_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002c5e:	f000 f9d2 	bl	8003006 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4808      	ldr	r0, [pc, #32]	@ (8002c90 <_ZL12MX_TIM4_Initv+0xb4>)
 8002c70:	f005 fa18 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002c84:	f000 f9bf 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3730      	adds	r7, #48	@ 0x30
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000244 	.word	0x20000244
 8002c94:	40000800 	.word	0x40000800

08002c98 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	@ 0x30
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2224      	movs	r2, #36	@ 0x24
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f006 fb1a 	bl	80092e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cb4:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <_ZL12MX_TIM5_Initv+0xb4>)
 8002cb6:	4a26      	ldr	r2, [pc, #152]	@ (8002d50 <_ZL12MX_TIM5_Initv+0xb8>)
 8002cb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002cba:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <_ZL12MX_TIM5_Initv+0xb4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc0:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <_ZL12MX_TIM5_Initv+0xb4>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002cc6:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <_ZL12MX_TIM5_Initv+0xb4>)
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cce:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <_ZL12MX_TIM5_Initv+0xb4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <_ZL12MX_TIM5_Initv+0xb4>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	4619      	mov	r1, r3
 8002d04:	4811      	ldr	r0, [pc, #68]	@ (8002d4c <_ZL12MX_TIM5_Initv+0xb4>)
 8002d06:	f004 fe99 	bl	8007a3c <HAL_TIM_Encoder_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8002d1a:	f000 f974 	bl	8003006 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4808      	ldr	r0, [pc, #32]	@ (8002d4c <_ZL12MX_TIM5_Initv+0xb4>)
 8002d2c:	f005 f9ba 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf14      	ite	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	2300      	moveq	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8002d40:	f000 f961 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d44:	bf00      	nop
 8002d46:	3730      	adds	r7, #48	@ 0x30
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000028c 	.word	0x2000028c
 8002d50:	40000c00 	.word	0x40000c00

08002d54 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <_ZL12MX_TIM7_Initv+0x78>)
 8002d64:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd0 <_ZL12MX_TIM7_Initv+0x7c>)
 8002d66:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16799;
 8002d68:	4b18      	ldr	r3, [pc, #96]	@ (8002dcc <_ZL12MX_TIM7_Initv+0x78>)
 8002d6a:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002d6e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <_ZL12MX_TIM7_Initv+0x78>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8002d76:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <_ZL12MX_TIM7_Initv+0x78>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7c:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <_ZL12MX_TIM7_Initv+0x78>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d82:	4812      	ldr	r0, [pc, #72]	@ (8002dcc <_ZL12MX_TIM7_Initv+0x78>)
 8002d84:	f004 fd9a 	bl	80078bc <HAL_TIM_Base_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8002d98:	f000 f935 	bl	8003006 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002da4:	463b      	mov	r3, r7
 8002da6:	4619      	mov	r1, r3
 8002da8:	4808      	ldr	r0, [pc, #32]	@ (8002dcc <_ZL12MX_TIM7_Initv+0x78>)
 8002daa:	f005 f97b 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8002dbe:	f000 f922 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200002d4 	.word	0x200002d4
 8002dd0:	40001400 	.word	0x40001400

08002dd4 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002dd8:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <_ZL13MX_TIM13_Initv+0x48>)
 8002dda:	4a11      	ldr	r2, [pc, #68]	@ (8002e20 <_ZL13MX_TIM13_Initv+0x4c>)
 8002ddc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002dde:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <_ZL13MX_TIM13_Initv+0x48>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <_ZL13MX_TIM13_Initv+0x48>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8002dea:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <_ZL13MX_TIM13_Initv+0x48>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <_ZL13MX_TIM13_Initv+0x48>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <_ZL13MX_TIM13_Initv+0x48>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002dfc:	4807      	ldr	r0, [pc, #28]	@ (8002e1c <_ZL13MX_TIM13_Initv+0x48>)
 8002dfe:	f004 fd5d 	bl	80078bc <HAL_TIM_Base_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <_ZL13MX_TIM13_Initv+0x42>
  {
    Error_Handler();
 8002e12:	f000 f8f8 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000031c 	.word	0x2000031c
 8002e20:	40001c00 	.word	0x40001c00

08002e24 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e28:	4b13      	ldr	r3, [pc, #76]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e2a:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <_ZL19MX_USART3_UART_Initv+0x58>)
 8002e2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 31250;
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e30:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8002e34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e36:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e42:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e54:	4b08      	ldr	r3, [pc, #32]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e5a:	4807      	ldr	r0, [pc, #28]	@ (8002e78 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e5c:	f005 f9b2 	bl	80081c4 <HAL_UART_Init>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002e70:	f000 f8c9 	bl	8003006 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000364 	.word	0x20000364
 8002e7c:	40004800 	.word	0x40004800

08002e80 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <_ZL11MX_DMA_Initv+0x3c>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8002ebc <_ZL11MX_DMA_Initv+0x3c>)
 8002e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e96:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <_ZL11MX_DMA_Initv+0x3c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2011      	movs	r0, #17
 8002ea8:	f000 ffe7 	bl	8003e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002eac:	2011      	movs	r0, #17
 8002eae:	f001 f800 	bl	8003eb2 <HAL_NVIC_EnableIRQ>

}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	@ 0x28
 8002ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec6:	f107 0314 	add.w	r3, r7, #20
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b42      	ldr	r3, [pc, #264]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a41      	ldr	r2, [pc, #260]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b38      	ldr	r3, [pc, #224]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b34      	ldr	r3, [pc, #208]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a33      	ldr	r2, [pc, #204]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b26      	ldr	r3, [pc, #152]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a25      	ldr	r2, [pc, #148]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f50:	f043 0308 	orr.w	r3, r3, #8
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <_ZL12MX_GPIO_Initv+0x124>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2103      	movs	r1, #3
 8002f66:	4820      	ldr	r0, [pc, #128]	@ (8002fe8 <_ZL12MX_GPIO_Initv+0x128>)
 8002f68:	f001 fe8a 	bl	8004c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2104      	movs	r1, #4
 8002f70:	481e      	ldr	r0, [pc, #120]	@ (8002fec <_ZL12MX_GPIO_Initv+0x12c>)
 8002f72:	f001 fe85 	bl	8004c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_Pin M2_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M2_Pin;
 8002f76:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002f7c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4816      	ldr	r0, [pc, #88]	@ (8002fe8 <_ZL12MX_GPIO_Initv+0x128>)
 8002f8e:	f001 fcc3 	bl	8004918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f92:	2303      	movs	r3, #3
 8002f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa2:	f107 0314 	add.w	r3, r7, #20
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	480f      	ldr	r0, [pc, #60]	@ (8002fe8 <_ZL12MX_GPIO_Initv+0x128>)
 8002faa:	f001 fcb5 	bl	8004918 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D1_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin;
 8002fae:	2304      	movs	r3, #4
 8002fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D1_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4809      	ldr	r0, [pc, #36]	@ (8002fec <_ZL12MX_GPIO_Initv+0x12c>)
 8002fc6:	f001 fca7 	bl	8004918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2028      	movs	r0, #40	@ 0x28
 8002fd0:	f000 ff53 	bl	8003e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fd4:	2028      	movs	r0, #40	@ 0x28
 8002fd6:	f000 ff6c 	bl	8003eb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	@ 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020800 	.word	0x40020800
 8002fec:	40020c00 	.word	0x40020c00

08002ff0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	__NOP();
 8002ff8:	bf00      	nop
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800300a:	b672      	cpsid	i
}
 800300c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800300e:	bf00      	nop
 8003010:	e7fd      	b.n	800300e <Error_Handler+0x8>
	...

08003014 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
MidiInterface Port;
 8003018:	4802      	ldr	r0, [pc, #8]	@ (8003024 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800301a:	f7fd fe9f 	bl	8000d5c <_ZN13MidiInterfaceC1Ev>
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000430 	.word	0x20000430

08003028 <_Z41__static_initialization_and_destruction_1v>:
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
MidiInterface Port;
 800302c:	4802      	ldr	r0, [pc, #8]	@ (8003038 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800302e:	f7fd ff4b 	bl	8000ec8 <_ZN13MidiInterfaceD1Ev>
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000430 	.word	0x20000430

0800303c <_GLOBAL__sub_I_hdac>:
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
 8003040:	f7ff ffe8 	bl	8003014 <_Z41__static_initialization_and_destruction_0v>
 8003044:	bd80      	pop	{r7, pc}

08003046 <_GLOBAL__sub_D_hdac>:
 8003046:	b580      	push	{r7, lr}
 8003048:	af00      	add	r7, sp, #0
 800304a:	f7ff ffed 	bl	8003028 <_Z41__static_initialization_and_destruction_1v>
 800304e:	bd80      	pop	{r7, pc}

08003050 <dac_init>:
 */

#include <mcp4728_mod.h>


void dac_init(ChannelConfig *config ,ChannelConfig_2 *config2) {
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
    config->vref = 0x1;  // Use VDD as reference voltage - 0, internal - 1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
    config->gain = 0x1;  // Gain of 1x
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	705a      	strb	r2, [r3, #1]
    config->val[0] = 0;  // 12-bit DAC value for channel A
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	805a      	strh	r2, [r3, #2]
    config->val[1] = 0;  // 12-bit DAC value for channel B
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	809a      	strh	r2, [r3, #4]
    config->val[2] = 0;  // 12-bit DAC value for channel C
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	80da      	strh	r2, [r3, #6]
    config->val[3] = 0;  // 12-bit DAC value for channel D
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	811a      	strh	r2, [r3, #8]


    config2->vref = 0x0;  // Use VDD as reference voltage
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
    config2->gain = 0x1;  // Gain of 1x
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2201      	movs	r2, #1
 8003088:	705a      	strb	r2, [r3, #1]
    config2->val[0] = 0;  // 12-bit DAC value for channel A
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2200      	movs	r2, #0
 800308e:	805a      	strh	r2, [r3, #2]
    config2->val[1] = 0;  // 12-bit DAC value for channel B
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	809a      	strh	r2, [r3, #4]
    config2->val[2] = 0;  // 12-bit DAC value for channel C
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2200      	movs	r2, #0
 800309a:	80da      	strh	r2, [r3, #6]
    config2->val[3] = 0;  // 12-bit DAC value for channel D
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2200      	movs	r2, #0
 80030a0:	811a      	strh	r2, [r3, #8]

}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <mcp4728_generalCall>:
//HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
//    // Transmit the general call command
//    return HAL_I2C_Master_Transmit(i2cHandler, 0x00, &command, 1, HAL_MAX_DELAY);
//}

HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	70fb      	strb	r3, [r7, #3]
    // Transmit the general call command
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, 0x00, &command, 1);
 80030ba:	1cfa      	adds	r2, r7, #3
 80030bc:	2301      	movs	r3, #1
 80030be:	2100      	movs	r1, #0
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f001 ff83 	bl	8004fcc <HAL_I2C_Master_Transmit_DMA>
 80030c6:	4603      	mov	r3, r0
 80030c8:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <mcp4728_generalCall+0x26>
        return ret;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	e007      	b.n	80030e4 <mcp4728_generalCall+0x36>
    }

    // Wait for the DMA transfer to complete
    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 80030d4:	bf00      	nop
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f002 fa7d 	bl	80055d6 <HAL_I2C_GetState>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d1f9      	bne.n	80030d6 <mcp4728_generalCall+0x28>

    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <DACx60FW>:
 *
 * @param i2cHandler Pointer to the I2C handler.
 * @param config Configuration structure containing the DAC values for each channel.
 * @return HAL_StatusTypeDef HAL status indicating success or failure.
 */
HAL_StatusTypeDef DACx60FW(I2C_HandleTypeDef *i2cHandler, ChannelConfig config) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	4638      	mov	r0, r7
 80030f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[8]; // Buffer to hold the data for 4 channels, 2 bytes each

    for (uint8_t i = 0; i < 4; i++) {
 80030fa:	2300      	movs	r3, #0
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e01f      	b.n	8003140 <DACx60FW+0x54>
        buf[2 * i] = (config.val[i] >> 8); // Upper 8 bits of DAC value
 8003100:	7ffb      	ldrb	r3, [r7, #31]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	3320      	adds	r3, #32
 8003106:	443b      	add	r3, r7
 8003108:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	b29a      	uxth	r2, r3
 8003110:	7ffb      	ldrb	r3, [r7, #31]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	3320      	adds	r3, #32
 8003118:	443b      	add	r3, r7
 800311a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        buf[2 * i + 1] = config.val[i] & 0xFF; // Lower 8 bits of DAC value
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	3320      	adds	r3, #32
 8003124:	443b      	add	r3, r7
 8003126:	f833 2c1e 	ldrh.w	r2, [r3, #-30]
 800312a:	7ffb      	ldrb	r3, [r7, #31]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	3301      	adds	r3, #1
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	3320      	adds	r3, #32
 8003134:	443b      	add	r3, r7
 8003136:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800313a:	7ffb      	ldrb	r3, [r7, #31]
 800313c:	3301      	adds	r3, #1
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	7ffb      	ldrb	r3, [r7, #31]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d9dc      	bls.n	8003100 <DACx60FW+0x14>
    }

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, dac1, buf, sizeof(buf));
 8003146:	f107 0214 	add.w	r2, r7, #20
 800314a:	2308      	movs	r3, #8
 800314c:	21c0      	movs	r1, #192	@ 0xc0
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f001 ff3c 	bl	8004fcc <HAL_I2C_Master_Transmit_DMA>
 8003154:	4603      	mov	r3, r0
 8003156:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) {
 8003158:	7fbb      	ldrb	r3, [r7, #30]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <DACx60FW+0x76>
        return ret;
 800315e:	7fbb      	ldrb	r3, [r7, #30]
 8003160:	e00b      	b.n	800317a <DACx60FW+0x8e>
    }

    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 8003162:	bf00      	nop
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f002 fa36 	bl	80055d6 <HAL_I2C_GetState>
 800316a:	4603      	mov	r3, r0
 800316c:	2b20      	cmp	r3, #32
 800316e:	d1f9      	bne.n	8003164 <DACx60FW+0x78>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 8003170:	2108      	movs	r1, #8
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ff9b 	bl	80030ae <mcp4728_generalCall>
 8003178:	4603      	mov	r3, r0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <DACx61FW>:
    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
}



HAL_StatusTypeDef DACx61FW(I2C_HandleTypeDef *i2cHandler, ChannelConfig_2 config_0x61) {
 8003182:	b580      	push	{r7, lr}
 8003184:	b088      	sub	sp, #32
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	4638      	mov	r0, r7
 800318c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[8]; // Buffer to hold the data for 4 channels, 2 bytes each

    for (uint8_t i = 0; i < 4; i++) {
 8003190:	2300      	movs	r3, #0
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e01f      	b.n	80031d6 <DACx61FW+0x54>
        buf[2 * i] = (config_0x61.val[i] >> 8); // Upper 8 bits of DAC value
 8003196:	7ffb      	ldrb	r3, [r7, #31]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	3320      	adds	r3, #32
 800319c:	443b      	add	r3, r7
 800319e:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	3320      	adds	r3, #32
 80031ae:	443b      	add	r3, r7
 80031b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
        buf[2 * i + 1] = config_0x61.val[i] & 0xFF; // Lower 8 bits of DAC value
 80031b4:	7ffb      	ldrb	r3, [r7, #31]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	3320      	adds	r3, #32
 80031ba:	443b      	add	r3, r7
 80031bc:	f833 2c1e 	ldrh.w	r2, [r3, #-30]
 80031c0:	7ffb      	ldrb	r3, [r7, #31]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	3301      	adds	r3, #1
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	3320      	adds	r3, #32
 80031ca:	443b      	add	r3, r7
 80031cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	3301      	adds	r3, #1
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	7ffb      	ldrb	r3, [r7, #31]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d9dc      	bls.n	8003196 <DACx61FW+0x14>
    }

    HAL_StatusTypeDef ret =  HAL_I2C_Master_Transmit_DMA(i2cHandler, dac2, buf, sizeof(buf));
 80031dc:	f107 0214 	add.w	r2, r7, #20
 80031e0:	2308      	movs	r3, #8
 80031e2:	21c2      	movs	r1, #194	@ 0xc2
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f001 fef1 	bl	8004fcc <HAL_I2C_Master_Transmit_DMA>
 80031ea:	4603      	mov	r3, r0
 80031ec:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) {
 80031ee:	7fbb      	ldrb	r3, [r7, #30]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <DACx61FW+0x76>
        return ret;
 80031f4:	7fbb      	ldrb	r3, [r7, #30]
 80031f6:	e00b      	b.n	8003210 <DACx61FW+0x8e>
    }

    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 80031f8:	bf00      	nop
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f002 f9eb 	bl	80055d6 <HAL_I2C_GetState>
 8003200:	4603      	mov	r3, r0
 8003202:	2b20      	cmp	r3, #32
 8003204:	d1f9      	bne.n	80031fa <DACx61FW+0x78>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 8003206:	2108      	movs	r1, #8
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff ff50 	bl	80030ae <mcp4728_generalCall>
 800320e:	4603      	mov	r3, r0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <mcp4728_sequentialWrite>:
 * @param i2cHandler Pointer to the I2C handler.
 * @param config Configuration structure containing the DAC values and configuration for each channel.
 * @param channel The starting channel to be updated (0 for A, 1 for B, 2 for C, 3 for D).
 * @return HAL_StatusTypeDef HAL status indicating success or failure.
 */
HAL_StatusTypeDef mcp4728_sequentialWrite(I2C_HandleTypeDef *i2cHandler, ChannelConfig config, uint8_t channel) {
 8003218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800321c:	b089      	sub	sp, #36	@ 0x24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	4638      	mov	r0, r7
 8003224:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003228:	466b      	mov	r3, sp
 800322a:	461e      	mov	r6, r3
    uint8_t buf[9 - 2 * channel];
 800322c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	f1c3 0109 	rsb	r1, r3, #9
 8003236:	1e4b      	subs	r3, r1, #1
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	460a      	mov	r2, r1
 800323c:	2300      	movs	r3, #0
 800323e:	4690      	mov	r8, r2
 8003240:	4699      	mov	r9, r3
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800324e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003256:	460a      	mov	r2, r1
 8003258:	2300      	movs	r3, #0
 800325a:	4614      	mov	r4, r2
 800325c:	461d      	mov	r5, r3
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	00eb      	lsls	r3, r5, #3
 8003268:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326c:	00e2      	lsls	r2, r4, #3
 800326e:	460b      	mov	r3, r1
 8003270:	3307      	adds	r3, #7
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	ebad 0d03 	sub.w	sp, sp, r3
 800327a:	466b      	mov	r3, sp
 800327c:	3300      	adds	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
    buf[0] = MCP4728_SEQ_WRITE | (channel << 1);
 8003280:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	b25b      	sxtb	r3, r3
 8003288:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800328c:	b25b      	sxtb	r3, r3
 800328e:	b2da      	uxtb	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	701a      	strb	r2, [r3, #0]
    uint8_t buf_index = 1;
 8003294:	2301      	movs	r3, #1
 8003296:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < 4 - channel; i++) {
 8003298:	2300      	movs	r3, #0
 800329a:	77bb      	strb	r3, [r7, #30]
 800329c:	e024      	b.n	80032e8 <mcp4728_sequentialWrite+0xd0>
        buf[buf_index++] = ((config.vref & (0 << (i + channel))) ? 0x80 : 0) | // VREF bit (7th bit)
                           ((config.gain & (0 << (i + channel))) ? 0x10 : 0) | // Gain bit (4th bit)
                           (config.val[i + channel] >> 8); // Upper 8 bits of the 12-bit DAC value
 800329e:	7fba      	ldrb	r2, [r7, #30]
 80032a0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80032a4:	4413      	add	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	3320      	adds	r3, #32
 80032aa:	443b      	add	r3, r7
 80032ac:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
        buf[buf_index++] = ((config.vref & (0 << (i + channel))) ? 0x80 : 0) | // VREF bit (7th bit)
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b299      	uxth	r1, r3
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	77fa      	strb	r2, [r7, #31]
 80032ba:	461a      	mov	r2, r3
 80032bc:	b2c9      	uxtb	r1, r1
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	5499      	strb	r1, [r3, r2]
        buf[buf_index++] = config.val[i + channel] & 0xFF; // Lower 8 bits of the 12-bit DAC value
 80032c2:	7fba      	ldrb	r2, [r7, #30]
 80032c4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80032c8:	4413      	add	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	3320      	adds	r3, #32
 80032ce:	443b      	add	r3, r7
 80032d0:	f833 1c1e 	ldrh.w	r1, [r3, #-30]
 80032d4:	7ffb      	ldrb	r3, [r7, #31]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	77fa      	strb	r2, [r7, #31]
 80032da:	461a      	mov	r2, r3
 80032dc:	b2c9      	uxtb	r1, r1
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < 4 - channel; i++) {
 80032e2:	7fbb      	ldrb	r3, [r7, #30]
 80032e4:	3301      	adds	r3, #1
 80032e6:	77bb      	strb	r3, [r7, #30]
 80032e8:	7fba      	ldrb	r2, [r7, #30]
 80032ea:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80032ee:	f1c3 0304 	rsb	r3, r3, #4
 80032f2:	429a      	cmp	r2, r3
 80032f4:	dbd3      	blt.n	800329e <mcp4728_sequentialWrite+0x86>
    }

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, dac1, buf, buf_index);
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	21c0      	movs	r1, #192	@ 0xc0
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f001 fe64 	bl	8004fcc <HAL_I2C_Master_Transmit_DMA>
 8003304:	4603      	mov	r3, r0
 8003306:	74fb      	strb	r3, [r7, #19]
    if (ret != HAL_OK) {
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <mcp4728_sequentialWrite+0xfa>
        return ret;
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	e00b      	b.n	800332a <mcp4728_sequentialWrite+0x112>
    }

    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 8003312:	bf00      	nop
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f002 f95e 	bl	80055d6 <HAL_I2C_GetState>
 800331a:	4603      	mov	r3, r0
 800331c:	2b20      	cmp	r3, #32
 800331e:	d1f9      	bne.n	8003314 <mcp4728_sequentialWrite+0xfc>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 8003320:	2108      	movs	r1, #8
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fec3 	bl	80030ae <mcp4728_generalCall>
 8003328:	4603      	mov	r3, r0
 800332a:	46b5      	mov	sp, r6
}
 800332c:	4618      	mov	r0, r3
 800332e:	3724      	adds	r7, #36	@ 0x24
 8003330:	46bd      	mov	sp, r7
 8003332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003338 <meniu_mygtukai>:





void meniu_mygtukai(void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
    switch (busena) {
 800333c:	4b1f      	ldr	r3, [pc, #124]	@ (80033bc <meniu_mygtukai+0x84>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <meniu_mygtukai+0x12>
 8003344:	2b01      	cmp	r3, #1
 8003346:	d019      	beq.n	800337c <meniu_mygtukai+0x44>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
                break;

            default:
                // No button is pressed; do nothing
                break;
 8003348:	e036      	b.n	80033b8 <meniu_mygtukai+0x80>
                ADSR_SetAttackRate(&envelopes[0], ROT1);  // Map ROT1 to attack rate
 800334a:	4b1d      	ldr	r3, [pc, #116]	@ (80033c0 <meniu_mygtukai+0x88>)
 800334c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003350:	4619      	mov	r1, r3
 8003352:	481c      	ldr	r0, [pc, #112]	@ (80033c4 <meniu_mygtukai+0x8c>)
 8003354:	f7fe ff9e 	bl	8002294 <ADSR_SetAttackRate>
                ADSR_SetDecayRate(&envelopes[0], ROT2);   // Map ROT2 to decay rate
 8003358:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <meniu_mygtukai+0x90>)
 800335a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800335e:	4619      	mov	r1, r3
 8003360:	4818      	ldr	r0, [pc, #96]	@ (80033c4 <meniu_mygtukai+0x8c>)
 8003362:	f7fe ffc1 	bl	80022e8 <ADSR_SetDecayRate>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003366:	2201      	movs	r2, #1
 8003368:	2101      	movs	r1, #1
 800336a:	4818      	ldr	r0, [pc, #96]	@ (80033cc <meniu_mygtukai+0x94>)
 800336c:	f001 fc88 	bl	8004c80 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003370:	2200      	movs	r2, #0
 8003372:	2102      	movs	r1, #2
 8003374:	4815      	ldr	r0, [pc, #84]	@ (80033cc <meniu_mygtukai+0x94>)
 8003376:	f001 fc83 	bl	8004c80 <HAL_GPIO_WritePin>
                break;
 800337a:	e01d      	b.n	80033b8 <meniu_mygtukai+0x80>
                ADSR_SetSustainLevel(&envelopes[0], ROT1);  // Map ROT1 to attack rate
 800337c:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <meniu_mygtukai+0x88>)
 800337e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800338a:	eeb0 0a67 	vmov.f32	s0, s15
 800338e:	480d      	ldr	r0, [pc, #52]	@ (80033c4 <meniu_mygtukai+0x8c>)
 8003390:	f7fe ffca 	bl	8002328 <ADSR_SetSustainLevel>
                ADSR_SetReleaseRate(&envelopes[0], ROT2);   // Map ROT2 to decay rate
 8003394:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <meniu_mygtukai+0x90>)
 8003396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339a:	4619      	mov	r1, r3
 800339c:	4809      	ldr	r0, [pc, #36]	@ (80033c4 <meniu_mygtukai+0x8c>)
 800339e:	f7fe fffd 	bl	800239c <ADSR_SetReleaseRate>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80033a2:	2201      	movs	r2, #1
 80033a4:	2102      	movs	r1, #2
 80033a6:	4809      	ldr	r0, [pc, #36]	@ (80033cc <meniu_mygtukai+0x94>)
 80033a8:	f001 fc6a 	bl	8004c80 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2101      	movs	r1, #1
 80033b0:	4806      	ldr	r0, [pc, #24]	@ (80033cc <meniu_mygtukai+0x94>)
 80033b2:	f001 fc65 	bl	8004c80 <HAL_GPIO_WritePin>
                break;
 80033b6:	bf00      	nop
        }
    }
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000520 	.word	0x20000520
 80033c0:	200003ac 	.word	0x200003ac
 80033c4:	200003b0 	.word	0x200003b0
 80033c8:	200003ae 	.word	0x200003ae
 80033cc:	40020800 	.word	0x40020800

080033d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <HAL_MspInit+0x4c>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033de:	4a0f      	ldr	r2, [pc, #60]	@ (800341c <HAL_MspInit+0x4c>)
 80033e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033e6:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <HAL_MspInit+0x4c>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	4b09      	ldr	r3, [pc, #36]	@ (800341c <HAL_MspInit+0x4c>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	4a08      	ldr	r2, [pc, #32]	@ (800341c <HAL_MspInit+0x4c>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	@ 0x40
 8003402:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_MspInit+0x4c>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800

08003420 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	@ 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a17      	ldr	r2, [pc, #92]	@ (800349c <HAL_DAC_MspInit+0x7c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d127      	bne.n	8003492 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	4b16      	ldr	r3, [pc, #88]	@ (80034a0 <HAL_DAC_MspInit+0x80>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	4a15      	ldr	r2, [pc, #84]	@ (80034a0 <HAL_DAC_MspInit+0x80>)
 800344c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003450:	6413      	str	r3, [r2, #64]	@ 0x40
 8003452:	4b13      	ldr	r3, [pc, #76]	@ (80034a0 <HAL_DAC_MspInit+0x80>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <HAL_DAC_MspInit+0x80>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	4a0e      	ldr	r2, [pc, #56]	@ (80034a0 <HAL_DAC_MspInit+0x80>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6313      	str	r3, [r2, #48]	@ 0x30
 800346e:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <HAL_DAC_MspInit+0x80>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800347a:	2330      	movs	r3, #48	@ 0x30
 800347c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800347e:	2303      	movs	r3, #3
 8003480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003486:	f107 0314 	add.w	r3, r7, #20
 800348a:	4619      	mov	r1, r3
 800348c:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <HAL_DAC_MspInit+0x84>)
 800348e:	f001 fa43 	bl	8004918 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8003492:	bf00      	nop
 8003494:	3728      	adds	r7, #40	@ 0x28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40007400 	.word	0x40007400
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40020000 	.word	0x40020000

080034a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	@ 0x30
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003600 <HAL_I2C_MspInit+0x158>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d164      	bne.n	8003594 <HAL_I2C_MspInit+0xec>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	4a4c      	ldr	r2, [pc, #304]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034da:	4b4a      	ldr	r3, [pc, #296]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ec:	2312      	movs	r3, #18
 80034ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034f8:	2304      	movs	r3, #4
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fc:	f107 031c 	add.w	r3, r7, #28
 8003500:	4619      	mov	r1, r3
 8003502:	4841      	ldr	r0, [pc, #260]	@ (8003608 <HAL_I2C_MspInit+0x160>)
 8003504:	f001 fa08 	bl	8004918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	4b3d      	ldr	r3, [pc, #244]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	4a3c      	ldr	r2, [pc, #240]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 8003512:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003516:	6413      	str	r3, [r2, #64]	@ 0x40
 8003518:	4b3a      	ldr	r3, [pc, #232]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003524:	4b39      	ldr	r3, [pc, #228]	@ (800360c <HAL_I2C_MspInit+0x164>)
 8003526:	4a3a      	ldr	r2, [pc, #232]	@ (8003610 <HAL_I2C_MspInit+0x168>)
 8003528:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800352a:	4b38      	ldr	r3, [pc, #224]	@ (800360c <HAL_I2C_MspInit+0x164>)
 800352c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003530:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003532:	4b36      	ldr	r3, [pc, #216]	@ (800360c <HAL_I2C_MspInit+0x164>)
 8003534:	2240      	movs	r2, #64	@ 0x40
 8003536:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003538:	4b34      	ldr	r3, [pc, #208]	@ (800360c <HAL_I2C_MspInit+0x164>)
 800353a:	2200      	movs	r2, #0
 800353c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800353e:	4b33      	ldr	r3, [pc, #204]	@ (800360c <HAL_I2C_MspInit+0x164>)
 8003540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003544:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003546:	4b31      	ldr	r3, [pc, #196]	@ (800360c <HAL_I2C_MspInit+0x164>)
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800354c:	4b2f      	ldr	r3, [pc, #188]	@ (800360c <HAL_I2C_MspInit+0x164>)
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003552:	4b2e      	ldr	r3, [pc, #184]	@ (800360c <HAL_I2C_MspInit+0x164>)
 8003554:	2200      	movs	r2, #0
 8003556:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003558:	4b2c      	ldr	r3, [pc, #176]	@ (800360c <HAL_I2C_MspInit+0x164>)
 800355a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800355e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003560:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <HAL_I2C_MspInit+0x164>)
 8003562:	2200      	movs	r2, #0
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003566:	4829      	ldr	r0, [pc, #164]	@ (800360c <HAL_I2C_MspInit+0x164>)
 8003568:	f000 fdba 	bl	80040e0 <HAL_DMA_Init>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003572:	f7ff fd48 	bl	8003006 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a24      	ldr	r2, [pc, #144]	@ (800360c <HAL_I2C_MspInit+0x164>)
 800357a:	635a      	str	r2, [r3, #52]	@ 0x34
 800357c:	4a23      	ldr	r2, [pc, #140]	@ (800360c <HAL_I2C_MspInit+0x164>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003582:	2200      	movs	r2, #0
 8003584:	2100      	movs	r1, #0
 8003586:	201f      	movs	r0, #31
 8003588:	f000 fc77 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800358c:	201f      	movs	r0, #31
 800358e:	f000 fc90 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003592:	e031      	b.n	80035f8 <HAL_I2C_MspInit+0x150>
  else if(hi2c->Instance==I2C2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1e      	ldr	r2, [pc, #120]	@ (8003614 <HAL_I2C_MspInit+0x16c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d12c      	bne.n	80035f8 <HAL_I2C_MspInit+0x150>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	4b18      	ldr	r3, [pc, #96]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ae:	4b15      	ldr	r3, [pc, #84]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80035be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035c0:	2312      	movs	r3, #18
 80035c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c8:	2303      	movs	r3, #3
 80035ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80035cc:	2304      	movs	r3, #4
 80035ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d0:	f107 031c 	add.w	r3, r7, #28
 80035d4:	4619      	mov	r1, r3
 80035d6:	480c      	ldr	r0, [pc, #48]	@ (8003608 <HAL_I2C_MspInit+0x160>)
 80035d8:	f001 f99e 	bl	8004918 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80035e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_I2C_MspInit+0x15c>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	bf00      	nop
 80035fa:	3730      	adds	r7, #48	@ 0x30
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40005400 	.word	0x40005400
 8003604:	40023800 	.word	0x40023800
 8003608:	40020400 	.word	0x40020400
 800360c:	200000fc 	.word	0x200000fc
 8003610:	400260a0 	.word	0x400260a0
 8003614:	40005800 	.word	0x40005800

08003618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	@ 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1d      	ldr	r2, [pc, #116]	@ (80036ac <HAL_SPI_MspInit+0x94>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d134      	bne.n	80036a4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	4b1c      	ldr	r3, [pc, #112]	@ (80036b0 <HAL_SPI_MspInit+0x98>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	4a1b      	ldr	r2, [pc, #108]	@ (80036b0 <HAL_SPI_MspInit+0x98>)
 8003644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003648:	6413      	str	r3, [r2, #64]	@ 0x40
 800364a:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_SPI_MspInit+0x98>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <HAL_SPI_MspInit+0x98>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	4a14      	ldr	r2, [pc, #80]	@ (80036b0 <HAL_SPI_MspInit+0x98>)
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	6313      	str	r3, [r2, #48]	@ 0x30
 8003666:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <HAL_SPI_MspInit+0x98>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003672:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003684:	2305      	movs	r3, #5
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4619      	mov	r1, r3
 800368e:	4809      	ldr	r0, [pc, #36]	@ (80036b4 <HAL_SPI_MspInit+0x9c>)
 8003690:	f001 f942 	bl	8004918 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003694:	2200      	movs	r2, #0
 8003696:	2100      	movs	r1, #0
 8003698:	2024      	movs	r0, #36	@ 0x24
 800369a:	f000 fbee 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800369e:	2024      	movs	r0, #36	@ 0x24
 80036a0:	f000 fc07 	bl	8003eb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80036a4:	bf00      	nop
 80036a6:	3728      	adds	r7, #40	@ 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40003800 	.word	0x40003800
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40020400 	.word	0x40020400

080036b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b090      	sub	sp, #64	@ 0x40
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d8:	d153      	bne.n	8003782 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036de:	4b81      	ldr	r3, [pc, #516]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	4a80      	ldr	r2, [pc, #512]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ea:	4b7e      	ldr	r3, [pc, #504]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036fa:	4b7a      	ldr	r3, [pc, #488]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	4a79      	ldr	r2, [pc, #484]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6313      	str	r3, [r2, #48]	@ 0x30
 8003706:	4b77      	ldr	r3, [pc, #476]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
 8003716:	4b73      	ldr	r3, [pc, #460]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	4a72      	ldr	r2, [pc, #456]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	6313      	str	r3, [r2, #48]	@ 0x30
 8003722:	4b70      	ldr	r3, [pc, #448]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ROT1_A_Pin;
 800372e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003738:	2301      	movs	r3, #1
 800373a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003740:	2301      	movs	r3, #1
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROT1_A_GPIO_Port, &GPIO_InitStruct);
 8003744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003748:	4619      	mov	r1, r3
 800374a:	4867      	ldr	r0, [pc, #412]	@ (80038e8 <HAL_TIM_Encoder_MspInit+0x230>)
 800374c:	f001 f8e4 	bl	8004918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ROT1_B_Pin;
 8003750:	2308      	movs	r3, #8
 8003752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003754:	2302      	movs	r3, #2
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003758:	2301      	movs	r3, #1
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2300      	movs	r3, #0
 800375e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003760:	2301      	movs	r3, #1
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROT1_B_GPIO_Port, &GPIO_InitStruct);
 8003764:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003768:	4619      	mov	r1, r3
 800376a:	4860      	ldr	r0, [pc, #384]	@ (80038ec <HAL_TIM_Encoder_MspInit+0x234>)
 800376c:	f001 f8d4 	bl	8004918 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	201c      	movs	r0, #28
 8003776:	f000 fb80 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800377a:	201c      	movs	r0, #28
 800377c:	f000 fb99 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003780:	e0ac      	b.n	80038dc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5a      	ldr	r2, [pc, #360]	@ (80038f0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d134      	bne.n	80037f6 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	4b54      	ldr	r3, [pc, #336]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	4a53      	ldr	r2, [pc, #332]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	6413      	str	r3, [r2, #64]	@ 0x40
 800379c:	4b51      	ldr	r3, [pc, #324]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	4b4d      	ldr	r3, [pc, #308]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	4a4c      	ldr	r2, [pc, #304]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b8:	4b4a      	ldr	r3, [pc, #296]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ROT2_A_Pin|ROT2_B_Pin;
 80037c4:	23c0      	movs	r3, #192	@ 0xc0
 80037c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037cc:	2301      	movs	r3, #1
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	2300      	movs	r3, #0
 80037d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037d4:	2302      	movs	r3, #2
 80037d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037dc:	4619      	mov	r1, r3
 80037de:	4842      	ldr	r0, [pc, #264]	@ (80038e8 <HAL_TIM_Encoder_MspInit+0x230>)
 80037e0:	f001 f89a 	bl	8004918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	201d      	movs	r0, #29
 80037ea:	f000 fb46 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037ee:	201d      	movs	r0, #29
 80037f0:	f000 fb5f 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
}
 80037f4:	e072      	b.n	80038dc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a3e      	ldr	r2, [pc, #248]	@ (80038f4 <HAL_TIM_Encoder_MspInit+0x23c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d134      	bne.n	800386a <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	4b37      	ldr	r3, [pc, #220]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	4a36      	ldr	r2, [pc, #216]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003810:	4b34      	ldr	r3, [pc, #208]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	4b30      	ldr	r3, [pc, #192]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	4a2f      	ldr	r2, [pc, #188]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	6313      	str	r3, [r2, #48]	@ 0x30
 800382c:	4b2d      	ldr	r3, [pc, #180]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ROT3_A_Pin|ROT3_B_Pin;
 8003838:	23c0      	movs	r3, #192	@ 0xc0
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2302      	movs	r3, #2
 800383e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003840:	2301      	movs	r3, #1
 8003842:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003844:	2300      	movs	r3, #0
 8003846:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003848:	2302      	movs	r3, #2
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800384c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003850:	4619      	mov	r1, r3
 8003852:	4826      	ldr	r0, [pc, #152]	@ (80038ec <HAL_TIM_Encoder_MspInit+0x234>)
 8003854:	f001 f860 	bl	8004918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003858:	2200      	movs	r2, #0
 800385a:	2100      	movs	r1, #0
 800385c:	201e      	movs	r0, #30
 800385e:	f000 fb0c 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003862:	201e      	movs	r0, #30
 8003864:	f000 fb25 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
}
 8003868:	e038      	b.n	80038dc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a22      	ldr	r2, [pc, #136]	@ (80038f8 <HAL_TIM_Encoder_MspInit+0x240>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d133      	bne.n	80038dc <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	6413      	str	r3, [r2, #64]	@ 0x40
 8003884:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a0:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ROT4_A_Pin|ROT4_B_Pin;
 80038ac:	2303      	movs	r3, #3
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b4:	2301      	movs	r3, #1
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	2300      	movs	r3, #0
 80038ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038bc:	2302      	movs	r3, #2
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038c4:	4619      	mov	r1, r3
 80038c6:	4808      	ldr	r0, [pc, #32]	@ (80038e8 <HAL_TIM_Encoder_MspInit+0x230>)
 80038c8:	f001 f826 	bl	8004918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2100      	movs	r1, #0
 80038d0:	2032      	movs	r0, #50	@ 0x32
 80038d2:	f000 fad2 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80038d6:	2032      	movs	r0, #50	@ 0x32
 80038d8:	f000 faeb 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
}
 80038dc:	bf00      	nop
 80038de:	3740      	adds	r7, #64	@ 0x40
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40020400 	.word	0x40020400
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00

080038fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <HAL_TIM_Base_MspInit+0x80>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d116      	bne.n	800393c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <HAL_TIM_Base_MspInit+0x84>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	4a1a      	ldr	r2, [pc, #104]	@ (8003980 <HAL_TIM_Base_MspInit+0x84>)
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	6413      	str	r3, [r2, #64]	@ 0x40
 800391e:	4b18      	ldr	r3, [pc, #96]	@ (8003980 <HAL_TIM_Base_MspInit+0x84>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	2037      	movs	r0, #55	@ 0x37
 8003930:	f000 faa3 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003934:	2037      	movs	r0, #55	@ 0x37
 8003936:	f000 fabc 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800393a:	e01a      	b.n	8003972 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM13)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a10      	ldr	r2, [pc, #64]	@ (8003984 <HAL_TIM_Base_MspInit+0x88>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d115      	bne.n	8003972 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <HAL_TIM_Base_MspInit+0x84>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	4a0c      	ldr	r2, [pc, #48]	@ (8003980 <HAL_TIM_Base_MspInit+0x84>)
 8003950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003954:	6413      	str	r3, [r2, #64]	@ 0x40
 8003956:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <HAL_TIM_Base_MspInit+0x84>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003962:	2200      	movs	r2, #0
 8003964:	2100      	movs	r1, #0
 8003966:	202c      	movs	r0, #44	@ 0x2c
 8003968:	f000 fa87 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800396c:	202c      	movs	r0, #44	@ 0x2c
 800396e:	f000 faa0 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40001400 	.word	0x40001400
 8003980:	40023800 	.word	0x40023800
 8003984:	40001c00 	.word	0x40001c00

08003988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_UART_MspInit+0x94>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d134      	bne.n	8003a14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <HAL_UART_MspInit+0x98>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a20 <HAL_UART_MspInit+0x98>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ba:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_UART_MspInit+0x98>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <HAL_UART_MspInit+0x98>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	4a14      	ldr	r2, [pc, #80]	@ (8003a20 <HAL_UART_MspInit+0x98>)
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d6:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_UART_MspInit+0x98>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80039e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f0:	2303      	movs	r3, #3
 80039f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039f4:	2307      	movs	r3, #7
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	4619      	mov	r1, r3
 80039fe:	4809      	ldr	r0, [pc, #36]	@ (8003a24 <HAL_UART_MspInit+0x9c>)
 8003a00:	f000 ff8a 	bl	8004918 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	2027      	movs	r0, #39	@ 0x27
 8003a0a:	f000 fa36 	bl	8003e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a0e:	2027      	movs	r0, #39	@ 0x27
 8003a10:	f000 fa4f 	bl	8003eb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003a14:	bf00      	nop
 8003a16:	3728      	adds	r7, #40	@ 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40004800 	.word	0x40004800
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40020800 	.word	0x40020800

08003a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <NMI_Handler+0x4>

08003a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <HardFault_Handler+0x4>

08003a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <MemManage_Handler+0x4>

08003a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <BusFault_Handler+0x4>

08003a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <UsageFault_Handler+0x4>

08003a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a7e:	f000 f901 	bl	8003c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003a8c:	4802      	ldr	r0, [pc, #8]	@ (8003a98 <DMA1_Stream6_IRQHandler+0x10>)
 8003a8e:	f000 fcbf 	bl	8004410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200000fc 	.word	0x200000fc

08003a9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003aa0:	4802      	ldr	r0, [pc, #8]	@ (8003aac <TIM2_IRQHandler+0x10>)
 8003aa2:	f004 f91f 	bl	8007ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200001b4 	.word	0x200001b4

08003ab0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ab4:	4802      	ldr	r0, [pc, #8]	@ (8003ac0 <TIM3_IRQHandler+0x10>)
 8003ab6:	f004 f915 	bl	8007ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200001fc 	.word	0x200001fc

08003ac4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ac8:	4802      	ldr	r0, [pc, #8]	@ (8003ad4 <TIM4_IRQHandler+0x10>)
 8003aca:	f004 f90b 	bl	8007ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000244 	.word	0x20000244

08003ad8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003adc:	4802      	ldr	r0, [pc, #8]	@ (8003ae8 <I2C1_EV_IRQHandler+0x10>)
 8003ade:	f001 fba1 	bl	8005224 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000054 	.word	0x20000054

08003aec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003af0:	4802      	ldr	r0, [pc, #8]	@ (8003afc <SPI2_IRQHandler+0x10>)
 8003af2:	f003 fdc5 	bl	8007680 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	2000015c 	.word	0x2000015c

08003b00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b04:	4802      	ldr	r0, [pc, #8]	@ (8003b10 <USART3_IRQHandler+0x10>)
 8003b06:	f004 fccf 	bl	80084a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000364 	.word	0x20000364

08003b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_Pin);
 8003b18:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003b1c:	f001 f8e4 	bl	8004ce8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M1_Pin);
 8003b20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003b24:	f001 f8e0 	bl	8004ce8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003b30:	4802      	ldr	r0, [pc, #8]	@ (8003b3c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003b32:	f004 f8d7 	bl	8007ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	2000031c 	.word	0x2000031c

08003b40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b44:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <TIM5_IRQHandler+0x10>)
 8003b46:	f004 f8cd 	bl	8007ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	2000028c 	.word	0x2000028c

08003b54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b58:	4802      	ldr	r0, [pc, #8]	@ (8003b64 <TIM7_IRQHandler+0x10>)
 8003b5a:	f004 f8c3 	bl	8007ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200002d4 	.word	0x200002d4

08003b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <SystemInit+0x20>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	4a05      	ldr	r2, [pc, #20]	@ (8003b88 <SystemInit+0x20>)
 8003b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b90:	f7ff ffea 	bl	8003b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b94:	480c      	ldr	r0, [pc, #48]	@ (8003bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b96:	490d      	ldr	r1, [pc, #52]	@ (8003bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b98:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b9c:	e002      	b.n	8003ba4 <LoopCopyDataInit>

08003b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba2:	3304      	adds	r3, #4

08003ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ba8:	d3f9      	bcc.n	8003b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003baa:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bac:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb0:	e001      	b.n	8003bb6 <LoopFillZerobss>

08003bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb4:	3204      	adds	r2, #4

08003bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bb8:	d3fb      	bcc.n	8003bb2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003bba:	f005 fb99 	bl	80092f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bbe:	f7fe fd65 	bl	800268c <main>
  bx  lr    
 8003bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003bd0:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 8003bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003bd8:	20000528 	.word	0x20000528

08003bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bdc:	e7fe      	b.n	8003bdc <ADC_IRQHandler>
	...

08003be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <HAL_Init+0x40>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c20 <HAL_Init+0x40>)
 8003bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <HAL_Init+0x40>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8003c20 <HAL_Init+0x40>)
 8003bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bfc:	4b08      	ldr	r3, [pc, #32]	@ (8003c20 <HAL_Init+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a07      	ldr	r2, [pc, #28]	@ (8003c20 <HAL_Init+0x40>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c08:	2003      	movs	r0, #3
 8003c0a:	f000 f92b 	bl	8003e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c0e:	200f      	movs	r0, #15
 8003c10:	f000 f808 	bl	8003c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c14:	f7ff fbdc 	bl	80033d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023c00 	.word	0x40023c00

08003c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c2c:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_InitTick+0x54>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <HAL_InitTick+0x58>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f943 	bl	8003ece <HAL_SYSTICK_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00e      	b.n	8003c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b0f      	cmp	r3, #15
 8003c56:	d80a      	bhi.n	8003c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	f000 f90b 	bl	8003e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c64:	4a06      	ldr	r2, [pc, #24]	@ (8003c80 <HAL_InitTick+0x5c>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	20000008 	.word	0x20000008
 8003c80:	20000004 	.word	0x20000004

08003c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_IncTick+0x20>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <HAL_IncTick+0x24>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	4a04      	ldr	r2, [pc, #16]	@ (8003ca8 <HAL_IncTick+0x24>)
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000008 	.word	0x20000008
 8003ca8:	20000524 	.word	0x20000524

08003cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return uwTick;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	@ (8003cc0 <HAL_GetTick+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000524 	.word	0x20000524

08003cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cf6:	4a04      	ldr	r2, [pc, #16]	@ (8003d08 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	60d3      	str	r3, [r2, #12]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <__NVIC_GetPriorityGrouping+0x18>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	f003 0307 	and.w	r3, r3, #7
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	db0b      	blt.n	8003d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	4907      	ldr	r1, [pc, #28]	@ (8003d60 <__NVIC_EnableIRQ+0x38>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2001      	movs	r0, #1
 8003d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	e000e100 	.word	0xe000e100

08003d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	db0a      	blt.n	8003d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	490c      	ldr	r1, [pc, #48]	@ (8003db0 <__NVIC_SetPriority+0x4c>)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	0112      	lsls	r2, r2, #4
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	440b      	add	r3, r1
 8003d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d8c:	e00a      	b.n	8003da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	4908      	ldr	r1, [pc, #32]	@ (8003db4 <__NVIC_SetPriority+0x50>)
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	3b04      	subs	r3, #4
 8003d9c:	0112      	lsls	r2, r2, #4
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	440b      	add	r3, r1
 8003da2:	761a      	strb	r2, [r3, #24]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000e100 	.word	0xe000e100
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	@ 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f1c3 0307 	rsb	r3, r3, #7
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	bf28      	it	cs
 8003dd6:	2304      	movcs	r3, #4
 8003dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d902      	bls.n	8003de8 <NVIC_EncodePriority+0x30>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3b03      	subs	r3, #3
 8003de6:	e000      	b.n	8003dea <NVIC_EncodePriority+0x32>
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e00:	f04f 31ff 	mov.w	r1, #4294967295
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	43d9      	mvns	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e10:	4313      	orrs	r3, r2
         );
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3724      	adds	r7, #36	@ 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e30:	d301      	bcc.n	8003e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e32:	2301      	movs	r3, #1
 8003e34:	e00f      	b.n	8003e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e36:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <SysTick_Config+0x40>)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e3e:	210f      	movs	r1, #15
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	f7ff ff8e 	bl	8003d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e48:	4b05      	ldr	r3, [pc, #20]	@ (8003e60 <SysTick_Config+0x40>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e4e:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <SysTick_Config+0x40>)
 8003e50:	2207      	movs	r2, #7
 8003e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	e000e010 	.word	0xe000e010

08003e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff29 	bl	8003cc4 <__NVIC_SetPriorityGrouping>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b086      	sub	sp, #24
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	4603      	mov	r3, r0
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e8c:	f7ff ff3e 	bl	8003d0c <__NVIC_GetPriorityGrouping>
 8003e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	6978      	ldr	r0, [r7, #20]
 8003e98:	f7ff ff8e 	bl	8003db8 <NVIC_EncodePriority>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff5d 	bl	8003d64 <__NVIC_SetPriority>
}
 8003eaa:	bf00      	nop
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	4603      	mov	r3, r0
 8003eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff31 	bl	8003d28 <__NVIC_EnableIRQ>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ffa2 	bl	8003e20 <SysTick_Config>
 8003edc:	4603      	mov	r3, r0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e014      	b.n	8003f22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	791b      	ldrb	r3, [r3, #4]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fa89 	bl	8003420 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e046      	b.n	8003fcc <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	795b      	ldrb	r3, [r3, #5]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_DAC_Start+0x20>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e040      	b.n	8003fcc <HAL_DAC_Start+0xa2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2201      	movs	r2, #1
 8003f64:	409a      	lsls	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10f      	bne.n	8003f94 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003f7e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003f80:	d11d      	bne.n	8003fbe <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	e014      	b.n	8003fbe <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	213c      	movs	r1, #60	@ 0x3c
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d107      	bne.n	8003fbe <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0202 	orr.w	r2, r2, #2
 8003fbc:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e015      	b.n	8004020 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3308      	adds	r3, #8
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e004      	b.n	8004016 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	3314      	adds	r3, #20
 8004014:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	461a      	mov	r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	@ 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_DAC_ConfigChannel+0x1c>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e042      	b.n	80040d2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	795b      	ldrb	r3, [r3, #5]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_DAC_ConfigChannel+0x2c>
 8004054:	2302      	movs	r3, #2
 8004056:	e03c      	b.n	80040d2 <HAL_DAC_ConfigChannel+0xa6>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2202      	movs	r2, #2
 8004062:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	22c0      	movs	r2, #192	@ 0xc0
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	400a      	ands	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80040d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	@ 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040ec:	f7ff fdde 	bl	8003cac <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e099      	b.n	8004230 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411c:	e00f      	b.n	800413e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800411e:	f7ff fdc5 	bl	8003cac <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b05      	cmp	r3, #5
 800412a:	d908      	bls.n	800413e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2203      	movs	r2, #3
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e078      	b.n	8004230 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e8      	bne.n	800411e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4b38      	ldr	r3, [pc, #224]	@ (8004238 <HAL_DMA_Init+0x158>)
 8004158:	4013      	ands	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800416a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	2b04      	cmp	r3, #4
 8004196:	d107      	bne.n	80041a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	4313      	orrs	r3, r2
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0307 	bic.w	r3, r3, #7
 80041be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d117      	bne.n	8004202 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fb1b 	bl	8004820 <DMA_CheckFifoParam>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2240      	movs	r2, #64	@ 0x40
 80041f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80041fe:	2301      	movs	r3, #1
 8004200:	e016      	b.n	8004230 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fad2 	bl	80047b4 <DMA_CalcBaseAndBitshift>
 8004210:	4603      	mov	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004218:	223f      	movs	r2, #63	@ 0x3f
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	f010803f 	.word	0xf010803f

0800423c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_DMA_Start_IT+0x26>
 800425e:	2302      	movs	r3, #2
 8004260:	e040      	b.n	80042e4 <HAL_DMA_Start_IT+0xa8>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d12f      	bne.n	80042d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fa64 	bl	8004758 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	223f      	movs	r2, #63	@ 0x3f
 8004296:	409a      	lsls	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0216 	orr.w	r2, r2, #22
 80042aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0208 	orr.w	r2, r2, #8
 80042c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e005      	b.n	80042e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042fa:	f7ff fcd7 	bl	8003cac <HAL_GetTick>
 80042fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d008      	beq.n	800431e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2280      	movs	r2, #128	@ 0x80
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e052      	b.n	80043c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0216 	bic.w	r2, r2, #22
 800432c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800433c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <HAL_DMA_Abort+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0208 	bic.w	r2, r2, #8
 800435c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800436e:	e013      	b.n	8004398 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004370:	f7ff fc9c 	bl	8003cac <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b05      	cmp	r3, #5
 800437c:	d90c      	bls.n	8004398 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2203      	movs	r2, #3
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e015      	b.n	80043c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e4      	bne.n	8004370 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043aa:	223f      	movs	r2, #63	@ 0x3f
 80043ac:	409a      	lsls	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d004      	beq.n	80043ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2280      	movs	r2, #128	@ 0x80
 80043e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e00c      	b.n	8004404 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2205      	movs	r2, #5
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800441c:	4b8e      	ldr	r3, [pc, #568]	@ (8004658 <HAL_DMA_IRQHandler+0x248>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a8e      	ldr	r2, [pc, #568]	@ (800465c <HAL_DMA_IRQHandler+0x24c>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	0a9b      	lsrs	r3, r3, #10
 8004428:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	2208      	movs	r2, #8
 800443c:	409a      	lsls	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01a      	beq.n	800447c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0204 	bic.w	r2, r2, #4
 8004462:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004468:	2208      	movs	r2, #8
 800446a:	409a      	lsls	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	2201      	movs	r2, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d012      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449e:	2201      	movs	r2, #1
 80044a0:	409a      	lsls	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	f043 0202 	orr.w	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	2204      	movs	r2, #4
 80044b8:	409a      	lsls	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d012      	beq.n	80044e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d4:	2204      	movs	r2, #4
 80044d6:	409a      	lsls	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e0:	f043 0204 	orr.w	r2, r3, #4
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ec:	2210      	movs	r2, #16
 80044ee:	409a      	lsls	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d043      	beq.n	8004580 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d03c      	beq.n	8004580 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	2210      	movs	r2, #16
 800450c:	409a      	lsls	r2, r3
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d018      	beq.n	8004552 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d108      	bne.n	8004540 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d024      	beq.n	8004580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
 800453e:	e01f      	b.n	8004580 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
 8004550:	e016      	b.n	8004580 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d107      	bne.n	8004570 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0208 	bic.w	r2, r2, #8
 800456e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004584:	2220      	movs	r2, #32
 8004586:	409a      	lsls	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 808f 	beq.w	80046b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8087 	beq.w	80046b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a6:	2220      	movs	r2, #32
 80045a8:	409a      	lsls	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	d136      	bne.n	8004628 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0216 	bic.w	r2, r2, #22
 80045c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <HAL_DMA_IRQHandler+0x1da>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0208 	bic.w	r2, r2, #8
 80045f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fe:	223f      	movs	r2, #63	@ 0x3f
 8004600:	409a      	lsls	r2, r3
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461a:	2b00      	cmp	r3, #0
 800461c:	d07e      	beq.n	800471c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
        }
        return;
 8004626:	e079      	b.n	800471c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01d      	beq.n	8004672 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004648:	2b00      	cmp	r3, #0
 800464a:	d031      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
 8004654:	e02c      	b.n	80046b0 <HAL_DMA_IRQHandler+0x2a0>
 8004656:	bf00      	nop
 8004658:	20000000 	.word	0x20000000
 800465c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d023      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
 8004670:	e01e      	b.n	80046b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10f      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0210 	bic.w	r2, r2, #16
 800468e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d032      	beq.n	800471e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d022      	beq.n	800470a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2205      	movs	r2, #5
 80046c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0201 	bic.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3301      	adds	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d307      	bcc.n	80046f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f2      	bne.n	80046dc <HAL_DMA_IRQHandler+0x2cc>
 80046f6:	e000      	b.n	80046fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
 800471a:	e000      	b.n	800471e <HAL_DMA_IRQHandler+0x30e>
        return;
 800471c:	bf00      	nop
    }
  }
}
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004732:	b2db      	uxtb	r3, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004774:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	d108      	bne.n	8004798 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004796:	e007      	b.n	80047a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	60da      	str	r2, [r3, #12]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	3b10      	subs	r3, #16
 80047c4:	4a14      	ldr	r2, [pc, #80]	@ (8004818 <DMA_CalcBaseAndBitshift+0x64>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047ce:	4a13      	ldr	r2, [pc, #76]	@ (800481c <DMA_CalcBaseAndBitshift+0x68>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d909      	bls.n	80047f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80047f4:	e007      	b.n	8004806 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	aaaaaaab 	.word	0xaaaaaaab
 800481c:	08009690 	.word	0x08009690

08004820 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11f      	bne.n	800487a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d856      	bhi.n	80048ee <DMA_CheckFifoParam+0xce>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <DMA_CheckFifoParam+0x28>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004859 	.word	0x08004859
 800484c:	0800486b 	.word	0x0800486b
 8004850:	08004859 	.word	0x08004859
 8004854:	080048ef 	.word	0x080048ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d046      	beq.n	80048f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004868:	e043      	b.n	80048f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004872:	d140      	bne.n	80048f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004878:	e03d      	b.n	80048f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004882:	d121      	bne.n	80048c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d837      	bhi.n	80048fa <DMA_CheckFifoParam+0xda>
 800488a:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <DMA_CheckFifoParam+0x70>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048a7 	.word	0x080048a7
 8004898:	080048a1 	.word	0x080048a1
 800489c:	080048b9 	.word	0x080048b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e030      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d025      	beq.n	80048fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b6:	e022      	b.n	80048fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048c0:	d11f      	bne.n	8004902 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048c6:	e01c      	b.n	8004902 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d903      	bls.n	80048d6 <DMA_CheckFifoParam+0xb6>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d003      	beq.n	80048dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048d4:	e018      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
      break;
 80048da:	e015      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00e      	beq.n	8004906 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
      break;
 80048ec:	e00b      	b.n	8004906 <DMA_CheckFifoParam+0xe6>
      break;
 80048ee:	bf00      	nop
 80048f0:	e00a      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
      break;
 80048f2:	bf00      	nop
 80048f4:	e008      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
      break;
 80048f6:	bf00      	nop
 80048f8:	e006      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
      break;
 80048fa:	bf00      	nop
 80048fc:	e004      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
      break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
      break;   
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <DMA_CheckFifoParam+0xe8>
      break;
 8004906:	bf00      	nop
    }
  } 
  
  return status; 
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	@ 0x24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800492a:	2300      	movs	r3, #0
 800492c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	e16b      	b.n	8004c0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004934:	2201      	movs	r2, #1
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	429a      	cmp	r2, r3
 800494e:	f040 815a 	bne.w	8004c06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d005      	beq.n	800496a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004966:	2b02      	cmp	r3, #2
 8004968:	d130      	bne.n	80049cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	2203      	movs	r2, #3
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049a0:	2201      	movs	r2, #1
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 0201 	and.w	r2, r3, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d017      	beq.n	8004a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	2203      	movs	r2, #3
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d123      	bne.n	8004a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	08da      	lsrs	r2, r3, #3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3208      	adds	r2, #8
 8004a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	220f      	movs	r2, #15
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	43db      	mvns	r3, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4013      	ands	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	08da      	lsrs	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3208      	adds	r2, #8
 8004a56:	69b9      	ldr	r1, [r7, #24]
 8004a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	2203      	movs	r2, #3
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0203 	and.w	r2, r3, #3
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80b4 	beq.w	8004c06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	4b60      	ldr	r3, [pc, #384]	@ (8004c24 <HAL_GPIO_Init+0x30c>)
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8004c24 <HAL_GPIO_Init+0x30c>)
 8004aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aae:	4b5d      	ldr	r3, [pc, #372]	@ (8004c24 <HAL_GPIO_Init+0x30c>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aba:	4a5b      	ldr	r2, [pc, #364]	@ (8004c28 <HAL_GPIO_Init+0x310>)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	220f      	movs	r2, #15
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a52      	ldr	r2, [pc, #328]	@ (8004c2c <HAL_GPIO_Init+0x314>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02b      	beq.n	8004b3e <HAL_GPIO_Init+0x226>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a51      	ldr	r2, [pc, #324]	@ (8004c30 <HAL_GPIO_Init+0x318>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d025      	beq.n	8004b3a <HAL_GPIO_Init+0x222>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a50      	ldr	r2, [pc, #320]	@ (8004c34 <HAL_GPIO_Init+0x31c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01f      	beq.n	8004b36 <HAL_GPIO_Init+0x21e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a4f      	ldr	r2, [pc, #316]	@ (8004c38 <HAL_GPIO_Init+0x320>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d019      	beq.n	8004b32 <HAL_GPIO_Init+0x21a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a4e      	ldr	r2, [pc, #312]	@ (8004c3c <HAL_GPIO_Init+0x324>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_GPIO_Init+0x216>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a4d      	ldr	r2, [pc, #308]	@ (8004c40 <HAL_GPIO_Init+0x328>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00d      	beq.n	8004b2a <HAL_GPIO_Init+0x212>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a4c      	ldr	r2, [pc, #304]	@ (8004c44 <HAL_GPIO_Init+0x32c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <HAL_GPIO_Init+0x20e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a4b      	ldr	r2, [pc, #300]	@ (8004c48 <HAL_GPIO_Init+0x330>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_GPIO_Init+0x20a>
 8004b1e:	2307      	movs	r3, #7
 8004b20:	e00e      	b.n	8004b40 <HAL_GPIO_Init+0x228>
 8004b22:	2308      	movs	r3, #8
 8004b24:	e00c      	b.n	8004b40 <HAL_GPIO_Init+0x228>
 8004b26:	2306      	movs	r3, #6
 8004b28:	e00a      	b.n	8004b40 <HAL_GPIO_Init+0x228>
 8004b2a:	2305      	movs	r3, #5
 8004b2c:	e008      	b.n	8004b40 <HAL_GPIO_Init+0x228>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	e006      	b.n	8004b40 <HAL_GPIO_Init+0x228>
 8004b32:	2303      	movs	r3, #3
 8004b34:	e004      	b.n	8004b40 <HAL_GPIO_Init+0x228>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e002      	b.n	8004b40 <HAL_GPIO_Init+0x228>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <HAL_GPIO_Init+0x228>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	f002 0203 	and.w	r2, r2, #3
 8004b46:	0092      	lsls	r2, r2, #2
 8004b48:	4093      	lsls	r3, r2
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b50:	4935      	ldr	r1, [pc, #212]	@ (8004c28 <HAL_GPIO_Init+0x310>)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	3302      	adds	r3, #2
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c4c <HAL_GPIO_Init+0x334>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b82:	4a32      	ldr	r2, [pc, #200]	@ (8004c4c <HAL_GPIO_Init+0x334>)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b88:	4b30      	ldr	r3, [pc, #192]	@ (8004c4c <HAL_GPIO_Init+0x334>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bac:	4a27      	ldr	r2, [pc, #156]	@ (8004c4c <HAL_GPIO_Init+0x334>)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bb2:	4b26      	ldr	r3, [pc, #152]	@ (8004c4c <HAL_GPIO_Init+0x334>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c4c <HAL_GPIO_Init+0x334>)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <HAL_GPIO_Init+0x334>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c00:	4a12      	ldr	r2, [pc, #72]	@ (8004c4c <HAL_GPIO_Init+0x334>)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b0f      	cmp	r3, #15
 8004c10:	f67f ae90 	bls.w	8004934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3724      	adds	r7, #36	@ 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40013800 	.word	0x40013800
 8004c2c:	40020000 	.word	0x40020000
 8004c30:	40020400 	.word	0x40020400
 8004c34:	40020800 	.word	0x40020800
 8004c38:	40020c00 	.word	0x40020c00
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40021400 	.word	0x40021400
 8004c44:	40021800 	.word	0x40021800
 8004c48:	40021c00 	.word	0x40021c00
 8004c4c:	40013c00 	.word	0x40013c00

08004c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	887b      	ldrh	r3, [r7, #2]
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
 8004c6c:	e001      	b.n	8004c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	807b      	strh	r3, [r7, #2]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c90:	787b      	ldrb	r3, [r7, #1]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c96:	887a      	ldrh	r2, [r7, #2]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c9c:	e003      	b.n	8004ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	041a      	lsls	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cc4:	887a      	ldrh	r2, [r7, #2]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	041a      	lsls	r2, r3, #16
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	43d9      	mvns	r1, r3
 8004cd0:	887b      	ldrh	r3, [r7, #2]
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	619a      	str	r2, [r3, #24]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cf2:	4b08      	ldr	r3, [pc, #32]	@ (8004d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cfe:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fd fc94 	bl	8002634 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40013c00 	.word	0x40013c00

08004d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e12b      	b.n	8004f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fe fbb2 	bl	80034a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2224      	movs	r2, #36	@ 0x24
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0201 	bic.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f002 fbce 	bl	800751c <HAL_RCC_GetPCLK1Freq>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4a81      	ldr	r2, [pc, #516]	@ (8004f8c <HAL_I2C_Init+0x274>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d807      	bhi.n	8004d9c <HAL_I2C_Init+0x84>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a80      	ldr	r2, [pc, #512]	@ (8004f90 <HAL_I2C_Init+0x278>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	bf94      	ite	ls
 8004d94:	2301      	movls	r3, #1
 8004d96:	2300      	movhi	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e006      	b.n	8004daa <HAL_I2C_Init+0x92>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f94 <HAL_I2C_Init+0x27c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	bf94      	ite	ls
 8004da4:	2301      	movls	r3, #1
 8004da6:	2300      	movhi	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e0e7      	b.n	8004f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a78      	ldr	r2, [pc, #480]	@ (8004f98 <HAL_I2C_Init+0x280>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	0c9b      	lsrs	r3, r3, #18
 8004dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f8c <HAL_I2C_Init+0x274>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d802      	bhi.n	8004dec <HAL_I2C_Init+0xd4>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3301      	adds	r3, #1
 8004dea:	e009      	b.n	8004e00 <HAL_I2C_Init+0xe8>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	4a69      	ldr	r2, [pc, #420]	@ (8004f9c <HAL_I2C_Init+0x284>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	3301      	adds	r3, #1
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	495c      	ldr	r1, [pc, #368]	@ (8004f8c <HAL_I2C_Init+0x274>)
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	d819      	bhi.n	8004e54 <HAL_I2C_Init+0x13c>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1e59      	subs	r1, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e34:	400b      	ands	r3, r1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_I2C_Init+0x138>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1e59      	subs	r1, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4e:	e051      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004e50:	2304      	movs	r3, #4
 8004e52:	e04f      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d111      	bne.n	8004e80 <HAL_I2C_Init+0x168>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1e58      	subs	r0, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6859      	ldr	r1, [r3, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	440b      	add	r3, r1
 8004e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e012      	b.n	8004ea6 <HAL_I2C_Init+0x18e>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1e58      	subs	r0, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	0099      	lsls	r1, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e96:	3301      	adds	r3, #1
 8004e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Init+0x196>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e022      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_I2C_Init+0x1bc>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1e58      	subs	r0, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	440b      	add	r3, r1
 8004ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed2:	e00f      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1e58      	subs	r0, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	0099      	lsls	r1, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eea:	3301      	adds	r3, #1
 8004eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	6809      	ldr	r1, [r1, #0]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6911      	ldr	r1, [r2, #16]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68d2      	ldr	r2, [r2, #12]
 8004f2e:	4311      	orrs	r1, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	000186a0 	.word	0x000186a0
 8004f90:	001e847f 	.word	0x001e847f
 8004f94:	003d08ff 	.word	0x003d08ff
 8004f98:	431bde83 	.word	0x431bde83
 8004f9c:	10624dd3 	.word	0x10624dd3

08004fa0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d103      	bne.n	8004fbe <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	460b      	mov	r3, r1
 8004fda:	817b      	strh	r3, [r7, #10]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	f040 8109 	bne.w	8005204 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ff2:	4b87      	ldr	r3, [pc, #540]	@ (8005210 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	08db      	lsrs	r3, r3, #3
 8004ff8:	4a86      	ldr	r2, [pc, #536]	@ (8005214 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	0a1a      	lsrs	r2, r3, #8
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009a      	lsls	r2, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	3b01      	subs	r3, #1
 8005010:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d112      	bne.n	800503e <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800503a:	2302      	movs	r3, #2
 800503c:	e0e3      	b.n	8005206 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d0df      	beq.n	800500c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_I2C_Master_Transmit_DMA+0x8e>
 8005056:	2302      	movs	r3, #2
 8005058:	e0d5      	b.n	8005206 <HAL_I2C_Master_Transmit_DMA+0x23a>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d007      	beq.n	8005080 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2221      	movs	r2, #33	@ 0x21
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2210      	movs	r2, #16
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	893a      	ldrh	r2, [r7, #8]
 80050b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a56      	ldr	r2, [pc, #344]	@ (8005218 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80050c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80050c2:	897a      	ldrh	r2, [r7, #10]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d07b      	beq.n	80051c8 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02a      	beq.n	800512e <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050dc:	4a4f      	ldr	r2, [pc, #316]	@ (800521c <HAL_I2C_Master_Transmit_DMA+0x250>)
 80050de:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e4:	4a4e      	ldr	r2, [pc, #312]	@ (8005220 <HAL_I2C_Master_Transmit_DMA+0x254>)
 80050e6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ec:	2200      	movs	r2, #0
 80050ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f4:	2200      	movs	r2, #0
 80050f6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fc:	2200      	movs	r2, #0
 80050fe:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005104:	2200      	movs	r2, #0
 8005106:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	4619      	mov	r1, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3310      	adds	r3, #16
 8005118:	461a      	mov	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511e:	f7ff f88d 	bl	800423c <HAL_DMA_Start_IT>
 8005122:	4603      	mov	r3, r0
 8005124:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d139      	bne.n	80051a0 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 800512c:	e013      	b.n	8005156 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e057      	b.n	8005206 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800516c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800517c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800518c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e02f      	b.n	8005200 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b4:	f043 0210 	orr.w	r2, r3, #16
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e01e      	b.n	8005206 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051d6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051e6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80051fe:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000000 	.word	0x20000000
 8005214:	14f8b589 	.word	0x14f8b589
 8005218:	ffff0000 	.word	0xffff0000
 800521c:	08006819 	.word	0x08006819
 8005220:	080069d7 	.word	0x080069d7

08005224 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005244:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	2b10      	cmp	r3, #16
 8005252:	d003      	beq.n	800525c <HAL_I2C_EV_IRQHandler+0x38>
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b40      	cmp	r3, #64	@ 0x40
 8005258:	f040 80c1 	bne.w	80053de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <HAL_I2C_EV_IRQHandler+0x6e>
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800527c:	d003      	beq.n	8005286 <HAL_I2C_EV_IRQHandler+0x62>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005284:	d101      	bne.n	800528a <HAL_I2C_EV_IRQHandler+0x66>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <HAL_I2C_EV_IRQHandler+0x68>
 800528a:	2300      	movs	r3, #0
 800528c:	2b01      	cmp	r3, #1
 800528e:	f000 8132 	beq.w	80054f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00c      	beq.n	80052b6 <HAL_I2C_EV_IRQHandler+0x92>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	0a5b      	lsrs	r3, r3, #9
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d006      	beq.n	80052b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 fcab 	bl	8006c04 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fd06 	bl	8005cc0 <I2C_Master_SB>
 80052b4:	e092      	b.n	80053dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	0a5b      	lsrs	r3, r3, #9
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fd7c 	bl	8005dcc <I2C_Master_ADD10>
 80052d4:	e082      	b.n	80053dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	0a5b      	lsrs	r3, r3, #9
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fd96 	bl	8005e20 <I2C_Master_ADDR>
 80052f4:	e072      	b.n	80053dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d03b      	beq.n	800537a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800530c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005310:	f000 80f3 	beq.w	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	09db      	lsrs	r3, r3, #7
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00f      	beq.n	8005340 <HAL_I2C_EV_IRQHandler+0x11c>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	0a9b      	lsrs	r3, r3, #10
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d009      	beq.n	8005340 <HAL_I2C_EV_IRQHandler+0x11c>
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f95a 	bl	80055f2 <I2C_MasterTransmit_TXE>
 800533e:	e04d      	b.n	80053dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	089b      	lsrs	r3, r3, #2
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 80d6 	beq.w	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	0a5b      	lsrs	r3, r3, #9
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80cf 	beq.w	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800535c:	7bbb      	ldrb	r3, [r7, #14]
 800535e:	2b21      	cmp	r3, #33	@ 0x21
 8005360:	d103      	bne.n	800536a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f9e1 	bl	800572a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005368:	e0c7      	b.n	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b40      	cmp	r3, #64	@ 0x40
 800536e:	f040 80c4 	bne.w	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa4f 	bl	8005816 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005378:	e0bf      	b.n	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005388:	f000 80b7 	beq.w	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <HAL_I2C_EV_IRQHandler+0x194>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	0a9b      	lsrs	r3, r3, #10
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <HAL_I2C_EV_IRQHandler+0x194>
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fac8 	bl	8005946 <I2C_MasterReceive_RXNE>
 80053b6:	e011      	b.n	80053dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 809a 	beq.w	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	0a5b      	lsrs	r3, r3, #9
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8093 	beq.w	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fb7e 	bl	8005ad6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053da:	e08e      	b.n	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80053dc:	e08d      	b.n	80054fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	e007      	b.n	8005400 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d012      	beq.n	8005432 <HAL_I2C_EV_IRQHandler+0x20e>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	0a5b      	lsrs	r3, r3, #9
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 ff47 	bl	80062be <I2C_Slave_ADDR>
 8005430:	e066      	b.n	8005500 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_I2C_EV_IRQHandler+0x22e>
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	0a5b      	lsrs	r3, r3, #9
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 ff82 	bl	8006354 <I2C_Slave_STOPF>
 8005450:	e056      	b.n	8005500 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	2b21      	cmp	r3, #33	@ 0x21
 8005456:	d002      	beq.n	800545e <HAL_I2C_EV_IRQHandler+0x23a>
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	2b29      	cmp	r3, #41	@ 0x29
 800545c:	d125      	bne.n	80054aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	09db      	lsrs	r3, r3, #7
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00f      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0x266>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	0a9b      	lsrs	r3, r3, #10
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0x266>
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	089b      	lsrs	r3, r3, #2
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fe5d 	bl	8006142 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005488:	e039      	b.n	80054fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	089b      	lsrs	r3, r3, #2
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d033      	beq.n	80054fe <HAL_I2C_EV_IRQHandler+0x2da>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	0a5b      	lsrs	r3, r3, #9
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d02d      	beq.n	80054fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fe8a 	bl	80061bc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054a8:	e029      	b.n	80054fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	099b      	lsrs	r3, r3, #6
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00f      	beq.n	80054d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	0a9b      	lsrs	r3, r3, #10
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	089b      	lsrs	r3, r3, #2
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d103      	bne.n	80054d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fe95 	bl	80061fe <I2C_SlaveReceive_RXNE>
 80054d4:	e014      	b.n	8005500 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00e      	beq.n	8005500 <HAL_I2C_EV_IRQHandler+0x2dc>
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	0a5b      	lsrs	r3, r3, #9
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d008      	beq.n	8005500 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fec3 	bl	800627a <I2C_SlaveReceive_BTF>
 80054f4:	e004      	b.n	8005500 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80054f6:	bf00      	nop
 80054f8:	e002      	b.n	8005500 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
 8005562:	4613      	mov	r3, r2
 8005564:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e4:	b2db      	uxtb	r3, r3
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005600:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005608:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005614:	2b00      	cmp	r3, #0
 8005616:	d150      	bne.n	80056ba <I2C_MasterTransmit_TXE+0xc8>
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b21      	cmp	r3, #33	@ 0x21
 800561c:	d14d      	bne.n	80056ba <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d01d      	beq.n	8005660 <I2C_MasterTransmit_TXE+0x6e>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b20      	cmp	r3, #32
 8005628:	d01a      	beq.n	8005660 <I2C_MasterTransmit_TXE+0x6e>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005630:	d016      	beq.n	8005660 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005640:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2211      	movs	r2, #17
 8005646:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff54 	bl	8005506 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800565e:	e060      	b.n	8005722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800566e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800567e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b40      	cmp	r3, #64	@ 0x40
 8005698:	d107      	bne.n	80056aa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ff6f 	bl	8005586 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056a8:	e03b      	b.n	8005722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff ff27 	bl	8005506 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056b8:	e033      	b.n	8005722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b21      	cmp	r3, #33	@ 0x21
 80056be:	d005      	beq.n	80056cc <I2C_MasterTransmit_TXE+0xda>
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	2b40      	cmp	r3, #64	@ 0x40
 80056c4:	d12d      	bne.n	8005722 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b22      	cmp	r3, #34	@ 0x22
 80056ca:	d12a      	bne.n	8005722 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d108      	bne.n	80056e8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80056e6:	e01c      	b.n	8005722 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	d103      	bne.n	80056fc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f88e 	bl	8005816 <I2C_MemoryTransmit_TXE_BTF>
}
 80056fa:	e012      	b.n	8005722 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005720:	e7ff      	b.n	8005722 <I2C_MasterTransmit_TXE+0x130>
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b21      	cmp	r3, #33	@ 0x21
 8005742:	d164      	bne.n	800580e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d012      	beq.n	8005774 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	781a      	ldrb	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005772:	e04c      	b.n	800580e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b08      	cmp	r3, #8
 8005778:	d01d      	beq.n	80057b6 <I2C_MasterTransmit_BTF+0x8c>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b20      	cmp	r3, #32
 800577e:	d01a      	beq.n	80057b6 <I2C_MasterTransmit_BTF+0x8c>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005786:	d016      	beq.n	80057b6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005796:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2211      	movs	r2, #17
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fea9 	bl	8005506 <HAL_I2C_MasterTxCpltCallback>
}
 80057b4:	e02b      	b.n	800580e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057c4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057d4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b40      	cmp	r3, #64	@ 0x40
 80057ee:	d107      	bne.n	8005800 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff fec4 	bl	8005586 <HAL_I2C_MemTxCpltCallback>
}
 80057fe:	e006      	b.n	800580e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fe7c 	bl	8005506 <HAL_I2C_MasterTxCpltCallback>
}
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005824:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11d      	bne.n	800586a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d10b      	bne.n	800584e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800583a:	b2da      	uxtb	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005846:	1c9a      	adds	r2, r3, #2
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800584c:	e077      	b.n	800593e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005852:	b29b      	uxth	r3, r3
 8005854:	121b      	asrs	r3, r3, #8
 8005856:	b2da      	uxtb	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005868:	e069      	b.n	800593e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10b      	bne.n	800588a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005876:	b2da      	uxtb	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005888:	e059      	b.n	800593e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	2b02      	cmp	r3, #2
 8005890:	d152      	bne.n	8005938 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b22      	cmp	r3, #34	@ 0x22
 8005896:	d10d      	bne.n	80058b4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058a6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058b2:	e044      	b.n	800593e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d015      	beq.n	80058ea <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b21      	cmp	r3, #33	@ 0x21
 80058c2:	d112      	bne.n	80058ea <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80058e8:	e029      	b.n	800593e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d124      	bne.n	800593e <I2C_MemoryTransmit_TXE_BTF+0x128>
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b21      	cmp	r3, #33	@ 0x21
 80058f8:	d121      	bne.n	800593e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005908:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005918:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fe28 	bl	8005586 <HAL_I2C_MemTxCpltCallback>
}
 8005936:	e002      	b.n	800593e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fb31 	bl	8004fa0 <I2C_Flush_DR>
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b22      	cmp	r3, #34	@ 0x22
 8005958:	f040 80b9 	bne.w	8005ace <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d921      	bls.n	80059b4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b03      	cmp	r3, #3
 800599e:	f040 8096 	bne.w	8005ace <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80059b2:	e08c      	b.n	8005ace <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d07f      	beq.n	8005abc <I2C_MasterReceive_RXNE+0x176>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d002      	beq.n	80059c8 <I2C_MasterReceive_RXNE+0x82>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d179      	bne.n	8005abc <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f8e9 	bl	8006ba0 <I2C_WaitOnSTOPRequestThroughIT>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d14c      	bne.n	8005a6e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b40      	cmp	r3, #64	@ 0x40
 8005a2c:	d10a      	bne.n	8005a44 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff fdac 	bl	800559a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a42:	e044      	b.n	8005ace <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d002      	beq.n	8005a58 <I2C_MasterReceive_RXNE+0x112>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d103      	bne.n	8005a60 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a5e:	e002      	b.n	8005a66 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2212      	movs	r2, #18
 8005a64:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff fd57 	bl	800551a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a6c:	e02f      	b.n	8005ace <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a7c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fd7a 	bl	80055ae <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005aba:	e008      	b.n	8005ace <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aca:	605a      	str	r2, [r3, #4]
}
 8005acc:	e7ff      	b.n	8005ace <I2C_MasterReceive_RXNE+0x188>
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d11b      	bne.n	8005b26 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005afc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005b24:	e0c8      	b.n	8005cb8 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d129      	bne.n	8005b84 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b3e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d00a      	beq.n	8005b5c <I2C_MasterReceive_BTF+0x86>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d007      	beq.n	8005b5c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005b82:	e099      	b.n	8005cb8 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	f040 8081 	bne.w	8005c92 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d002      	beq.n	8005b9c <I2C_MasterReceive_BTF+0xc6>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d108      	bne.n	8005bae <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	e019      	b.n	8005be2 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d002      	beq.n	8005bba <I2C_MasterReceive_BTF+0xe4>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d108      	bne.n	8005bcc <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	e00a      	b.n	8005be2 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d007      	beq.n	8005be2 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005c3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b40      	cmp	r3, #64	@ 0x40
 8005c50:	d10a      	bne.n	8005c68 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fc9a 	bl	800559a <HAL_I2C_MemRxCpltCallback>
}
 8005c66:	e027      	b.n	8005cb8 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d002      	beq.n	8005c7c <I2C_MasterReceive_BTF+0x1a6>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d103      	bne.n	8005c84 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c82:	e002      	b.n	8005c8a <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2212      	movs	r2, #18
 8005c88:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fc45 	bl	800551a <HAL_I2C_MasterRxCpltCallback>
}
 8005c90:	e012      	b.n	8005cb8 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d117      	bne.n	8005d04 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005cee:	e067      	b.n	8005dc0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	611a      	str	r2, [r3, #16]
}
 8005d02:	e05d      	b.n	8005dc0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d0c:	d133      	bne.n	8005d76 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b21      	cmp	r3, #33	@ 0x21
 8005d18:	d109      	bne.n	8005d2e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d2a:	611a      	str	r2, [r3, #16]
 8005d2c:	e008      	b.n	8005d40 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <I2C_Master_SB+0x92>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d108      	bne.n	8005d64 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d032      	beq.n	8005dc0 <I2C_Master_SB+0x100>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02d      	beq.n	8005dc0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d72:	605a      	str	r2, [r3, #4]
}
 8005d74:	e024      	b.n	8005dc0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10e      	bne.n	8005d9c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	11db      	asrs	r3, r3, #7
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 0306 	and.w	r3, r3, #6
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f063 030f 	orn	r3, r3, #15
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	611a      	str	r2, [r3, #16]
}
 8005d9a:	e011      	b.n	8005dc0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d10d      	bne.n	8005dc0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	11db      	asrs	r3, r3, #7
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0306 	and.w	r3, r3, #6
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f063 030e 	orn	r3, r3, #14
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	611a      	str	r2, [r3, #16]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <I2C_Master_ADD10+0x26>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d108      	bne.n	8005e04 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00c      	beq.n	8005e14 <I2C_Master_ADD10+0x48>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e12:	605a      	str	r2, [r3, #4]
  }
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b091      	sub	sp, #68	@ 0x44
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b22      	cmp	r3, #34	@ 0x22
 8005e48:	f040 8169 	bne.w	800611e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10f      	bne.n	8005e74 <I2C_Master_ADDR+0x54>
 8005e54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e58:	2b40      	cmp	r3, #64	@ 0x40
 8005e5a:	d10b      	bne.n	8005e74 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	e160      	b.n	8006136 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d11d      	bne.n	8005eb8 <I2C_Master_ADDR+0x98>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005e84:	d118      	bne.n	8005eb8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e86:	2300      	movs	r3, #0
 8005e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eaa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005eb6:	e13e      	b.n	8006136 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d113      	bne.n	8005eea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	e115      	b.n	8006116 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	f040 808a 	bne.w	800600a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005efc:	d137      	bne.n	8005f6e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f1c:	d113      	bne.n	8005f46 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f2c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	e0e7      	b.n	8006116 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f46:	2300      	movs	r3, #0
 8005f48:	623b      	str	r3, [r7, #32]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	623b      	str	r3, [r7, #32]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	e0d3      	b.n	8006116 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d02e      	beq.n	8005fd2 <I2C_Master_ADDR+0x1b2>
 8005f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d02b      	beq.n	8005fd2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7c:	2b12      	cmp	r3, #18
 8005f7e:	d102      	bne.n	8005f86 <I2C_Master_ADDR+0x166>
 8005f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d125      	bne.n	8005fd2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d00e      	beq.n	8005faa <I2C_Master_ADDR+0x18a>
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d00b      	beq.n	8005faa <I2C_Master_ADDR+0x18a>
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d008      	beq.n	8005faa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e007      	b.n	8005fba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	e0a1      	b.n	8006116 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fe0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e085      	b.n	8006116 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d14d      	bne.n	80060b0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006016:	2b04      	cmp	r3, #4
 8006018:	d016      	beq.n	8006048 <I2C_Master_ADDR+0x228>
 800601a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601c:	2b02      	cmp	r3, #2
 800601e:	d013      	beq.n	8006048 <I2C_Master_ADDR+0x228>
 8006020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006022:	2b10      	cmp	r3, #16
 8006024:	d010      	beq.n	8006048 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006034:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e007      	b.n	8006058 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006056:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006066:	d117      	bne.n	8006098 <I2C_Master_ADDR+0x278>
 8006068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800606e:	d00b      	beq.n	8006088 <I2C_Master_ADDR+0x268>
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	2b01      	cmp	r3, #1
 8006074:	d008      	beq.n	8006088 <I2C_Master_ADDR+0x268>
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	2b08      	cmp	r3, #8
 800607a:	d005      	beq.n	8006088 <I2C_Master_ADDR+0x268>
 800607c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607e:	2b10      	cmp	r3, #16
 8006080:	d002      	beq.n	8006088 <I2C_Master_ADDR+0x268>
 8006082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006084:	2b20      	cmp	r3, #32
 8006086:	d107      	bne.n	8006098 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006096:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	e032      	b.n	8006116 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ce:	d117      	bne.n	8006100 <I2C_Master_ADDR+0x2e0>
 80060d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060d6:	d00b      	beq.n	80060f0 <I2C_Master_ADDR+0x2d0>
 80060d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d008      	beq.n	80060f0 <I2C_Master_ADDR+0x2d0>
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d005      	beq.n	80060f0 <I2C_Master_ADDR+0x2d0>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d002      	beq.n	80060f0 <I2C_Master_ADDR+0x2d0>
 80060ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d107      	bne.n	8006100 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800611c:	e00b      	b.n	8006136 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
}
 8006134:	e7ff      	b.n	8006136 <I2C_Master_ADDR+0x316>
 8006136:	bf00      	nop
 8006138:	3744      	adds	r7, #68	@ 0x44
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006150:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d02b      	beq.n	80061b4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	781a      	ldrb	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d114      	bne.n	80061b4 <I2C_SlaveTransmit_TXE+0x72>
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b29      	cmp	r3, #41	@ 0x29
 800618e:	d111      	bne.n	80061b4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800619e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2221      	movs	r2, #33	@ 0x21
 80061a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2228      	movs	r2, #40	@ 0x28
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff f9bd 	bl	800552e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d011      	beq.n	80061f2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800620c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d02c      	beq.n	8006272 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d114      	bne.n	8006272 <I2C_SlaveReceive_RXNE+0x74>
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b2a      	cmp	r3, #42	@ 0x2a
 800624c:	d111      	bne.n	8006272 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2222      	movs	r2, #34	@ 0x22
 8006262:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2228      	movs	r2, #40	@ 0x28
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff f968 	bl	8005542 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d012      	beq.n	80062b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80062d8:	2b28      	cmp	r3, #40	@ 0x28
 80062da:	d127      	bne.n	800632c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	089b      	lsrs	r3, r3, #2
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	81bb      	strh	r3, [r7, #12]
 800630e:	e002      	b.n	8006316 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800631e:	89ba      	ldrh	r2, [r7, #12]
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff f916 	bl	8005556 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800632a:	e00e      	b.n	800634a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632c:	2300      	movs	r3, #0
 800632e:	60bb      	str	r3, [r7, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	60bb      	str	r3, [r7, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006362:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006372:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	60bb      	str	r3, [r7, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b0:	d172      	bne.n	8006498 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b22      	cmp	r3, #34	@ 0x22
 80063b6:	d002      	beq.n	80063be <I2C_Slave_STOPF+0x6a>
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80063bc:	d135      	bne.n	800642a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	f043 0204 	orr.w	r2, r3, #4
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe f994 	bl	8004724 <HAL_DMA_GetState>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d049      	beq.n	8006496 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006406:	4a69      	ldr	r2, [pc, #420]	@ (80065ac <I2C_Slave_STOPF+0x258>)
 8006408:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640e:	4618      	mov	r0, r3
 8006410:	f7fd ffdc 	bl	80043cc <HAL_DMA_Abort_IT>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d03d      	beq.n	8006496 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006428:	e035      	b.n	8006496 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f043 0204 	orr.w	r2, r3, #4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800645c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe f95e 	bl	8004724 <HAL_DMA_GetState>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d014      	beq.n	8006498 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006472:	4a4e      	ldr	r2, [pc, #312]	@ (80065ac <I2C_Slave_STOPF+0x258>)
 8006474:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd ffa6 	bl	80043cc <HAL_DMA_Abort_IT>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	e000      	b.n	8006498 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006496:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d03e      	beq.n	8006520 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d112      	bne.n	80064d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e0:	2b40      	cmp	r3, #64	@ 0x40
 80064e2:	d112      	bne.n	800650a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	f043 0204 	orr.w	r2, r3, #4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f843 	bl	80065b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800652e:	e039      	b.n	80065a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	2b2a      	cmp	r3, #42	@ 0x2a
 8006534:	d109      	bne.n	800654a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2228      	movs	r2, #40	@ 0x28
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fe fffc 	bl	8005542 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b28      	cmp	r3, #40	@ 0x28
 8006554:	d111      	bne.n	800657a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a15      	ldr	r2, [pc, #84]	@ (80065b0 <I2C_Slave_STOPF+0x25c>)
 800655a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fe fffd 	bl	8005572 <HAL_I2C_ListenCpltCallback>
}
 8006578:	e014      	b.n	80065a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657e:	2b22      	cmp	r3, #34	@ 0x22
 8006580:	d002      	beq.n	8006588 <I2C_Slave_STOPF+0x234>
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b22      	cmp	r3, #34	@ 0x22
 8006586:	d10d      	bne.n	80065a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fe ffcf 	bl	8005542 <HAL_I2C_SlaveRxCpltCallback>
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	08006a51 	.word	0x08006a51
 80065b0:	ffff0000 	.word	0xffff0000

080065b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d002      	beq.n	80065d8 <I2C_ITError+0x24>
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	2b40      	cmp	r3, #64	@ 0x40
 80065d6:	d10a      	bne.n	80065ee <I2C_ITError+0x3a>
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	2b22      	cmp	r3, #34	@ 0x22
 80065dc:	d107      	bne.n	80065ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065f4:	2b28      	cmp	r3, #40	@ 0x28
 80065f6:	d107      	bne.n	8006608 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2228      	movs	r2, #40	@ 0x28
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006606:	e015      	b.n	8006634 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006612:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006616:	d00a      	beq.n	800662e <I2C_ITError+0x7a>
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	2b60      	cmp	r3, #96	@ 0x60
 800661c:	d007      	beq.n	800662e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800663e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006642:	d162      	bne.n	800670a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006652:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b01      	cmp	r3, #1
 8006660:	d020      	beq.n	80066a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006666:	4a6a      	ldr	r2, [pc, #424]	@ (8006810 <I2C_ITError+0x25c>)
 8006668:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666e:	4618      	mov	r0, r3
 8006670:	f7fd feac 	bl	80043cc <HAL_DMA_Abort_IT>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 8089 	beq.w	800678e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0201 	bic.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800669e:	4610      	mov	r0, r2
 80066a0:	4798      	blx	r3
 80066a2:	e074      	b.n	800678e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	4a59      	ldr	r2, [pc, #356]	@ (8006810 <I2C_ITError+0x25c>)
 80066aa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd fe8b 	bl	80043cc <HAL_DMA_Abort_IT>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d068      	beq.n	800678e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d10b      	bne.n	80066e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0201 	bic.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006704:	4610      	mov	r0, r2
 8006706:	4798      	blx	r3
 8006708:	e041      	b.n	800678e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b60      	cmp	r3, #96	@ 0x60
 8006714:	d125      	bne.n	8006762 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672e:	2b40      	cmp	r3, #64	@ 0x40
 8006730:	d10b      	bne.n	800674a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fe ff31 	bl	80055c2 <HAL_I2C_AbortCpltCallback>
 8006760:	e015      	b.n	800678e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676c:	2b40      	cmp	r3, #64	@ 0x40
 800676e:	d10b      	bne.n	8006788 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691a      	ldr	r2, [r3, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7fe ff10 	bl	80055ae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10e      	bne.n	80067bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80067ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d113      	bne.n	8006808 <I2C_ITError+0x254>
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	2b28      	cmp	r3, #40	@ 0x28
 80067e4:	d110      	bne.n	8006808 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006814 <I2C_ITError+0x260>)
 80067ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fe feb5 	bl	8005572 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	08006a51 	.word	0x08006a51
 8006814:	ffff0000 	.word	0xffff0000

08006818 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006824:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800682c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006834:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800684a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006858:	2200      	movs	r2, #0
 800685a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	2200      	movs	r2, #0
 800686a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800686c:	7cfb      	ldrb	r3, [r7, #19]
 800686e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006872:	2b21      	cmp	r3, #33	@ 0x21
 8006874:	d007      	beq.n	8006886 <I2C_DMAXferCplt+0x6e>
 8006876:	7cfb      	ldrb	r3, [r7, #19]
 8006878:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800687c:	2b22      	cmp	r3, #34	@ 0x22
 800687e:	d131      	bne.n	80068e4 <I2C_DMAXferCplt+0xcc>
 8006880:	7cbb      	ldrb	r3, [r7, #18]
 8006882:	2b20      	cmp	r3, #32
 8006884:	d12e      	bne.n	80068e4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006894:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2200      	movs	r2, #0
 800689a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800689c:	7cfb      	ldrb	r3, [r7, #19]
 800689e:	2b29      	cmp	r3, #41	@ 0x29
 80068a0:	d10a      	bne.n	80068b8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2221      	movs	r2, #33	@ 0x21
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2228      	movs	r2, #40	@ 0x28
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068b0:	6978      	ldr	r0, [r7, #20]
 80068b2:	f7fe fe3c 	bl	800552e <HAL_I2C_SlaveTxCpltCallback>
 80068b6:	e00c      	b.n	80068d2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80068b8:	7cfb      	ldrb	r3, [r7, #19]
 80068ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80068bc:	d109      	bne.n	80068d2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2222      	movs	r2, #34	@ 0x22
 80068c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2228      	movs	r2, #40	@ 0x28
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068cc:	6978      	ldr	r0, [r7, #20]
 80068ce:	f7fe fe38 	bl	8005542 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80068e0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80068e2:	e074      	b.n	80069ce <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d06e      	beq.n	80069ce <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d107      	bne.n	800690a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006908:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006918:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006920:	d009      	beq.n	8006936 <I2C_DMAXferCplt+0x11e>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d006      	beq.n	8006936 <I2C_DMAXferCplt+0x11e>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800692e:	d002      	beq.n	8006936 <I2C_DMAXferCplt+0x11e>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b20      	cmp	r3, #32
 8006934:	d107      	bne.n	8006946 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006944:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006954:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006964:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2200      	movs	r2, #0
 800696a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006974:	6978      	ldr	r0, [r7, #20]
 8006976:	f7fe fe1a 	bl	80055ae <HAL_I2C_ErrorCallback>
}
 800697a:	e028      	b.n	80069ce <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b40      	cmp	r3, #64	@ 0x40
 800698e:	d10a      	bne.n	80069a6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800699e:	6978      	ldr	r0, [r7, #20]
 80069a0:	f7fe fdfb 	bl	800559a <HAL_I2C_MemRxCpltCallback>
}
 80069a4:	e013      	b.n	80069ce <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d002      	beq.n	80069ba <I2C_DMAXferCplt+0x1a2>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d103      	bne.n	80069c2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	631a      	str	r2, [r3, #48]	@ 0x30
 80069c0:	e002      	b.n	80069c8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2212      	movs	r2, #18
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80069c8:	6978      	ldr	r0, [r7, #20]
 80069ca:	f7fe fda6 	bl	800551a <HAL_I2C_MasterRxCpltCallback>
}
 80069ce:	bf00      	nop
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f0:	2200      	movs	r2, #0
 80069f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	2200      	movs	r2, #0
 8006a02:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fd fe9b 	bl	8004740 <HAL_DMA_GetError>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d01b      	beq.n	8006a48 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a1e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	f043 0210 	orr.w	r2, r3, #16
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7fe fdb3 	bl	80055ae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8006b98 <I2C_DMAAbort+0x148>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	4a4a      	ldr	r2, [pc, #296]	@ (8006b9c <I2C_DMAAbort+0x14c>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	0a1a      	lsrs	r2, r3, #8
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	00da      	lsls	r2, r3, #3
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8e:	f043 0220 	orr.w	r2, r3, #32
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006a96:	e00a      	b.n	8006aae <I2C_DMAAbort+0x5e>
    }
    count--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aac:	d0ea      	beq.n	8006a84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aba:	2200      	movs	r2, #0
 8006abc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	2200      	movs	r2, #0
 8006acc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006adc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af0:	2200      	movs	r2, #0
 8006af2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b00:	2200      	movs	r2, #0
 8006b02:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0201 	bic.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b60      	cmp	r3, #96	@ 0x60
 8006b1e:	d10e      	bne.n	8006b3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b36:	6978      	ldr	r0, [r7, #20]
 8006b38:	f7fe fd43 	bl	80055c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b3c:	e027      	b.n	8006b8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b3e:	7cfb      	ldrb	r3, [r7, #19]
 8006b40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b44:	2b28      	cmp	r3, #40	@ 0x28
 8006b46:	d117      	bne.n	8006b78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2228      	movs	r2, #40	@ 0x28
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006b76:	e007      	b.n	8006b88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006b88:	6978      	ldr	r0, [r7, #20]
 8006b8a:	f7fe fd10 	bl	80055ae <HAL_I2C_ErrorCallback>
}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000000 	.word	0x20000000
 8006b9c:	14f8b589 	.word	0x14f8b589

08006ba0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006bac:	4b13      	ldr	r3, [pc, #76]	@ (8006bfc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	08db      	lsrs	r3, r3, #3
 8006bb2:	4a13      	ldr	r2, [pc, #76]	@ (8006c00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb8:	0a1a      	lsrs	r2, r3, #8
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d107      	bne.n	8006bde <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd2:	f043 0220 	orr.w	r2, r3, #32
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e008      	b.n	8006bf0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bec:	d0e9      	beq.n	8006bc2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	20000000 	.word	0x20000000
 8006c00:	14f8b589 	.word	0x14f8b589

08006c04 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006c14:	d103      	bne.n	8006c1e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c1c:	e007      	b.n	8006c2e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006c26:	d102      	bne.n	8006c2e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e267      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d075      	beq.n	8006d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006c5a:	4b88      	ldr	r3, [pc, #544]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d00c      	beq.n	8006c80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c66:	4b85      	ldr	r3, [pc, #532]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d112      	bne.n	8006c98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c72:	4b82      	ldr	r3, [pc, #520]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c7e:	d10b      	bne.n	8006c98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c80:	4b7e      	ldr	r3, [pc, #504]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d05b      	beq.n	8006d44 <HAL_RCC_OscConfig+0x108>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d157      	bne.n	8006d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e242      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca0:	d106      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x74>
 8006ca2:	4b76      	ldr	r3, [pc, #472]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a75      	ldr	r2, [pc, #468]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e01d      	b.n	8006cec <HAL_RCC_OscConfig+0xb0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cb8:	d10c      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x98>
 8006cba:	4b70      	ldr	r3, [pc, #448]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a6f      	ldr	r2, [pc, #444]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a6c      	ldr	r2, [pc, #432]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	e00b      	b.n	8006cec <HAL_RCC_OscConfig+0xb0>
 8006cd4:	4b69      	ldr	r3, [pc, #420]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a68      	ldr	r2, [pc, #416]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	4b66      	ldr	r3, [pc, #408]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a65      	ldr	r2, [pc, #404]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d013      	beq.n	8006d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf4:	f7fc ffda 	bl	8003cac <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cfc:	f7fc ffd6 	bl	8003cac <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b64      	cmp	r3, #100	@ 0x64
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e207      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f0      	beq.n	8006cfc <HAL_RCC_OscConfig+0xc0>
 8006d1a:	e014      	b.n	8006d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fc ffc6 	bl	8003cac <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d24:	f7fc ffc2 	bl	8003cac <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b64      	cmp	r3, #100	@ 0x64
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e1f3      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d36:	4b51      	ldr	r3, [pc, #324]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0xe8>
 8006d42:	e000      	b.n	8006d46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d063      	beq.n	8006e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006d52:	4b4a      	ldr	r3, [pc, #296]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d5e:	4b47      	ldr	r3, [pc, #284]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d11c      	bne.n	8006da4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d6a:	4b44      	ldr	r3, [pc, #272]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d116      	bne.n	8006da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d76:	4b41      	ldr	r3, [pc, #260]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <HAL_RCC_OscConfig+0x152>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d001      	beq.n	8006d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e1c7      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	4937      	ldr	r1, [pc, #220]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006da2:	e03a      	b.n	8006e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d020      	beq.n	8006dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dac:	4b34      	ldr	r3, [pc, #208]	@ (8006e80 <HAL_RCC_OscConfig+0x244>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fc ff7b 	bl	8003cac <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dba:	f7fc ff77 	bl	8003cac <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e1a8      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd8:	4b28      	ldr	r3, [pc, #160]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4925      	ldr	r1, [pc, #148]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	600b      	str	r3, [r1, #0]
 8006dec:	e015      	b.n	8006e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dee:	4b24      	ldr	r3, [pc, #144]	@ (8006e80 <HAL_RCC_OscConfig+0x244>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fc ff5a 	bl	8003cac <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dfc:	f7fc ff56 	bl	8003cac <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e187      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f0      	bne.n	8006dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d036      	beq.n	8006e94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d016      	beq.n	8006e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e2e:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <HAL_RCC_OscConfig+0x248>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e34:	f7fc ff3a 	bl	8003cac <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e3c:	f7fc ff36 	bl	8003cac <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e167      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e7c <HAL_RCC_OscConfig+0x240>)
 8006e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0x200>
 8006e5a:	e01b      	b.n	8006e94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e5c:	4b09      	ldr	r3, [pc, #36]	@ (8006e84 <HAL_RCC_OscConfig+0x248>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e62:	f7fc ff23 	bl	8003cac <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e68:	e00e      	b.n	8006e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e6a:	f7fc ff1f 	bl	8003cac <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d907      	bls.n	8006e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e150      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	42470000 	.word	0x42470000
 8006e84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e88:	4b88      	ldr	r3, [pc, #544]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1ea      	bne.n	8006e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8097 	beq.w	8006fd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ea6:	4b81      	ldr	r3, [pc, #516]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10f      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60bb      	str	r3, [r7, #8]
 8006eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eba:	4a7c      	ldr	r2, [pc, #496]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eca:	60bb      	str	r3, [r7, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ed2:	4b77      	ldr	r3, [pc, #476]	@ (80070b0 <HAL_RCC_OscConfig+0x474>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d118      	bne.n	8006f10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ede:	4b74      	ldr	r3, [pc, #464]	@ (80070b0 <HAL_RCC_OscConfig+0x474>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a73      	ldr	r2, [pc, #460]	@ (80070b0 <HAL_RCC_OscConfig+0x474>)
 8006ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eea:	f7fc fedf 	bl	8003cac <HAL_GetTick>
 8006eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef2:	f7fc fedb 	bl	8003cac <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e10c      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f04:	4b6a      	ldr	r3, [pc, #424]	@ (80070b0 <HAL_RCC_OscConfig+0x474>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d106      	bne.n	8006f26 <HAL_RCC_OscConfig+0x2ea>
 8006f18:	4b64      	ldr	r3, [pc, #400]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1c:	4a63      	ldr	r2, [pc, #396]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f24:	e01c      	b.n	8006f60 <HAL_RCC_OscConfig+0x324>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	d10c      	bne.n	8006f48 <HAL_RCC_OscConfig+0x30c>
 8006f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f32:	4a5e      	ldr	r2, [pc, #376]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f34:	f043 0304 	orr.w	r3, r3, #4
 8006f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f40:	f043 0301 	orr.w	r3, r3, #1
 8006f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f46:	e00b      	b.n	8006f60 <HAL_RCC_OscConfig+0x324>
 8006f48:	4b58      	ldr	r3, [pc, #352]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4c:	4a57      	ldr	r2, [pc, #348]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f54:	4b55      	ldr	r3, [pc, #340]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f58:	4a54      	ldr	r2, [pc, #336]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f5a:	f023 0304 	bic.w	r3, r3, #4
 8006f5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d015      	beq.n	8006f94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f68:	f7fc fea0 	bl	8003cac <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f70:	f7fc fe9c 	bl	8003cac <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e0cb      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f86:	4b49      	ldr	r3, [pc, #292]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0ee      	beq.n	8006f70 <HAL_RCC_OscConfig+0x334>
 8006f92:	e014      	b.n	8006fbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f94:	f7fc fe8a 	bl	8003cac <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f9a:	e00a      	b.n	8006fb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9c:	f7fc fe86 	bl	8003cac <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e0b5      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1ee      	bne.n	8006f9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d105      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fc4:	4b39      	ldr	r3, [pc, #228]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc8:	4a38      	ldr	r2, [pc, #224]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80a1 	beq.w	800711c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fda:	4b34      	ldr	r3, [pc, #208]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 030c 	and.w	r3, r3, #12
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d05c      	beq.n	80070a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d141      	bne.n	8007072 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fee:	4b31      	ldr	r3, [pc, #196]	@ (80070b4 <HAL_RCC_OscConfig+0x478>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff4:	f7fc fe5a 	bl	8003cac <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ffc:	f7fc fe56 	bl	8003cac <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e087      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700e:	4b27      	ldr	r3, [pc, #156]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f0      	bne.n	8006ffc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69da      	ldr	r2, [r3, #28]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	019b      	lsls	r3, r3, #6
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	3b01      	subs	r3, #1
 8007034:	041b      	lsls	r3, r3, #16
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	061b      	lsls	r3, r3, #24
 800703e:	491b      	ldr	r1, [pc, #108]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8007040:	4313      	orrs	r3, r2
 8007042:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007044:	4b1b      	ldr	r3, [pc, #108]	@ (80070b4 <HAL_RCC_OscConfig+0x478>)
 8007046:	2201      	movs	r2, #1
 8007048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704a:	f7fc fe2f 	bl	8003cac <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007052:	f7fc fe2b 	bl	8003cac <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e05c      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007064:	4b11      	ldr	r3, [pc, #68]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0f0      	beq.n	8007052 <HAL_RCC_OscConfig+0x416>
 8007070:	e054      	b.n	800711c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007072:	4b10      	ldr	r3, [pc, #64]	@ (80070b4 <HAL_RCC_OscConfig+0x478>)
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007078:	f7fc fe18 	bl	8003cac <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007080:	f7fc fe14 	bl	8003cac <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e045      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007092:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <HAL_RCC_OscConfig+0x470>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1f0      	bne.n	8007080 <HAL_RCC_OscConfig+0x444>
 800709e:	e03d      	b.n	800711c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d107      	bne.n	80070b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e038      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
 80070ac:	40023800 	.word	0x40023800
 80070b0:	40007000 	.word	0x40007000
 80070b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <HAL_RCC_OscConfig+0x4ec>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d028      	beq.n	8007118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d121      	bne.n	8007118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070de:	429a      	cmp	r2, r3
 80070e0:	d11a      	bne.n	8007118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80070e8:	4013      	ands	r3, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d111      	bne.n	8007118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fe:	085b      	lsrs	r3, r3, #1
 8007100:	3b01      	subs	r3, #1
 8007102:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007104:	429a      	cmp	r2, r3
 8007106:	d107      	bne.n	8007118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007114:	429a      	cmp	r2, r3
 8007116:	d001      	beq.n	800711c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40023800 	.word	0x40023800

0800712c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e0cc      	b.n	80072da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007140:	4b68      	ldr	r3, [pc, #416]	@ (80072e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d90c      	bls.n	8007168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714e:	4b65      	ldr	r3, [pc, #404]	@ (80072e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007156:	4b63      	ldr	r3, [pc, #396]	@ (80072e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d001      	beq.n	8007168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e0b8      	b.n	80072da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d020      	beq.n	80071b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007180:	4b59      	ldr	r3, [pc, #356]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	4a58      	ldr	r2, [pc, #352]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007186:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800718a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007198:	4b53      	ldr	r3, [pc, #332]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	4a52      	ldr	r2, [pc, #328]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 800719e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80071a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a4:	4b50      	ldr	r3, [pc, #320]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	494d      	ldr	r1, [pc, #308]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d044      	beq.n	800724c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d107      	bne.n	80071da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ca:	4b47      	ldr	r3, [pc, #284]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d119      	bne.n	800720a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e07f      	b.n	80072da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d003      	beq.n	80071ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d107      	bne.n	80071fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ea:	4b3f      	ldr	r3, [pc, #252]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e06f      	b.n	80072da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071fa:	4b3b      	ldr	r3, [pc, #236]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e067      	b.n	80072da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800720a:	4b37      	ldr	r3, [pc, #220]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f023 0203 	bic.w	r2, r3, #3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	4934      	ldr	r1, [pc, #208]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007218:	4313      	orrs	r3, r2
 800721a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800721c:	f7fc fd46 	bl	8003cac <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007222:	e00a      	b.n	800723a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007224:	f7fc fd42 	bl	8003cac <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e04f      	b.n	80072da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800723a:	4b2b      	ldr	r3, [pc, #172]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 020c 	and.w	r2, r3, #12
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	429a      	cmp	r2, r3
 800724a:	d1eb      	bne.n	8007224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800724c:	4b25      	ldr	r3, [pc, #148]	@ (80072e4 <HAL_RCC_ClockConfig+0x1b8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d20c      	bcs.n	8007274 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725a:	4b22      	ldr	r3, [pc, #136]	@ (80072e4 <HAL_RCC_ClockConfig+0x1b8>)
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007262:	4b20      	ldr	r3, [pc, #128]	@ (80072e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d001      	beq.n	8007274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e032      	b.n	80072da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007280:	4b19      	ldr	r3, [pc, #100]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	4916      	ldr	r1, [pc, #88]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	4313      	orrs	r3, r2
 8007290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800729e:	4b12      	ldr	r3, [pc, #72]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	490e      	ldr	r1, [pc, #56]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072b2:	f000 f821 	bl	80072f8 <HAL_RCC_GetSysClockFreq>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b0b      	ldr	r3, [pc, #44]	@ (80072e8 <HAL_RCC_ClockConfig+0x1bc>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	091b      	lsrs	r3, r3, #4
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	490a      	ldr	r1, [pc, #40]	@ (80072ec <HAL_RCC_ClockConfig+0x1c0>)
 80072c4:	5ccb      	ldrb	r3, [r1, r3]
 80072c6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ca:	4a09      	ldr	r2, [pc, #36]	@ (80072f0 <HAL_RCC_ClockConfig+0x1c4>)
 80072cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80072ce:	4b09      	ldr	r3, [pc, #36]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fc fca6 	bl	8003c24 <HAL_InitTick>

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40023c00 	.word	0x40023c00
 80072e8:	40023800 	.word	0x40023800
 80072ec:	08009678 	.word	0x08009678
 80072f0:	20000000 	.word	0x20000000
 80072f4:	20000004 	.word	0x20000004

080072f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072fc:	b094      	sub	sp, #80	@ 0x50
 80072fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007310:	4b79      	ldr	r3, [pc, #484]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 030c 	and.w	r3, r3, #12
 8007318:	2b08      	cmp	r3, #8
 800731a:	d00d      	beq.n	8007338 <HAL_RCC_GetSysClockFreq+0x40>
 800731c:	2b08      	cmp	r3, #8
 800731e:	f200 80e1 	bhi.w	80074e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_RCC_GetSysClockFreq+0x34>
 8007326:	2b04      	cmp	r3, #4
 8007328:	d003      	beq.n	8007332 <HAL_RCC_GetSysClockFreq+0x3a>
 800732a:	e0db      	b.n	80074e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800732c:	4b73      	ldr	r3, [pc, #460]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x204>)
 800732e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007330:	e0db      	b.n	80074ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007332:	4b73      	ldr	r3, [pc, #460]	@ (8007500 <HAL_RCC_GetSysClockFreq+0x208>)
 8007334:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007336:	e0d8      	b.n	80074ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007338:	4b6f      	ldr	r3, [pc, #444]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007340:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007342:	4b6d      	ldr	r3, [pc, #436]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d063      	beq.n	8007416 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800734e:	4b6a      	ldr	r3, [pc, #424]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	099b      	lsrs	r3, r3, #6
 8007354:	2200      	movs	r2, #0
 8007356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007358:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007360:	633b      	str	r3, [r7, #48]	@ 0x30
 8007362:	2300      	movs	r3, #0
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
 8007366:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800736a:	4622      	mov	r2, r4
 800736c:	462b      	mov	r3, r5
 800736e:	f04f 0000 	mov.w	r0, #0
 8007372:	f04f 0100 	mov.w	r1, #0
 8007376:	0159      	lsls	r1, r3, #5
 8007378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800737c:	0150      	lsls	r0, r2, #5
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4621      	mov	r1, r4
 8007384:	1a51      	subs	r1, r2, r1
 8007386:	6139      	str	r1, [r7, #16]
 8007388:	4629      	mov	r1, r5
 800738a:	eb63 0301 	sbc.w	r3, r3, r1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800739c:	4659      	mov	r1, fp
 800739e:	018b      	lsls	r3, r1, #6
 80073a0:	4651      	mov	r1, sl
 80073a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073a6:	4651      	mov	r1, sl
 80073a8:	018a      	lsls	r2, r1, #6
 80073aa:	4651      	mov	r1, sl
 80073ac:	ebb2 0801 	subs.w	r8, r2, r1
 80073b0:	4659      	mov	r1, fp
 80073b2:	eb63 0901 	sbc.w	r9, r3, r1
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ca:	4690      	mov	r8, r2
 80073cc:	4699      	mov	r9, r3
 80073ce:	4623      	mov	r3, r4
 80073d0:	eb18 0303 	adds.w	r3, r8, r3
 80073d4:	60bb      	str	r3, [r7, #8]
 80073d6:	462b      	mov	r3, r5
 80073d8:	eb49 0303 	adc.w	r3, r9, r3
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	f04f 0300 	mov.w	r3, #0
 80073e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073ea:	4629      	mov	r1, r5
 80073ec:	024b      	lsls	r3, r1, #9
 80073ee:	4621      	mov	r1, r4
 80073f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073f4:	4621      	mov	r1, r4
 80073f6:	024a      	lsls	r2, r1, #9
 80073f8:	4610      	mov	r0, r2
 80073fa:	4619      	mov	r1, r3
 80073fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073fe:	2200      	movs	r2, #0
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007404:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007408:	f7f9 facc 	bl	80009a4 <__aeabi_uldivmod>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4613      	mov	r3, r2
 8007412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007414:	e058      	b.n	80074c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007416:	4b38      	ldr	r3, [pc, #224]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	099b      	lsrs	r3, r3, #6
 800741c:	2200      	movs	r2, #0
 800741e:	4618      	mov	r0, r3
 8007420:	4611      	mov	r1, r2
 8007422:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007426:	623b      	str	r3, [r7, #32]
 8007428:	2300      	movs	r3, #0
 800742a:	627b      	str	r3, [r7, #36]	@ 0x24
 800742c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007430:	4642      	mov	r2, r8
 8007432:	464b      	mov	r3, r9
 8007434:	f04f 0000 	mov.w	r0, #0
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	0159      	lsls	r1, r3, #5
 800743e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007442:	0150      	lsls	r0, r2, #5
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4641      	mov	r1, r8
 800744a:	ebb2 0a01 	subs.w	sl, r2, r1
 800744e:	4649      	mov	r1, r9
 8007450:	eb63 0b01 	sbc.w	fp, r3, r1
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	f04f 0300 	mov.w	r3, #0
 800745c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007460:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007464:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007468:	ebb2 040a 	subs.w	r4, r2, sl
 800746c:	eb63 050b 	sbc.w	r5, r3, fp
 8007470:	f04f 0200 	mov.w	r2, #0
 8007474:	f04f 0300 	mov.w	r3, #0
 8007478:	00eb      	lsls	r3, r5, #3
 800747a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800747e:	00e2      	lsls	r2, r4, #3
 8007480:	4614      	mov	r4, r2
 8007482:	461d      	mov	r5, r3
 8007484:	4643      	mov	r3, r8
 8007486:	18e3      	adds	r3, r4, r3
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	464b      	mov	r3, r9
 800748c:	eb45 0303 	adc.w	r3, r5, r3
 8007490:	607b      	str	r3, [r7, #4]
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800749e:	4629      	mov	r1, r5
 80074a0:	028b      	lsls	r3, r1, #10
 80074a2:	4621      	mov	r1, r4
 80074a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074a8:	4621      	mov	r1, r4
 80074aa:	028a      	lsls	r2, r1, #10
 80074ac:	4610      	mov	r0, r2
 80074ae:	4619      	mov	r1, r3
 80074b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b2:	2200      	movs	r2, #0
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	61fa      	str	r2, [r7, #28]
 80074b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074bc:	f7f9 fa72 	bl	80009a4 <__aeabi_uldivmod>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4613      	mov	r3, r2
 80074c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80074c8:	4b0b      	ldr	r3, [pc, #44]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	3301      	adds	r3, #1
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80074d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074e2:	e002      	b.n	80074ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074e4:	4b05      	ldr	r3, [pc, #20]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x204>)
 80074e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3750      	adds	r7, #80	@ 0x50
 80074f0:	46bd      	mov	sp, r7
 80074f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f6:	bf00      	nop
 80074f8:	40023800 	.word	0x40023800
 80074fc:	00f42400 	.word	0x00f42400
 8007500:	007a1200 	.word	0x007a1200

08007504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007508:	4b03      	ldr	r3, [pc, #12]	@ (8007518 <HAL_RCC_GetHCLKFreq+0x14>)
 800750a:	681b      	ldr	r3, [r3, #0]
}
 800750c:	4618      	mov	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000000 	.word	0x20000000

0800751c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007520:	f7ff fff0 	bl	8007504 <HAL_RCC_GetHCLKFreq>
 8007524:	4602      	mov	r2, r0
 8007526:	4b05      	ldr	r3, [pc, #20]	@ (800753c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	0a9b      	lsrs	r3, r3, #10
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	4903      	ldr	r1, [pc, #12]	@ (8007540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007532:	5ccb      	ldrb	r3, [r1, r3]
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007538:	4618      	mov	r0, r3
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40023800 	.word	0x40023800
 8007540:	08009688 	.word	0x08009688

08007544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007548:	f7ff ffdc 	bl	8007504 <HAL_RCC_GetHCLKFreq>
 800754c:	4602      	mov	r2, r0
 800754e:	4b05      	ldr	r3, [pc, #20]	@ (8007564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	0b5b      	lsrs	r3, r3, #13
 8007554:	f003 0307 	and.w	r3, r3, #7
 8007558:	4903      	ldr	r1, [pc, #12]	@ (8007568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800755a:	5ccb      	ldrb	r3, [r1, r3]
 800755c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007560:	4618      	mov	r0, r3
 8007562:	bd80      	pop	{r7, pc}
 8007564:	40023800 	.word	0x40023800
 8007568:	08009688 	.word	0x08009688

0800756c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e07b      	b.n	8007676 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	d108      	bne.n	8007598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800758e:	d009      	beq.n	80075a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	61da      	str	r2, [r3, #28]
 8007596:	e005      	b.n	80075a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fc f82a 	bl	8003618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	431a      	orrs	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007628:	ea42 0103 	orr.w	r1, r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007630:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	0c1b      	lsrs	r3, r3, #16
 8007642:	f003 0104 	and.w	r1, r3, #4
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764a:	f003 0210 	and.w	r2, r3, #16
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007664:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	099b      	lsrs	r3, r3, #6
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10f      	bne.n	80076c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	099b      	lsrs	r3, r3, #6
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d004      	beq.n	80076c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
    return;
 80076c2:	e0d7      	b.n	8007874 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_SPI_IRQHandler+0x66>
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	09db      	lsrs	r3, r3, #7
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
    return;
 80076e4:	e0c6      	b.n	8007874 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10c      	bne.n	800770c <HAL_SPI_IRQHandler+0x8c>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	099b      	lsrs	r3, r3, #6
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	0a1b      	lsrs	r3, r3, #8
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 80b4 	beq.w	8007874 <HAL_SPI_IRQHandler+0x1f4>
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80ad 	beq.w	8007874 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	099b      	lsrs	r3, r3, #6
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d023      	beq.n	800776e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b03      	cmp	r3, #3
 8007730:	d011      	beq.n	8007756 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007736:	f043 0204 	orr.w	r2, r3, #4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800773e:	2300      	movs	r3, #0
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	e00b      	b.n	800776e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007756:	2300      	movs	r3, #0
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	613b      	str	r3, [r7, #16]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	693b      	ldr	r3, [r7, #16]
        return;
 800776c:	e082      	b.n	8007874 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	095b      	lsrs	r3, r3, #5
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d014      	beq.n	80077a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777e:	f043 0201 	orr.w	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00c      	beq.n	80077ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b4:	f043 0208 	orr.w	r2, r3, #8
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077bc:	2300      	movs	r3, #0
 80077be:	60bb      	str	r3, [r7, #8]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d04f      	beq.n	8007872 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <HAL_SPI_IRQHandler+0x17e>
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d034      	beq.n	8007868 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0203 	bic.w	r2, r2, #3
 800780c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d011      	beq.n	800783a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800781a:	4a18      	ldr	r2, [pc, #96]	@ (800787c <HAL_SPI_IRQHandler+0x1fc>)
 800781c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007822:	4618      	mov	r0, r3
 8007824:	f7fc fdd2 	bl	80043cc <HAL_DMA_Abort_IT>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007832:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007846:	4a0d      	ldr	r2, [pc, #52]	@ (800787c <HAL_SPI_IRQHandler+0x1fc>)
 8007848:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800784e:	4618      	mov	r0, r3
 8007850:	f7fc fdbc 	bl	80043cc <HAL_DMA_Abort_IT>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800785e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007866:	e003      	b.n	8007870 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f809 	bl	8007880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800786e:	e000      	b.n	8007872 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007870:	bf00      	nop
    return;
 8007872:	bf00      	nop
  }
}
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	08007895 	.word	0x08007895

08007880 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff ffe6 	bl	8007880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e041      	b.n	8007952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fc f80a 	bl	80038fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f000 fb00 	bl	8007f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	d001      	beq.n	8007974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e04e      	b.n	8007a12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a23      	ldr	r2, [pc, #140]	@ (8007a20 <HAL_TIM_Base_Start_IT+0xc4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d022      	beq.n	80079dc <HAL_TIM_Base_Start_IT+0x80>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799e:	d01d      	beq.n	80079dc <HAL_TIM_Base_Start_IT+0x80>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007a24 <HAL_TIM_Base_Start_IT+0xc8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d018      	beq.n	80079dc <HAL_TIM_Base_Start_IT+0x80>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007a28 <HAL_TIM_Base_Start_IT+0xcc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <HAL_TIM_Base_Start_IT+0x80>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1c      	ldr	r2, [pc, #112]	@ (8007a2c <HAL_TIM_Base_Start_IT+0xd0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00e      	beq.n	80079dc <HAL_TIM_Base_Start_IT+0x80>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007a30 <HAL_TIM_Base_Start_IT+0xd4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d009      	beq.n	80079dc <HAL_TIM_Base_Start_IT+0x80>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a19      	ldr	r2, [pc, #100]	@ (8007a34 <HAL_TIM_Base_Start_IT+0xd8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d004      	beq.n	80079dc <HAL_TIM_Base_Start_IT+0x80>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a18      	ldr	r2, [pc, #96]	@ (8007a38 <HAL_TIM_Base_Start_IT+0xdc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d111      	bne.n	8007a00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b06      	cmp	r3, #6
 80079ec:	d010      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0201 	orr.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fe:	e007      	b.n	8007a10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40000400 	.word	0x40000400
 8007a28:	40000800 	.word	0x40000800
 8007a2c:	40000c00 	.word	0x40000c00
 8007a30:	40010400 	.word	0x40010400
 8007a34:	40014000 	.word	0x40014000
 8007a38:	40001800 	.word	0x40001800

08007a3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e097      	b.n	8007b80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7fb fe27 	bl	80036b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6812      	ldr	r2, [r2, #0]
 8007a7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a80:	f023 0307 	bic.w	r3, r3, #7
 8007a84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f000 fa35 	bl	8007f00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007adc:	f023 030c 	bic.w	r3, r3, #12
 8007ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	021b      	lsls	r3, r3, #8
 8007af8:	4313      	orrs	r3, r2
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	011a      	lsls	r2, r3, #4
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	031b      	lsls	r3, r3, #12
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007b22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ba0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ba8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bb0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d110      	bne.n	8007bda <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d102      	bne.n	8007bc4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bbe:	7b7b      	ldrb	r3, [r7, #13]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d001      	beq.n	8007bc8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e089      	b.n	8007cdc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd8:	e031      	b.n	8007c3e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d110      	bne.n	8007c02 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d102      	bne.n	8007bec <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007be6:	7b3b      	ldrb	r3, [r7, #12]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d001      	beq.n	8007bf0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e075      	b.n	8007cdc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c00:	e01d      	b.n	8007c3e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d108      	bne.n	8007c1a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d105      	bne.n	8007c1a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c0e:	7b7b      	ldrb	r3, [r7, #13]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d102      	bne.n	8007c1a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c14:	7b3b      	ldrb	r3, [r7, #12]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d001      	beq.n	8007c1e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e05e      	b.n	8007cdc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2202      	movs	r2, #2
 8007c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_TIM_Encoder_Start_IT+0xc4>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d010      	beq.n	8007c6c <HAL_TIM_Encoder_Start_IT+0xe4>
 8007c4a:	e01f      	b.n	8007c8c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2201      	movs	r2, #1
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 f9ff 	bl	8008058 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0202 	orr.w	r2, r2, #2
 8007c68:	60da      	str	r2, [r3, #12]
      break;
 8007c6a:	e02e      	b.n	8007cca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	2104      	movs	r1, #4
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f9ef 	bl	8008058 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0204 	orr.w	r2, r2, #4
 8007c88:	60da      	str	r2, [r3, #12]
      break;
 8007c8a:	e01e      	b.n	8007cca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2201      	movs	r2, #1
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 f9df 	bl	8008058 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	2104      	movs	r1, #4
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f9d8 	bl	8008058 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0202 	orr.w	r2, r2, #2
 8007cb6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0204 	orr.w	r2, r2, #4
 8007cc6:	60da      	str	r2, [r3, #12]
      break;
 8007cc8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d020      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d01b      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0202 	mvn.w	r2, #2
 8007d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fa fc58 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 8007d34:	e005      	b.n	8007d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f8c4 	bl	8007ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f8cb 	bl	8007ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d020      	beq.n	8007d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01b      	beq.n	8007d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0204 	mvn.w	r2, #4
 8007d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fa fc32 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 8007d80:	e005      	b.n	8007d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f89e 	bl	8007ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f8a5 	bl	8007ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d020      	beq.n	8007de0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01b      	beq.n	8007de0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0208 	mvn.w	r2, #8
 8007db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fa fc0c 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f878 	bl	8007ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f87f 	bl	8007ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d020      	beq.n	8007e2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01b      	beq.n	8007e2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0210 	mvn.w	r2, #16
 8007dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2208      	movs	r2, #8
 8007e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fa fbe6 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 8007e18:	e005      	b.n	8007e26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f852 	bl	8007ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f859 	bl	8007ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00c      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f06f 0201 	mvn.w	r2, #1
 8007e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fa fb8e 	bl	800256c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00c      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f99e 	bl	80081b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00c      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f82a 	bl	8007eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00c      	beq.n	8007ebc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0220 	mvn.w	r2, #32
 8007eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f970 	bl	800819c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a46      	ldr	r2, [pc, #280]	@ (800802c <TIM_Base_SetConfig+0x12c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1e:	d00f      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a43      	ldr	r2, [pc, #268]	@ (8008030 <TIM_Base_SetConfig+0x130>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a42      	ldr	r2, [pc, #264]	@ (8008034 <TIM_Base_SetConfig+0x134>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a41      	ldr	r2, [pc, #260]	@ (8008038 <TIM_Base_SetConfig+0x138>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a40      	ldr	r2, [pc, #256]	@ (800803c <TIM_Base_SetConfig+0x13c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d108      	bne.n	8007f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a35      	ldr	r2, [pc, #212]	@ (800802c <TIM_Base_SetConfig+0x12c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d02b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f60:	d027      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a32      	ldr	r2, [pc, #200]	@ (8008030 <TIM_Base_SetConfig+0x130>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d023      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a31      	ldr	r2, [pc, #196]	@ (8008034 <TIM_Base_SetConfig+0x134>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d01f      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a30      	ldr	r2, [pc, #192]	@ (8008038 <TIM_Base_SetConfig+0x138>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d01b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800803c <TIM_Base_SetConfig+0x13c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d017      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a2e      	ldr	r2, [pc, #184]	@ (8008040 <TIM_Base_SetConfig+0x140>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8008044 <TIM_Base_SetConfig+0x144>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00f      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2c      	ldr	r2, [pc, #176]	@ (8008048 <TIM_Base_SetConfig+0x148>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800804c <TIM_Base_SetConfig+0x14c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d007      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8008050 <TIM_Base_SetConfig+0x150>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d003      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a29      	ldr	r2, [pc, #164]	@ (8008054 <TIM_Base_SetConfig+0x154>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d108      	bne.n	8007fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a10      	ldr	r2, [pc, #64]	@ (800802c <TIM_Base_SetConfig+0x12c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d003      	beq.n	8007ff8 <TIM_Base_SetConfig+0xf8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a12      	ldr	r2, [pc, #72]	@ (800803c <TIM_Base_SetConfig+0x13c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d103      	bne.n	8008000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b01      	cmp	r3, #1
 8008010:	d105      	bne.n	800801e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f023 0201 	bic.w	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	611a      	str	r2, [r3, #16]
  }
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400
 8008048:	40014800 	.word	0x40014800
 800804c:	40001800 	.word	0x40001800
 8008050:	40001c00 	.word	0x40001c00
 8008054:	40002000 	.word	0x40002000

08008058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f003 031f 	and.w	r3, r3, #31
 800806a:	2201      	movs	r2, #1
 800806c:	fa02 f303 	lsl.w	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a1a      	ldr	r2, [r3, #32]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	43db      	mvns	r3, r3
 800807a:	401a      	ands	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a1a      	ldr	r2, [r3, #32]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	fa01 f303 	lsl.w	r3, r1, r3
 8008090:	431a      	orrs	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	621a      	str	r2, [r3, #32]
}
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
	...

080080a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e05a      	b.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a21      	ldr	r2, [pc, #132]	@ (8008180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d022      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008108:	d01d      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1d      	ldr	r2, [pc, #116]	@ (8008184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d018      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a1b      	ldr	r2, [pc, #108]	@ (8008188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d013      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a1a      	ldr	r2, [pc, #104]	@ (800818c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00e      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a18      	ldr	r2, [pc, #96]	@ (8008190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d009      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a17      	ldr	r2, [pc, #92]	@ (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d004      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a15      	ldr	r2, [pc, #84]	@ (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d10c      	bne.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800814c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	4313      	orrs	r3, r2
 8008156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010000 	.word	0x40010000
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	40000c00 	.word	0x40000c00
 8008190:	40010400 	.word	0x40010400
 8008194:	40014000 	.word	0x40014000
 8008198:	40001800 	.word	0x40001800

0800819c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e042      	b.n	800825c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fb fbcc 	bl	8003988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2224      	movs	r2, #36	@ 0x24
 80081f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fdf5 	bl	8008df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800821c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695a      	ldr	r2, [r3, #20]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800822c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800823c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08a      	sub	sp, #40	@ 0x28
 8008268:	af02      	add	r7, sp, #8
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b20      	cmp	r3, #32
 8008282:	d175      	bne.n	8008370 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <HAL_UART_Transmit+0x2c>
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e06e      	b.n	8008372 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2221      	movs	r2, #33	@ 0x21
 800829e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082a2:	f7fb fd03 	bl	8003cac <HAL_GetTick>
 80082a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	88fa      	ldrh	r2, [r7, #6]
 80082b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082bc:	d108      	bne.n	80082d0 <HAL_UART_Transmit+0x6c>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d104      	bne.n	80082d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	e003      	b.n	80082d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082d8:	e02e      	b.n	8008338 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2200      	movs	r2, #0
 80082e2:	2180      	movs	r1, #128	@ 0x80
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fb91 	bl	8008a0c <UART_WaitOnFlagUntilTimeout>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e03a      	b.n	8008372 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10b      	bne.n	800831a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	3302      	adds	r3, #2
 8008316:	61bb      	str	r3, [r7, #24]
 8008318:	e007      	b.n	800832a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	3301      	adds	r3, #1
 8008328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800832e:	b29b      	uxth	r3, r3
 8008330:	3b01      	subs	r3, #1
 8008332:	b29a      	uxth	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1cb      	bne.n	80082da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2200      	movs	r2, #0
 800834a:	2140      	movs	r1, #64	@ 0x40
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fb5d 	bl	8008a0c <UART_WaitOnFlagUntilTimeout>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e006      	b.n	8008372 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	e000      	b.n	8008372 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008370:	2302      	movs	r3, #2
  }
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b08a      	sub	sp, #40	@ 0x28
 800837e:	af02      	add	r7, sp, #8
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	603b      	str	r3, [r7, #0]
 8008386:	4613      	mov	r3, r2
 8008388:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b20      	cmp	r3, #32
 8008398:	f040 8081 	bne.w	800849e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <HAL_UART_Receive+0x2e>
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e079      	b.n	80084a0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2222      	movs	r2, #34	@ 0x22
 80083b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083c0:	f7fb fc74 	bl	8003cac <HAL_GetTick>
 80083c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	88fa      	ldrh	r2, [r7, #6]
 80083ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083da:	d108      	bne.n	80083ee <HAL_UART_Receive+0x74>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d104      	bne.n	80083ee <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80083e4:	2300      	movs	r3, #0
 80083e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	61bb      	str	r3, [r7, #24]
 80083ec:	e003      	b.n	80083f6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80083f6:	e047      	b.n	8008488 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2200      	movs	r2, #0
 8008400:	2120      	movs	r1, #32
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 fb02 	bl	8008a0c <UART_WaitOnFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2220      	movs	r2, #32
 8008412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e042      	b.n	80084a0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10c      	bne.n	800843a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	b29b      	uxth	r3, r3
 8008428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800842c:	b29a      	uxth	r2, r3
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	3302      	adds	r3, #2
 8008436:	61bb      	str	r3, [r7, #24]
 8008438:	e01f      	b.n	800847a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008442:	d007      	beq.n	8008454 <HAL_UART_Receive+0xda>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <HAL_UART_Receive+0xe8>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	b2da      	uxtb	r2, r3
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	e008      	b.n	8008474 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800846e:	b2da      	uxtb	r2, r3
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	3301      	adds	r3, #1
 8008478:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1b2      	bne.n	80083f8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2220      	movs	r2, #32
 8008496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	e000      	b.n	80084a0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800849e:	2302      	movs	r3, #2
  }
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3720      	adds	r7, #32
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b0ba      	sub	sp, #232	@ 0xe8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80084e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10f      	bne.n	800850e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d009      	beq.n	800850e <HAL_UART_IRQHandler+0x66>
 80084fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fbb8 	bl	8008c7c <UART_Receive_IT>
      return;
 800850c:	e25b      	b.n	80089c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800850e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 80de 	beq.w	80086d4 <HAL_UART_IRQHandler+0x22c>
 8008518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d106      	bne.n	8008532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008528:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 80d1 	beq.w	80086d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00b      	beq.n	8008556 <HAL_UART_IRQHandler+0xae>
 800853e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008546:	2b00      	cmp	r3, #0
 8008548:	d005      	beq.n	8008556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854e:	f043 0201 	orr.w	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855a:	f003 0304 	and.w	r3, r3, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <HAL_UART_IRQHandler+0xd2>
 8008562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008572:	f043 0202 	orr.w	r2, r3, #2
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800857a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <HAL_UART_IRQHandler+0xf6>
 8008586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d005      	beq.n	800859e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008596:	f043 0204 	orr.w	r2, r3, #4
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800859e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d011      	beq.n	80085ce <HAL_UART_IRQHandler+0x126>
 80085aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d105      	bne.n	80085c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c6:	f043 0208 	orr.w	r2, r3, #8
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 81f2 	beq.w	80089bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085dc:	f003 0320 	and.w	r3, r3, #32
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <HAL_UART_IRQHandler+0x14e>
 80085e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e8:	f003 0320 	and.w	r3, r3, #32
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fb43 	bl	8008c7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008600:	2b40      	cmp	r3, #64	@ 0x40
 8008602:	bf0c      	ite	eq
 8008604:	2301      	moveq	r3, #1
 8008606:	2300      	movne	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b00      	cmp	r3, #0
 8008618:	d103      	bne.n	8008622 <HAL_UART_IRQHandler+0x17a>
 800861a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800861e:	2b00      	cmp	r3, #0
 8008620:	d04f      	beq.n	80086c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa4b 	bl	8008abe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008632:	2b40      	cmp	r3, #64	@ 0x40
 8008634:	d141      	bne.n	80086ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3314      	adds	r3, #20
 800863c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800864c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3314      	adds	r3, #20
 800865e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008662:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800866e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800867a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1d9      	bne.n	8008636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d013      	beq.n	80086b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868e:	4a7e      	ldr	r2, [pc, #504]	@ (8008888 <HAL_UART_IRQHandler+0x3e0>)
 8008690:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008696:	4618      	mov	r0, r3
 8008698:	f7fb fe98 	bl	80043cc <HAL_DMA_Abort_IT>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d016      	beq.n	80086d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b0:	e00e      	b.n	80086d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f994 	bl	80089e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	e00a      	b.n	80086d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f990 	bl	80089e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c0:	e006      	b.n	80086d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f98c 	bl	80089e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80086ce:	e175      	b.n	80089bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	bf00      	nop
    return;
 80086d2:	e173      	b.n	80089bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d8:	2b01      	cmp	r3, #1
 80086da:	f040 814f 	bne.w	800897c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e2:	f003 0310 	and.w	r3, r3, #16
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 8148 	beq.w	800897c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 8141 	beq.w	800897c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086fa:	2300      	movs	r3, #0
 80086fc:	60bb      	str	r3, [r7, #8]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	60bb      	str	r3, [r7, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	60bb      	str	r3, [r7, #8]
 800870e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b40      	cmp	r3, #64	@ 0x40
 800871c:	f040 80b6 	bne.w	800888c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800872c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8145 	beq.w	80089c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800873a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800873e:	429a      	cmp	r2, r3
 8008740:	f080 813e 	bcs.w	80089c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800874a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008756:	f000 8088 	beq.w	800886a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	330c      	adds	r3, #12
 8008760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008770:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008786:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800878a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008792:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800879e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1d9      	bne.n	800875a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3314      	adds	r3, #20
 80087ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087b8:	f023 0301 	bic.w	r3, r3, #1
 80087bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3314      	adds	r3, #20
 80087c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e1      	bne.n	80087a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3314      	adds	r3, #20
 80087e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3314      	adds	r3, #20
 8008802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008808:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800880c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e3      	bne.n	80087e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800883a:	f023 0310 	bic.w	r3, r3, #16
 800883e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	330c      	adds	r3, #12
 8008848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800884c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800884e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008852:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800885a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e3      	bne.n	8008828 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008864:	4618      	mov	r0, r3
 8008866:	f7fb fd41 	bl	80042ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008878:	b29b      	uxth	r3, r3
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	b29b      	uxth	r3, r3
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f8b7 	bl	80089f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008886:	e09b      	b.n	80089c0 <HAL_UART_IRQHandler+0x518>
 8008888:	08008b85 	.word	0x08008b85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008894:	b29b      	uxth	r3, r3
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 808e 	beq.w	80089c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80088a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8089 	beq.w	80089c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	330c      	adds	r3, #12
 80088b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	330c      	adds	r3, #12
 80088d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80088d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80088d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e3      	bne.n	80088b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3314      	adds	r3, #20
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	623b      	str	r3, [r7, #32]
   return(result);
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3314      	adds	r3, #20
 800890a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800890e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e3      	bne.n	80088ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	330c      	adds	r3, #12
 8008936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0310 	bic.w	r3, r3, #16
 8008946:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	330c      	adds	r3, #12
 8008950:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008954:	61fa      	str	r2, [r7, #28]
 8008956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	69b9      	ldr	r1, [r7, #24]
 800895a:	69fa      	ldr	r2, [r7, #28]
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	617b      	str	r3, [r7, #20]
   return(result);
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e3      	bne.n	8008930 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800896e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f83d 	bl	80089f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800897a:	e023      	b.n	80089c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800897c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008984:	2b00      	cmp	r3, #0
 8008986:	d009      	beq.n	800899c <HAL_UART_IRQHandler+0x4f4>
 8008988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800898c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f909 	bl	8008bac <UART_Transmit_IT>
    return;
 800899a:	e014      	b.n	80089c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800899c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00e      	beq.n	80089c6 <HAL_UART_IRQHandler+0x51e>
 80089a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d008      	beq.n	80089c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f949 	bl	8008c4c <UART_EndTransmit_IT>
    return;
 80089ba:	e004      	b.n	80089c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80089bc:	bf00      	nop
 80089be:	e002      	b.n	80089c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80089c0:	bf00      	nop
 80089c2:	e000      	b.n	80089c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80089c4:	bf00      	nop
  }
}
 80089c6:	37e8      	adds	r7, #232	@ 0xe8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a1c:	e03b      	b.n	8008a96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a24:	d037      	beq.n	8008a96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a26:	f7fb f941 	bl	8003cac <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	6a3a      	ldr	r2, [r7, #32]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d302      	bcc.n	8008a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e03a      	b.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d023      	beq.n	8008a96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2b80      	cmp	r3, #128	@ 0x80
 8008a52:	d020      	beq.n	8008a96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b40      	cmp	r3, #64	@ 0x40
 8008a58:	d01d      	beq.n	8008a96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d116      	bne.n	8008a96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 f81d 	bl	8008abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2208      	movs	r2, #8
 8008a88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e00f      	b.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	bf0c      	ite	eq
 8008aa6:	2301      	moveq	r3, #1
 8008aa8:	2300      	movne	r3, #0
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d0b4      	beq.n	8008a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b095      	sub	sp, #84	@ 0x54
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	330c      	adds	r3, #12
 8008acc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	330c      	adds	r3, #12
 8008ae4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ae6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e5      	bne.n	8008ac6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3314      	adds	r3, #20
 8008b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	f023 0301 	bic.w	r3, r3, #1
 8008b10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3314      	adds	r3, #20
 8008b18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e5      	bne.n	8008afa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d119      	bne.n	8008b6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f023 0310 	bic.w	r3, r3, #16
 8008b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	330c      	adds	r3, #12
 8008b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b56:	61ba      	str	r2, [r7, #24]
 8008b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6979      	ldr	r1, [r7, #20]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	613b      	str	r3, [r7, #16]
   return(result);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e5      	bne.n	8008b36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008b78:	bf00      	nop
 8008b7a:	3754      	adds	r7, #84	@ 0x54
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7ff ff1e 	bl	80089e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba4:	bf00      	nop
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b21      	cmp	r3, #33	@ 0x21
 8008bbe:	d13e      	bne.n	8008c3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bc8:	d114      	bne.n	8008bf4 <UART_Transmit_IT+0x48>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d110      	bne.n	8008bf4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	1c9a      	adds	r2, r3, #2
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	621a      	str	r2, [r3, #32]
 8008bf2:	e008      	b.n	8008c06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	1c59      	adds	r1, r3, #1
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	6211      	str	r1, [r2, #32]
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	4619      	mov	r1, r3
 8008c14:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10f      	bne.n	8008c3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e000      	b.n	8008c40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c3e:	2302      	movs	r3, #2
  }
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2220      	movs	r2, #32
 8008c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff fead 	bl	80089cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08c      	sub	sp, #48	@ 0x30
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b22      	cmp	r3, #34	@ 0x22
 8008c8e:	f040 80ae 	bne.w	8008dee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9a:	d117      	bne.n	8008ccc <UART_Receive_IT+0x50>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d113      	bne.n	8008ccc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc4:	1c9a      	adds	r2, r3, #2
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8008cca:	e026      	b.n	8008d1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cde:	d007      	beq.n	8008cf0 <UART_Receive_IT+0x74>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <UART_Receive_IT+0x82>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d106      	bne.n	8008cfe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	e008      	b.n	8008d10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	4619      	mov	r1, r3
 8008d28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d15d      	bne.n	8008dea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0220 	bic.w	r2, r2, #32
 8008d3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	695a      	ldr	r2, [r3, #20]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0201 	bic.w	r2, r2, #1
 8008d5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d135      	bne.n	8008de0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	330c      	adds	r3, #12
 8008d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	613b      	str	r3, [r7, #16]
   return(result);
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	f023 0310 	bic.w	r3, r3, #16
 8008d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	330c      	adds	r3, #12
 8008d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d9a:	623a      	str	r2, [r7, #32]
 8008d9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	69f9      	ldr	r1, [r7, #28]
 8008da0:	6a3a      	ldr	r2, [r7, #32]
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e5      	bne.n	8008d7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b10      	cmp	r3, #16
 8008dba:	d10a      	bne.n	8008dd2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fe0b 	bl	80089f4 <HAL_UARTEx_RxEventCallback>
 8008dde:	e002      	b.n	8008de6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7fa f905 	bl	8002ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e002      	b.n	8008df0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e000      	b.n	8008df0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008dee:	2302      	movs	r3, #2
  }
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3730      	adds	r7, #48	@ 0x30
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dfc:	b0c0      	sub	sp, #256	@ 0x100
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e14:	68d9      	ldr	r1, [r3, #12]
 8008e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	ea40 0301 	orr.w	r3, r0, r1
 8008e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	431a      	orrs	r2, r3
 8008e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e50:	f021 010c 	bic.w	r1, r1, #12
 8008e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e72:	6999      	ldr	r1, [r3, #24]
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	ea40 0301 	orr.w	r3, r0, r1
 8008e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4b8f      	ldr	r3, [pc, #572]	@ (80090c4 <UART_SetConfig+0x2cc>)
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d005      	beq.n	8008e98 <UART_SetConfig+0xa0>
 8008e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	4b8d      	ldr	r3, [pc, #564]	@ (80090c8 <UART_SetConfig+0x2d0>)
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d104      	bne.n	8008ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e98:	f7fe fb54 	bl	8007544 <HAL_RCC_GetPCLK2Freq>
 8008e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ea0:	e003      	b.n	8008eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ea2:	f7fe fb3b 	bl	800751c <HAL_RCC_GetPCLK1Freq>
 8008ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008eb4:	f040 810c 	bne.w	80090d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008eca:	4622      	mov	r2, r4
 8008ecc:	462b      	mov	r3, r5
 8008ece:	1891      	adds	r1, r2, r2
 8008ed0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ed2:	415b      	adcs	r3, r3
 8008ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008eda:	4621      	mov	r1, r4
 8008edc:	eb12 0801 	adds.w	r8, r2, r1
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	eb43 0901 	adc.w	r9, r3, r1
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008efa:	4690      	mov	r8, r2
 8008efc:	4699      	mov	r9, r3
 8008efe:	4623      	mov	r3, r4
 8008f00:	eb18 0303 	adds.w	r3, r8, r3
 8008f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f08:	462b      	mov	r3, r5
 8008f0a:	eb49 0303 	adc.w	r3, r9, r3
 8008f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f26:	460b      	mov	r3, r1
 8008f28:	18db      	adds	r3, r3, r3
 8008f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	eb42 0303 	adc.w	r3, r2, r3
 8008f32:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f3c:	f7f7 fd32 	bl	80009a4 <__aeabi_uldivmod>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4b61      	ldr	r3, [pc, #388]	@ (80090cc <UART_SetConfig+0x2d4>)
 8008f46:	fba3 2302 	umull	r2, r3, r3, r2
 8008f4a:	095b      	lsrs	r3, r3, #5
 8008f4c:	011c      	lsls	r4, r3, #4
 8008f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f60:	4642      	mov	r2, r8
 8008f62:	464b      	mov	r3, r9
 8008f64:	1891      	adds	r1, r2, r2
 8008f66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f68:	415b      	adcs	r3, r3
 8008f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f70:	4641      	mov	r1, r8
 8008f72:	eb12 0a01 	adds.w	sl, r2, r1
 8008f76:	4649      	mov	r1, r9
 8008f78:	eb43 0b01 	adc.w	fp, r3, r1
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	f04f 0300 	mov.w	r3, #0
 8008f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f90:	4692      	mov	sl, r2
 8008f92:	469b      	mov	fp, r3
 8008f94:	4643      	mov	r3, r8
 8008f96:	eb1a 0303 	adds.w	r3, sl, r3
 8008f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8008fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	18db      	adds	r3, r3, r3
 8008fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	eb42 0303 	adc.w	r3, r2, r3
 8008fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008fd2:	f7f7 fce7 	bl	80009a4 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80090cc <UART_SetConfig+0x2d4>)
 8008fde:	fba3 2301 	umull	r2, r3, r3, r1
 8008fe2:	095b      	lsrs	r3, r3, #5
 8008fe4:	2264      	movs	r2, #100	@ 0x64
 8008fe6:	fb02 f303 	mul.w	r3, r2, r3
 8008fea:	1acb      	subs	r3, r1, r3
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008ff2:	4b36      	ldr	r3, [pc, #216]	@ (80090cc <UART_SetConfig+0x2d4>)
 8008ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009000:	441c      	add	r4, r3
 8009002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009006:	2200      	movs	r2, #0
 8009008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800900c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009014:	4642      	mov	r2, r8
 8009016:	464b      	mov	r3, r9
 8009018:	1891      	adds	r1, r2, r2
 800901a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800901c:	415b      	adcs	r3, r3
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009024:	4641      	mov	r1, r8
 8009026:	1851      	adds	r1, r2, r1
 8009028:	6339      	str	r1, [r7, #48]	@ 0x30
 800902a:	4649      	mov	r1, r9
 800902c:	414b      	adcs	r3, r1
 800902e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800903c:	4659      	mov	r1, fp
 800903e:	00cb      	lsls	r3, r1, #3
 8009040:	4651      	mov	r1, sl
 8009042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009046:	4651      	mov	r1, sl
 8009048:	00ca      	lsls	r2, r1, #3
 800904a:	4610      	mov	r0, r2
 800904c:	4619      	mov	r1, r3
 800904e:	4603      	mov	r3, r0
 8009050:	4642      	mov	r2, r8
 8009052:	189b      	adds	r3, r3, r2
 8009054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009058:	464b      	mov	r3, r9
 800905a:	460a      	mov	r2, r1
 800905c:	eb42 0303 	adc.w	r3, r2, r3
 8009060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009070:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009078:	460b      	mov	r3, r1
 800907a:	18db      	adds	r3, r3, r3
 800907c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800907e:	4613      	mov	r3, r2
 8009080:	eb42 0303 	adc.w	r3, r2, r3
 8009084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800908a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800908e:	f7f7 fc89 	bl	80009a4 <__aeabi_uldivmod>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4b0d      	ldr	r3, [pc, #52]	@ (80090cc <UART_SetConfig+0x2d4>)
 8009098:	fba3 1302 	umull	r1, r3, r3, r2
 800909c:	095b      	lsrs	r3, r3, #5
 800909e:	2164      	movs	r1, #100	@ 0x64
 80090a0:	fb01 f303 	mul.w	r3, r1, r3
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	3332      	adds	r3, #50	@ 0x32
 80090aa:	4a08      	ldr	r2, [pc, #32]	@ (80090cc <UART_SetConfig+0x2d4>)
 80090ac:	fba2 2303 	umull	r2, r3, r2, r3
 80090b0:	095b      	lsrs	r3, r3, #5
 80090b2:	f003 0207 	and.w	r2, r3, #7
 80090b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4422      	add	r2, r4
 80090be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090c0:	e106      	b.n	80092d0 <UART_SetConfig+0x4d8>
 80090c2:	bf00      	nop
 80090c4:	40011000 	.word	0x40011000
 80090c8:	40011400 	.word	0x40011400
 80090cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80090de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80090e2:	4642      	mov	r2, r8
 80090e4:	464b      	mov	r3, r9
 80090e6:	1891      	adds	r1, r2, r2
 80090e8:	6239      	str	r1, [r7, #32]
 80090ea:	415b      	adcs	r3, r3
 80090ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090f2:	4641      	mov	r1, r8
 80090f4:	1854      	adds	r4, r2, r1
 80090f6:	4649      	mov	r1, r9
 80090f8:	eb43 0501 	adc.w	r5, r3, r1
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	00eb      	lsls	r3, r5, #3
 8009106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800910a:	00e2      	lsls	r2, r4, #3
 800910c:	4614      	mov	r4, r2
 800910e:	461d      	mov	r5, r3
 8009110:	4643      	mov	r3, r8
 8009112:	18e3      	adds	r3, r4, r3
 8009114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009118:	464b      	mov	r3, r9
 800911a:	eb45 0303 	adc.w	r3, r5, r3
 800911e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800912e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009132:	f04f 0200 	mov.w	r2, #0
 8009136:	f04f 0300 	mov.w	r3, #0
 800913a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800913e:	4629      	mov	r1, r5
 8009140:	008b      	lsls	r3, r1, #2
 8009142:	4621      	mov	r1, r4
 8009144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009148:	4621      	mov	r1, r4
 800914a:	008a      	lsls	r2, r1, #2
 800914c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009150:	f7f7 fc28 	bl	80009a4 <__aeabi_uldivmod>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4b60      	ldr	r3, [pc, #384]	@ (80092dc <UART_SetConfig+0x4e4>)
 800915a:	fba3 2302 	umull	r2, r3, r3, r2
 800915e:	095b      	lsrs	r3, r3, #5
 8009160:	011c      	lsls	r4, r3, #4
 8009162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009166:	2200      	movs	r2, #0
 8009168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800916c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009174:	4642      	mov	r2, r8
 8009176:	464b      	mov	r3, r9
 8009178:	1891      	adds	r1, r2, r2
 800917a:	61b9      	str	r1, [r7, #24]
 800917c:	415b      	adcs	r3, r3
 800917e:	61fb      	str	r3, [r7, #28]
 8009180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009184:	4641      	mov	r1, r8
 8009186:	1851      	adds	r1, r2, r1
 8009188:	6139      	str	r1, [r7, #16]
 800918a:	4649      	mov	r1, r9
 800918c:	414b      	adcs	r3, r1
 800918e:	617b      	str	r3, [r7, #20]
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	f04f 0300 	mov.w	r3, #0
 8009198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800919c:	4659      	mov	r1, fp
 800919e:	00cb      	lsls	r3, r1, #3
 80091a0:	4651      	mov	r1, sl
 80091a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091a6:	4651      	mov	r1, sl
 80091a8:	00ca      	lsls	r2, r1, #3
 80091aa:	4610      	mov	r0, r2
 80091ac:	4619      	mov	r1, r3
 80091ae:	4603      	mov	r3, r0
 80091b0:	4642      	mov	r2, r8
 80091b2:	189b      	adds	r3, r3, r2
 80091b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091b8:	464b      	mov	r3, r9
 80091ba:	460a      	mov	r2, r1
 80091bc:	eb42 0303 	adc.w	r3, r2, r3
 80091c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80091dc:	4649      	mov	r1, r9
 80091de:	008b      	lsls	r3, r1, #2
 80091e0:	4641      	mov	r1, r8
 80091e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091e6:	4641      	mov	r1, r8
 80091e8:	008a      	lsls	r2, r1, #2
 80091ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091ee:	f7f7 fbd9 	bl	80009a4 <__aeabi_uldivmod>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4611      	mov	r1, r2
 80091f8:	4b38      	ldr	r3, [pc, #224]	@ (80092dc <UART_SetConfig+0x4e4>)
 80091fa:	fba3 2301 	umull	r2, r3, r3, r1
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	2264      	movs	r2, #100	@ 0x64
 8009202:	fb02 f303 	mul.w	r3, r2, r3
 8009206:	1acb      	subs	r3, r1, r3
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	3332      	adds	r3, #50	@ 0x32
 800920c:	4a33      	ldr	r2, [pc, #204]	@ (80092dc <UART_SetConfig+0x4e4>)
 800920e:	fba2 2303 	umull	r2, r3, r2, r3
 8009212:	095b      	lsrs	r3, r3, #5
 8009214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009218:	441c      	add	r4, r3
 800921a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800921e:	2200      	movs	r2, #0
 8009220:	673b      	str	r3, [r7, #112]	@ 0x70
 8009222:	677a      	str	r2, [r7, #116]	@ 0x74
 8009224:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009228:	4642      	mov	r2, r8
 800922a:	464b      	mov	r3, r9
 800922c:	1891      	adds	r1, r2, r2
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	415b      	adcs	r3, r3
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009238:	4641      	mov	r1, r8
 800923a:	1851      	adds	r1, r2, r1
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	4649      	mov	r1, r9
 8009240:	414b      	adcs	r3, r1
 8009242:	607b      	str	r3, [r7, #4]
 8009244:	f04f 0200 	mov.w	r2, #0
 8009248:	f04f 0300 	mov.w	r3, #0
 800924c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009250:	4659      	mov	r1, fp
 8009252:	00cb      	lsls	r3, r1, #3
 8009254:	4651      	mov	r1, sl
 8009256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800925a:	4651      	mov	r1, sl
 800925c:	00ca      	lsls	r2, r1, #3
 800925e:	4610      	mov	r0, r2
 8009260:	4619      	mov	r1, r3
 8009262:	4603      	mov	r3, r0
 8009264:	4642      	mov	r2, r8
 8009266:	189b      	adds	r3, r3, r2
 8009268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800926a:	464b      	mov	r3, r9
 800926c:	460a      	mov	r2, r1
 800926e:	eb42 0303 	adc.w	r3, r2, r3
 8009272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	663b      	str	r3, [r7, #96]	@ 0x60
 800927e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009280:	f04f 0200 	mov.w	r2, #0
 8009284:	f04f 0300 	mov.w	r3, #0
 8009288:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800928c:	4649      	mov	r1, r9
 800928e:	008b      	lsls	r3, r1, #2
 8009290:	4641      	mov	r1, r8
 8009292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009296:	4641      	mov	r1, r8
 8009298:	008a      	lsls	r2, r1, #2
 800929a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800929e:	f7f7 fb81 	bl	80009a4 <__aeabi_uldivmod>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4b0d      	ldr	r3, [pc, #52]	@ (80092dc <UART_SetConfig+0x4e4>)
 80092a8:	fba3 1302 	umull	r1, r3, r3, r2
 80092ac:	095b      	lsrs	r3, r3, #5
 80092ae:	2164      	movs	r1, #100	@ 0x64
 80092b0:	fb01 f303 	mul.w	r3, r1, r3
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	3332      	adds	r3, #50	@ 0x32
 80092ba:	4a08      	ldr	r2, [pc, #32]	@ (80092dc <UART_SetConfig+0x4e4>)
 80092bc:	fba2 2303 	umull	r2, r3, r2, r3
 80092c0:	095b      	lsrs	r3, r3, #5
 80092c2:	f003 020f 	and.w	r2, r3, #15
 80092c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4422      	add	r2, r4
 80092ce:	609a      	str	r2, [r3, #8]
}
 80092d0:	bf00      	nop
 80092d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80092d6:	46bd      	mov	sp, r7
 80092d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092dc:	51eb851f 	.word	0x51eb851f

080092e0 <memset>:
 80092e0:	4402      	add	r2, r0
 80092e2:	4603      	mov	r3, r0
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d100      	bne.n	80092ea <memset+0xa>
 80092e8:	4770      	bx	lr
 80092ea:	f803 1b01 	strb.w	r1, [r3], #1
 80092ee:	e7f9      	b.n	80092e4 <memset+0x4>

080092f0 <__libc_init_array>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009328 <__libc_init_array+0x38>)
 80092f4:	4c0d      	ldr	r4, [pc, #52]	@ (800932c <__libc_init_array+0x3c>)
 80092f6:	1b64      	subs	r4, r4, r5
 80092f8:	10a4      	asrs	r4, r4, #2
 80092fa:	2600      	movs	r6, #0
 80092fc:	42a6      	cmp	r6, r4
 80092fe:	d109      	bne.n	8009314 <__libc_init_array+0x24>
 8009300:	4d0b      	ldr	r5, [pc, #44]	@ (8009330 <__libc_init_array+0x40>)
 8009302:	4c0c      	ldr	r4, [pc, #48]	@ (8009334 <__libc_init_array+0x44>)
 8009304:	f000 f826 	bl	8009354 <_init>
 8009308:	1b64      	subs	r4, r4, r5
 800930a:	10a4      	asrs	r4, r4, #2
 800930c:	2600      	movs	r6, #0
 800930e:	42a6      	cmp	r6, r4
 8009310:	d105      	bne.n	800931e <__libc_init_array+0x2e>
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	f855 3b04 	ldr.w	r3, [r5], #4
 8009318:	4798      	blx	r3
 800931a:	3601      	adds	r6, #1
 800931c:	e7ee      	b.n	80092fc <__libc_init_array+0xc>
 800931e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009322:	4798      	blx	r3
 8009324:	3601      	adds	r6, #1
 8009326:	e7f2      	b.n	800930e <__libc_init_array+0x1e>
 8009328:	080096a0 	.word	0x080096a0
 800932c:	080096a0 	.word	0x080096a0
 8009330:	080096a0 	.word	0x080096a0
 8009334:	080096a8 	.word	0x080096a8

08009338 <memcpy>:
 8009338:	440a      	add	r2, r1
 800933a:	4291      	cmp	r1, r2
 800933c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009340:	d100      	bne.n	8009344 <memcpy+0xc>
 8009342:	4770      	bx	lr
 8009344:	b510      	push	{r4, lr}
 8009346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800934a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800934e:	4291      	cmp	r1, r2
 8009350:	d1f9      	bne.n	8009346 <memcpy+0xe>
 8009352:	bd10      	pop	{r4, pc}

08009354 <_init>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	bf00      	nop
 8009358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935a:	bc08      	pop	{r3}
 800935c:	469e      	mov	lr, r3
 800935e:	4770      	bx	lr

08009360 <_fini>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	bf00      	nop
 8009364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009366:	bc08      	pop	{r3}
 8009368:	469e      	mov	lr, r3
 800936a:	4770      	bx	lr
