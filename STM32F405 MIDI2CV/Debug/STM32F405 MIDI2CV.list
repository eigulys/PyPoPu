
STM32F405 MIDI2CV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a84  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08009c0c  08009c0c  0000ac0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f38  08009f38  0000b00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f38  08009f38  0000af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f40  08009f40  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009f40  08009f40  0000af40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08009f48  08009f48  0000af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08009f50  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b00c  2**0
                  CONTENTS
 10 .bss          00000524  2000000c  2000000c  0000b00c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000530  20000530  0000b00c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a462  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000321c  00000000  00000000  0002549e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  000286c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001192  00000000  00000000  00029d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023969  00000000  00000000  0002aeca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001951d  00000000  00000000  0004e833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbead  00000000  00000000  00067d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133bfd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061dc  00000000  00000000  00133c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00139e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009bf4 	.word	0x08009bf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08009bf4 	.word	0x08009bf4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b988 	b.w	8000ccc <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	468e      	mov	lr, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	4688      	mov	r8, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d962      	bls.n	8000ab0 <__udivmoddi4+0xdc>
 80009ea:	fab2 f682 	clz	r6, r2
 80009ee:	b14e      	cbz	r6, 8000a04 <__udivmoddi4+0x30>
 80009f0:	f1c6 0320 	rsb	r3, r6, #32
 80009f4:	fa01 f806 	lsl.w	r8, r1, r6
 80009f8:	fa20 f303 	lsr.w	r3, r0, r3
 80009fc:	40b7      	lsls	r7, r6
 80009fe:	ea43 0808 	orr.w	r8, r3, r8
 8000a02:	40b4      	lsls	r4, r6
 8000a04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a08:	fa1f fc87 	uxth.w	ip, r7
 8000a0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a10:	0c23      	lsrs	r3, r4, #16
 8000a12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d909      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a28:	f080 80ea 	bcs.w	8000c00 <__udivmoddi4+0x22c>
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f240 80e7 	bls.w	8000c00 <__udivmoddi4+0x22c>
 8000a32:	3902      	subs	r1, #2
 8000a34:	443b      	add	r3, r7
 8000a36:	1a9a      	subs	r2, r3, r2
 8000a38:	b2a3      	uxth	r3, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a4a:	459c      	cmp	ip, r3
 8000a4c:	d909      	bls.n	8000a62 <__udivmoddi4+0x8e>
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a54:	f080 80d6 	bcs.w	8000c04 <__udivmoddi4+0x230>
 8000a58:	459c      	cmp	ip, r3
 8000a5a:	f240 80d3 	bls.w	8000c04 <__udivmoddi4+0x230>
 8000a5e:	443b      	add	r3, r7
 8000a60:	3802      	subs	r0, #2
 8000a62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a66:	eba3 030c 	sub.w	r3, r3, ip
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11d      	cbz	r5, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40f3      	lsrs	r3, r6
 8000a70:	2200      	movs	r2, #0
 8000a72:	e9c5 3200 	strd	r3, r2, [r5]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d905      	bls.n	8000a8a <__udivmoddi4+0xb6>
 8000a7e:	b10d      	cbz	r5, 8000a84 <__udivmoddi4+0xb0>
 8000a80:	e9c5 0100 	strd	r0, r1, [r5]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	e7f5      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000a8a:	fab3 f183 	clz	r1, r3
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d146      	bne.n	8000b20 <__udivmoddi4+0x14c>
 8000a92:	4573      	cmp	r3, lr
 8000a94:	d302      	bcc.n	8000a9c <__udivmoddi4+0xc8>
 8000a96:	4282      	cmp	r2, r0
 8000a98:	f200 8105 	bhi.w	8000ca6 <__udivmoddi4+0x2d2>
 8000a9c:	1a84      	subs	r4, r0, r2
 8000a9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d0e5      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000aaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000aae:	e7e2      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	f000 8090 	beq.w	8000bd6 <__udivmoddi4+0x202>
 8000ab6:	fab2 f682 	clz	r6, r2
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f040 80a4 	bne.w	8000c08 <__udivmoddi4+0x234>
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	0c03      	lsrs	r3, r0, #16
 8000ac4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	b2bc      	uxth	r4, r7
 8000acc:	2101      	movs	r1, #1
 8000ace:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ad2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ada:	fb04 f20c 	mul.w	r2, r4, ip
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d907      	bls.n	8000af2 <__udivmoddi4+0x11e>
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x11c>
 8000aea:	429a      	cmp	r2, r3
 8000aec:	f200 80e0 	bhi.w	8000cb0 <__udivmoddi4+0x2dc>
 8000af0:	46c4      	mov	ip, r8
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000af8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000afc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b00:	fb02 f404 	mul.w	r4, r2, r4
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x144>
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x142>
 8000b10:	429c      	cmp	r4, r3
 8000b12:	f200 80ca 	bhi.w	8000caa <__udivmoddi4+0x2d6>
 8000b16:	4602      	mov	r2, r0
 8000b18:	1b1b      	subs	r3, r3, r4
 8000b1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b20:	f1c1 0620 	rsb	r6, r1, #32
 8000b24:	408b      	lsls	r3, r1
 8000b26:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2a:	431f      	orrs	r7, r3
 8000b2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b30:	fa20 f306 	lsr.w	r3, r0, r6
 8000b34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b3c:	4323      	orrs	r3, r4
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	fa1f fc87 	uxth.w	ip, r7
 8000b46:	fbbe f0f9 	udiv	r0, lr, r9
 8000b4a:	0c1c      	lsrs	r4, r3, #16
 8000b4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b5e:	d909      	bls.n	8000b74 <__udivmoddi4+0x1a0>
 8000b60:	193c      	adds	r4, r7, r4
 8000b62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b66:	f080 809c 	bcs.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f240 8099 	bls.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b70:	3802      	subs	r0, #2
 8000b72:	443c      	add	r4, r7
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	fa1f fe83 	uxth.w	lr, r3
 8000b7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b80:	fb09 4413 	mls	r4, r9, r3, r4
 8000b84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x1ce>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b96:	f080 8082 	bcs.w	8000c9e <__udivmoddi4+0x2ca>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	d97f      	bls.n	8000c9e <__udivmoddi4+0x2ca>
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ba6:	eba4 040c 	sub.w	r4, r4, ip
 8000baa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bae:	4564      	cmp	r4, ip
 8000bb0:	4673      	mov	r3, lr
 8000bb2:	46e1      	mov	r9, ip
 8000bb4:	d362      	bcc.n	8000c7c <__udivmoddi4+0x2a8>
 8000bb6:	d05f      	beq.n	8000c78 <__udivmoddi4+0x2a4>
 8000bb8:	b15d      	cbz	r5, 8000bd2 <__udivmoddi4+0x1fe>
 8000bba:	ebb8 0203 	subs.w	r2, r8, r3
 8000bbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000bc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bca:	431e      	orrs	r6, r3
 8000bcc:	40cc      	lsrs	r4, r1
 8000bce:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	e74f      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000bd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bda:	0c01      	lsrs	r1, r0, #16
 8000bdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000be0:	b280      	uxth	r0, r0
 8000be2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000be6:	463b      	mov	r3, r7
 8000be8:	4638      	mov	r0, r7
 8000bea:	463c      	mov	r4, r7
 8000bec:	46b8      	mov	r8, r7
 8000bee:	46be      	mov	lr, r7
 8000bf0:	2620      	movs	r6, #32
 8000bf2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bf6:	eba2 0208 	sub.w	r2, r2, r8
 8000bfa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bfe:	e766      	b.n	8000ace <__udivmoddi4+0xfa>
 8000c00:	4601      	mov	r1, r0
 8000c02:	e718      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c04:	4610      	mov	r0, r2
 8000c06:	e72c      	b.n	8000a62 <__udivmoddi4+0x8e>
 8000c08:	f1c6 0220 	rsb	r2, r6, #32
 8000c0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	40b1      	lsls	r1, r6
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb08 f904 	mul.w	r9, r8, r4
 8000c32:	40b0      	lsls	r0, r6
 8000c34:	4589      	cmp	r9, r1
 8000c36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c3a:	b280      	uxth	r0, r0
 8000c3c:	d93e      	bls.n	8000cbc <__udivmoddi4+0x2e8>
 8000c3e:	1879      	adds	r1, r7, r1
 8000c40:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c44:	d201      	bcs.n	8000c4a <__udivmoddi4+0x276>
 8000c46:	4589      	cmp	r9, r1
 8000c48:	d81f      	bhi.n	8000c8a <__udivmoddi4+0x2b6>
 8000c4a:	eba1 0109 	sub.w	r1, r1, r9
 8000c4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c52:	fb09 f804 	mul.w	r8, r9, r4
 8000c56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c5a:	b292      	uxth	r2, r2
 8000c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d229      	bcs.n	8000cb8 <__udivmoddi4+0x2e4>
 8000c64:	18ba      	adds	r2, r7, r2
 8000c66:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c6a:	d2c4      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c6c:	4542      	cmp	r2, r8
 8000c6e:	d2c2      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c70:	f1a9 0102 	sub.w	r1, r9, #2
 8000c74:	443a      	add	r2, r7
 8000c76:	e7be      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000c78:	45f0      	cmp	r8, lr
 8000c7a:	d29d      	bcs.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c84:	3801      	subs	r0, #1
 8000c86:	46e1      	mov	r9, ip
 8000c88:	e796      	b.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c8a:	eba7 0909 	sub.w	r9, r7, r9
 8000c8e:	4449      	add	r1, r9
 8000c90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c98:	fb09 f804 	mul.w	r8, r9, r4
 8000c9c:	e7db      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c9e:	4673      	mov	r3, lr
 8000ca0:	e77f      	b.n	8000ba2 <__udivmoddi4+0x1ce>
 8000ca2:	4650      	mov	r0, sl
 8000ca4:	e766      	b.n	8000b74 <__udivmoddi4+0x1a0>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e6fd      	b.n	8000aa6 <__udivmoddi4+0xd2>
 8000caa:	443b      	add	r3, r7
 8000cac:	3a02      	subs	r2, #2
 8000cae:	e733      	b.n	8000b18 <__udivmoddi4+0x144>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	443b      	add	r3, r7
 8000cb6:	e71c      	b.n	8000af2 <__udivmoddi4+0x11e>
 8000cb8:	4649      	mov	r1, r9
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000cbc:	eba1 0109 	sub.w	r1, r1, r9
 8000cc0:	46c4      	mov	ip, r8
 8000cc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc6:	fb09 f804 	mul.w	r8, r9, r4
 8000cca:	e7c4      	b.n	8000c56 <__udivmoddi4+0x282>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <_ZN8mMessage12getSysExSizeEv>:
	Channel channel = 0;
	uint8_t data1 = 0;
	uint8_t data2 = 0;

	uint8_t SysExMaxSize;
	 unsigned getSysExSize()  {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
		 unsigned size = unsigned(data2) << 8 | data1;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	78d2      	ldrb	r2, [r2, #3]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
		return size > SysExMaxSize ? SysExMaxSize : size;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	795b      	ldrb	r3, [r3, #5]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	bf28      	it	cs
 8000cf2:	4613      	movcs	r3, r2
	}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_ZN9mSettingsC1Ev>:
	uint8_t sysexArray[];
};

struct mSettings {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	705a      	strb	r2, [r3, #1]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	709a      	strb	r2, [r3, #2]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN8mMessageC1Ev>:
struct mMessage {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	705a      	strb	r2, [r3, #1]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	709a      	strb	r2, [r3, #2]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	70da      	strb	r2, [r3, #3]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	711a      	strb	r2, [r3, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_ZN13MidiInterfaceC1Ev>:
 *
 */

#include "MIDI.h"
#include "stm32f4xx_hal.h"
MidiInterface::MidiInterface() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	33e5      	adds	r3, #229	@ 0xe5
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffc9 	bl	8000d00 <_ZN9mSettingsC1Ev>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	33e8      	adds	r3, #232	@ 0xe8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ffd8 	bl	8000d28 <_ZN8mMessageC1Ev>
	mRunningStatus_TX = InvalidType;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	mRunningStatus_RX = InvalidType;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9

	mPendingMessageIndex = 0;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mPendingMessageExpectedLenght = 0;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

	mCurrentRpnNumber = 0xffff;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d9e:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	mCurrentNrpnNumber = 0xffff;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da8:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2

	mMessage.valid = false;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	mMessage.type = InvalidType;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
	mMessage.channel = 0;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	mMessage.data1 = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
	mMessage.data2 = 0;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	mMessage.SysExMaxSize = Settings.SysExMaxSize;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	mThruFilterMode = Thru::Full;
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000de2:	2101      	movs	r1, #1
 8000de4:	f361 0347 	bfi	r3, r1, #1, #7
 8000de8:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mThruActivated = true;
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4

	mInputChannel = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
	mRunningStatus_RX = InvalidType;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
	mRunningStatus_TX = InvalidType;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	mPendingMessageExpectedLenght = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	mPendingMessageIndex = 0;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mCurrentRpnNumber = 0xffff;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e28:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	mCurrentNrpnNumber = 0xffff;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e32:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
	mThruActivated = false;
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mThruFilterMode = Thru::Off;
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	f892 30e4 	ldrb.w	r3, [r2, #228]	@ 0xe4
 8000e4a:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8000e4e:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
	mNoteOffCallback = 0;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
	mNoteOnCallback = 0;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
	mAfterTouchPolyCallback = 0;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
	mControlChangeCallback = 0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
	mProgramChangeCallback = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
	mAfterTouchChannelCallback = 0;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
	mPitchBendCallback = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
	mSystemExclusiveCallback = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
	mTimeCodeQuarterFrameCallback = 0;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
	mSongPositionCallback = 0;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
	mSongSelectCallback = 0;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
	mTuneRequestCallback = 0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	@ 0x2c
	mClockCallback = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	@ 0x30
	mStartCallback = 0;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	635a      	str	r2, [r3, #52]	@ 0x34
	mContinueCallback = 0;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
	mStopCallback = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	mActiveSensingCallback = 0;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	641a      	str	r2, [r3, #64]	@ 0x40
	mSystemResetCallback = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZN13MidiInterfaceD1Ev>:
MidiInterface::~MidiInterface() {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
}
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>:
 - Input channel set to 1 if no value is specified

 */

void MidiInterface::begin(Channel inChannel, UART_HandleTypeDef *huart_in,
		UART_HandleTypeDef *huart_out) {
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	460b      	mov	r3, r1
 8000eec:	72fb      	strb	r3, [r7, #11]
	serial_in = *huart_in;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	3390      	adds	r3, #144	@ 0x90
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	2248      	movs	r2, #72	@ 0x48
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f008 fe6d 	bl	8009bd8 <memcpy>
	serial_out = *huart_out;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	3348      	adds	r3, #72	@ 0x48
 8000f04:	4611      	mov	r1, r2
 8000f06:	2248      	movs	r2, #72	@ 0x48
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f008 fe65 	bl	8009bd8 <memcpy>
	mInputChannel = inChannel;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	7afa      	ldrb	r2, [r7, #11]
 8000f12:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8

}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZN13MidiInterface4sendE8MidiTypehhh>:
 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */

void MidiInterface::send(MidiType inType, DataByte inData1, DataByte inData2,
		Channel inChannel) {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	4608      	mov	r0, r1
 8000f28:	4611      	mov	r1, r2
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	70fb      	strb	r3, [r7, #3]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70bb      	strb	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
	// Then test if channel is valid
	if (inChannel >= MIDI_CHANNEL_OFF || inChannel == MIDI_CHANNEL_OMNI
 8000f38:	7e3b      	ldrb	r3, [r7, #24]
 8000f3a:	2b10      	cmp	r3, #16
 8000f3c:	d85e      	bhi.n	8000ffc <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
 8000f3e:	7e3b      	ldrb	r3, [r7, #24]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d05b      	beq.n	8000ffc <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
			|| inType < 0x80) {
 8000f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da57      	bge.n	8000ffc <_ZN13MidiInterface4sendE8MidiTypehhh+0xde>
		return; // Don't send anything
	}

	if (inType <= PitchBend)  // Channel messages
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	2be0      	cmp	r3, #224	@ 0xe0
 8000f50:	d84b      	bhi.n	8000fea <_ZN13MidiInterface4sendE8MidiTypehhh+0xcc>
			{
// Protection: remove MSBs on data
		inData1 &= 0x7f;
 8000f52:	78bb      	ldrb	r3, [r7, #2]
 8000f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	70bb      	strb	r3, [r7, #2]
		inData2 &= 0x7f;
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	707b      	strb	r3, [r7, #1]

		StatusByte status = getStatus(inType, inChannel);
 8000f66:	7e3a      	ldrb	r2, [r7, #24]
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f94a 	bl	8001206 <_ZN13MidiInterface9getStatusE8MidiTypeh>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]

		if (Settings.UseRunningStatus) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d014      	beq.n	8000faa <_ZN13MidiInterface4sendE8MidiTypehhh+0x8c>
			if (mRunningStatus_TX != status) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 20da 	ldrb.w	r2, [r3, #218]	@ 0xda
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d017      	beq.n	8000fbc <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
// New message, memorise and send header
				mRunningStatus_TX = status;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				HAL_UART_Transmit(&serial_out, &mRunningStatus_TX, 1,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f103 01da 	add.w	r1, r3, #218	@ 0xda
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f007 fdae 	bl	8008b04 <HAL_UART_Transmit>
 8000fa8:	e008      	b.n	8000fbc <_ZN13MidiInterface4sendE8MidiTypehhh+0x9e>
				MidiTimeout);
			}
		} else {
			// Don't care about running status, send the status byte.
			HAL_UART_Transmit(&serial_out, &status, 1, MidiTimeout);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000fb0:	f107 010f 	add.w	r1, r7, #15
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f007 fda4 	bl	8008b04 <HAL_UART_Transmit>
		}

// Then send data
		HAL_UART_Transmit(&serial_out, &inData1, 1, MidiTimeout);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000fc2:	1cb9      	adds	r1, r7, #2
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f007 fd9c 	bl	8008b04 <HAL_UART_Transmit>
		if (inType != ProgramChange && inType != AfterTouchChannel) {
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fd0:	d015      	beq.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	2bd0      	cmp	r3, #208	@ 0xd0
 8000fd6:	d012      	beq.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
			HAL_UART_Transmit(&serial_out, &inData2, 1, MidiTimeout);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000fde:	1c79      	adds	r1, r7, #1
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f007 fd8e 	bl	8008b04 <HAL_UART_Transmit>
 8000fe8:	e009      	b.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		}
	} else if (inType >= Clock && inType <= SystemReset) {
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2bf7      	cmp	r3, #247	@ 0xf7
 8000fee:	d906      	bls.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		sendRealTime(inType); // System Real-time and 1 byte.
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f8dc 	bl	80011b2 <_ZN13MidiInterface12sendRealTimeE8MidiType>
 8000ffa:	e000      	b.n	8000ffe <_ZN13MidiInterface4sendE8MidiTypehhh+0xe0>
		return; // Don't send anything
 8000ffc:	bf00      	nop
	}
}
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZN13MidiInterface9sendSysExEhPhb>:
 default value for ArrayContainsBoundaries is set to 'false' for compatibility
 with previous versions of the library.
 */

void MidiInterface::sendSysEx(uint8_t inLength, byte *inArray,
		bool inArrayContainsBoundaries) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	461a      	mov	r2, r3
 8001010:	460b      	mov	r3, r1
 8001012:	72fb      	strb	r3, [r7, #11]
 8001014:	4613      	mov	r3, r2
 8001016:	72bb      	strb	r3, [r7, #10]
	bool writeBeginEndBytes = !inArrayContainsBoundaries;
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	75fb      	strb	r3, [r7, #23]
	uint8_t StartByte = 0xf0;
 8001020:	23f0      	movs	r3, #240	@ 0xf0
 8001022:	75bb      	strb	r3, [r7, #22]
	uint8_t EndByte = 0xf7;
 8001024:	23f7      	movs	r3, #247	@ 0xf7
 8001026:	757b      	strb	r3, [r7, #21]
	if (writeBeginEndBytes) {
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <_ZN13MidiInterface9sendSysExEhPhb+0x3c>
		HAL_UART_Transmit(&serial_out, &StartByte, 1, MidiTimeout);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001034:	f107 0116 	add.w	r1, r7, #22
 8001038:	230a      	movs	r3, #10
 800103a:	2201      	movs	r2, #1
 800103c:	f007 fd62 	bl	8008b04 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&serial_out, inArray, sizeof(inLength), MidiTimeout);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001046:	230a      	movs	r3, #10
 8001048:	2201      	movs	r2, #1
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f007 fd5a 	bl	8008b04 <HAL_UART_Transmit>

	if (writeBeginEndBytes) {
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d008      	beq.n	8001068 <_ZN13MidiInterface9sendSysExEhPhb+0x64>
		HAL_UART_Transmit(&serial_out, &EndByte, 1, MidiTimeout);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800105c:	f107 0115 	add.w	r1, r7, #21
 8001060:	230a      	movs	r3, #10
 8001062:	2201      	movs	r2, #1
 8001064:	f007 fd4e 	bl	8008b04 <HAL_UART_Transmit>
	}

	if (Settings.UseRunningStatus) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <_ZN13MidiInterface9sendSysExEhPhb+0x76>
		mRunningStatus_TX = InvalidType;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>:
 \param inValuesNibble    MTC data
 See MIDI Specification for more information.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
		DataByte inValuesNibble) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	4613      	mov	r3, r2
 8001090:	70bb      	strb	r3, [r7, #2]
	byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
 8001092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	73fb      	strb	r3, [r7, #15]
	sendTimeCodeQuarterFrame(data);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f804 	bl	80010c2 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>:
 See MIDI Specification for more information.
 \param inData  if you want to encode directly the nibbles in your program,
 you can send the byte here.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inData) {
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70fb      	strb	r3, [r7, #3]
	uint8_t TimeCodeMessage[] = { TimeCodeQuarterFrame, inData };
 80010ce:	2300      	movs	r3, #0
 80010d0:	81bb      	strh	r3, [r7, #12]
 80010d2:	23f1      	movs	r3, #241	@ 0xf1
 80010d4:	733b      	strb	r3, [r7, #12]
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, TimeCodeMessage, 2, MidiTimeout);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80010e0:	f107 010c 	add.w	r1, r7, #12
 80010e4:	230a      	movs	r3, #10
 80010e6:	2202      	movs	r2, #2
 80010e8:	f007 fd0c 	bl	8008b04 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh+0x3c>
		mRunningStatus_TX = InvalidType;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN13MidiInterface16sendSongPositionEj>:

/*! \brief Send a Song Position Pointer message.
 \param inBeats    The number of beats since the start of the song.
 */

void MidiInterface::sendSongPosition(unsigned inBeats) {
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
	uint8_t SongPositionMessage[] = { SongPosition, (uint8_t) (inBeats & 0x7f),
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2100      	movs	r1, #0
 8001116:	460a      	mov	r2, r1
 8001118:	801a      	strh	r2, [r3, #0]
 800111a:	460a      	mov	r2, r1
 800111c:	709a      	strb	r2, [r3, #2]
 800111e:	23f2      	movs	r3, #242	@ 0xf2
 8001120:	733b      	strb	r3, [r7, #12]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800112a:	b2db      	uxtb	r3, r3
			(uint8_t) ((inBeats >> 7) & 0x7f) };
 800112c:	737b      	strb	r3, [r7, #13]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	09db      	lsrs	r3, r3, #7
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&serial_out, SongPositionMessage, 3, MidiTimeout);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001142:	f107 010c 	add.w	r1, r7, #12
 8001146:	230a      	movs	r3, #10
 8001148:	2203      	movs	r2, #3
 800114a:	f007 fcdb 	bl	8008b04 <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <_ZN13MidiInterface16sendSongPositionEj+0x5a>
		mRunningStatus_TX = InvalidType;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN13MidiInterface14sendSongSelectEh>:

/*! \brief Send a Song Select message */

void MidiInterface::sendSongSelect(DataByte inSongNumber) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
	uint8_t SongSelectMessage[] =
 8001174:	2300      	movs	r3, #0
 8001176:	81bb      	strh	r3, [r7, #12]
 8001178:	23f3      	movs	r3, #243	@ 0xf3
 800117a:	733b      	strb	r3, [r7, #12]
			{ SongSelect, (uint8_t) (inSongNumber & 0x7f) };
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001182:	b2db      	uxtb	r3, r3
 8001184:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&serial_out, SongSelectMessage, 2, MidiTimeout);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800118c:	f107 010c 	add.w	r1, r7, #12
 8001190:	230a      	movs	r3, #10
 8001192:	2202      	movs	r2, #2
 8001194:	f007 fcb6 	bl	8008b04 <HAL_UART_Transmit>
	if (Settings.UseRunningStatus) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <_ZN13MidiInterface14sendSongSelectEh+0x42>
		mRunningStatus_TX = InvalidType;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
	}
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZN13MidiInterface12sendRealTimeE8MidiType>:
 \param inType    The available Real Time types are:
 Start, Stop, Continue, Clock, ActiveSensing and SystemReset.
 @see MidiType
 */

void MidiInterface::sendRealTime(MidiType inType) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70fb      	strb	r3, [r7, #3]
	// Do not invalidate Running Status for real-time messages
	// as they can be interleaved within any message.
	uint8_t RealTimeMessage;
	switch (inType) {
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	3bf8      	subs	r3, #248	@ 0xf8
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	bf8c      	ite	hi
 80011c6:	2201      	movhi	r2, #1
 80011c8:	2200      	movls	r2, #0
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d115      	bne.n	80011fc <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
 80011d0:	22dd      	movs	r2, #221	@ 0xdd
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d009      	beq.n	80011fc <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4a>
	case Start:
	case Stop:
	case Continue:
	case ActiveSensing:
	case SystemReset:
		HAL_UART_Transmit(&serial_out, &RealTimeMessage, 1, MidiTimeout);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80011ee:	f107 010f 	add.w	r1, r7, #15
 80011f2:	230a      	movs	r3, #10
 80011f4:	2201      	movs	r2, #1
 80011f6:	f007 fc85 	bl	8008b04 <HAL_UART_Transmit>
		break;
 80011fa:	e000      	b.n	80011fe <_ZN13MidiInterface12sendRealTimeE8MidiType+0x4c>
	default:
// Invalid Real Time marker
		break;
 80011fc:	bf00      	nop
	}
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZN13MidiInterface9getStatusE8MidiTypeh>:
	mCurrentNrpnNumber = 0xffff;
}

/*! @} */ // End of doc group MIDI Output
// -----------------------------------------------------------------------------
StatusByte MidiInterface::getStatus(MidiType inType, Channel inChannel) {
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	70fb      	strb	r3, [r7, #3]
 8001212:	4613      	mov	r3, r2
 8001214:	70bb      	strb	r3, [r7, #2]
	return ((byte) inType | ((inChannel - 1) & 0x0f));
 8001216:	78bb      	ldrb	r3, [r7, #2]
 8001218:	3b01      	subs	r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	b25b      	sxtb	r3, r3
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	b25a      	sxtb	r2, r3
 8001224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001228:	4313      	orrs	r3, r2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_ZN13MidiInterface4readEv>:
 If the Thru is enabled and the message matches the filter,
 it is sent back on the MIDI output.
 @see see setInputChannel()
 */

bool MidiInterface::read() {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	return read(mInputChannel);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001248:	4619      	mov	r1, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f805 	bl	800125a <_ZN13MidiInterface4readEh>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_ZN13MidiInterface4readEh>:

/*! \brief Read messages on a specified channel.
 */

bool MidiInterface::read(Channel inChannel) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	70fb      	strb	r3, [r7, #3]
	if (inChannel >= MIDI_CHANNEL_OFF)
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	2b10      	cmp	r3, #16
 800126a:	d901      	bls.n	8001270 <_ZN13MidiInterface4readEh+0x16>
		return false; // MIDI Input disabled.
 800126c:	2300      	movs	r3, #0
 800126e:	e020      	b.n	80012b2 <_ZN13MidiInterface4readEh+0x58>

	if (!parse())
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f823 	bl	80012bc <_ZN13MidiInterface5parseEv>
 8001276:	4603      	mov	r3, r0
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <_ZN13MidiInterface4readEh+0x2c>
		return false;
 8001282:	2300      	movs	r3, #0
 8001284:	e015      	b.n	80012b2 <_ZN13MidiInterface4readEh+0x58>

	handleNullVelocityNoteOnAsNoteOff();
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fa5c 	bl	8001744 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>
	bool channelMatch = inputFilter(inChannel);
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fa79 	bl	8001788 <_ZN13MidiInterface11inputFilterEh>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]

	if (channelMatch) {
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <_ZN13MidiInterface4readEh+0x4c>
		launchCallback();
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fb8f 	bl	80019c4 <_ZN13MidiInterface14launchCallbackEv>
	}

	thruFilter(inChannel);
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fdc0 	bl	8001e30 <_ZN13MidiInterface10thruFilterEh>

	return channelMatch;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <_ZN13MidiInterface5parseEv>:
		break;
	}
}
// Private method: MIDI parser

bool MidiInterface::parse() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	byte extracted;
	if (HAL_UART_Receive(&serial_in, &extracted, 1, MidiTimeout) != HAL_OK) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80012ca:	f107 010f 	add.w	r1, r7, #15
 80012ce:	230a      	movs	r3, #10
 80012d0:	2201      	movs	r2, #1
 80012d2:	f007 fca2 	bl	8008c1a <HAL_UART_Receive>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <_ZN13MidiInterface5parseEv+0x2e>
		return false;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e228      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
	// Ignore Undefined




	if (extracted == 0xf9 || extracted == 0xfd) {
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2bf9      	cmp	r3, #249	@ 0xf9
 80012ee:	d002      	beq.n	80012f6 <_ZN13MidiInterface5parseEv+0x3a>
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2bfd      	cmp	r3, #253	@ 0xfd
 80012f4:	d10b      	bne.n	800130e <_ZN13MidiInterface5parseEv+0x52>
		if (Settings.Use1ByteParsing) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <_ZN13MidiInterface5parseEv+0x48>
			return false;
 8001300:	2300      	movs	r3, #0
 8001302:	e21b      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		} else {
			return parse();
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffd9 	bl	80012bc <_ZN13MidiInterface5parseEv>
 800130a:	4603      	mov	r3, r0
 800130c:	e216      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		}
	}

	if (mPendingMessageIndex == 0) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001314:	2b00      	cmp	r3, #0
 8001316:	f040 80f9 	bne.w	800150c <_ZN13MidiInterface5parseEv+0x250>
// Start a new pending message
		mPendingMessage[0] = extracted;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

// Check for running status first
		if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fa9c 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 800132e:	4603      	mov	r3, r0
 8001330:	4618      	mov	r0, r3
 8001332:	f000 facf 	bl	80018d4 <_ZN13MidiInterface16isChannelMessageE8MidiType>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d011      	beq.n	8001360 <_ZN13MidiInterface5parseEv+0xa4>
			// Only these types allow Running Status

			// If the status byte is not received, prepend it
			// to the pending message
			if (extracted < 0x80) {
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0d      	blt.n	8001360 <_ZN13MidiInterface5parseEv+0xa4>
				mPendingMessage[0] = mRunningStatus_RX;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 20d9 	ldrb.w	r2, [r3, #217]	@ 0xd9
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
				mPendingMessage[1] = extracted;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
				mPendingMessageIndex = 1;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf





		switch (getTypeFromStatusByte(mPendingMessage[0])) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fa7d 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 800136c:	4603      	mov	r3, r0
 800136e:	2bff      	cmp	r3, #255	@ 0xff
 8001370:	dc7b      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 8001372:	2bf1      	cmp	r3, #241	@ 0xf1
 8001374:	da1c      	bge.n	80013b0 <_ZN13MidiInterface5parseEv+0xf4>
 8001376:	2bf0      	cmp	r3, #240	@ 0xf0
 8001378:	d06a      	beq.n	8001450 <_ZN13MidiInterface5parseEv+0x194>
 800137a:	2bf0      	cmp	r3, #240	@ 0xf0
 800137c:	dc75      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 800137e:	2be0      	cmp	r3, #224	@ 0xe0
 8001380:	d061      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 8001382:	2be0      	cmp	r3, #224	@ 0xe0
 8001384:	dc71      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 8001386:	2bd0      	cmp	r3, #208	@ 0xd0
 8001388:	d058      	beq.n	800143c <_ZN13MidiInterface5parseEv+0x180>
 800138a:	2bd0      	cmp	r3, #208	@ 0xd0
 800138c:	dc6d      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 800138e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001390:	d054      	beq.n	800143c <_ZN13MidiInterface5parseEv+0x180>
 8001392:	2bc0      	cmp	r3, #192	@ 0xc0
 8001394:	dc69      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 8001396:	2bb0      	cmp	r3, #176	@ 0xb0
 8001398:	d055      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 800139a:	2bb0      	cmp	r3, #176	@ 0xb0
 800139c:	dc65      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 800139e:	2ba0      	cmp	r3, #160	@ 0xa0
 80013a0:	d051      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 80013a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80013a4:	dc61      	bgt.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 80013a6:	2b80      	cmp	r3, #128	@ 0x80
 80013a8:	d04d      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 80013aa:	2b90      	cmp	r3, #144	@ 0x90
 80013ac:	d04b      	beq.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 80013ae:	e05c      	b.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
 80013b0:	3bf1      	subs	r3, #241	@ 0xf1
 80013b2:	2201      	movs	r2, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	f646 62a0 	movw	r2, #28320	@ 0x6ea0
 80013bc:	401a      	ands	r2, r3
 80013be:	2a00      	cmp	r2, #0
 80013c0:	bf14      	ite	ne
 80013c2:	2201      	movne	r2, #1
 80013c4:	2200      	moveq	r2, #0
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d112      	bne.n	80013f2 <_ZN13MidiInterface5parseEv+0x136>
 80013cc:	f003 0205 	and.w	r2, r3, #5
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2201      	movne	r2, #1
 80013d6:	2200      	moveq	r2, #0
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	2a00      	cmp	r2, #0
 80013dc:	d12e      	bne.n	800143c <_ZN13MidiInterface5parseEv+0x180>
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d12a      	bne.n	8001446 <_ZN13MidiInterface5parseEv+0x18a>
 80013f0:	e03b      	b.n	800146a <_ZN13MidiInterface5parseEv+0x1ae>
		case Clock:
		case ActiveSensing:
		case SystemReset:
		case TuneRequest:
			// Handle the message type directly here.
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fa34 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
			mMessage.channel = 0;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
			mMessage.data1 = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
			mMessage.data2 = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
			mMessage.valid = true;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

			// Do not reset all input attributes, Running Status must remain unchanged.
			// We still need to reset these
			mPendingMessageIndex = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

			return true;
 8001438:	2301      	movs	r3, #1
 800143a:	e17f      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
			// 2 bytes messages
		case ProgramChange:
		case AfterTouchChannel:
		case TimeCodeQuarterFrame:
		case SongSelect:
			mPendingMessageExpectedLenght = 2;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			break;
 8001444:	e016      	b.n	8001474 <_ZN13MidiInterface5parseEv+0x1b8>
		case NoteOff:
		case ControlChange:
		case PitchBend:
		case AfterTouchPoly:
		case SongPosition:
			mPendingMessageExpectedLenght = 3;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			break;
 800144e:	e011      	b.n	8001474 <_ZN13MidiInterface5parseEv+0x1b8>

		case SystemExclusive:
			// The message can be any lenght
			// between 3 and Settings.SysExMaxSize bytes
			mPendingMessageExpectedLenght = Settings.SysExMaxSize;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			mRunningStatus_RX = InvalidType;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
			mMessage.sysexArray[0] = SystemExclusive;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22f0      	movs	r2, #240	@ 0xf0
 8001464:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
			break;
 8001468:	e004      	b.n	8001474 <_ZN13MidiInterface5parseEv+0x1b8>

		case InvalidType:
		default:
			// This is obviously wrong. Let's get the hell out'a here.
			resetInput();
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f9b1 	bl	80017d2 <_ZN13MidiInterface10resetInputEv>
			return false;
 8001470:	2300      	movs	r3, #0
 8001472:	e163      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
			break;
		}

		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8001482:	3b01      	subs	r3, #1
 8001484:	429a      	cmp	r2, r3
 8001486:	db2d      	blt.n	80014e4 <_ZN13MidiInterface5parseEv+0x228>
			// Reception complete
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f9e9 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
			mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fa04 	bl	80018b2 <_ZN13MidiInterface24getChannelFromStatusByteEh>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
			mMessage.data1 = mPendingMessage[1];
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 20dc 	ldrb.w	r2, [r3, #220]	@ 0xdc
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
			mMessage.data2 = 0;			// Completed new message has 1 data byte
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

			mPendingMessageIndex = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
			mMessage.valid = true;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
			return true;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e12b      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Waiting for more data
			mPendingMessageIndex++;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80014ea:	3301      	adds	r3, #1
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
		}

		if (Settings.Use1ByteParsing) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <_ZN13MidiInterface5parseEv+0x246>
			// Message is not complete.
			return false;
 80014fe:	2300      	movs	r3, #0
 8001500:	e11c      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Call the parser recursively
			// to parse the rest of the message.
			return parse();
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff feda 	bl	80012bc <_ZN13MidiInterface5parseEv>
 8001508:	4603      	mov	r3, r0
 800150a:	e117      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		}
	} else {
// First, test if this is a status byte
		if (extracted >= 0x80) {
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	da67      	bge.n	80015e4 <_ZN13MidiInterface5parseEv+0x328>
			// Reception of status bytes in the middle of an uncompleted message
			// are allowed only for interleaved Real Time message or EOX
			switch (extracted) {
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	3bf7      	subs	r3, #247	@ 0xf7
 8001518:	2b08      	cmp	r3, #8
 800151a:	d862      	bhi.n	80015e2 <_ZN13MidiInterface5parseEv+0x326>
 800151c:	a201      	add	r2, pc, #4	@ (adr r2, 8001524 <_ZN13MidiInterface5parseEv+0x268>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001575 	.word	0x08001575
 8001528:	08001549 	.word	0x08001549
 800152c:	080015e3 	.word	0x080015e3
 8001530:	08001549 	.word	0x08001549
 8001534:	08001549 	.word	0x08001549
 8001538:	08001549 	.word	0x08001549
 800153c:	080015e3 	.word	0x080015e3
 8001540:	08001549 	.word	0x08001549
 8001544:	08001549 	.word	0x08001549
// the MIDI class, and recompose the message it was
// interleaved into. Oh, and without killing the running status..
// This is done by leaving the pending message as is,
// it will be completed on next calls.

				mMessage.type = (MidiType) extracted;
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
				mMessage.data1 = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
				mMessage.data2 = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
				mMessage.channel = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
				mMessage.valid = true;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				return true;
 8001570:	2301      	movs	r3, #1
 8001572:	e0e3      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>

// End of Exclusive
			case 0xf7:
				if (mMessage.sysexArray[0] == SystemExclusive) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 30ee 	ldrb.w	r3, [r3, #238]	@ 0xee
 800157a:	2bf0      	cmp	r3, #240	@ 0xf0
 800157c:	d12c      	bne.n	80015d8 <_ZN13MidiInterface5parseEv+0x31c>
					// Store the last byte (EOX)
					mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	b2d1      	uxtb	r1, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	f882 10df 	strb.w	r1, [r2, #223]	@ 0xdf
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	22f7      	movs	r2, #247	@ 0xf7
 8001596:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
					mMessage.type = SystemExclusive;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	22f0      	movs	r2, #240	@ 0xf0
 800159e:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9

					// Get length
					mMessage.data1 = mPendingMessageIndex & 0xff;		// LSB
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
					mMessage.data2 = mPendingMessageIndex >> 8;			// MSB
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80015b4:	121b      	asrs	r3, r3, #8
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
					mMessage.channel = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
					mMessage.valid = true;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

					resetInput();
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8ff 	bl	80017d2 <_ZN13MidiInterface10resetInputEv>
					return true;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b1      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
				} else {
					// Well well well.. error.
					resetInput();
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8fa 	bl	80017d2 <_ZN13MidiInterface10resetInputEv>
					return false;
 80015de:	2300      	movs	r3, #0
 80015e0:	e0ac      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
				}

			default:
				break; // LCOV_EXCL_LINE - Coverage blind spot
 80015e2:	bf00      	nop
			}
		}

// Add extracted data byte to pending message
		if (mPendingMessage[0] == SystemExclusive)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 80015ea:	2bf0      	cmp	r3, #240	@ 0xf0
 80015ec:	d109      	bne.n	8001602 <_ZN13MidiInterface5parseEv+0x346>
			mMessage.sysexArray[mPendingMessageIndex] = extracted;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80015f4:	4619      	mov	r1, r3
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8001600:	e008      	b.n	8001614 <_ZN13MidiInterface5parseEv+0x358>
		else
			mPendingMessage[mPendingMessageIndex] = extracted;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001608:	4619      	mov	r1, r3
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	440b      	add	r3, r1
 8001610:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

// Now we are going to check if we have reached the end of the message
		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8001622:	3b01      	subs	r3, #1
 8001624:	429a      	cmp	r2, r3
 8001626:	db75      	blt.n	8001714 <_ZN13MidiInterface5parseEv+0x458>
			// "FML" case: fall down here with an overflown SysEx..
			// This means we received the last possible data byte that can fit
			// the buffer. If this happens, try increasing Settings.SysExMaxSize.
			if (mPendingMessage[0] == SystemExclusive) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800162e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001630:	d104      	bne.n	800163c <_ZN13MidiInterface5parseEv+0x380>
				resetInput();
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8cd 	bl	80017d2 <_ZN13MidiInterface10resetInputEv>
				return false;
 8001638:	2300      	movs	r3, #0
 800163a:	e07f      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
			}

			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f90f 	bl	8001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9

			if (isChannelMessage(mMessage.type))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f93b 	bl	80018d4 <_ZN13MidiInterface16isChannelMessageE8MidiType>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <_ZN13MidiInterface5parseEv+0x3c0>
				mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f921 	bl	80018b2 <_ZN13MidiInterface24getChannelFromStatusByteEh>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 800167a:	e003      	b.n	8001684 <_ZN13MidiInterface5parseEv+0x3c8>
			else
				mMessage.channel = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea

			mMessage.data1 = mPendingMessage[1];
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 20dc 	ldrb.w	r2, [r3, #220]	@ 0xdc
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb

			// Save data2 only if applicable
			mMessage.data2 =
					mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
			mMessage.data2 =
 8001696:	2b03      	cmp	r3, #3
 8001698:	d103      	bne.n	80016a2 <_ZN13MidiInterface5parseEv+0x3e6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 80016a0:	e000      	b.n	80016a4 <_ZN13MidiInterface5parseEv+0x3e8>
 80016a2:	2200      	movs	r2, #0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

			// Reset local variables
			mPendingMessageIndex = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
			mPendingMessageExpectedLenght = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde

			mMessage.valid = true;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

			// Activate running status (if enabled for the received type)
			switch (mMessage.type) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 80016c8:	2be0      	cmp	r3, #224	@ 0xe0
 80016ca:	d015      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016cc:	2be0      	cmp	r3, #224	@ 0xe0
 80016ce:	dc1a      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016d0:	2bd0      	cmp	r3, #208	@ 0xd0
 80016d2:	d011      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016d4:	2bd0      	cmp	r3, #208	@ 0xd0
 80016d6:	dc16      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80016da:	d00d      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80016de:	dc12      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016e0:	2bb0      	cmp	r3, #176	@ 0xb0
 80016e2:	d009      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016e4:	2bb0      	cmp	r3, #176	@ 0xb0
 80016e6:	dc0e      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80016ea:	d005      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80016ee:	dc0a      	bgt.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
 80016f0:	2b80      	cmp	r3, #128	@ 0x80
 80016f2:	d001      	beq.n	80016f8 <_ZN13MidiInterface5parseEv+0x43c>
 80016f4:	2b90      	cmp	r3, #144	@ 0x90
 80016f6:	d106      	bne.n	8001706 <_ZN13MidiInterface5parseEv+0x44a>
			case ControlChange:
			case ProgramChange:
			case AfterTouchChannel:
			case PitchBend:
// Running status enabled: store it from received message
				mRunningStatus_RX = mPendingMessage[0];
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 20db 	ldrb.w	r2, [r3, #219]	@ 0xdb
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				break;
 8001704:	e004      	b.n	8001710 <_ZN13MidiInterface5parseEv+0x454>

			default:
// No running status
				mRunningStatus_RX = InvalidType;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
				break;
 800170e:	bf00      	nop
			}
			return true;
 8001710:	2301      	movs	r3, #1
 8001712:	e013      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
		} else {
			// Then update the index of the pending message.
			mPendingMessageIndex++;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf

			if (Settings.Use1ByteParsing) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZN13MidiInterface5parseEv+0x476>
// Message is not complete.
				return false;
 800172e:	2300      	movs	r3, #0
 8001730:	e004      	b.n	800173c <_ZN13MidiInterface5parseEv+0x480>
			} else {
// Call the parser recursively to parse the rest of the message.
				return parse();
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fdc2 	bl	80012bc <_ZN13MidiInterface5parseEv>
 8001738:	4603      	mov	r3, r0
 800173a:	bf00      	nop
			}
		}
	}
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>:

void MidiInterface::handleNullVelocityNoteOnAsNoteOff() {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
			&& getData2() == 0) {
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00d      	beq.n	8001772 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f851 	bl	80017fe <_ZN13MidiInterface7getTypeEv>
 800175c:	4603      	mov	r3, r0
 800175e:	2b90      	cmp	r3, #144	@ 0x90
 8001760:	d107      	bne.n	8001772 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
			&& getData2() == 0) {
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f858 	bl	8001818 <_ZN13MidiInterface8getData2Ev>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x2e>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x30>
 8001772:	2300      	movs	r3, #0
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x3c>
		mMessage.type = NoteOff;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	@ 0x80
 800177c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
	}
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN13MidiInterface11inputFilterEh>:

// Private method: check if the received message is on the listened channel

bool MidiInterface::inputFilter(Channel inChannel) {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
	// This method handles recognition of channel
	// (to know if the message is destinated to the Arduino)

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 800179a:	b25b      	sxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	da11      	bge.n	80017c4 <_ZN13MidiInterface11inputFilterEh+0x3c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 80017a6:	2be0      	cmp	r3, #224	@ 0xe0
 80017a8:	d80c      	bhi.n	80017c4 <_ZN13MidiInterface11inputFilterEh+0x3c>
// Then we need to know if we listen to it
		if ((mMessage.channel == inChannel)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d002      	beq.n	80017bc <_ZN13MidiInterface11inputFilterEh+0x34>
				|| (inChannel == MIDI_CHANNEL_OMNI)) {
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <_ZN13MidiInterface11inputFilterEh+0x38>
			return true;
 80017bc:	2301      	movs	r3, #1
 80017be:	e002      	b.n	80017c6 <_ZN13MidiInterface11inputFilterEh+0x3e>
		} else {
			// We don't listen to this channel
			return false;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e000      	b.n	80017c6 <_ZN13MidiInterface11inputFilterEh+0x3e>
		}
	} else {
// System messages are always received
		return true;
 80017c4:	2301      	movs	r3, #1
	}
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_ZN13MidiInterface10resetInputEv>:

// Private method: reset input attributes

void MidiInterface::resetInput() {
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
	mPendingMessageIndex = 0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
	mPendingMessageExpectedLenght = 0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	mRunningStatus_RX = InvalidType;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_ZN13MidiInterface7getTypeEv>:
/*! \brief Get the last received message's type

 Returns an enumerated type. @see MidiType
 */

MidiType MidiInterface::getType() {
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	return mMessage.type;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_ZN13MidiInterface8getData2Ev>:
	return mMessage.data1;
}

/*! \brief Get the second data byte of the last received message. */

DataByte MidiInterface::getData2() {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	return mMessage.data2;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_ZN13MidiInterface13getSysExArrayEv>:
/*! \brief Get the System Exclusive byte array.

 @see getSysExArrayLength to get the array's length in bytes.
 */

byte* MidiInterface::getSysExArray() {
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return mMessage.sysexArray;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	33ee      	adds	r3, #238	@ 0xee
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_ZN13MidiInterface19getSysExArrayLengthEv>:

 It is coded using data1 as LSB and data2 as MSB.
 \return The array's length, in bytes.
 */

unsigned MidiInterface::getSysExArrayLength() {
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return mMessage.getSysExSize();
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	33e8      	adds	r3, #232	@ 0xe8
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fa3a 	bl	8000cd0 <_ZN8mMessage12getSysExSizeEv>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_ZN13MidiInterface21getTypeFromStatusByteEh>:
 This is a utility static method, used internally,
 made public so you can handle MidiTypes more easily.
 */

MidiType MidiInterface::getTypeFromStatusByte(
byte inStatus) {
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
	if ((inStatus < 0x80) || (inStatus == 0xf4) || (inStatus == 0xf5)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da0b      	bge.n	8001890 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2bf4      	cmp	r3, #244	@ 0xf4
 800187c:	d008      	beq.n	8001890 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2bf5      	cmp	r3, #245	@ 0xf5
 8001882:	d005      	beq.n	8001890 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
			|| (inStatus == 0xf9) || (inStatus == 0xfD)) {
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2bf9      	cmp	r3, #249	@ 0xf9
 8001888:	d002      	beq.n	8001890 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2a>
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2bfd      	cmp	r3, #253	@ 0xfd
 800188e:	d101      	bne.n	8001894 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x2e>
// Data bytes and undefined.
		return InvalidType;
 8001890:	2300      	movs	r3, #0
 8001892:	e008      	b.n	80018a6 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}
	if (inStatus < 0xf0) {
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2bef      	cmp	r3, #239	@ 0xef
 8001898:	d804      	bhi.n	80018a4 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x3e>
// Channel message, remove channel nibble.
		return MidiType(inStatus & 0xf0);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f023 030f 	bic.w	r3, r3, #15
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	e000      	b.n	80018a6 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x40>
	}

	return MidiType(inStatus);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_ZN13MidiInterface24getChannelFromStatusByteEh>:

/*! \brief Returns channel in the range 1-16
 */

Channel MidiInterface::getChannelFromStatusByte(
byte inStatus) {
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
	return (inStatus & 0x0f) + 1;
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2db      	uxtb	r3, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_ZN13MidiInterface16isChannelMessageE8MidiType>:

bool MidiInterface::isChannelMessage(MidiType inType) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
			|| inType == PitchBend || inType == ProgramChange);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b80      	cmp	r3, #128	@ 0x80
 80018e2:	d011      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b90      	cmp	r3, #144	@ 0x90
 80018e8:	d00e      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2bb0      	cmp	r3, #176	@ 0xb0
 80018ee:	d00b      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80018f4:	d008      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2bd0      	cmp	r3, #208	@ 0xd0
 80018fa:	d005      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
			|| inType == PitchBend || inType == ProgramChange);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2be0      	cmp	r3, #224	@ 0xe0
 8001900:	d002      	beq.n	8001908 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x34>
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2bc0      	cmp	r3, #192	@ 0xc0
 8001906:	d101      	bne.n	800190c <_ZN13MidiInterface16isChannelMessageE8MidiType+0x38>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <_ZN13MidiInterface16isChannelMessageE8MidiType+0x3a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>:

void MidiInterface::setHandleNoteOff(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	mNoteOffCallback = fptr;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>:
void MidiInterface::setHandleNoteOn(
		void (*fptr)(byte channel, byte note, byte velocity)) {
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	mNoteOnCallback = fptr;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	605a      	str	r2, [r3, #4]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_ZN13MidiInterface22setHandleControlChangeEPFvhhhE>:
void MidiInterface::setHandleAfterTouchPoly(
		void (*fptr)(byte channel, byte note, byte pressure)) {
	mAfterTouchPolyCallback = fptr;
}
void MidiInterface::setHandleControlChange(
		void (*fptr)(byte channel, byte number, byte value)) {
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
	mControlChangeCallback = fptr;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	60da      	str	r2, [r3, #12]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_ZN13MidiInterface14setHandleClockEPFvvE>:
	mSongSelectCallback = fptr;
}
void MidiInterface::setHandleTuneRequest(void (*fptr)(void)) {
	mTuneRequestCallback = fptr;
}
void MidiInterface::setHandleClock(void (*fptr)(void)) {
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
	mClockCallback = fptr;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_ZN13MidiInterface14setHandleStartEPFvvE>:
void MidiInterface::setHandleStart(void (*fptr)(void)) {
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
	mStartCallback = fptr;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_ZN13MidiInterface13setHandleStopEPFvvE>:
void MidiInterface::setHandleContinue(void (*fptr)(void)) {
	mContinueCallback = fptr;
}
void MidiInterface::setHandleStop(void (*fptr)(void)) {
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
	mStopCallback = fptr;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <_ZN13MidiInterface14launchCallbackEv>:
	}
}

/*! @} */ // End of doc group MIDI Callbacks
// Private - launch callback function based on received type.
void MidiInterface::launchCallback() {
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	// The order is mixed to allow frequent messages to trigger their callback faster.
	switch (mMessage.type) {
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 80019d2:	3b80      	subs	r3, #128	@ 0x80
 80019d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80019d6:	f200 8201 	bhi.w	8001ddc <_ZN13MidiInterface14launchCallbackEv+0x418>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <_ZN13MidiInterface14launchCallbackEv+0x1c>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001be1 	.word	0x08001be1
 80019e4:	08001ddd 	.word	0x08001ddd
 80019e8:	08001ddd 	.word	0x08001ddd
 80019ec:	08001ddd 	.word	0x08001ddd
 80019f0:	08001ddd 	.word	0x08001ddd
 80019f4:	08001ddd 	.word	0x08001ddd
 80019f8:	08001ddd 	.word	0x08001ddd
 80019fc:	08001ddd 	.word	0x08001ddd
 8001a00:	08001ddd 	.word	0x08001ddd
 8001a04:	08001ddd 	.word	0x08001ddd
 8001a08:	08001ddd 	.word	0x08001ddd
 8001a0c:	08001ddd 	.word	0x08001ddd
 8001a10:	08001ddd 	.word	0x08001ddd
 8001a14:	08001ddd 	.word	0x08001ddd
 8001a18:	08001ddd 	.word	0x08001ddd
 8001a1c:	08001ddd 	.word	0x08001ddd
 8001a20:	08001c05 	.word	0x08001c05
 8001a24:	08001ddd 	.word	0x08001ddd
 8001a28:	08001ddd 	.word	0x08001ddd
 8001a2c:	08001ddd 	.word	0x08001ddd
 8001a30:	08001ddd 	.word	0x08001ddd
 8001a34:	08001ddd 	.word	0x08001ddd
 8001a38:	08001ddd 	.word	0x08001ddd
 8001a3c:	08001ddd 	.word	0x08001ddd
 8001a40:	08001ddd 	.word	0x08001ddd
 8001a44:	08001ddd 	.word	0x08001ddd
 8001a48:	08001ddd 	.word	0x08001ddd
 8001a4c:	08001ddd 	.word	0x08001ddd
 8001a50:	08001ddd 	.word	0x08001ddd
 8001a54:	08001ddd 	.word	0x08001ddd
 8001a58:	08001ddd 	.word	0x08001ddd
 8001a5c:	08001ddd 	.word	0x08001ddd
 8001a60:	08001cdd 	.word	0x08001cdd
 8001a64:	08001ddd 	.word	0x08001ddd
 8001a68:	08001ddd 	.word	0x08001ddd
 8001a6c:	08001ddd 	.word	0x08001ddd
 8001a70:	08001ddd 	.word	0x08001ddd
 8001a74:	08001ddd 	.word	0x08001ddd
 8001a78:	08001ddd 	.word	0x08001ddd
 8001a7c:	08001ddd 	.word	0x08001ddd
 8001a80:	08001ddd 	.word	0x08001ddd
 8001a84:	08001ddd 	.word	0x08001ddd
 8001a88:	08001ddd 	.word	0x08001ddd
 8001a8c:	08001ddd 	.word	0x08001ddd
 8001a90:	08001ddd 	.word	0x08001ddd
 8001a94:	08001ddd 	.word	0x08001ddd
 8001a98:	08001ddd 	.word	0x08001ddd
 8001a9c:	08001ddd 	.word	0x08001ddd
 8001aa0:	08001c83 	.word	0x08001c83
 8001aa4:	08001ddd 	.word	0x08001ddd
 8001aa8:	08001ddd 	.word	0x08001ddd
 8001aac:	08001ddd 	.word	0x08001ddd
 8001ab0:	08001ddd 	.word	0x08001ddd
 8001ab4:	08001ddd 	.word	0x08001ddd
 8001ab8:	08001ddd 	.word	0x08001ddd
 8001abc:	08001ddd 	.word	0x08001ddd
 8001ac0:	08001ddd 	.word	0x08001ddd
 8001ac4:	08001ddd 	.word	0x08001ddd
 8001ac8:	08001ddd 	.word	0x08001ddd
 8001acc:	08001ddd 	.word	0x08001ddd
 8001ad0:	08001ddd 	.word	0x08001ddd
 8001ad4:	08001ddd 	.word	0x08001ddd
 8001ad8:	08001ddd 	.word	0x08001ddd
 8001adc:	08001ddd 	.word	0x08001ddd
 8001ae0:	08001d1f 	.word	0x08001d1f
 8001ae4:	08001ddd 	.word	0x08001ddd
 8001ae8:	08001ddd 	.word	0x08001ddd
 8001aec:	08001ddd 	.word	0x08001ddd
 8001af0:	08001ddd 	.word	0x08001ddd
 8001af4:	08001ddd 	.word	0x08001ddd
 8001af8:	08001ddd 	.word	0x08001ddd
 8001afc:	08001ddd 	.word	0x08001ddd
 8001b00:	08001ddd 	.word	0x08001ddd
 8001b04:	08001ddd 	.word	0x08001ddd
 8001b08:	08001ddd 	.word	0x08001ddd
 8001b0c:	08001ddd 	.word	0x08001ddd
 8001b10:	08001ddd 	.word	0x08001ddd
 8001b14:	08001ddd 	.word	0x08001ddd
 8001b18:	08001ddd 	.word	0x08001ddd
 8001b1c:	08001ddd 	.word	0x08001ddd
 8001b20:	08001d01 	.word	0x08001d01
 8001b24:	08001ddd 	.word	0x08001ddd
 8001b28:	08001ddd 	.word	0x08001ddd
 8001b2c:	08001ddd 	.word	0x08001ddd
 8001b30:	08001ddd 	.word	0x08001ddd
 8001b34:	08001ddd 	.word	0x08001ddd
 8001b38:	08001ddd 	.word	0x08001ddd
 8001b3c:	08001ddd 	.word	0x08001ddd
 8001b40:	08001ddd 	.word	0x08001ddd
 8001b44:	08001ddd 	.word	0x08001ddd
 8001b48:	08001ddd 	.word	0x08001ddd
 8001b4c:	08001ddd 	.word	0x08001ddd
 8001b50:	08001ddd 	.word	0x08001ddd
 8001b54:	08001ddd 	.word	0x08001ddd
 8001b58:	08001ddd 	.word	0x08001ddd
 8001b5c:	08001ddd 	.word	0x08001ddd
 8001b60:	08001ca7 	.word	0x08001ca7
 8001b64:	08001ddd 	.word	0x08001ddd
 8001b68:	08001ddd 	.word	0x08001ddd
 8001b6c:	08001ddd 	.word	0x08001ddd
 8001b70:	08001ddd 	.word	0x08001ddd
 8001b74:	08001ddd 	.word	0x08001ddd
 8001b78:	08001ddd 	.word	0x08001ddd
 8001b7c:	08001ddd 	.word	0x08001ddd
 8001b80:	08001ddd 	.word	0x08001ddd
 8001b84:	08001ddd 	.word	0x08001ddd
 8001b88:	08001ddd 	.word	0x08001ddd
 8001b8c:	08001ddd 	.word	0x08001ddd
 8001b90:	08001ddd 	.word	0x08001ddd
 8001b94:	08001ddd 	.word	0x08001ddd
 8001b98:	08001ddd 	.word	0x08001ddd
 8001b9c:	08001ddd 	.word	0x08001ddd
 8001ba0:	08001d3d 	.word	0x08001d3d
 8001ba4:	08001d63 	.word	0x08001d63
 8001ba8:	08001d7b 	.word	0x08001d7b
 8001bac:	08001da5 	.word	0x08001da5
 8001bb0:	08001ddd 	.word	0x08001ddd
 8001bb4:	08001ddd 	.word	0x08001ddd
 8001bb8:	08001dbd 	.word	0x08001dbd
 8001bbc:	08001ddd 	.word	0x08001ddd
 8001bc0:	08001c29 	.word	0x08001c29
 8001bc4:	08001ddd 	.word	0x08001ddd
 8001bc8:	08001c3b 	.word	0x08001c3b
 8001bcc:	08001c4d 	.word	0x08001c4d
 8001bd0:	08001c5f 	.word	0x08001c5f
 8001bd4:	08001ddd 	.word	0x08001ddd
 8001bd8:	08001c71 	.word	0x08001c71
 8001bdc:	08001dcd 	.word	0x08001dcd
	// Notes
	case NoteOff:
		if (mNoteOffCallback != 0)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80fb 	beq.w	8001de0 <_ZN13MidiInterface14launchCallbackEv+0x41c>
			mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001c00:	4798      	blx	r3
		break;
 8001c02:	e0ed      	b.n	8001de0 <_ZN13MidiInterface14launchCallbackEv+0x41c>
	case NoteOn:
		if (mNoteOnCallback != 0)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80eb 	beq.w	8001de4 <_ZN13MidiInterface14launchCallbackEv+0x420>
			mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001c24:	4798      	blx	r3
		break;
 8001c26:	e0dd      	b.n	8001de4 <_ZN13MidiInterface14launchCallbackEv+0x420>

// Real-time messages
	case Clock:
		if (mClockCallback != 0)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80db 	beq.w	8001de8 <_ZN13MidiInterface14launchCallbackEv+0x424>
			mClockCallback();
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4798      	blx	r3
		break;
 8001c38:	e0d6      	b.n	8001de8 <_ZN13MidiInterface14launchCallbackEv+0x424>
	case Start:
		if (mStartCallback != 0)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80d4 	beq.w	8001dec <_ZN13MidiInterface14launchCallbackEv+0x428>
			mStartCallback();
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c48:	4798      	blx	r3
		break;
 8001c4a:	e0cf      	b.n	8001dec <_ZN13MidiInterface14launchCallbackEv+0x428>
	case Continue:
		if (mContinueCallback != 0)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80cd 	beq.w	8001df0 <_ZN13MidiInterface14launchCallbackEv+0x42c>
			mContinueCallback();
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5a:	4798      	blx	r3
		break;
 8001c5c:	e0c8      	b.n	8001df0 <_ZN13MidiInterface14launchCallbackEv+0x42c>
	case Stop:
		if (mStopCallback != 0)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80c6 	beq.w	8001df4 <_ZN13MidiInterface14launchCallbackEv+0x430>
			mStopCallback();
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6c:	4798      	blx	r3
		break;
 8001c6e:	e0c1      	b.n	8001df4 <_ZN13MidiInterface14launchCallbackEv+0x430>
	case ActiveSensing:
		if (mActiveSensingCallback != 0)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80bf 	beq.w	8001df8 <_ZN13MidiInterface14launchCallbackEv+0x434>
			mActiveSensingCallback();
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4798      	blx	r3
		break;
 8001c80:	e0ba      	b.n	8001df8 <_ZN13MidiInterface14launchCallbackEv+0x434>

// Continuous controllers
	case ControlChange:
		if (mControlChangeCallback != 0)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80b8 	beq.w	8001dfc <_ZN13MidiInterface14launchCallbackEv+0x438>
			mControlChangeCallback(mMessage.channel, mMessage.data1,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001ca2:	4798      	blx	r3
					mMessage.data2);
		break;
 8001ca4:	e0aa      	b.n	8001dfc <_ZN13MidiInterface14launchCallbackEv+0x438>
	case PitchBend:
		if (mPitchBendCallback != 0)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80a8 	beq.w	8001e00 <_ZN13MidiInterface14launchCallbackEv+0x43c>
			mPitchBendCallback(mMessage.channel,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
					(int) ((mMessage.data1 & 0x7f)
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001cc0:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
							| ((mMessage.data2 & 0x7f) << 7))
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001cca:	01d2      	lsls	r2, r2, #7
 8001ccc:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001cd0:	430a      	orrs	r2, r1
			mPitchBendCallback(mMessage.channel,
 8001cd2:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4798      	blx	r3
							+ MIDI_PITCHBEND_MIN);
		break;
 8001cda:	e091      	b.n	8001e00 <_ZN13MidiInterface14launchCallbackEv+0x43c>
	case AfterTouchPoly:
		if (mAfterTouchPolyCallback != 0)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 808f 	beq.w	8001e04 <_ZN13MidiInterface14launchCallbackEv+0x440>
			mAfterTouchPolyCallback(mMessage.channel, mMessage.data1,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	f892 10eb 	ldrb.w	r1, [r2, #235]	@ 0xeb
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001cfc:	4798      	blx	r3
					mMessage.data2);
		break;
 8001cfe:	e081      	b.n	8001e04 <_ZN13MidiInterface14launchCallbackEv+0x440>
	case AfterTouchChannel:
		if (mAfterTouchChannelCallback != 0)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d07f      	beq.n	8001e08 <_ZN13MidiInterface14launchCallbackEv+0x444>
			mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4798      	blx	r3
		break;
 8001d1c:	e074      	b.n	8001e08 <_ZN13MidiInterface14launchCallbackEv+0x444>

	case ProgramChange:
		if (mProgramChangeCallback != 0)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d072      	beq.n	8001e0c <_ZN13MidiInterface14launchCallbackEv+0x448>
			mProgramChangeCallback(mMessage.channel, mMessage.data1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	f892 00ea 	ldrb.w	r0, [r2, #234]	@ 0xea
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d36:	4611      	mov	r1, r2
 8001d38:	4798      	blx	r3
		break;
 8001d3a:	e067      	b.n	8001e0c <_ZN13MidiInterface14launchCallbackEv+0x448>
	case SystemExclusive:
		if (mSystemExclusiveCallback != 0)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d065      	beq.n	8001e10 <_ZN13MidiInterface14launchCallbackEv+0x44c>
			mSystemExclusiveCallback(mMessage.sysexArray,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69dc      	ldr	r4, [r3, #28]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f103 05ee 	add.w	r5, r3, #238	@ 0xee
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	33e8      	adds	r3, #232	@ 0xe8
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ffbc 	bl	8000cd0 <_ZN8mMessage12getSysExSizeEv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	47a0      	blx	r4
					mMessage.getSysExSize());
		break;
 8001d60:	e056      	b.n	8001e10 <_ZN13MidiInterface14launchCallbackEv+0x44c>

// Occasional messages
	case TimeCodeQuarterFrame:
		if (mTimeCodeQuarterFrameCallback != 0)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d054      	beq.n	8001e14 <_ZN13MidiInterface14launchCallbackEv+0x450>
			mTimeCodeQuarterFrameCallback(mMessage.data1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d74:	4610      	mov	r0, r2
 8001d76:	4798      	blx	r3
		break;
 8001d78:	e04c      	b.n	8001e14 <_ZN13MidiInterface14launchCallbackEv+0x450>
	case SongPosition:
		if (mSongPositionCallback != 0)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d04a      	beq.n	8001e18 <_ZN13MidiInterface14launchCallbackEv+0x454>
			mSongPositionCallback(
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
					(mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001d8c:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 8001d96:	01d2      	lsls	r2, r2, #7
 8001d98:	f402 527e 	and.w	r2, r2, #16256	@ 0x3f80
 8001d9c:	430a      	orrs	r2, r1
			mSongPositionCallback(
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4798      	blx	r3
		break;
 8001da2:	e039      	b.n	8001e18 <_ZN13MidiInterface14launchCallbackEv+0x454>
	case SongSelect:
		if (mSongSelectCallback != 0)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d037      	beq.n	8001e1c <_ZN13MidiInterface14launchCallbackEv+0x458>
			mSongSelectCallback(mMessage.data1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	f892 20eb 	ldrb.w	r2, [r2, #235]	@ 0xeb
 8001db6:	4610      	mov	r0, r2
 8001db8:	4798      	blx	r3
		break;
 8001dba:	e02f      	b.n	8001e1c <_ZN13MidiInterface14launchCallbackEv+0x458>
	case TuneRequest:
		if (mTuneRequestCallback != 0)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d02d      	beq.n	8001e20 <_ZN13MidiInterface14launchCallbackEv+0x45c>
			mTuneRequestCallback();
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	4798      	blx	r3
		break;
 8001dca:	e029      	b.n	8001e20 <_ZN13MidiInterface14launchCallbackEv+0x45c>

	case SystemReset:
		if (mSystemResetCallback != 0)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d027      	beq.n	8001e24 <_ZN13MidiInterface14launchCallbackEv+0x460>
			mSystemResetCallback();
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd8:	4798      	blx	r3
		break;
 8001dda:	e023      	b.n	8001e24 <_ZN13MidiInterface14launchCallbackEv+0x460>

	case InvalidType:
	default:
		break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001ddc:	bf00      	nop
 8001dde:	e022      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001de0:	bf00      	nop
 8001de2:	e020      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001de4:	bf00      	nop
 8001de6:	e01e      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001de8:	bf00      	nop
 8001dea:	e01c      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dec:	bf00      	nop
 8001dee:	e01a      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001df0:	bf00      	nop
 8001df2:	e018      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001df4:	bf00      	nop
 8001df6:	e016      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001df8:	bf00      	nop
 8001dfa:	e014      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001dfc:	bf00      	nop
 8001dfe:	e012      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e00:	bf00      	nop
 8001e02:	e010      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e04:	bf00      	nop
 8001e06:	e00e      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e08:	bf00      	nop
 8001e0a:	e00c      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e0c:	bf00      	nop
 8001e0e:	e00a      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e10:	bf00      	nop
 8001e12:	e008      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e14:	bf00      	nop
 8001e16:	e006      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e18:	bf00      	nop
 8001e1a:	e004      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e1c:	bf00      	nop
 8001e1e:	e002      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e20:	bf00      	nop
 8001e22:	e000      	b.n	8001e26 <_ZN13MidiInterface14launchCallbackEv+0x462>
		break;
 8001e24:	bf00      	nop
	}
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2e:	bf00      	nop

08001e30 <_ZN13MidiInterface10thruFilterEh>:

void MidiInterface::thruFilter(Channel inChannel) {
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
	// If the feature is disabled, don't do anything.
	if (!mThruActivated || (mThruFilterMode == Thru::Off))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001e42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f083 0301 	eor.w	r3, r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 80da 	bne.w	8002008 <_ZN13MidiInterface10thruFilterEh+0x1d8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80d1 	beq.w	8002008 <_ZN13MidiInterface10thruFilterEh+0x1d8>
		return;

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da65      	bge.n	8001f3e <_ZN13MidiInterface10thruFilterEh+0x10e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001e78:	2be0      	cmp	r3, #224	@ 0xe0
 8001e7a:	d860      	bhi.n	8001f3e <_ZN13MidiInterface10thruFilterEh+0x10e>
		bool filter_condition = ((mMessage.channel == inChannel)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
				|| (inChannel == MIDI_CHANNEL_OMNI));
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d002      	beq.n	8001e8e <_ZN13MidiInterface10thruFilterEh+0x5e>
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <_ZN13MidiInterface10thruFilterEh+0x62>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <_ZN13MidiInterface10thruFilterEh+0x64>
 8001e92:	2300      	movs	r3, #0
		bool filter_condition = ((mMessage.channel == inChannel)
 8001e94:	73fb      	strb	r3, [r7, #15]

		// Now let's pass it to the output
		switch (mThruFilterMode) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001e9c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d02d      	beq.n	8001f02 <_ZN13MidiInterface10thruFilterEh+0xd2>
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	dc43      	bgt.n	8001f32 <_ZN13MidiInterface10thruFilterEh+0x102>
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d002      	beq.n	8001eb4 <_ZN13MidiInterface10thruFilterEh+0x84>
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d012      	beq.n	8001ed8 <_ZN13MidiInterface10thruFilterEh+0xa8>
						mMessage.channel);
			}
			break;

		default:
			break;
 8001eb2:	e03e      	b.n	8001f32 <_ZN13MidiInterface10thruFilterEh+0x102>
			send(mMessage.type, mMessage.data1, mMessage.data2,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff f824 	bl	8000f1e <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001ed6:	e031      	b.n	8001f3c <_ZN13MidiInterface10thruFilterEh+0x10c>
			if (filter_condition) {
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d02b      	beq.n	8001f36 <_ZN13MidiInterface10thruFilterEh+0x106>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4603      	mov	r3, r0
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f80f 	bl	8000f1e <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001f00:	e019      	b.n	8001f36 <_ZN13MidiInterface10thruFilterEh+0x106>
			if (!filter_condition) {
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <_ZN13MidiInterface10thruFilterEh+0x10a>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 10e9 	ldrb.w	r1, [r3, #233]	@ 0xe9
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	4603      	mov	r3, r0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fff7 	bl	8000f1e <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001f30:	e003      	b.n	8001f3a <_ZN13MidiInterface10thruFilterEh+0x10a>
			break;
 8001f32:	bf00      	nop
 8001f34:	e06b      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001f36:	bf00      	nop
 8001f38:	e069      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
			break;
 8001f3a:	bf00      	nop
		}
	} else {
 8001f3c:	e067      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
		// Send the message to the output
		switch (mMessage.type) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001f44:	2bff      	cmp	r3, #255	@ 0xff
 8001f46:	dc61      	bgt.n	800200c <_ZN13MidiInterface10thruFilterEh+0x1dc>
 8001f48:	2bf2      	cmp	r3, #242	@ 0xf2
 8001f4a:	da04      	bge.n	8001f56 <_ZN13MidiInterface10thruFilterEh+0x126>
 8001f4c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001f4e:	d02b      	beq.n	8001fa8 <_ZN13MidiInterface10thruFilterEh+0x178>
 8001f50:	2bf1      	cmp	r3, #241	@ 0xf1
 8001f52:	d04e      	beq.n	8001ff2 <_ZN13MidiInterface10thruFilterEh+0x1c2>
		case TimeCodeQuarterFrame:
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
			break;

		default:
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001f54:	e05a      	b.n	800200c <_ZN13MidiInterface10thruFilterEh+0x1dc>
		switch (mMessage.type) {
 8001f56:	3bf2      	subs	r3, #242	@ 0xf2
 8001f58:	2201      	movs	r2, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001f62:	401a      	ands	r2, r3
 8001f64:	2a00      	cmp	r2, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2201      	movne	r2, #1
 8001f6a:	2200      	moveq	r2, #0
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	2a00      	cmp	r2, #0
 8001f70:	d112      	bne.n	8001f98 <_ZN13MidiInterface10thruFilterEh+0x168>
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2201      	movne	r2, #1
 8001f7c:	2200      	moveq	r2, #0
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d128      	bne.n	8001fd6 <_ZN13MidiInterface10thruFilterEh+0x1a6>
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d117      	bne.n	8001fc6 <_ZN13MidiInterface10thruFilterEh+0x196>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001f96:	e039      	b.n	800200c <_ZN13MidiInterface10thruFilterEh+0x1dc>
			sendRealTime(mMessage.type);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff f906 	bl	80011b2 <_ZN13MidiInterface12sendRealTimeE8MidiType>
			break;
 8001fa6:	e032      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSysEx(getSysExArrayLength(), getSysExArray(), true);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fc4e 	bl	800184a <_ZN13MidiInterface19getSysExArrayLengthEv>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b2dc      	uxtb	r4, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fc3d 	bl	8001832 <_ZN13MidiInterface13getSysExArrayEv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	2301      	movs	r3, #1
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff f820 	bl	8001004 <_ZN13MidiInterface9sendSysExEhPhb>
			break;
 8001fc4:	e023      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongSelect(mMessage.data1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff f8ca 	bl	8001168 <_ZN13MidiInterface14sendSongSelectEh>
			break;
 8001fd4:	e01b      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendSongPosition(mMessage.data1 | ((unsigned) mMessage.data2 << 7));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001fe4:	01db      	lsls	r3, r3, #7
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff f88b 	bl	8001106 <_ZN13MidiInterface16sendSongPositionEj>
			break;
 8001ff0:	e00d      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 10eb 	ldrb.w	r1, [r3, #235]	@ 0xeb
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001ffe:	461a      	mov	r2, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff f83e 	bl	8001082 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>
			break;
 8002006:	e002      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
		return;
 8002008:	bf00      	nop
 800200a:	e000      	b.n	800200e <_ZN13MidiInterface10thruFilterEh+0x1de>
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 800200c:	bf00      	nop
		}
	}
}
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bd90      	pop	{r4, r7, pc}

08002014 <_Z12Handle_Clockv>:
uint8_t first_note, range_idx;
uint8_t second_note;
uint8_t third_note;
uint8_t fourth_note;
uint16_t coarse_DAC, coarse_start, fine_index, fine_DAC;
void Handle_Clock() {
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	i++;
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <_Z12Handle_Clockv+0x2c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a08      	ldr	r2, [pc, #32]	@ (8002040 <_Z12Handle_Clockv+0x2c>)
 8002020:	6013      	str	r3, [r2, #0]
	if (i / 12 == 1) {
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <_Z12Handle_Clockv+0x2c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3b0c      	subs	r3, #12
 8002028:	2b0b      	cmp	r3, #11
 800202a:	d806      	bhi.n	800203a <_Z12Handle_Clockv+0x26>
		HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
 800202c:	2104      	movs	r1, #4
 800202e:	4805      	ldr	r0, [pc, #20]	@ (8002044 <_Z12Handle_Clockv+0x30>)
 8002030:	f002 ff37 	bl	8004ea2 <HAL_GPIO_TogglePin>
		i = 0;
 8002034:	4b02      	ldr	r3, [pc, #8]	@ (8002040 <_Z12Handle_Clockv+0x2c>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
	}
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000028 	.word	0x20000028
 8002044:	40020c00 	.word	0x40020c00

08002048 <_Z12Handle_Startv>:

void Handle_Start() {
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
	i = 0;
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <_Z12Handle_Startv+0x14>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_SET);
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	20000028 	.word	0x20000028

08002060 <_Z11Handle_Stopv>:
void Handle_Stop() {
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PinState::GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, gate2_Pin, GPIO_PinState::GPIO_PIN_RESET);
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <_Z13Handle_NoteOnhhh>:

// Callback function for when a Note On is received


// Callback function for when a Note Off is received
void Handle_NoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af02      	add	r7, sp, #8
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
 800207a:	460b      	mov	r3, r1
 800207c:	71bb      	strb	r3, [r7, #6]
 800207e:	4613      	mov	r3, r2
 8002080:	717b      	strb	r3, [r7, #5]
//    uint32_t pitch_CV = (uint32_t)((note * 0.0833333333 * X) / (3.3 / 4095));  // Calculate pitch CV from MIDI note
    velo_CV = (uint32_t)((velocity / 127.0) * 4095);
 8002082:	797b      	ldrb	r3, [r7, #5]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f9f1 	bl	800046c <__aeabi_i2d>
 800208a:	a33e      	add	r3, pc, #248	@ (adr r3, 8002184 <_Z13Handle_NoteOnhhh+0x114>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fb80 	bl	8000794 <__aeabi_ddiv>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	a33b      	add	r3, pc, #236	@ (adr r3, 800218c <_Z13Handle_NoteOnhhh+0x11c>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fa4d 	bl	8000540 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fc59 	bl	8000964 <__aeabi_d2uiz>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <_Z13Handle_NoteOnhhh+0xe0>)
 80020b6:	6013      	str	r3, [r2, #0]

/*  Natos aukščio skaičiavimai  */
    range_idx = note / 24;         // Integer division
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	4a26      	ldr	r2, [pc, #152]	@ (8002154 <_Z13Handle_NoteOnhhh+0xe4>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <_Z13Handle_NoteOnhhh+0xe8>)
 80020c6:	701a      	strb	r2, [r3, #0]
    range_idx = (range_idx > 4) ? 4 : range_idx; // Clamp to 4
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <_Z13Handle_NoteOnhhh+0xe8>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	bf28      	it	cs
 80020d0:	2304      	movcs	r3, #4
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <_Z13Handle_NoteOnhhh+0xe8>)
 80020d6:	701a      	strb	r2, [r3, #0]
    coarse_DAC = coarse_cv[range_idx];
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <_Z13Handle_NoteOnhhh+0xe8>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <_Z13Handle_NoteOnhhh+0xec>)
 80020e0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80020e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <_Z13Handle_NoteOnhhh+0xf0>)
 80020e6:	801a      	strh	r2, [r3, #0]

    fine_DAC = fine_cv[note];
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002164 <_Z13Handle_NoteOnhhh+0xf4>)
 80020ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <_Z13Handle_NoteOnhhh+0xf8>)
 80020f2:	801a      	strh	r2, [r3, #0]

    ChannelConfig config;
    ChannelConfig2 config2;

    if (!first_note_active) {
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <_Z13Handle_NoteOnhhh+0xfc>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	f083 0301 	eor.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01f      	beq.n	8002142 <_Z13Handle_NoteOnhhh+0xd2>
//        pitch1_CV = pitch_CV;
        tt=0;
 8002102:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <_Z13Handle_NoteOnhhh+0x100>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
        yy=0;
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <_Z13Handle_NoteOnhhh+0x104>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
        config.val[0] = fine_DAC; // 12-bit DAC value for channel A
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <_Z13Handle_NoteOnhhh+0xf8>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	82fb      	strh	r3, [r7, #22]
        config.val[1] = coarse_DAC;  // 12-bit DAC value for channel B
 8002114:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <_Z13Handle_NoteOnhhh+0xf0>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	833b      	strh	r3, [r7, #24]


//          config2.val[1] = 4095;  // 12-bit DAC value for channel B
//          config2.val[2] = 4095; // 12-bit DAC value for channel C
//          config2.val[3] = 4095;  // 12-bit DAC value for channel D
        DAC_FW(&hi2c1, dac1, config);
 800211a:	8bbb      	ldrh	r3, [r7, #28]
 800211c:	f8ad 3000 	strh.w	r3, [sp]
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	cb0c      	ldmia	r3, {r2, r3}
 8002126:	21c0      	movs	r1, #192	@ 0xc0
 8002128:	4813      	ldr	r0, [pc, #76]	@ (8002178 <_Z13Handle_NoteOnhhh+0x108>)
 800212a:	f001 f843 	bl	80031b4 <DAC_FW>
//        config2.val[3] = velo_CV; // 12-bit DAC value for channel A
//        DACx60FW(&hi2c1, config);
//        DACx61SW(&hi2c1, config2, 0);
//        DAC_SW(&hi2c1, dac2, config, 0);
        ADSR_SetGateSignal(&envelopes[0], 1);
 800212e:	2101      	movs	r1, #1
 8002130:	4812      	ldr	r0, [pc, #72]	@ (800217c <_Z13Handle_NoteOnhhh+0x10c>)
 8002132:	f000 fa2b 	bl	800258c <ADSR_SetGateSignal>
//        mcp4728_multiWrite(&hi2c1, config, 1);
//        DACx60SW(&hi2c1, config, 0);
//        DACx60SW(&hi2c1, config, 1);

//        HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PIN_SET);  // Indicate first note is on via gate3_Pin
        first_note_active = true;  // First note is now active
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <_Z13Handle_NoteOnhhh+0xfc>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
        first_note = note;  // Store the note value
 800213c:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <_Z13Handle_NoteOnhhh+0x110>)
 800213e:	79bb      	ldrb	r3, [r7, #6]
 8002140:	7013      	strb	r3, [r2, #0]
//
////        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_SET);  // Indicate fourth note is on via gate4_Pin
//        fourth_note_active = true;  // Fourth note is now active
//        fourth_note = note;  // Store the note value
//    }
}
 8002142:	bf00      	nop
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	f3af 8000 	nop.w
 8002150:	20000038 	.word	0x20000038
 8002154:	aaaaaaab 	.word	0xaaaaaaab
 8002158:	20000041 	.word	0x20000041
 800215c:	08009f0c 	.word	0x08009f0c
 8002160:	20000044 	.word	0x20000044
 8002164:	08009e0c 	.word	0x08009e0c
 8002168:	20000046 	.word	0x20000046
 800216c:	20000034 	.word	0x20000034
 8002170:	2000002c 	.word	0x2000002c
 8002174:	20000030 	.word	0x20000030
 8002178:	2000005c 	.word	0x2000005c
 800217c:	200003b8 	.word	0x200003b8
 8002180:	20000040 	.word	0x20000040
 8002184:	00000000 	.word	0x00000000
 8002188:	405fc000 	.word	0x405fc000
 800218c:	00000000 	.word	0x00000000
 8002190:	40affe00 	.word	0x40affe00

08002194 <_Z14Handle_NoteOffhhh>:

void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
 800219e:	460b      	mov	r3, r1
 80021a0:	71bb      	strb	r3, [r7, #6]
 80021a2:	4613      	mov	r3, r2
 80021a4:	717b      	strb	r3, [r7, #5]
    if (first_note_active && note == first_note) {
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <_Z14Handle_NoteOffhhh+0x5c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <_Z14Handle_NoteOffhhh+0x34>
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <_Z14Handle_NoteOffhhh+0x60>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	79ba      	ldrb	r2, [r7, #6]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <_Z14Handle_NoteOffhhh+0x34>
        ADSR_SetGateSignal(&envelopes[0], 0);
 80021b8:	2100      	movs	r1, #0
 80021ba:	480f      	ldr	r0, [pc, #60]	@ (80021f8 <_Z14Handle_NoteOffhhh+0x64>)
 80021bc:	f000 f9e6 	bl	800258c <ADSR_SetGateSignal>

//        HAL_GPIO_WritePin(GPIOB, gate1_Pin, GPIO_PIN_RESET);  // PB2 Turn off gate for first note
        first_note_active = false;  // First note is no longer active
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <_Z14Handle_NoteOffhhh+0x5c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
//    else if (fourth_note_active && note == fourth_note) {
//        ADSR_SetGateSignal(&envelopes[3], 0);
////        HAL_GPIO_WritePin(GPIOE, gate4_Pin, GPIO_PIN_RESET);  // Turn off gate for fourth note
//        fourth_note_active = false;  // Fourth note is no longer active
//    }
}
 80021c6:	e00f      	b.n	80021e8 <_Z14Handle_NoteOffhhh+0x54>
    	else if (second_note_active && note == second_note) {
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <_Z14Handle_NoteOffhhh+0x68>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <_Z14Handle_NoteOffhhh+0x54>
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <_Z14Handle_NoteOffhhh+0x6c>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	79ba      	ldrb	r2, [r7, #6]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d106      	bne.n	80021e8 <_Z14Handle_NoteOffhhh+0x54>
        ADSR_SetGateSignal(&envelopes[1], 0);
 80021da:	2100      	movs	r1, #0
 80021dc:	4809      	ldr	r0, [pc, #36]	@ (8002204 <_Z14Handle_NoteOffhhh+0x70>)
 80021de:	f000 f9d5 	bl	800258c <ADSR_SetGateSignal>
        second_note_active = false;  // Second note is no longer active
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <_Z14Handle_NoteOffhhh+0x68>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000034 	.word	0x20000034
 80021f4:	20000040 	.word	0x20000040
 80021f8:	200003b8 	.word	0x200003b8
 80021fc:	20000035 	.word	0x20000035
 8002200:	20000042 	.word	0x20000042
 8002204:	200003d8 	.word	0x200003d8

08002208 <_Z9Handle_CChhh>:

void Handle_CC(uint8_t channel, uint8_t number, uint8_t value) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	460b      	mov	r3, r1
 8002214:	71bb      	strb	r3, [r7, #6]
 8002216:	4613      	mov	r3, r2
 8002218:	717b      	strb	r3, [r7, #5]
    ChannelConfig2 config2;
    modv_CV = (uint32_t)((value / 127.0) * 4095);
 800221a:	797b      	ldrb	r3, [r7, #5]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f925 	bl	800046c <__aeabi_i2d>
 8002222:	a31f      	add	r3, pc, #124	@ (adr r3, 80022a0 <_Z9Handle_CChhh+0x98>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f7fe fab4 	bl	8000794 <__aeabi_ddiv>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	a31c      	add	r3, pc, #112	@ (adr r3, 80022a8 <_Z9Handle_CChhh+0xa0>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	f7fe f981 	bl	8000540 <__aeabi_dmul>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fb8d 	bl	8000964 <__aeabi_d2uiz>
 800224a:	4603      	mov	r3, r0
 800224c:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <_Z9Handle_CChhh+0xa8>)
 800224e:	6013      	str	r3, [r2, #0]
    if (number == 13) {
 8002250:	79bb      	ldrb	r3, [r7, #6]
 8002252:	2b0d      	cmp	r3, #13
 8002254:	d11a      	bne.n	800228c <_Z9Handle_CChhh+0x84>

    	        config2.val[2] = (uint32_t)((value / 127.0) * 4095); // 12-bit DAC value for channel A
 8002256:	797b      	ldrb	r3, [r7, #5]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f907 	bl	800046c <__aeabi_i2d>
 800225e:	a310      	add	r3, pc, #64	@ (adr r3, 80022a0 <_Z9Handle_CChhh+0x98>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe fa96 	bl	8000794 <__aeabi_ddiv>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	a30d      	add	r3, pc, #52	@ (adr r3, 80022a8 <_Z9Handle_CChhh+0xa0>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	f7fe f963 	bl	8000540 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f7fe fb6f 	bl	8000964 <__aeabi_d2uiz>
 8002286:	4603      	mov	r3, r0
 8002288:	b29b      	uxth	r3, r3
 800228a:	827b      	strh	r3, [r7, #18]
//
//    	//        DAC_SW(&hi2c1, dac2, config, 0);
////        midi_cc40_value = value;
////        Update_TIM13_Frequency(value);
//    }
    DACx61FW(&hi2c1, config2);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002292:	4808      	ldr	r0, [pc, #32]	@ (80022b4 <_Z9Handle_CChhh+0xac>)
 8002294:	f000 ffdf 	bl	8003256 <DACx61FW>
    // Handle other CC messages
}
 8002298:	bf00      	nop
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00000000 	.word	0x00000000
 80022a4:	405fc000 	.word	0x405fc000
 80022a8:	00000000 	.word	0x00000000
 80022ac:	40affe00 	.word	0x40affe00
 80022b0:	2000003c 	.word	0x2000003c
 80022b4:	2000005c 	.word	0x2000005c

080022b8 <ADSR_Init>:
//    adsr->gate_signal = 0;
//    adsr->amplitude = 1;      // Default amplitude is 1.0 (full volume)
//}
//extern float lookup_t[128];

void ADSR_Init(ADSR_t *adsr, int num_envelopes) {
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < num_envelopes; i++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e02e      	b.n	8002326 <ADSR_Init+0x6e>
    	adsr[i].attack_index = 64;  // Set default index
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015b      	lsls	r3, r3, #5
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	2240      	movs	r2, #64	@ 0x40
 80022d2:	61da      	str	r2, [r3, #28]
        adsr[i].attack_rate = attack_rate_lookup[64];
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	015b      	lsls	r3, r3, #5
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	4a17      	ldr	r2, [pc, #92]	@ (800233c <ADSR_Init+0x84>)
 80022de:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 80022e2:	601a      	str	r2, [r3, #0]
        adsr[i].decay_rate = attack_rate_lookup[64];
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a13      	ldr	r2, [pc, #76]	@ (800233c <ADSR_Init+0x84>)
 80022ee:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 80022f2:	605a      	str	r2, [r3, #4]
        adsr[i].sustain_level = 0.5f;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002300:	609a      	str	r2, [r3, #8]
        adsr[i].release_rate = attack_rate_lookup[64];
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015b      	lsls	r3, r3, #5
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a0c      	ldr	r2, [pc, #48]	@ (800233c <ADSR_Init+0x84>)
 800230c:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 8002310:	60da      	str	r2, [r3, #12]
        adsr[i].amplitude = 1.0f;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015b      	lsls	r3, r3, #5
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800231e:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < num_envelopes; i++) {
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3301      	adds	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	dbcc      	blt.n	80022c8 <ADSR_Init+0x10>
    }
}
 800232e:	bf00      	nop
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	08009c0c 	.word	0x08009c0c

08002340 <ADSR_SetAttackRate>:
//    } else if (index >= 128) {
//        index = 127;  // Maximum limit
//    }
//    adsr->attack_rate = attack_rate_lookup[index];
//}
void ADSR_SetAttackRate(ADSR_t *adsr, int increment) {
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    adsr->attack_index += increment;  // Increment or decrement the index
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	441a      	add	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	61da      	str	r2, [r3, #28]

    // Limit checking
    if (adsr->attack_index < 0) {
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	2b00      	cmp	r3, #0
 800235c:	da03      	bge.n	8002366 <ADSR_SetAttackRate+0x26>
        adsr->attack_index = 0;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
 8002364:	e006      	b.n	8002374 <ADSR_SetAttackRate+0x34>
    } else if (adsr->attack_index >= 128) {
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	2b7f      	cmp	r3, #127	@ 0x7f
 800236c:	dd02      	ble.n	8002374 <ADSR_SetAttackRate+0x34>
        adsr->attack_index = 127;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	227f      	movs	r2, #127	@ 0x7f
 8002372:	61da      	str	r2, [r3, #28]
    }

    // Update attack rate from lookup table using current index
    adsr->attack_rate = attack_rate_lookup[adsr->attack_index];
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4a05      	ldr	r2, [pc, #20]	@ (8002390 <ADSR_SetAttackRate+0x50>)
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	08009c0c 	.word	0x08009c0c

08002394 <ADSR_SetDecayRate>:

void ADSR_SetDecayRate(ADSR_t *adsr, int index) {
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    if (index < 0) {
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da02      	bge.n	80023aa <ADSR_SetDecayRate+0x16>
        index = 0;  // Minimum limit
 80023a4:	2300      	movs	r3, #0
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	e004      	b.n	80023b4 <ADSR_SetDecayRate+0x20>
    } else if (index >= 128) {
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80023ae:	dd01      	ble.n	80023b4 <ADSR_SetDecayRate+0x20>
        index = 127;  // Maximum limit
 80023b0:	237f      	movs	r3, #127	@ 0x7f
 80023b2:	603b      	str	r3, [r7, #0]
    }
    adsr->decay_rate = attack_rate_lookup[index];
 80023b4:	4a06      	ldr	r2, [pc, #24]	@ (80023d0 <ADSR_SetDecayRate+0x3c>)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	08009c0c 	.word	0x08009c0c

080023d4 <ADSR_SetSustainLevel>:

void ADSR_SetSustainLevel(ADSR_t *adsr, float sustain_level) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	ed87 0a00 	vstr	s0, [r7]
	sustain_level += sustain_level * 0.02f;
 80023e0:	edd7 7a00 	vldr	s15, [r7]
 80023e4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002444 <ADSR_SetSustainLevel+0x70>
 80023e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ec:	ed97 7a00 	vldr	s14, [r7]
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	edc7 7a00 	vstr	s15, [r7]
    if (sustain_level < 0.0f) {
 80023f8:	edd7 7a00 	vldr	s15, [r7]
 80023fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	d503      	bpl.n	800240e <ADSR_SetSustainLevel+0x3a>
        sustain_level = 0.0f;  // Minimum limit
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	e00b      	b.n	8002426 <ADSR_SetSustainLevel+0x52>
    } else if (sustain_level > 1.0f) {
 800240e:	edd7 7a00 	vldr	s15, [r7]
 8002412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	dd02      	ble.n	8002426 <ADSR_SetSustainLevel+0x52>
        sustain_level = 1.0f;  // Maximum limit
 8002420:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002424:	603b      	str	r3, [r7, #0]
    }
    adsr->sustain_level = (sustain_level * 0.02f);
 8002426:	edd7 7a00 	vldr	s15, [r7]
 800242a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002444 <ADSR_SetSustainLevel+0x70>
 800242e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	3ca3d70a 	.word	0x3ca3d70a

08002448 <ADSR_SetReleaseRate>:

void ADSR_SetReleaseRate(ADSR_t *adsr, int index) {
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    if (index < 0) {
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	da02      	bge.n	800245e <ADSR_SetReleaseRate+0x16>
        index = 0;  // Minimum limit
 8002458:	2300      	movs	r3, #0
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	e004      	b.n	8002468 <ADSR_SetReleaseRate+0x20>
    } else if (index >= 128) {
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b7f      	cmp	r3, #127	@ 0x7f
 8002462:	dd01      	ble.n	8002468 <ADSR_SetReleaseRate+0x20>
        index = 127;  // Maximum limit
 8002464:	237f      	movs	r3, #127	@ 0x7f
 8002466:	603b      	str	r3, [r7, #0]
    }
    adsr->release_rate = attack_rate_lookup[index];
 8002468:	4a06      	ldr	r2, [pc, #24]	@ (8002484 <ADSR_SetReleaseRate+0x3c>)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60da      	str	r2, [r3, #12]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	08009c0c 	.word	0x08009c0c

08002488 <ADSR_UpdateEnvelope>:
//            break;
//    }
//}}}

// Updates the envelope for a specific ADSR instance
void ADSR_UpdateEnvelope(ADSR_t *adsr) {
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

    switch (adsr->state) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7e1b      	ldrb	r3, [r3, #24]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b04      	cmp	r3, #4
 8002498:	d871      	bhi.n	800257e <ADSR_UpdateEnvelope+0xf6>
 800249a:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <ADSR_UpdateEnvelope+0x18>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024b5 	.word	0x080024b5
 80024a4:	080024f1 	.word	0x080024f1
 80024a8:	0800252f 	.word	0x0800252f
 80024ac:	08002541 	.word	0x08002541
 80024b0:	08002579 	.word	0x08002579
        case ATTACK:
            adsr->envelope_value += adsr->attack_rate;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value >= 1.0f) {
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80024d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	da00      	bge.n	80024e0 <ADSR_UpdateEnvelope+0x58>
                adsr->envelope_value = 1.0f;
                adsr->state = DECAY;
            }
            break;
 80024de:	e04e      	b.n	800257e <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 1.0f;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80024e6:	615a      	str	r2, [r3, #20]
                adsr->state = DECAY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	761a      	strb	r2, [r3, #24]
            break;
 80024ee:	e046      	b.n	800257e <ADSR_UpdateEnvelope+0xf6>

        case DECAY:
            adsr->envelope_value -= adsr->decay_rate;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= adsr->sustain_level) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	ed93 7a05 	vldr	s14, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	d900      	bls.n	800251e <ADSR_UpdateEnvelope+0x96>
                adsr->envelope_value = adsr->sustain_level;
                adsr->state = SUSTAIN;
            }
            break;
 800251c:	e02f      	b.n	800257e <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = adsr->sustain_level;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	615a      	str	r2, [r3, #20]
                adsr->state = SUSTAIN;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	761a      	strb	r2, [r3, #24]
            break;
 800252c:	e027      	b.n	800257e <ADSR_UpdateEnvelope+0xf6>

        case SUSTAIN:
            if (!adsr->gate_signal) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7e5b      	ldrb	r3, [r3, #25]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d121      	bne.n	800257c <ADSR_UpdateEnvelope+0xf4>
                adsr->state = RELEASE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	761a      	strb	r2, [r3, #24]
            }
            break;
 800253e:	e01d      	b.n	800257c <ADSR_UpdateEnvelope+0xf4>

        case RELEASE:
            adsr->envelope_value -= adsr->release_rate;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	ed93 7a05 	vldr	s14, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	edd3 7a03 	vldr	s15, [r3, #12]
 800254c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	edc3 7a05 	vstr	s15, [r3, #20]
            if (adsr->envelope_value <= 0.0f) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	edd3 7a05 	vldr	s15, [r3, #20]
 800255c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	d900      	bls.n	8002568 <ADSR_UpdateEnvelope+0xe0>
                adsr->envelope_value = 0.0f;
                adsr->state = IDLE;
            }
            break;
 8002566:	e00a      	b.n	800257e <ADSR_UpdateEnvelope+0xf6>
                adsr->envelope_value = 0.0f;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	615a      	str	r2, [r3, #20]
                adsr->state = IDLE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2204      	movs	r2, #4
 8002574:	761a      	strb	r2, [r3, #24]
            break;
 8002576:	e002      	b.n	800257e <ADSR_UpdateEnvelope+0xf6>

        case IDLE:
            // Do nothing
            break;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <ADSR_UpdateEnvelope+0xf6>
            break;
 800257c:	bf00      	nop
    }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <ADSR_SetGateSignal>:

// Sets the gate signal for a specific ADSR instance
void ADSR_SetGateSignal(ADSR_t *adsr, uint8_t gate_signal_value) {
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
    adsr->gate_signal = gate_signal_value;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	765a      	strb	r2, [r3, #25]
    if (adsr->gate_signal) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7e5b      	ldrb	r3, [r3, #25]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <ADSR_SetGateSignal+0x24>
        adsr->state = ATTACK;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	761a      	strb	r2, [r3, #24]
    } else {
        adsr->state = RELEASE;
    }
}
 80025ae:	e002      	b.n	80025b6 <ADSR_SetGateSignal+0x2a>
        adsr->state = RELEASE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2203      	movs	r2, #3
 80025b4:	761a      	strb	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <ADSR_GetEnvelopeValue>:
//    }
//    adsr->amplitude = amplitude;
//}

// Returns the envelope value (scaled by the amplitude) for a specific ADSR instance
float ADSR_GetEnvelopeValue(const ADSR_t *adsr) {
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
    return adsr->envelope_value * adsr->amplitude;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	ed93 7a05 	vldr	s14, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80025da:	eeb0 0a67 	vmov.f32	s0, s15
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_Z21envelope_to_dac_valuef>:
//void Handle_NoteOn(uint8_t status, uint8_t data1, uint8_t data2);
//void Handle_NoteOff(uint8_t channel, uint8_t note, uint8_t velocity);



uint32_t envelope_to_dac_value(float envelope_value) {
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(envelope_value * 4095.0f);
 80025f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002614 <_Z21envelope_to_dac_valuef+0x2c>
 80025fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002602:	ee17 3a90 	vmov	r3, s15
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	457ff000 	.word	0x457ff000

08002618 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
//    if (htim->Instance == TIM13) {
//        update_adsr_flag = true;  // Set the flag to update ADSR parameters
// //       oled("ADSR Flag = TRUE");
//    }
    ChannelConfig2 config2;
    if (htim->Instance == TIM7) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d11f      	bne.n	800266a <HAL_TIM_PeriodElapsedCallback+0x52>
/*  ADSR kreivių formavimas naudojant laikmatį.  */
        // Update the first envelope
//    	ADSR_UpdateParametersWithEncoders(&adsr);
        ADSR_UpdateEnvelope(&envelopes[0]);
 800262a:	4813      	ldr	r0, [pc, #76]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800262c:	f7ff ff2c 	bl	8002488 <ADSR_UpdateEnvelope>
        uint32_t dac_value1 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[0]));
 8002630:	4811      	ldr	r0, [pc, #68]	@ (8002678 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002632:	f7ff ffc6 	bl	80025c2 <ADSR_GetEnvelopeValue>
 8002636:	eef0 7a40 	vmov.f32	s15, s0
 800263a:	eeb0 0a67 	vmov.f32	s0, s15
 800263e:	f7ff ffd3 	bl	80025e8 <_Z21envelope_to_dac_valuef>
 8002642:	61f8      	str	r0, [r7, #28]
//        config2.val[2] = dac_value1;
//        DACx61SW(&hi2c1, config2, 2);
//        DAC_MW(&hi2c1, dac2, config2, 2);
//        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value1);
        // Update the second envelope
        ADSR_UpdateEnvelope(&envelopes[1]);
 8002644:	480d      	ldr	r0, [pc, #52]	@ (800267c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002646:	f7ff ff1f 	bl	8002488 <ADSR_UpdateEnvelope>
        uint32_t dac_value2 = envelope_to_dac_value(ADSR_GetEnvelopeValue(&envelopes[1]));
 800264a:	480c      	ldr	r0, [pc, #48]	@ (800267c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800264c:	f7ff ffb9 	bl	80025c2 <ADSR_GetEnvelopeValue>
 8002650:	eef0 7a40 	vmov.f32	s15, s0
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	f7ff ffc6 	bl	80025e8 <_Z21envelope_to_dac_valuef>
 800265c:	61b8      	str	r0, [r7, #24]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value2);
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2200      	movs	r2, #0
 8002662:	2110      	movs	r1, #16
 8002664:	4806      	ldr	r0, [pc, #24]	@ (8002680 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002666:	f001 fdaf 	bl	80041c8 <HAL_DAC_SetValue>
//        if (ramp_counter > 4095) {
//            ramp_counter = 0;
//        }
//        HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ramp_counter);
//    }
}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40001400 	.word	0x40001400
 8002678:	200003b8 	.word	0x200003b8
 800267c:	200003d8 	.word	0x200003d8
 8002680:	20000048 	.word	0x20000048

08002684 <HAL_TIM_IC_CaptureCallback>:

int speed =0;
int busena = M_ADSR;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	ROT1 = ((int16_t)__HAL_TIM_GET_COUNTER(&htim2))/4;
 800268c:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_TIM_IC_CaptureCallback+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	b21b      	sxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	da00      	bge.n	800269a <HAL_TIM_IC_CaptureCallback+0x16>
 8002698:	3303      	adds	r3, #3
 800269a:	109b      	asrs	r3, r3, #2
 800269c:	b21a      	sxth	r2, r3
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80026a0:	801a      	strh	r2, [r3, #0]
	ROT2 = ((int16_t)__HAL_TIM_GET_COUNTER(&htim3))/4;
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <HAL_TIM_IC_CaptureCallback+0x48>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	da00      	bge.n	80026b0 <HAL_TIM_IC_CaptureCallback+0x2c>
 80026ae:	3303      	adds	r3, #3
 80026b0:	109b      	asrs	r3, r3, #2
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80026b6:	801a      	strh	r2, [r3, #0]
//	ROT3 = ((int16_t)__HAL_TIM_GET_COUNTER(&htim4))/4;
//	ROT4 = ((int16_t)__HAL_TIM_GET_COUNTER(&htim5))/4;

//    ADSR_SetAttackRate(&envelopes[0], ROT1);
//    ADSR_SetDecayRate(&envelopes[0], ROT2);
	meniu_mygtukai();
 80026b8:	f000 ff36 	bl	8003528 <meniu_mygtukai>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200001bc 	.word	0x200001bc
 80026c8:	200003b4 	.word	0x200003b4
 80026cc:	20000204 	.word	0x20000204
 80026d0:	200003b6 	.word	0x200003b6

080026d4 <HAL_GPIO_EXTI_Callback>:
    }

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
	meniu_mygtukai();
 80026de:	f000 ff23 	bl	8003528 <meniu_mygtukai>
    if (GPIO_Pin == M1_Pin) {
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e8:	d109      	bne.n	80026fe <HAL_GPIO_EXTI_Callback+0x2a>
    	busena = M_ADSR;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x50>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        // Debounce logic
//        HAL_Delay(20);
      if  (HAL_GPIO_ReadPin(M1_GPIO_Port, M1_Pin) == GPIO_PIN_RESET) {
 80026f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026f4:	480c      	ldr	r0, [pc, #48]	@ (8002728 <HAL_GPIO_EXTI_Callback+0x54>)
 80026f6:	f002 fba3 	bl	8004e40 <HAL_GPIO_ReadPin>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
      } else {
          // Set LED_D1_GPIO_Port to low
//            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
      }}

    if (GPIO_Pin == M2_Pin) {
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002704:	d109      	bne.n	800271a <HAL_GPIO_EXTI_Callback+0x46>
    	busena = M_DAC;
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x50>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]
        // Debounce logic
//        HAL_Delay(20);
        if (HAL_GPIO_ReadPin(M2_GPIO_Port, M2_Pin) == GPIO_PIN_RESET) {
 800270c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002710:	4805      	ldr	r0, [pc, #20]	@ (8002728 <HAL_GPIO_EXTI_Callback+0x54>)
 8002712:	f002 fb95 	bl	8004e40 <HAL_GPIO_ReadPin>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
        } else {
            // Set LED_D1_GPIO_Port to low
//            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
        }
    }
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000528 	.word	0x20000528
 8002728:	40020800 	.word	0x40020800

0800272c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002732:	f001 fb4d 	bl	8003dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002736:	f000 f89d 	bl	8002874 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273a:	f000 fc25 	bl	8002f88 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800273e:	f000 fc03 	bl	8002f48 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002742:	f000 f94f 	bl	80029e4 <_ZL12MX_I2C1_Initv>
  MX_DAC_Init();
 8002746:	f000 f909 	bl	800295c <_ZL11MX_DAC_Initv>
  MX_SPI2_Init();
 800274a:	f000 f9b3 	bl	8002ab4 <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 800274e:	f000 f9ed 	bl	8002b2c <_ZL12MX_TIM2_Initv>
  MX_TIM7_Init();
 8002752:	f000 fb63 	bl	8002e1c <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 8002756:	f000 fba1 	bl	8002e9c <_ZL13MX_TIM13_Initv>
  MX_I2C2_Init();
 800275a:	f000 f977 	bl	8002a4c <_ZL12MX_I2C2_Initv>
  MX_USART3_UART_Init();
 800275e:	f000 fbc5 	bl	8002eec <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 8002762:	f000 fa41 	bl	8002be8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8002766:	f000 fa9d 	bl	8002ca4 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 800276a:	f000 faf9 	bl	8002d60 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

	Port.begin(1, &huart3, &huart3);
 800276e:	4b32      	ldr	r3, [pc, #200]	@ (8002838 <main+0x10c>)
 8002770:	4a31      	ldr	r2, [pc, #196]	@ (8002838 <main+0x10c>)
 8002772:	2101      	movs	r1, #1
 8002774:	4831      	ldr	r0, [pc, #196]	@ (800283c <main+0x110>)
 8002776:	f7fe fbb2 	bl	8000ede <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>
	Port.setHandleClock(Handle_Clock);
 800277a:	4931      	ldr	r1, [pc, #196]	@ (8002840 <main+0x114>)
 800277c:	482f      	ldr	r0, [pc, #188]	@ (800283c <main+0x110>)
 800277e:	f7ff f8f6 	bl	800196e <_ZN13MidiInterface14setHandleClockEPFvvE>
	Port.setHandleStart(Handle_Start);
 8002782:	4930      	ldr	r1, [pc, #192]	@ (8002844 <main+0x118>)
 8002784:	482d      	ldr	r0, [pc, #180]	@ (800283c <main+0x110>)
 8002786:	f7ff f900 	bl	800198a <_ZN13MidiInterface14setHandleStartEPFvvE>
	Port.setHandleStop(Handle_Stop);
 800278a:	492f      	ldr	r1, [pc, #188]	@ (8002848 <main+0x11c>)
 800278c:	482b      	ldr	r0, [pc, #172]	@ (800283c <main+0x110>)
 800278e:	f7ff f90a 	bl	80019a6 <_ZN13MidiInterface13setHandleStopEPFvvE>
	Port.setHandleNoteOn(Handle_NoteOn);
 8002792:	492e      	ldr	r1, [pc, #184]	@ (800284c <main+0x120>)
 8002794:	4829      	ldr	r0, [pc, #164]	@ (800283c <main+0x110>)
 8002796:	f7ff f8ce 	bl	8001936 <_ZN13MidiInterface15setHandleNoteOnEPFvhhhE>
	Port.setHandleNoteOff(Handle_NoteOff);
 800279a:	492d      	ldr	r1, [pc, #180]	@ (8002850 <main+0x124>)
 800279c:	4827      	ldr	r0, [pc, #156]	@ (800283c <main+0x110>)
 800279e:	f7ff f8bc 	bl	800191a <_ZN13MidiInterface16setHandleNoteOffEPFvhhhE>
	Port.setHandleControlChange(Handle_CC);
 80027a2:	492c      	ldr	r1, [pc, #176]	@ (8002854 <main+0x128>)
 80027a4:	4825      	ldr	r0, [pc, #148]	@ (800283c <main+0x110>)
 80027a6:	f7ff f8d4 	bl	8001952 <_ZN13MidiInterface22setHandleControlChangeEPFvhhhE>

    HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80027aa:	2110      	movs	r1, #16
 80027ac:	482a      	ldr	r0, [pc, #168]	@ (8002858 <main+0x12c>)
 80027ae:	f001 fcb4 	bl	800411a <HAL_DAC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80027b2:	2100      	movs	r1, #0
 80027b4:	4828      	ldr	r0, [pc, #160]	@ (8002858 <main+0x12c>)
 80027b6:	f001 fcb0 	bl	800411a <HAL_DAC_Start>

//    mcp4728_generalCall(&hi2c1, MCP4728_GENERAL_RESET);
//    HAL_Delay(10);
        ChannelConfig config;
        ChannelConfig2 config2;
        dac_init(&config, &config2);
 80027ba:	f107 0208 	add.w	r2, r7, #8
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fca7 	bl	8003118 <dac_init>

        mcp4728_sequentialWrite(&hi2c1, config, 0);
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d4:	4821      	ldr	r0, [pc, #132]	@ (800285c <main+0x130>)
 80027d6:	f000 fd89 	bl	80032ec <mcp4728_sequentialWrite>
//        mcp4728_vrefSelect(&hi2c1, config);

//        mcp4728_configure(&hi2c1, dac1, config);
        mcp4728_configure(&hi2c1, dac2, config, 0);
 80027da:	2300      	movs	r3, #0
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	8bbb      	ldrh	r3, [r7, #28]
 80027e0:	f8ad 3000 	strh.w	r3, [sp]
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	cb0c      	ldmia	r3, {r2, r3}
 80027ea:	21c2      	movs	r1, #194	@ 0xc2
 80027ec:	481b      	ldr	r0, [pc, #108]	@ (800285c <main+0x130>)
 80027ee:	f000 fe0c 	bl	800340a <mcp4728_configure>
//    ssd1306_Init();
//    ssd1306_SetCursor(5, 50);
//    ssd1306_WriteString(tekstas, Font_7x10, White);
//    ssd1306_UpdateScreen();

    HAL_TIM_Base_Start_IT(&htim7);
 80027f2:	481b      	ldr	r0, [pc, #108]	@ (8002860 <main+0x134>)
 80027f4:	f005 fd02 	bl	80081fc <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim13);
    //HAL_TIM_Base_Start(&htim2);
    ADSR_Init(envelopes, NUM_ENVELOPES);
 80027f8:	2104      	movs	r1, #4
 80027fa:	481a      	ldr	r0, [pc, #104]	@ (8002864 <main+0x138>)
 80027fc:	f7ff fd5c 	bl	80022b8 <ADSR_Init>

    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8002800:	213c      	movs	r1, #60	@ 0x3c
 8002802:	4819      	ldr	r0, [pc, #100]	@ (8002868 <main+0x13c>)
 8002804:	f005 fe10 	bl	8008428 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002808:	213c      	movs	r1, #60	@ 0x3c
 800280a:	4818      	ldr	r0, [pc, #96]	@ (800286c <main+0x140>)
 800280c:	f005 fe0c 	bl	8008428 <HAL_TIM_Encoder_Start_IT>
//    HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
//    HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <main+0x144>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <main+0x144>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <main+0x144>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
    meniu_mygtukai();
 800282c:	f000 fe7c 	bl	8003528 <meniu_mygtukai>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Port.read();
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <main+0x110>)
 8002832:	f7fe fd02 	bl	800123a <_ZN13MidiInterface4readEv>
 8002836:	e7fb      	b.n	8002830 <main+0x104>
 8002838:	2000036c 	.word	0x2000036c
 800283c:	20000438 	.word	0x20000438
 8002840:	08002015 	.word	0x08002015
 8002844:	08002049 	.word	0x08002049
 8002848:	08002061 	.word	0x08002061
 800284c:	08002071 	.word	0x08002071
 8002850:	08002195 	.word	0x08002195
 8002854:	08002209 	.word	0x08002209
 8002858:	20000048 	.word	0x20000048
 800285c:	2000005c 	.word	0x2000005c
 8002860:	200002dc 	.word	0x200002dc
 8002864:	200003b8 	.word	0x200003b8
 8002868:	200001bc 	.word	0x200001bc
 800286c:	20000204 	.word	0x20000204
 8002870:	40023800 	.word	0x40023800

08002874 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b094      	sub	sp, #80	@ 0x50
 8002878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800287a:	f107 0320 	add.w	r3, r7, #32
 800287e:	2230      	movs	r2, #48	@ 0x30
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f007 f97c 	bl	8009b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <_Z18SystemClock_Configv+0xe0>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002954 <_Z18SystemClock_Configv+0xe0>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <_Z18SystemClock_Configv+0xe0>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <_Z18SystemClock_Configv+0xe4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a26      	ldr	r2, [pc, #152]	@ (8002958 <_Z18SystemClock_Configv+0xe4>)
 80028be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <_Z18SystemClock_Configv+0xe4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028da:	2302      	movs	r3, #2
 80028dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028e4:	2304      	movs	r3, #4
 80028e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80028e8:	23a8      	movs	r3, #168	@ 0xa8
 80028ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ec:	2302      	movs	r3, #2
 80028ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028f0:	2304      	movs	r3, #4
 80028f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f4:	f107 0320 	add.w	r3, r7, #32
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fdef 	bl	80074dc <HAL_RCC_OscConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800290e:	f000 fbde 	bl	80030ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002912:	230f      	movs	r3, #15
 8002914:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002916:	2302      	movs	r3, #2
 8002918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800291e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	2105      	movs	r1, #5
 8002930:	4618      	mov	r0, r3
 8002932:	f005 f84b 	bl	80079cc <HAL_RCC_ClockConfig>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002946:	f000 fbc2 	bl	80030ce <Error_Handler>
  }
}
 800294a:	bf00      	nop
 800294c:	3750      	adds	r7, #80	@ 0x50
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000

0800295c <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002962:	463b      	mov	r3, r7
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800296a:	4b1c      	ldr	r3, [pc, #112]	@ (80029dc <_ZL11MX_DAC_Initv+0x80>)
 800296c:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <_ZL11MX_DAC_Initv+0x84>)
 800296e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002970:	481a      	ldr	r0, [pc, #104]	@ (80029dc <_ZL11MX_DAC_Initv+0x80>)
 8002972:	f001 fbb0 	bl	80040d6 <HAL_DAC_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8002986:	f000 fba2 	bl	80030ce <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800298a:	2300      	movs	r3, #0
 800298c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002992:	463b      	mov	r3, r7
 8002994:	2200      	movs	r2, #0
 8002996:	4619      	mov	r1, r3
 8002998:	4810      	ldr	r0, [pc, #64]	@ (80029dc <_ZL11MX_DAC_Initv+0x80>)
 800299a:	f001 fc3f 	bl	800421c <HAL_DAC_ConfigChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 80029ae:	f000 fb8e 	bl	80030ce <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80029b2:	463b      	mov	r3, r7
 80029b4:	2210      	movs	r2, #16
 80029b6:	4619      	mov	r1, r3
 80029b8:	4808      	ldr	r0, [pc, #32]	@ (80029dc <_ZL11MX_DAC_Initv+0x80>)
 80029ba:	f001 fc2f 	bl	800421c <HAL_DAC_ConfigChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <_ZL11MX_DAC_Initv+0x76>
  {
    Error_Handler();
 80029ce:	f000 fb7e 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000048 	.word	0x20000048
 80029e0:	40007400 	.word	0x40007400

080029e4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e8:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 80029ea:	4a16      	ldr	r2, [pc, #88]	@ (8002a44 <_ZL12MX_I2C1_Initv+0x60>)
 80029ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ee:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 80029f0:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <_ZL12MX_I2C1_Initv+0x64>)
 80029f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a1a:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a20:	4807      	ldr	r0, [pc, #28]	@ (8002a40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a22:	f002 fa71 	bl	8004f08 <HAL_I2C_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002a36:	f000 fb4a 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000005c 	.word	0x2000005c
 8002a44:	40005400 	.word	0x40005400
 8002a48:	000186a0 	.word	0x000186a0

08002a4c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a50:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a52:	4a16      	ldr	r2, [pc, #88]	@ (8002aac <_ZL12MX_I2C2_Initv+0x60>)
 8002a54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002a56:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a58:	4a15      	ldr	r2, [pc, #84]	@ (8002ab0 <_ZL12MX_I2C2_Initv+0x64>)
 8002a5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a5c:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a68:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a70:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a88:	4807      	ldr	r0, [pc, #28]	@ (8002aa8 <_ZL12MX_I2C2_Initv+0x5c>)
 8002a8a:	f002 fa3d 	bl	8004f08 <HAL_I2C_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8002a9e:	f000 fb16 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200000b0 	.word	0x200000b0
 8002aac:	40005800 	.word	0x40005800
 8002ab0:	00061a80 	.word	0x00061a80

08002ab4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002aba:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <_ZL12MX_SPI2_Initv+0x74>)
 8002abc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002abe:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002ac0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ac4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002ace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ad2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ad4:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ae6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aee:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002b02:	220a      	movs	r2, #10
 8002b04:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b06:	4807      	ldr	r0, [pc, #28]	@ (8002b24 <_ZL12MX_SPI2_Initv+0x70>)
 8002b08:	f005 f980 	bl	8007e0c <HAL_SPI_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf14      	ite	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	2300      	moveq	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <_ZL12MX_SPI2_Initv+0x6c>
  {
    Error_Handler();
 8002b1c:	f000 fad7 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000164 	.word	0x20000164
 8002b28:	40003800 	.word	0x40003800

08002b2c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	@ 0x30
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	2224      	movs	r2, #36	@ 0x24
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f007 f820 	bl	8009b80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b48:	4b26      	ldr	r3, [pc, #152]	@ (8002be4 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b50:	4b24      	ldr	r3, [pc, #144]	@ (8002be4 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b56:	4b23      	ldr	r3, [pc, #140]	@ (8002be4 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b5c:	4b21      	ldr	r3, [pc, #132]	@ (8002be4 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b64:	4b1f      	ldr	r3, [pc, #124]	@ (8002be4 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002be4 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b70:	2301      	movs	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4812      	ldr	r0, [pc, #72]	@ (8002be4 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b9c:	f005 fb9e 	bl	80082dc <HAL_TIM_Encoder_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8002bb0:	f000 fa8d 	bl	80030ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4808      	ldr	r0, [pc, #32]	@ (8002be4 <_ZL12MX_TIM2_Initv+0xb8>)
 8002bc2:	f005 febf 	bl	8008944 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8002bd6:	f000 fa7a 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bda:	bf00      	nop
 8002bdc:	3730      	adds	r7, #48	@ 0x30
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200001bc 	.word	0x200001bc

08002be8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	@ 0x30
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	2224      	movs	r2, #36	@ 0x24
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 ffc2 	bl	8009b80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c04:	4b25      	ldr	r3, [pc, #148]	@ (8002c9c <_ZL12MX_TIM3_Initv+0xb4>)
 8002c06:	4a26      	ldr	r2, [pc, #152]	@ (8002ca0 <_ZL12MX_TIM3_Initv+0xb8>)
 8002c08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c0a:	4b24      	ldr	r3, [pc, #144]	@ (8002c9c <_ZL12MX_TIM3_Initv+0xb4>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b22      	ldr	r3, [pc, #136]	@ (8002c9c <_ZL12MX_TIM3_Initv+0xb4>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c16:	4b21      	ldr	r3, [pc, #132]	@ (8002c9c <_ZL12MX_TIM3_Initv+0xb4>)
 8002c18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c9c <_ZL12MX_TIM3_Initv+0xb4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c24:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <_ZL12MX_TIM3_Initv+0xb4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c32:	2301      	movs	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c42:	2301      	movs	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4619      	mov	r1, r3
 8002c54:	4811      	ldr	r0, [pc, #68]	@ (8002c9c <_ZL12MX_TIM3_Initv+0xb4>)
 8002c56:	f005 fb41 	bl	80082dc <HAL_TIM_Encoder_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8002c6a:	f000 fa30 	bl	80030ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4808      	ldr	r0, [pc, #32]	@ (8002c9c <_ZL12MX_TIM3_Initv+0xb4>)
 8002c7c:	f005 fe62 	bl	8008944 <HAL_TIMEx_MasterConfigSynchronization>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8002c90:	f000 fa1d 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	3730      	adds	r7, #48	@ 0x30
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000204 	.word	0x20000204
 8002ca0:	40000400 	.word	0x40000400

08002ca4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	@ 0x30
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	2224      	movs	r2, #36	@ 0x24
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f006 ff64 	bl	8009b80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cc0:	4b25      	ldr	r3, [pc, #148]	@ (8002d58 <_ZL12MX_TIM4_Initv+0xb4>)
 8002cc2:	4a26      	ldr	r2, [pc, #152]	@ (8002d5c <_ZL12MX_TIM4_Initv+0xb8>)
 8002cc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002cc6:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <_ZL12MX_TIM4_Initv+0xb4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ccc:	4b22      	ldr	r3, [pc, #136]	@ (8002d58 <_ZL12MX_TIM4_Initv+0xb4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cd2:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <_ZL12MX_TIM4_Initv+0xb4>)
 8002cd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cda:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <_ZL12MX_TIM4_Initv+0xb4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <_ZL12MX_TIM4_Initv+0xb4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002d0a:	f107 030c 	add.w	r3, r7, #12
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4811      	ldr	r0, [pc, #68]	@ (8002d58 <_ZL12MX_TIM4_Initv+0xb4>)
 8002d12:	f005 fae3 	bl	80082dc <HAL_TIM_Encoder_Init>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002d26:	f000 f9d2 	bl	80030ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d32:	1d3b      	adds	r3, r7, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4808      	ldr	r0, [pc, #32]	@ (8002d58 <_ZL12MX_TIM4_Initv+0xb4>)
 8002d38:	f005 fe04 	bl	8008944 <HAL_TIMEx_MasterConfigSynchronization>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002d4c:	f000 f9bf 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d50:	bf00      	nop
 8002d52:	3730      	adds	r7, #48	@ 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	2000024c 	.word	0x2000024c
 8002d5c:	40000800 	.word	0x40000800

08002d60 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	@ 0x30
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d66:	f107 030c 	add.w	r3, r7, #12
 8002d6a:	2224      	movs	r2, #36	@ 0x24
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f006 ff06 	bl	8009b80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <_ZL12MX_TIM5_Initv+0xb4>)
 8002d7e:	4a26      	ldr	r2, [pc, #152]	@ (8002e18 <_ZL12MX_TIM5_Initv+0xb8>)
 8002d80:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d82:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <_ZL12MX_TIM5_Initv+0xb4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d88:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <_ZL12MX_TIM5_Initv+0xb4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d8e:	4b21      	ldr	r3, [pc, #132]	@ (8002e14 <_ZL12MX_TIM5_Initv+0xb4>)
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d96:	4b1f      	ldr	r3, [pc, #124]	@ (8002e14 <_ZL12MX_TIM5_Initv+0xb4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <_ZL12MX_TIM5_Initv+0xb4>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002daa:	2301      	movs	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4811      	ldr	r0, [pc, #68]	@ (8002e14 <_ZL12MX_TIM5_Initv+0xb4>)
 8002dce:	f005 fa85 	bl	80082dc <HAL_TIM_Encoder_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8002de2:	f000 f974 	bl	80030ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4808      	ldr	r0, [pc, #32]	@ (8002e14 <_ZL12MX_TIM5_Initv+0xb4>)
 8002df4:	f005 fda6 	bl	8008944 <HAL_TIMEx_MasterConfigSynchronization>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8002e08:	f000 f961 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e0c:	bf00      	nop
 8002e0e:	3730      	adds	r7, #48	@ 0x30
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000294 	.word	0x20000294
 8002e18:	40000c00 	.word	0x40000c00

08002e1c <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e22:	463b      	mov	r3, r7
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <_ZL12MX_TIM7_Initv+0x78>)
 8002e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8002e98 <_ZL12MX_TIM7_Initv+0x7c>)
 8002e2e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16799;
 8002e30:	4b18      	ldr	r3, [pc, #96]	@ (8002e94 <_ZL12MX_TIM7_Initv+0x78>)
 8002e32:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002e36:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e38:	4b16      	ldr	r3, [pc, #88]	@ (8002e94 <_ZL12MX_TIM7_Initv+0x78>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <_ZL12MX_TIM7_Initv+0x78>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <_ZL12MX_TIM7_Initv+0x78>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e4a:	4812      	ldr	r0, [pc, #72]	@ (8002e94 <_ZL12MX_TIM7_Initv+0x78>)
 8002e4c:	f005 f986 	bl	800815c <HAL_TIM_Base_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8002e60:	f000 f935 	bl	80030ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e6c:	463b      	mov	r3, r7
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4808      	ldr	r0, [pc, #32]	@ (8002e94 <_ZL12MX_TIM7_Initv+0x78>)
 8002e72:	f005 fd67 	bl	8008944 <HAL_TIMEx_MasterConfigSynchronization>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8002e86:	f000 f922 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200002dc 	.word	0x200002dc
 8002e98:	40001400 	.word	0x40001400

08002e9c <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002ea0:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <_ZL13MX_TIM13_Initv+0x48>)
 8002ea2:	4a11      	ldr	r2, [pc, #68]	@ (8002ee8 <_ZL13MX_TIM13_Initv+0x4c>)
 8002ea4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <_ZL13MX_TIM13_Initv+0x48>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <_ZL13MX_TIM13_Initv+0x48>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <_ZL13MX_TIM13_Initv+0x48>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <_ZL13MX_TIM13_Initv+0x48>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <_ZL13MX_TIM13_Initv+0x48>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ec4:	4807      	ldr	r0, [pc, #28]	@ (8002ee4 <_ZL13MX_TIM13_Initv+0x48>)
 8002ec6:	f005 f949 	bl	800815c <HAL_TIM_Base_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <_ZL13MX_TIM13_Initv+0x42>
  {
    Error_Handler();
 8002eda:	f000 f8f8 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000324 	.word	0x20000324
 8002ee8:	40001c00 	.word	0x40001c00

08002eec <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002ef2:	4a14      	ldr	r2, [pc, #80]	@ (8002f44 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 31250;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002ef8:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8002efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f12:	2204      	movs	r2, #4
 8002f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f22:	4807      	ldr	r0, [pc, #28]	@ (8002f40 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f24:	f005 fd9e 	bl	8008a64 <HAL_UART_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002f38:	f000 f8c9 	bl	80030ce <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	2000036c 	.word	0x2000036c
 8002f44:	40004800 	.word	0x40004800

08002f48 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <_ZL11MX_DMA_Initv+0x3c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	4a0b      	ldr	r2, [pc, #44]	@ (8002f84 <_ZL11MX_DMA_Initv+0x3c>)
 8002f58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5e:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <_ZL11MX_DMA_Initv+0x3c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2011      	movs	r0, #17
 8002f70:	f001 f87b 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002f74:	2011      	movs	r0, #17
 8002f76:	f001 f894 	bl	80040a2 <HAL_NVIC_EnableIRQ>

}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800

08002f88 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	@ 0x28
 8002f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	4b42      	ldr	r3, [pc, #264]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	4a41      	ldr	r2, [pc, #260]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fae:	4b3f      	ldr	r3, [pc, #252]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fca:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b34      	ldr	r3, [pc, #208]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a33      	ldr	r2, [pc, #204]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b31      	ldr	r3, [pc, #196]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	4a25      	ldr	r2, [pc, #148]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8003018:	f043 0308 	orr.w	r3, r3, #8
 800301c:	6313      	str	r3, [r2, #48]	@ 0x30
 800301e:	4b23      	ldr	r3, [pc, #140]	@ (80030ac <_ZL12MX_GPIO_Initv+0x124>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800302a:	2200      	movs	r2, #0
 800302c:	2103      	movs	r1, #3
 800302e:	4820      	ldr	r0, [pc, #128]	@ (80030b0 <_ZL12MX_GPIO_Initv+0x128>)
 8003030:	f001 ff1e 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 8003034:	2200      	movs	r2, #0
 8003036:	2104      	movs	r1, #4
 8003038:	481e      	ldr	r0, [pc, #120]	@ (80030b4 <_ZL12MX_GPIO_Initv+0x12c>)
 800303a:	f001 ff19 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_Pin M2_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M2_Pin;
 800303e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003044:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800304a:	2301      	movs	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	4816      	ldr	r0, [pc, #88]	@ (80030b0 <_ZL12MX_GPIO_Initv+0x128>)
 8003056:	f001 fd57 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800305a:	2303      	movs	r3, #3
 800305c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305e:	2301      	movs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	4619      	mov	r1, r3
 8003070:	480f      	ldr	r0, [pc, #60]	@ (80030b0 <_ZL12MX_GPIO_Initv+0x128>)
 8003072:	f001 fd49 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D1_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin;
 8003076:	2304      	movs	r3, #4
 8003078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D1_GPIO_Port, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	4809      	ldr	r0, [pc, #36]	@ (80030b4 <_ZL12MX_GPIO_Initv+0x12c>)
 800308e:	f001 fd3b 	bl	8004b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	2028      	movs	r0, #40	@ 0x28
 8003098:	f000 ffe7 	bl	800406a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800309c:	2028      	movs	r0, #40	@ 0x28
 800309e:	f001 f800 	bl	80040a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030a2:	bf00      	nop
 80030a4:	3728      	adds	r7, #40	@ 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020800 	.word	0x40020800
 80030b4:	40020c00 	.word	0x40020c00

080030b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	__NOP();
 80030c0:	bf00      	nop
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030d2:	b672      	cpsid	i
}
 80030d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030d6:	bf00      	nop
 80030d8:	e7fd      	b.n	80030d6 <Error_Handler+0x8>
	...

080030dc <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
MidiInterface Port;
 80030e0:	4802      	ldr	r0, [pc, #8]	@ (80030ec <_Z41__static_initialization_and_destruction_0v+0x10>)
 80030e2:	f7fd fe3b 	bl	8000d5c <_ZN13MidiInterfaceC1Ev>
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000438 	.word	0x20000438

080030f0 <_Z41__static_initialization_and_destruction_1v>:
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
MidiInterface Port;
 80030f4:	4802      	ldr	r0, [pc, #8]	@ (8003100 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80030f6:	f7fd fee7 	bl	8000ec8 <_ZN13MidiInterfaceD1Ev>
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000438 	.word	0x20000438

08003104 <_GLOBAL__sub_I_hdac>:
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
 8003108:	f7ff ffe8 	bl	80030dc <_Z41__static_initialization_and_destruction_0v>
 800310c:	bd80      	pop	{r7, pc}

0800310e <_GLOBAL__sub_D_hdac>:
 800310e:	b580      	push	{r7, lr}
 8003110:	af00      	add	r7, sp, #0
 8003112:	f7ff ffed 	bl	80030f0 <_Z41__static_initialization_and_destruction_1v>
 8003116:	bd80      	pop	{r7, pc}

08003118 <dac_init>:
 */

#include <mcp4728_mod.h>


void dac_init(ChannelConfig *config ,ChannelConfig2 *config2) {
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
    config->vref = 0x1;  // Use VDD as reference voltage - 0, internal - 1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
    config->gain = 0x1;  // Gain of 1x
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	705a      	strb	r2, [r3, #1]
    config->val[0] = 0;  // 12-bit DAC value for channel A
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	805a      	strh	r2, [r3, #2]
    config->val[1] = 0;  // 12-bit DAC value for channel B
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	809a      	strh	r2, [r3, #4]
    config->val[2] = 0;  // 12-bit DAC value for channel C
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	80da      	strh	r2, [r3, #6]
    config->val[3] = 0;  // 12-bit DAC value for channel D
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	811a      	strh	r2, [r3, #8]


    config2->vref = 0x0;  // Use VDD as reference voltage
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
    config2->gain = 0x1;  // Gain of 1x
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2201      	movs	r2, #1
 8003150:	705a      	strb	r2, [r3, #1]
    config2->val[0] = 0;  // 12-bit DAC value for channel A
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2200      	movs	r2, #0
 8003156:	805a      	strh	r2, [r3, #2]
    config2->val[1] = 0;  // 12-bit DAC value for channel B
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	809a      	strh	r2, [r3, #4]
    config2->val[2] = 0;  // 12-bit DAC value for channel C
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2200      	movs	r2, #0
 8003162:	80da      	strh	r2, [r3, #6]
    config2->val[3] = 0;  // 12-bit DAC value for channel D
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	811a      	strh	r2, [r3, #8]

}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <mcp4728_generalCall>:
//HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
//    // Transmit the general call command
//    return HAL_I2C_Master_Transmit(i2cHandler, 0x00, &command, 1, HAL_MAX_DELAY);
//}

HAL_StatusTypeDef mcp4728_generalCall(I2C_HandleTypeDef *i2cHandler, uint8_t command) {
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
    // Transmit the general call command
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, 0x00, &command, 1);
 8003182:	1cfa      	adds	r2, r7, #3
 8003184:	2301      	movs	r3, #1
 8003186:	2100      	movs	r1, #0
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f002 f915 	bl	80053b8 <HAL_I2C_Master_Transmit_DMA>
 800318e:	4603      	mov	r3, r0
 8003190:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <mcp4728_generalCall+0x26>
        return ret;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	e007      	b.n	80031ac <mcp4728_generalCall+0x36>
    }

    // Wait for the DMA transfer to complete
    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 800319c:	bf00      	nop
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f002 fc0f 	bl	80059c2 <HAL_I2C_GetState>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d1f9      	bne.n	800319e <mcp4728_generalCall+0x28>

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <DAC_FW>:
 *
 * @param i2cHandler Pointer to the I2C handler.
 * @param config Configuration structure containing the DAC values for each channel.
 * @return HAL_StatusTypeDef HAL status indicating success or failure.
 */
HAL_StatusTypeDef DAC_FW(I2C_HandleTypeDef *i2cHandler, uint8_t dac_address, ChannelConfig config) {
 80031b4:	b082      	sub	sp, #8
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	f107 0020 	add.w	r0, r7, #32
 80031c2:	e880 000c 	stmia.w	r0, {r2, r3}
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[8]; // Buffer to hold the data for 4 channels, 2 bytes each

    for (uint8_t i = 0; i < 4; i++) {
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]
 80031ce:	e01d      	b.n	800320c <DAC_FW+0x58>
        buf[2 * i] = (config.val[i] >> 8); // Upper 8 bits of DAC value
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	3320      	adds	r3, #32
 80031d6:	443b      	add	r3, r7
 80031d8:	885b      	ldrh	r3, [r3, #2]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	b29a      	uxth	r2, r3
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	3318      	adds	r3, #24
 80031e6:	443b      	add	r3, r7
 80031e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        buf[2 * i + 1] = config.val[i] & 0xFF; // Lower 8 bits of DAC value
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	3320      	adds	r3, #32
 80031f2:	443b      	add	r3, r7
 80031f4:	885a      	ldrh	r2, [r3, #2]
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	3301      	adds	r3, #1
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	3318      	adds	r3, #24
 8003200:	443b      	add	r3, r7
 8003202:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	3301      	adds	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d9de      	bls.n	80031d0 <DAC_FW+0x1c>
    }

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, dac_address, buf, sizeof(buf));
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	b299      	uxth	r1, r3
 8003216:	f107 020c 	add.w	r2, r7, #12
 800321a:	2308      	movs	r3, #8
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f002 f8cb 	bl	80053b8 <HAL_I2C_Master_Transmit_DMA>
 8003222:	4603      	mov	r3, r0
 8003224:	75bb      	strb	r3, [r7, #22]
    if (ret != HAL_OK) {
 8003226:	7dbb      	ldrb	r3, [r7, #22]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <DAC_FW+0x7c>
        return ret;
 800322c:	7dbb      	ldrb	r3, [r7, #22]
 800322e:	e00b      	b.n	8003248 <DAC_FW+0x94>
    }

    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 8003230:	bf00      	nop
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f002 fbc5 	bl	80059c2 <HAL_I2C_GetState>
 8003238:	4603      	mov	r3, r0
 800323a:	2b20      	cmp	r3, #32
 800323c:	d1f9      	bne.n	8003232 <DAC_FW+0x7e>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 800323e:	2108      	movs	r1, #8
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff98 	bl	8003176 <mcp4728_generalCall>
 8003246:	4603      	mov	r3, r0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003252:	b002      	add	sp, #8
 8003254:	4770      	bx	lr

08003256 <DACx61FW>:

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
}


HAL_StatusTypeDef DACx61FW(I2C_HandleTypeDef *i2cHandler, ChannelConfig2 config_0x61) {
 8003256:	b580      	push	{r7, lr}
 8003258:	b088      	sub	sp, #32
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	4638      	mov	r0, r7
 8003260:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[8]; // Buffer to hold the data for 4 channels, 2 bytes each

    for (uint8_t i = 0; i < 4; i++) {
 8003264:	2300      	movs	r3, #0
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e01f      	b.n	80032aa <DACx61FW+0x54>
        buf[2 * i] = (config_0x61.val[i] >> 8); // Upper 8 bits of DAC value
 800326a:	7ffb      	ldrb	r3, [r7, #31]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	3320      	adds	r3, #32
 8003270:	443b      	add	r3, r7
 8003272:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	b29a      	uxth	r2, r3
 800327a:	7ffb      	ldrb	r3, [r7, #31]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	3320      	adds	r3, #32
 8003282:	443b      	add	r3, r7
 8003284:	f803 2c0c 	strb.w	r2, [r3, #-12]
        buf[2 * i + 1] = config_0x61.val[i] & 0xFF; // Lower 8 bits of DAC value
 8003288:	7ffb      	ldrb	r3, [r7, #31]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	3320      	adds	r3, #32
 800328e:	443b      	add	r3, r7
 8003290:	f833 2c1e 	ldrh.w	r2, [r3, #-30]
 8003294:	7ffb      	ldrb	r3, [r7, #31]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	3301      	adds	r3, #1
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	3320      	adds	r3, #32
 800329e:	443b      	add	r3, r7
 80032a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80032a4:	7ffb      	ldrb	r3, [r7, #31]
 80032a6:	3301      	adds	r3, #1
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d9dc      	bls.n	800326a <DACx61FW+0x14>
    }

    HAL_StatusTypeDef ret =  HAL_I2C_Master_Transmit_DMA(i2cHandler, dac2, buf, sizeof(buf));
 80032b0:	f107 0214 	add.w	r2, r7, #20
 80032b4:	2308      	movs	r3, #8
 80032b6:	21c2      	movs	r1, #194	@ 0xc2
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f002 f87d 	bl	80053b8 <HAL_I2C_Master_Transmit_DMA>
 80032be:	4603      	mov	r3, r0
 80032c0:	77bb      	strb	r3, [r7, #30]
    if (ret != HAL_OK) {
 80032c2:	7fbb      	ldrb	r3, [r7, #30]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <DACx61FW+0x76>
        return ret;
 80032c8:	7fbb      	ldrb	r3, [r7, #30]
 80032ca:	e00b      	b.n	80032e4 <DACx61FW+0x8e>
    }

    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 80032cc:	bf00      	nop
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f002 fb77 	bl	80059c2 <HAL_I2C_GetState>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d1f9      	bne.n	80032ce <DACx61FW+0x78>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 80032da:	2108      	movs	r1, #8
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff ff4a 	bl	8003176 <mcp4728_generalCall>
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <mcp4728_sequentialWrite>:
 * @param i2cHandler Pointer to the I2C handler.
 * @param config Configuration structure containing the DAC values and configuration for each channel.
 * @param channel The starting channel to be updated (0 for A, 1 for B, 2 for C, 3 for D).
 * @return HAL_StatusTypeDef HAL status indicating success or failure.
 */
HAL_StatusTypeDef mcp4728_sequentialWrite(I2C_HandleTypeDef *i2cHandler, ChannelConfig config, uint8_t channel) {
 80032ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032f0:	b089      	sub	sp, #36	@ 0x24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	4638      	mov	r0, r7
 80032f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80032fc:	466b      	mov	r3, sp
 80032fe:	461e      	mov	r6, r3
    uint8_t buf[9 - 2 * channel];
 8003300:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	f1c3 0109 	rsb	r1, r3, #9
 800330a:	1e4b      	subs	r3, r1, #1
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	460a      	mov	r2, r1
 8003310:	2300      	movs	r3, #0
 8003312:	4690      	mov	r8, r2
 8003314:	4699      	mov	r9, r3
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800332a:	460a      	mov	r2, r1
 800332c:	2300      	movs	r3, #0
 800332e:	4614      	mov	r4, r2
 8003330:	461d      	mov	r5, r3
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	00eb      	lsls	r3, r5, #3
 800333c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003340:	00e2      	lsls	r2, r4, #3
 8003342:	460b      	mov	r3, r1
 8003344:	3307      	adds	r3, #7
 8003346:	08db      	lsrs	r3, r3, #3
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	ebad 0d03 	sub.w	sp, sp, r3
 800334e:	466b      	mov	r3, sp
 8003350:	3300      	adds	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
    buf[0] = MCP4728_SEQ_WRITE | (channel << 1);
 8003354:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	b25b      	sxtb	r3, r3
 800335c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003360:	b25b      	sxtb	r3, r3
 8003362:	b2da      	uxtb	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	701a      	strb	r2, [r3, #0]
    uint8_t buf_index = 1;
 8003368:	2301      	movs	r3, #1
 800336a:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < 4 - channel; i++) {
 800336c:	2300      	movs	r3, #0
 800336e:	77bb      	strb	r3, [r7, #30]
 8003370:	e024      	b.n	80033bc <mcp4728_sequentialWrite+0xd0>
        buf[buf_index++] = ((config.vref & (0 << (i + channel))) ? 0x80 : 0) | // VREF bit (7th bit)
                           ((config.gain & (0 << (i + channel))) ? 0x10 : 0) | // Gain bit (4th bit)
                           (config.val[i + channel] >> 8); // Upper 8 bits of the 12-bit DAC value
 8003372:	7fba      	ldrb	r2, [r7, #30]
 8003374:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003378:	4413      	add	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	3320      	adds	r3, #32
 800337e:	443b      	add	r3, r7
 8003380:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
        buf[buf_index++] = ((config.vref & (0 << (i + channel))) ? 0x80 : 0) | // VREF bit (7th bit)
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	b299      	uxth	r1, r3
 8003388:	7ffb      	ldrb	r3, [r7, #31]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	77fa      	strb	r2, [r7, #31]
 800338e:	461a      	mov	r2, r3
 8003390:	b2c9      	uxtb	r1, r1
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	5499      	strb	r1, [r3, r2]
        buf[buf_index++] = config.val[i + channel] & 0xFF; // Lower 8 bits of the 12-bit DAC value
 8003396:	7fba      	ldrb	r2, [r7, #30]
 8003398:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800339c:	4413      	add	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	3320      	adds	r3, #32
 80033a2:	443b      	add	r3, r7
 80033a4:	f833 1c1e 	ldrh.w	r1, [r3, #-30]
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	77fa      	strb	r2, [r7, #31]
 80033ae:	461a      	mov	r2, r3
 80033b0:	b2c9      	uxtb	r1, r1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < 4 - channel; i++) {
 80033b6:	7fbb      	ldrb	r3, [r7, #30]
 80033b8:	3301      	adds	r3, #1
 80033ba:	77bb      	strb	r3, [r7, #30]
 80033bc:	7fba      	ldrb	r2, [r7, #30]
 80033be:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80033c2:	f1c3 0304 	rsb	r3, r3, #4
 80033c6:	429a      	cmp	r2, r3
 80033c8:	dbd3      	blt.n	8003372 <mcp4728_sequentialWrite+0x86>
    }

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(i2cHandler, dac1, buf, buf_index);
 80033ca:	7ffb      	ldrb	r3, [r7, #31]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	21c0      	movs	r1, #192	@ 0xc0
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f001 fff0 	bl	80053b8 <HAL_I2C_Master_Transmit_DMA>
 80033d8:	4603      	mov	r3, r0
 80033da:	74fb      	strb	r3, [r7, #19]
    if (ret != HAL_OK) {
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <mcp4728_sequentialWrite+0xfa>
        return ret;
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	e00b      	b.n	80033fe <mcp4728_sequentialWrite+0x112>
    }

    while (HAL_I2C_GetState(i2cHandler) != HAL_I2C_STATE_READY) {}
 80033e6:	bf00      	nop
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f002 faea 	bl	80059c2 <HAL_I2C_GetState>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d1f9      	bne.n	80033e8 <mcp4728_sequentialWrite+0xfc>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 80033f4:	2108      	movs	r1, #8
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff febd 	bl	8003176 <mcp4728_generalCall>
 80033fc:	4603      	mov	r3, r0
 80033fe:	46b5      	mov	sp, r6
}
 8003400:	4618      	mov	r0, r3
 8003402:	3724      	adds	r7, #36	@ 0x24
 8003404:	46bd      	mov	sp, r7
 8003406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800340a <mcp4728_configure>:



HAL_StatusTypeDef mcp4728_configure(I2C_HandleTypeDef *i2cHandler, uint8_t dac_address, ChannelConfig config, uint8_t channel) {
 800340a:	b082      	sub	sp, #8
 800340c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003410:	b089      	sub	sp, #36	@ 0x24
 8003412:	af02      	add	r7, sp, #8
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800341a:	e880 000c 	stmia.w	r0, {r2, r3}
 800341e:	460b      	mov	r3, r1
 8003420:	70fb      	strb	r3, [r7, #3]
 8003422:	466b      	mov	r3, sp
 8003424:	461e      	mov	r6, r3
    uint8_t buf[9 - 2 * channel];
 8003426:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	f1c3 0109 	rsb	r1, r3, #9
 8003430:	1e4b      	subs	r3, r1, #1
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	460a      	mov	r2, r1
 8003436:	2300      	movs	r3, #0
 8003438:	4690      	mov	r8, r2
 800343a:	4699      	mov	r9, r3
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003448:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800344c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003450:	460a      	mov	r2, r1
 8003452:	2300      	movs	r3, #0
 8003454:	4614      	mov	r4, r2
 8003456:	461d      	mov	r5, r3
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	00eb      	lsls	r3, r5, #3
 8003462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003466:	00e2      	lsls	r2, r4, #3
 8003468:	460b      	mov	r3, r1
 800346a:	3307      	adds	r3, #7
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	ebad 0d03 	sub.w	sp, sp, r3
 8003474:	ab02      	add	r3, sp, #8
 8003476:	3300      	adds	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
    buf[0] = MCP4728_SEQ_WRITE | (channel << 1);
 800347a:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	b25b      	sxtb	r3, r3
 8003482:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003486:	b25b      	sxtb	r3, r3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	701a      	strb	r2, [r3, #0]
    uint8_t buf_index = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < 4 - channel; i++) {
 8003492:	2300      	movs	r3, #0
 8003494:	75bb      	strb	r3, [r7, #22]
 8003496:	e022      	b.n	80034de <mcp4728_configure+0xd4>
        buf[buf_index++] = ((config.vref & (0 << (i + channel))) ? 0x80 : 0) | // VREF bit (7th bit)
                           ((config.gain & (0 << (i + channel))) ? 0x10 : 0) | // Gain bit (4th bit)
                           (config.val[i + channel] >> 8); // Upper 8 bits of the 12-bit DAC value
 8003498:	7dba      	ldrb	r2, [r7, #22]
 800349a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800349e:	4413      	add	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	3338      	adds	r3, #56	@ 0x38
 80034a4:	443b      	add	r3, r7
 80034a6:	885b      	ldrh	r3, [r3, #2]
        buf[buf_index++] = ((config.vref & (0 << (i + channel))) ? 0x80 : 0) | // VREF bit (7th bit)
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	b299      	uxth	r1, r3
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	75fa      	strb	r2, [r7, #23]
 80034b2:	461a      	mov	r2, r3
 80034b4:	b2c9      	uxtb	r1, r1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	5499      	strb	r1, [r3, r2]
        buf[buf_index++] = config.val[i + channel] & 0xFF; // Lower 8 bits of the 12-bit DAC value
 80034ba:	7dba      	ldrb	r2, [r7, #22]
 80034bc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80034c0:	4413      	add	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	3338      	adds	r3, #56	@ 0x38
 80034c6:	443b      	add	r3, r7
 80034c8:	8859      	ldrh	r1, [r3, #2]
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	75fa      	strb	r2, [r7, #23]
 80034d0:	461a      	mov	r2, r3
 80034d2:	b2c9      	uxtb	r1, r1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < 4 - channel; i++) {
 80034d8:	7dbb      	ldrb	r3, [r7, #22]
 80034da:	3301      	adds	r3, #1
 80034dc:	75bb      	strb	r3, [r7, #22]
 80034de:	7dba      	ldrb	r2, [r7, #22]
 80034e0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80034e4:	f1c3 0304 	rsb	r3, r3, #4
 80034e8:	429a      	cmp	r2, r3
 80034ea:	dbd5      	blt.n	8003498 <mcp4728_configure+0x8e>
    }

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(i2cHandler, dac_address, buf, 13, HAL_MAX_DELAY);
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	b299      	uxth	r1, r3
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	230d      	movs	r3, #13
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f001 fe5e 	bl	80051bc <HAL_I2C_Master_Transmit>
 8003500:	4603      	mov	r3, r0
 8003502:	72fb      	strb	r3, [r7, #11]
    if(ret != HAL_OK) return ret;
 8003504:	7afb      	ldrb	r3, [r7, #11]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <mcp4728_configure+0x104>
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	e004      	b.n	8003518 <mcp4728_configure+0x10e>

    return mcp4728_generalCall(i2cHandler, MCP4728_GENERAL_SOFTWARE_UPDATE);
 800350e:	2108      	movs	r1, #8
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fe30 	bl	8003176 <mcp4728_generalCall>
 8003516:	4603      	mov	r3, r0
 8003518:	46b5      	mov	sp, r6
}
 800351a:	4618      	mov	r0, r3
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003524:	b002      	add	sp, #8
 8003526:	4770      	bx	lr

08003528 <meniu_mygtukai>:





void meniu_mygtukai(void) {
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
    switch (busena) {
 800352c:	4b1f      	ldr	r3, [pc, #124]	@ (80035ac <meniu_mygtukai+0x84>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <meniu_mygtukai+0x12>
 8003534:	2b01      	cmp	r3, #1
 8003536:	d019      	beq.n	800356c <meniu_mygtukai+0x44>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
                break;

            default:
                // No button is pressed; do nothing
                break;
 8003538:	e036      	b.n	80035a8 <meniu_mygtukai+0x80>
                ADSR_SetAttackRate(&envelopes[0], ROT1);  // Map ROT1 to attack rate
 800353a:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <meniu_mygtukai+0x88>)
 800353c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003540:	4619      	mov	r1, r3
 8003542:	481c      	ldr	r0, [pc, #112]	@ (80035b4 <meniu_mygtukai+0x8c>)
 8003544:	f7fe fefc 	bl	8002340 <ADSR_SetAttackRate>
                ADSR_SetDecayRate(&envelopes[0], ROT2);   // Map ROT2 to decay rate
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <meniu_mygtukai+0x90>)
 800354a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354e:	4619      	mov	r1, r3
 8003550:	4818      	ldr	r0, [pc, #96]	@ (80035b4 <meniu_mygtukai+0x8c>)
 8003552:	f7fe ff1f 	bl	8002394 <ADSR_SetDecayRate>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003556:	2201      	movs	r2, #1
 8003558:	2101      	movs	r1, #1
 800355a:	4818      	ldr	r0, [pc, #96]	@ (80035bc <meniu_mygtukai+0x94>)
 800355c:	f001 fc88 	bl	8004e70 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003560:	2200      	movs	r2, #0
 8003562:	2102      	movs	r1, #2
 8003564:	4815      	ldr	r0, [pc, #84]	@ (80035bc <meniu_mygtukai+0x94>)
 8003566:	f001 fc83 	bl	8004e70 <HAL_GPIO_WritePin>
                break;
 800356a:	e01d      	b.n	80035a8 <meniu_mygtukai+0x80>
                ADSR_SetSustainLevel(&envelopes[0], ROT1);  // Map ROT1 to attack rate
 800356c:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <meniu_mygtukai+0x88>)
 800356e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357a:	eeb0 0a67 	vmov.f32	s0, s15
 800357e:	480d      	ldr	r0, [pc, #52]	@ (80035b4 <meniu_mygtukai+0x8c>)
 8003580:	f7fe ff28 	bl	80023d4 <ADSR_SetSustainLevel>
                ADSR_SetReleaseRate(&envelopes[0], ROT2);   // Map ROT2 to decay rate
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <meniu_mygtukai+0x90>)
 8003586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800358a:	4619      	mov	r1, r3
 800358c:	4809      	ldr	r0, [pc, #36]	@ (80035b4 <meniu_mygtukai+0x8c>)
 800358e:	f7fe ff5b 	bl	8002448 <ADSR_SetReleaseRate>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003592:	2201      	movs	r2, #1
 8003594:	2102      	movs	r1, #2
 8003596:	4809      	ldr	r0, [pc, #36]	@ (80035bc <meniu_mygtukai+0x94>)
 8003598:	f001 fc6a 	bl	8004e70 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800359c:	2200      	movs	r2, #0
 800359e:	2101      	movs	r1, #1
 80035a0:	4806      	ldr	r0, [pc, #24]	@ (80035bc <meniu_mygtukai+0x94>)
 80035a2:	f001 fc65 	bl	8004e70 <HAL_GPIO_WritePin>
                break;
 80035a6:	bf00      	nop
        }
    }
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000528 	.word	0x20000528
 80035b0:	200003b4 	.word	0x200003b4
 80035b4:	200003b8 	.word	0x200003b8
 80035b8:	200003b6 	.word	0x200003b6
 80035bc:	40020800 	.word	0x40020800

080035c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	4b10      	ldr	r3, [pc, #64]	@ (800360c <HAL_MspInit+0x4c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	4a0f      	ldr	r2, [pc, #60]	@ (800360c <HAL_MspInit+0x4c>)
 80035d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <HAL_MspInit+0x4c>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4b09      	ldr	r3, [pc, #36]	@ (800360c <HAL_MspInit+0x4c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <HAL_MspInit+0x4c>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_MspInit+0x4c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	@ (800368c <HAL_DAC_MspInit+0x7c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d127      	bne.n	8003682 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	4b16      	ldr	r3, [pc, #88]	@ (8003690 <HAL_DAC_MspInit+0x80>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	4a15      	ldr	r2, [pc, #84]	@ (8003690 <HAL_DAC_MspInit+0x80>)
 800363c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003640:	6413      	str	r3, [r2, #64]	@ 0x40
 8003642:	4b13      	ldr	r3, [pc, #76]	@ (8003690 <HAL_DAC_MspInit+0x80>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <HAL_DAC_MspInit+0x80>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	4a0e      	ldr	r2, [pc, #56]	@ (8003690 <HAL_DAC_MspInit+0x80>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6313      	str	r3, [r2, #48]	@ 0x30
 800365e:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <HAL_DAC_MspInit+0x80>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800366a:	2330      	movs	r3, #48	@ 0x30
 800366c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800366e:	2303      	movs	r3, #3
 8003670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003676:	f107 0314 	add.w	r3, r7, #20
 800367a:	4619      	mov	r1, r3
 800367c:	4805      	ldr	r0, [pc, #20]	@ (8003694 <HAL_DAC_MspInit+0x84>)
 800367e:	f001 fa43 	bl	8004b08 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8003682:	bf00      	nop
 8003684:	3728      	adds	r7, #40	@ 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40007400 	.word	0x40007400
 8003690:	40023800 	.word	0x40023800
 8003694:	40020000 	.word	0x40020000

08003698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	@ 0x30
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	f107 031c 	add.w	r3, r7, #28
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a4e      	ldr	r2, [pc, #312]	@ (80037f0 <HAL_I2C_MspInit+0x158>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d164      	bne.n	8003784 <HAL_I2C_MspInit+0xec>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	4b4d      	ldr	r3, [pc, #308]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	4a4c      	ldr	r2, [pc, #304]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ca:	4b4a      	ldr	r3, [pc, #296]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80036da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036dc:	2312      	movs	r3, #18
 80036de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e4:	2303      	movs	r3, #3
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036e8:	2304      	movs	r3, #4
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ec:	f107 031c 	add.w	r3, r7, #28
 80036f0:	4619      	mov	r1, r3
 80036f2:	4841      	ldr	r0, [pc, #260]	@ (80037f8 <HAL_I2C_MspInit+0x160>)
 80036f4:	f001 fa08 	bl	8004b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	4a3c      	ldr	r2, [pc, #240]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 8003702:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003706:	6413      	str	r3, [r2, #64]	@ 0x40
 8003708:	4b3a      	ldr	r3, [pc, #232]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003714:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 8003716:	4a3a      	ldr	r2, [pc, #232]	@ (8003800 <HAL_I2C_MspInit+0x168>)
 8003718:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800371a:	4b38      	ldr	r3, [pc, #224]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 800371c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003720:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003722:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 8003724:	2240      	movs	r2, #64	@ 0x40
 8003726:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003728:	4b34      	ldr	r3, [pc, #208]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800372e:	4b33      	ldr	r3, [pc, #204]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 8003730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003734:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003736:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 8003738:	2200      	movs	r2, #0
 800373a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800373c:	4b2f      	ldr	r3, [pc, #188]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 800373e:	2200      	movs	r2, #0
 8003740:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003742:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 8003744:	2200      	movs	r2, #0
 8003746:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003748:	4b2c      	ldr	r3, [pc, #176]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 800374a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800374e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003750:	4b2a      	ldr	r3, [pc, #168]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 8003752:	2200      	movs	r2, #0
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003756:	4829      	ldr	r0, [pc, #164]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 8003758:	f000 fdba 	bl	80042d0 <HAL_DMA_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003762:	f7ff fcb4 	bl	80030ce <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a24      	ldr	r2, [pc, #144]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 800376a:	635a      	str	r2, [r3, #52]	@ 0x34
 800376c:	4a23      	ldr	r2, [pc, #140]	@ (80037fc <HAL_I2C_MspInit+0x164>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	2100      	movs	r1, #0
 8003776:	201f      	movs	r0, #31
 8003778:	f000 fc77 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800377c:	201f      	movs	r0, #31
 800377e:	f000 fc90 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003782:	e031      	b.n	80037e8 <HAL_I2C_MspInit+0x150>
  else if(hi2c->Instance==I2C2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1e      	ldr	r2, [pc, #120]	@ (8003804 <HAL_I2C_MspInit+0x16c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d12c      	bne.n	80037e8 <HAL_I2C_MspInit+0x150>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	4b18      	ldr	r3, [pc, #96]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	4a17      	ldr	r2, [pc, #92]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	6313      	str	r3, [r2, #48]	@ 0x30
 800379e:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b0:	2312      	movs	r3, #18
 80037b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037bc:	2304      	movs	r3, #4
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	4619      	mov	r1, r3
 80037c6:	480c      	ldr	r0, [pc, #48]	@ (80037f8 <HAL_I2C_MspInit+0x160>)
 80037c8:	f001 f99e 	bl	8004b08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	4a07      	ldr	r2, [pc, #28]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 80037d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037da:	6413      	str	r3, [r2, #64]	@ 0x40
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_I2C_MspInit+0x15c>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3730      	adds	r7, #48	@ 0x30
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40005400 	.word	0x40005400
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020400 	.word	0x40020400
 80037fc:	20000104 	.word	0x20000104
 8003800:	400260a0 	.word	0x400260a0
 8003804:	40005800 	.word	0x40005800

08003808 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	@ 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	@ (800389c <HAL_SPI_MspInit+0x94>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d134      	bne.n	8003894 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	4b1c      	ldr	r3, [pc, #112]	@ (80038a0 <HAL_SPI_MspInit+0x98>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	4a1b      	ldr	r2, [pc, #108]	@ (80038a0 <HAL_SPI_MspInit+0x98>)
 8003834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003838:	6413      	str	r3, [r2, #64]	@ 0x40
 800383a:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_SPI_MspInit+0x98>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <HAL_SPI_MspInit+0x98>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <HAL_SPI_MspInit+0x98>)
 8003850:	f043 0302 	orr.w	r3, r3, #2
 8003854:	6313      	str	r3, [r2, #48]	@ 0x30
 8003856:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <HAL_SPI_MspInit+0x98>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003862:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003874:	2305      	movs	r3, #5
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	4619      	mov	r1, r3
 800387e:	4809      	ldr	r0, [pc, #36]	@ (80038a4 <HAL_SPI_MspInit+0x9c>)
 8003880:	f001 f942 	bl	8004b08 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	2024      	movs	r0, #36	@ 0x24
 800388a:	f000 fbee 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800388e:	2024      	movs	r0, #36	@ 0x24
 8003890:	f000 fc07 	bl	80040a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003894:	bf00      	nop
 8003896:	3728      	adds	r7, #40	@ 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40003800 	.word	0x40003800
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020400 	.word	0x40020400

080038a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b090      	sub	sp, #64	@ 0x40
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c8:	d153      	bne.n	8003972 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ce:	4b81      	ldr	r3, [pc, #516]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	4a80      	ldr	r2, [pc, #512]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038da:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ea:	4b7a      	ldr	r3, [pc, #488]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	4a79      	ldr	r2, [pc, #484]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f6:	4b77      	ldr	r3, [pc, #476]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
 8003906:	4b73      	ldr	r3, [pc, #460]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	4a72      	ldr	r2, [pc, #456]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	6313      	str	r3, [r2, #48]	@ 0x30
 8003912:	4b70      	ldr	r3, [pc, #448]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ROT1_A_Pin;
 800391e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003928:	2301      	movs	r3, #1
 800392a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	2300      	movs	r3, #0
 800392e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003930:	2301      	movs	r3, #1
 8003932:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROT1_A_GPIO_Port, &GPIO_InitStruct);
 8003934:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003938:	4619      	mov	r1, r3
 800393a:	4867      	ldr	r0, [pc, #412]	@ (8003ad8 <HAL_TIM_Encoder_MspInit+0x230>)
 800393c:	f001 f8e4 	bl	8004b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ROT1_B_Pin;
 8003940:	2308      	movs	r3, #8
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003948:	2301      	movs	r3, #1
 800394a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003950:	2301      	movs	r3, #1
 8003952:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROT1_B_GPIO_Port, &GPIO_InitStruct);
 8003954:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003958:	4619      	mov	r1, r3
 800395a:	4860      	ldr	r0, [pc, #384]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x234>)
 800395c:	f001 f8d4 	bl	8004b08 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003960:	2200      	movs	r2, #0
 8003962:	2100      	movs	r1, #0
 8003964:	201c      	movs	r0, #28
 8003966:	f000 fb80 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800396a:	201c      	movs	r0, #28
 800396c:	f000 fb99 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003970:	e0ac      	b.n	8003acc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a5a      	ldr	r2, [pc, #360]	@ (8003ae0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d134      	bne.n	80039e6 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	4b54      	ldr	r3, [pc, #336]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	4a53      	ldr	r2, [pc, #332]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003986:	f043 0302 	orr.w	r3, r3, #2
 800398a:	6413      	str	r3, [r2, #64]	@ 0x40
 800398c:	4b51      	ldr	r3, [pc, #324]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	4a4c      	ldr	r2, [pc, #304]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ROT2_A_Pin|ROT2_B_Pin;
 80039b4:	23c0      	movs	r3, #192	@ 0xc0
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039bc:	2301      	movs	r3, #1
 80039be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039c4:	2302      	movs	r3, #2
 80039c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039cc:	4619      	mov	r1, r3
 80039ce:	4842      	ldr	r0, [pc, #264]	@ (8003ad8 <HAL_TIM_Encoder_MspInit+0x230>)
 80039d0:	f001 f89a 	bl	8004b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	201d      	movs	r0, #29
 80039da:	f000 fb46 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039de:	201d      	movs	r0, #29
 80039e0:	f000 fb5f 	bl	80040a2 <HAL_NVIC_EnableIRQ>
}
 80039e4:	e072      	b.n	8003acc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a3e      	ldr	r2, [pc, #248]	@ (8003ae4 <HAL_TIM_Encoder_MspInit+0x23c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d134      	bne.n	8003a5a <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	4b37      	ldr	r3, [pc, #220]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	4a36      	ldr	r2, [pc, #216]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a00:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a16:	f043 0302 	orr.w	r3, r3, #2
 8003a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ROT3_A_Pin|ROT3_B_Pin;
 8003a28:	23c0      	movs	r3, #192	@ 0xc0
 8003a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a34:	2300      	movs	r3, #0
 8003a36:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a40:	4619      	mov	r1, r3
 8003a42:	4826      	ldr	r0, [pc, #152]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x234>)
 8003a44:	f001 f860 	bl	8004b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	201e      	movs	r0, #30
 8003a4e:	f000 fb0c 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a52:	201e      	movs	r0, #30
 8003a54:	f000 fb25 	bl	80040a2 <HAL_NVIC_EnableIRQ>
}
 8003a58:	e038      	b.n	8003acc <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0x240>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d133      	bne.n	8003acc <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	4a19      	ldr	r2, [pc, #100]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a74:	4b17      	ldr	r3, [pc, #92]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a90:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ROT4_A_Pin|ROT4_B_Pin;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003aac:	2302      	movs	r3, #2
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4808      	ldr	r0, [pc, #32]	@ (8003ad8 <HAL_TIM_Encoder_MspInit+0x230>)
 8003ab8:	f001 f826 	bl	8004b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003abc:	2200      	movs	r2, #0
 8003abe:	2100      	movs	r1, #0
 8003ac0:	2032      	movs	r0, #50	@ 0x32
 8003ac2:	f000 fad2 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003ac6:	2032      	movs	r0, #50	@ 0x32
 8003ac8:	f000 faeb 	bl	80040a2 <HAL_NVIC_EnableIRQ>
}
 8003acc:	bf00      	nop
 8003ace:	3740      	adds	r7, #64	@ 0x40
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00

08003aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b6c <HAL_TIM_Base_MspInit+0x80>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d116      	bne.n	8003b2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <HAL_TIM_Base_MspInit+0x84>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <HAL_TIM_Base_MspInit+0x84>)
 8003b08:	f043 0320 	orr.w	r3, r3, #32
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <HAL_TIM_Base_MspInit+0x84>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2037      	movs	r0, #55	@ 0x37
 8003b20:	f000 faa3 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b24:	2037      	movs	r0, #55	@ 0x37
 8003b26:	f000 fabc 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003b2a:	e01a      	b.n	8003b62 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM13)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a10      	ldr	r2, [pc, #64]	@ (8003b74 <HAL_TIM_Base_MspInit+0x88>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d115      	bne.n	8003b62 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <HAL_TIM_Base_MspInit+0x84>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003b70 <HAL_TIM_Base_MspInit+0x84>)
 8003b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b46:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <HAL_TIM_Base_MspInit+0x84>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2100      	movs	r1, #0
 8003b56:	202c      	movs	r0, #44	@ 0x2c
 8003b58:	f000 fa87 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003b5c:	202c      	movs	r0, #44	@ 0x2c
 8003b5e:	f000 faa0 	bl	80040a2 <HAL_NVIC_EnableIRQ>
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40001400 	.word	0x40001400
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40001c00 	.word	0x40001c00

08003b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1d      	ldr	r2, [pc, #116]	@ (8003c0c <HAL_UART_MspInit+0x94>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d134      	bne.n	8003c04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c10 <HAL_UART_MspInit+0x98>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c10 <HAL_UART_MspInit+0x98>)
 8003ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003baa:	4b19      	ldr	r3, [pc, #100]	@ (8003c10 <HAL_UART_MspInit+0x98>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <HAL_UART_MspInit+0x98>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <HAL_UART_MspInit+0x98>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bc6:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <HAL_UART_MspInit+0x98>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003bd2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003be4:	2307      	movs	r3, #7
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	4809      	ldr	r0, [pc, #36]	@ (8003c14 <HAL_UART_MspInit+0x9c>)
 8003bf0:	f000 ff8a 	bl	8004b08 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	2027      	movs	r0, #39	@ 0x27
 8003bfa:	f000 fa36 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003bfe:	2027      	movs	r0, #39	@ 0x27
 8003c00:	f000 fa4f 	bl	80040a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003c04:	bf00      	nop
 8003c06:	3728      	adds	r7, #40	@ 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40004800 	.word	0x40004800
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40020800 	.word	0x40020800

08003c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c1c:	bf00      	nop
 8003c1e:	e7fd      	b.n	8003c1c <NMI_Handler+0x4>

08003c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c24:	bf00      	nop
 8003c26:	e7fd      	b.n	8003c24 <HardFault_Handler+0x4>

08003c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <MemManage_Handler+0x4>

08003c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <BusFault_Handler+0x4>

08003c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <UsageFault_Handler+0x4>

08003c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c6e:	f000 f901 	bl	8003e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003c7c:	4802      	ldr	r0, [pc, #8]	@ (8003c88 <DMA1_Stream6_IRQHandler+0x10>)
 8003c7e:	f000 fcbf 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000104 	.word	0x20000104

08003c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c90:	4802      	ldr	r0, [pc, #8]	@ (8003c9c <TIM2_IRQHandler+0x10>)
 8003c92:	f004 fc77 	bl	8008584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200001bc 	.word	0x200001bc

08003ca0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ca4:	4802      	ldr	r0, [pc, #8]	@ (8003cb0 <TIM3_IRQHandler+0x10>)
 8003ca6:	f004 fc6d 	bl	8008584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000204 	.word	0x20000204

08003cb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003cb8:	4802      	ldr	r0, [pc, #8]	@ (8003cc4 <TIM4_IRQHandler+0x10>)
 8003cba:	f004 fc63 	bl	8008584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000024c 	.word	0x2000024c

08003cc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003ccc:	4802      	ldr	r0, [pc, #8]	@ (8003cd8 <I2C1_EV_IRQHandler+0x10>)
 8003cce:	f001 fc9f 	bl	8005610 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	2000005c 	.word	0x2000005c

08003cdc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003ce0:	4802      	ldr	r0, [pc, #8]	@ (8003cec <SPI2_IRQHandler+0x10>)
 8003ce2:	f004 f91d 	bl	8007f20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000164 	.word	0x20000164

08003cf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003cf4:	4802      	ldr	r0, [pc, #8]	@ (8003d00 <USART3_IRQHandler+0x10>)
 8003cf6:	f005 f827 	bl	8008d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	2000036c 	.word	0x2000036c

08003d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_Pin);
 8003d08:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003d0c:	f001 f8e4 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M1_Pin);
 8003d10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003d14:	f001 f8e0 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003d20:	4802      	ldr	r0, [pc, #8]	@ (8003d2c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003d22:	f004 fc2f 	bl	8008584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000324 	.word	0x20000324

08003d30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003d34:	4802      	ldr	r0, [pc, #8]	@ (8003d40 <TIM5_IRQHandler+0x10>)
 8003d36:	f004 fc25 	bl	8008584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000294 	.word	0x20000294

08003d44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003d48:	4802      	ldr	r0, [pc, #8]	@ (8003d54 <TIM7_IRQHandler+0x10>)
 8003d4a:	f004 fc1b 	bl	8008584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200002dc 	.word	0x200002dc

08003d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <SystemInit+0x20>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d62:	4a05      	ldr	r2, [pc, #20]	@ (8003d78 <SystemInit+0x20>)
 8003d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d80:	f7ff ffea 	bl	8003d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d84:	480c      	ldr	r0, [pc, #48]	@ (8003db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d86:	490d      	ldr	r1, [pc, #52]	@ (8003dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d88:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d8c:	e002      	b.n	8003d94 <LoopCopyDataInit>

08003d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d92:	3304      	adds	r3, #4

08003d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d98:	d3f9      	bcc.n	8003d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8003dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003da0:	e001      	b.n	8003da6 <LoopFillZerobss>

08003da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003da4:	3204      	adds	r2, #4

08003da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003da8:	d3fb      	bcc.n	8003da2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003daa:	f005 fef1 	bl	8009b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dae:	f7fe fcbd 	bl	800272c <main>
  bx  lr    
 8003db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003dc0:	08009f50 	.word	0x08009f50
  ldr r2, =_sbss
 8003dc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003dc8:	20000530 	.word	0x20000530

08003dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dcc:	e7fe      	b.n	8003dcc <ADC_IRQHandler>
	...

08003dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <HAL_Init+0x40>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e10 <HAL_Init+0x40>)
 8003dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_Init+0x40>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a0a      	ldr	r2, [pc, #40]	@ (8003e10 <HAL_Init+0x40>)
 8003de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dec:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <HAL_Init+0x40>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a07      	ldr	r2, [pc, #28]	@ (8003e10 <HAL_Init+0x40>)
 8003df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003df8:	2003      	movs	r0, #3
 8003dfa:	f000 f92b 	bl	8004054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dfe:	200f      	movs	r0, #15
 8003e00:	f000 f808 	bl	8003e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e04:	f7ff fbdc 	bl	80035c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00

08003e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e1c:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <HAL_InitTick+0x54>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_InitTick+0x58>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f943 	bl	80040be <HAL_SYSTICK_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e00e      	b.n	8003e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0f      	cmp	r3, #15
 8003e46:	d80a      	bhi.n	8003e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	f000 f90b 	bl	800406a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e54:	4a06      	ldr	r2, [pc, #24]	@ (8003e70 <HAL_InitTick+0x5c>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e000      	b.n	8003e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	20000008 	.word	0x20000008
 8003e70:	20000004 	.word	0x20000004

08003e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e78:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <HAL_IncTick+0x20>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <HAL_IncTick+0x24>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	@ (8003e98 <HAL_IncTick+0x24>)
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000008 	.word	0x20000008
 8003e98:	2000052c 	.word	0x2000052c

08003e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <HAL_GetTick+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	2000052c 	.word	0x2000052c

08003eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ee6:	4a04      	ldr	r2, [pc, #16]	@ (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	60d3      	str	r3, [r2, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f00:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <__NVIC_GetPriorityGrouping+0x18>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 0307 	and.w	r3, r3, #7
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	db0b      	blt.n	8003f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	f003 021f 	and.w	r2, r3, #31
 8003f30:	4907      	ldr	r1, [pc, #28]	@ (8003f50 <__NVIC_EnableIRQ+0x38>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2001      	movs	r0, #1
 8003f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000e100 	.word	0xe000e100

08003f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	db0a      	blt.n	8003f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	490c      	ldr	r1, [pc, #48]	@ (8003fa0 <__NVIC_SetPriority+0x4c>)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	0112      	lsls	r2, r2, #4
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	440b      	add	r3, r1
 8003f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f7c:	e00a      	b.n	8003f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4908      	ldr	r1, [pc, #32]	@ (8003fa4 <__NVIC_SetPriority+0x50>)
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	3b04      	subs	r3, #4
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	440b      	add	r3, r1
 8003f92:	761a      	strb	r2, [r3, #24]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000e100 	.word	0xe000e100
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	@ 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f1c3 0307 	rsb	r3, r3, #7
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	bf28      	it	cs
 8003fc6:	2304      	movcs	r3, #4
 8003fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d902      	bls.n	8003fd8 <NVIC_EncodePriority+0x30>
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3b03      	subs	r3, #3
 8003fd6:	e000      	b.n	8003fda <NVIC_EncodePriority+0x32>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	401a      	ands	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	43d9      	mvns	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004000:	4313      	orrs	r3, r2
         );
}
 8004002:	4618      	mov	r0, r3
 8004004:	3724      	adds	r7, #36	@ 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004020:	d301      	bcc.n	8004026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004022:	2301      	movs	r3, #1
 8004024:	e00f      	b.n	8004046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <SysTick_Config+0x40>)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800402e:	210f      	movs	r1, #15
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	f7ff ff8e 	bl	8003f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004038:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <SysTick_Config+0x40>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403e:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <SysTick_Config+0x40>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000e010 	.word	0xe000e010

08004054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ff29 	bl	8003eb4 <__NVIC_SetPriorityGrouping>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800407c:	f7ff ff3e 	bl	8003efc <__NVIC_GetPriorityGrouping>
 8004080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7ff ff8e 	bl	8003fa8 <NVIC_EncodePriority>
 800408c:	4602      	mov	r2, r0
 800408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff5d 	bl	8003f54 <__NVIC_SetPriority>
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4603      	mov	r3, r0
 80040aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ff31 	bl	8003f18 <__NVIC_EnableIRQ>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ffa2 	bl	8004010 <SysTick_Config>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e014      	b.n	8004112 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	791b      	ldrb	r3, [r3, #4]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fa89 	bl	8003610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e046      	b.n	80041bc <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	795b      	ldrb	r3, [r3, #5]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_DAC_Start+0x20>
 8004136:	2302      	movs	r3, #2
 8004138:	e040      	b.n	80041bc <HAL_DAC_Start+0xa2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2201      	movs	r2, #1
 8004154:	409a      	lsls	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10f      	bne.n	8004184 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800416e:	2b3c      	cmp	r3, #60	@ 0x3c
 8004170:	d11d      	bne.n	80041ae <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	e014      	b.n	80041ae <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	213c      	movs	r1, #60	@ 0x3c
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	429a      	cmp	r2, r3
 800419c:	d107      	bne.n	80041ae <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0202 	orr.w	r2, r2, #2
 80041ac:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e015      	b.n	8004210 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	3308      	adds	r3, #8
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	e004      	b.n	8004206 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	3314      	adds	r3, #20
 8004204:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	461a      	mov	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	@ 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_DAC_ConfigChannel+0x1c>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e042      	b.n	80042c2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	795b      	ldrb	r3, [r3, #5]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_DAC_ConfigChannel+0x2c>
 8004244:	2302      	movs	r3, #2
 8004246:	e03c      	b.n	80042c2 <HAL_DAC_ConfigChannel+0xa6>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2202      	movs	r2, #2
 8004252:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6819      	ldr	r1, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	22c0      	movs	r2, #192	@ 0xc0
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43da      	mvns	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	400a      	ands	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80042c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3724      	adds	r7, #36	@ 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042dc:	f7ff fdde 	bl	8003e9c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e099      	b.n	8004420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800430c:	e00f      	b.n	800432e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800430e:	f7ff fdc5 	bl	8003e9c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b05      	cmp	r3, #5
 800431a:	d908      	bls.n	800432e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2203      	movs	r2, #3
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e078      	b.n	8004420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e8      	bne.n	800430e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4b38      	ldr	r3, [pc, #224]	@ (8004428 <HAL_DMA_Init+0x158>)
 8004348:	4013      	ands	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800435a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	2b04      	cmp	r3, #4
 8004386:	d107      	bne.n	8004398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004390:	4313      	orrs	r3, r2
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0307 	bic.w	r3, r3, #7
 80043ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d117      	bne.n	80043f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fb1b 	bl	8004a10 <DMA_CheckFifoParam>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2240      	movs	r2, #64	@ 0x40
 80043e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80043ee:	2301      	movs	r3, #1
 80043f0:	e016      	b.n	8004420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fad2 	bl	80049a4 <DMA_CalcBaseAndBitshift>
 8004400:	4603      	mov	r3, r0
 8004402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004408:	223f      	movs	r2, #63	@ 0x3f
 800440a:	409a      	lsls	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	f010803f 	.word	0xf010803f

0800442c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004442:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_DMA_Start_IT+0x26>
 800444e:	2302      	movs	r3, #2
 8004450:	e040      	b.n	80044d4 <HAL_DMA_Start_IT+0xa8>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d12f      	bne.n	80044c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa64 	bl	8004948 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004484:	223f      	movs	r2, #63	@ 0x3f
 8004486:	409a      	lsls	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0216 	orr.w	r2, r2, #22
 800449a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0208 	orr.w	r2, r2, #8
 80044b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e005      	b.n	80044d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
 80044d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ea:	f7ff fcd7 	bl	8003e9c <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d008      	beq.n	800450e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2280      	movs	r2, #128	@ 0x80
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e052      	b.n	80045b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0216 	bic.w	r2, r2, #22
 800451c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800452c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_DMA_Abort+0x62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800455e:	e013      	b.n	8004588 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004560:	f7ff fc9c 	bl	8003e9c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b05      	cmp	r3, #5
 800456c:	d90c      	bls.n	8004588 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2203      	movs	r2, #3
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e015      	b.n	80045b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e4      	bne.n	8004560 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	223f      	movs	r2, #63	@ 0x3f
 800459c:	409a      	lsls	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2280      	movs	r2, #128	@ 0x80
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e00c      	b.n	80045f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2205      	movs	r2, #5
 80045de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800460c:	4b8e      	ldr	r3, [pc, #568]	@ (8004848 <HAL_DMA_IRQHandler+0x248>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a8e      	ldr	r2, [pc, #568]	@ (800484c <HAL_DMA_IRQHandler+0x24c>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	0a9b      	lsrs	r3, r3, #10
 8004618:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	2208      	movs	r2, #8
 800462c:	409a      	lsls	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01a      	beq.n	800466c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d013      	beq.n	800466c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0204 	bic.w	r2, r2, #4
 8004652:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004658:	2208      	movs	r2, #8
 800465a:	409a      	lsls	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d012      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	2201      	movs	r2, #1
 8004690:	409a      	lsls	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a6:	2204      	movs	r2, #4
 80046a8:	409a      	lsls	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c4:	2204      	movs	r2, #4
 80046c6:	409a      	lsls	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	f043 0204 	orr.w	r2, r3, #4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046dc:	2210      	movs	r2, #16
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d043      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03c      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	2210      	movs	r2, #16
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d018      	beq.n	8004742 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d108      	bne.n	8004730 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d024      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
 800472e:	e01f      	b.n	8004770 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01b      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
 8004740:	e016      	b.n	8004770 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0208 	bic.w	r2, r2, #8
 800475e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004774:	2220      	movs	r2, #32
 8004776:	409a      	lsls	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 808f 	beq.w	80048a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8087 	beq.w	80048a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	2220      	movs	r2, #32
 8004798:	409a      	lsls	r2, r3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d136      	bne.n	8004818 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0216 	bic.w	r2, r2, #22
 80047b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <HAL_DMA_IRQHandler+0x1da>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0208 	bic.w	r2, r2, #8
 80047e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ee:	223f      	movs	r2, #63	@ 0x3f
 80047f0:	409a      	lsls	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480a:	2b00      	cmp	r3, #0
 800480c:	d07e      	beq.n	800490c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
        }
        return;
 8004816:	e079      	b.n	800490c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01d      	beq.n	8004862 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10d      	bne.n	8004850 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004838:	2b00      	cmp	r3, #0
 800483a:	d031      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
 8004844:	e02c      	b.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
 8004846:	bf00      	nop
 8004848:	20000000 	.word	0x20000000
 800484c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d023      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e01e      	b.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10f      	bne.n	8004890 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0210 	bic.w	r2, r2, #16
 800487e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d032      	beq.n	800490e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2205      	movs	r2, #5
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d307      	bcc.n	80048e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f2      	bne.n	80048cc <HAL_DMA_IRQHandler+0x2cc>
 80048e6:	e000      	b.n	80048ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
 800490a:	e000      	b.n	800490e <HAL_DMA_IRQHandler+0x30e>
        return;
 800490c:	bf00      	nop
    }
  }
}
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004922:	b2db      	uxtb	r3, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004964:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d108      	bne.n	8004988 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004986:	e007      	b.n	8004998 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	60da      	str	r2, [r3, #12]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	3b10      	subs	r3, #16
 80049b4:	4a14      	ldr	r2, [pc, #80]	@ (8004a08 <DMA_CalcBaseAndBitshift+0x64>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049be:	4a13      	ldr	r2, [pc, #76]	@ (8004a0c <DMA_CalcBaseAndBitshift+0x68>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d909      	bls.n	80049e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80049e4:	e007      	b.n	80049f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	aaaaaaab 	.word	0xaaaaaaab
 8004a0c:	08009f30 	.word	0x08009f30

08004a10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11f      	bne.n	8004a6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d856      	bhi.n	8004ade <DMA_CheckFifoParam+0xce>
 8004a30:	a201      	add	r2, pc, #4	@ (adr r2, 8004a38 <DMA_CheckFifoParam+0x28>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a5b 	.word	0x08004a5b
 8004a40:	08004a49 	.word	0x08004a49
 8004a44:	08004adf 	.word	0x08004adf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d046      	beq.n	8004ae2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a58:	e043      	b.n	8004ae2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a62:	d140      	bne.n	8004ae6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e03d      	b.n	8004ae6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a72:	d121      	bne.n	8004ab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d837      	bhi.n	8004aea <DMA_CheckFifoParam+0xda>
 8004a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <DMA_CheckFifoParam+0x70>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004a97 	.word	0x08004a97
 8004a88:	08004a91 	.word	0x08004a91
 8004a8c:	08004aa9 	.word	0x08004aa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e030      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d025      	beq.n	8004aee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa6:	e022      	b.n	8004aee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ab0:	d11f      	bne.n	8004af2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ab6:	e01c      	b.n	8004af2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d903      	bls.n	8004ac6 <DMA_CheckFifoParam+0xb6>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d003      	beq.n	8004acc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ac4:	e018      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8004aca:	e015      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00e      	beq.n	8004af6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
      break;
 8004adc:	e00b      	b.n	8004af6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e00a      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e008      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e006      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aea:	bf00      	nop
 8004aec:	e004      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004af6:	bf00      	nop
    }
  } 
  
  return status; 
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	@ 0x24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e16b      	b.n	8004dfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b24:	2201      	movs	r2, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4013      	ands	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	f040 815a 	bne.w	8004df6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d005      	beq.n	8004b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d130      	bne.n	8004bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b90:	2201      	movs	r2, #1
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 0201 	and.w	r2, r3, #1
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d017      	beq.n	8004bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d123      	bne.n	8004c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	08da      	lsrs	r2, r3, #3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3208      	adds	r2, #8
 8004c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	220f      	movs	r2, #15
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	08da      	lsrs	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3208      	adds	r2, #8
 8004c46:	69b9      	ldr	r1, [r7, #24]
 8004c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	2203      	movs	r2, #3
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 0203 	and.w	r2, r3, #3
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80b4 	beq.w	8004df6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	4b60      	ldr	r3, [pc, #384]	@ (8004e14 <HAL_GPIO_Init+0x30c>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	4a5f      	ldr	r2, [pc, #380]	@ (8004e14 <HAL_GPIO_Init+0x30c>)
 8004c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004e14 <HAL_GPIO_Init+0x30c>)
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004caa:	4a5b      	ldr	r2, [pc, #364]	@ (8004e18 <HAL_GPIO_Init+0x310>)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a52      	ldr	r2, [pc, #328]	@ (8004e1c <HAL_GPIO_Init+0x314>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02b      	beq.n	8004d2e <HAL_GPIO_Init+0x226>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a51      	ldr	r2, [pc, #324]	@ (8004e20 <HAL_GPIO_Init+0x318>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d025      	beq.n	8004d2a <HAL_GPIO_Init+0x222>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a50      	ldr	r2, [pc, #320]	@ (8004e24 <HAL_GPIO_Init+0x31c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01f      	beq.n	8004d26 <HAL_GPIO_Init+0x21e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8004e28 <HAL_GPIO_Init+0x320>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d019      	beq.n	8004d22 <HAL_GPIO_Init+0x21a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a4e      	ldr	r2, [pc, #312]	@ (8004e2c <HAL_GPIO_Init+0x324>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_GPIO_Init+0x216>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a4d      	ldr	r2, [pc, #308]	@ (8004e30 <HAL_GPIO_Init+0x328>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00d      	beq.n	8004d1a <HAL_GPIO_Init+0x212>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a4c      	ldr	r2, [pc, #304]	@ (8004e34 <HAL_GPIO_Init+0x32c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d007      	beq.n	8004d16 <HAL_GPIO_Init+0x20e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a4b      	ldr	r2, [pc, #300]	@ (8004e38 <HAL_GPIO_Init+0x330>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <HAL_GPIO_Init+0x20a>
 8004d0e:	2307      	movs	r3, #7
 8004d10:	e00e      	b.n	8004d30 <HAL_GPIO_Init+0x228>
 8004d12:	2308      	movs	r3, #8
 8004d14:	e00c      	b.n	8004d30 <HAL_GPIO_Init+0x228>
 8004d16:	2306      	movs	r3, #6
 8004d18:	e00a      	b.n	8004d30 <HAL_GPIO_Init+0x228>
 8004d1a:	2305      	movs	r3, #5
 8004d1c:	e008      	b.n	8004d30 <HAL_GPIO_Init+0x228>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	e006      	b.n	8004d30 <HAL_GPIO_Init+0x228>
 8004d22:	2303      	movs	r3, #3
 8004d24:	e004      	b.n	8004d30 <HAL_GPIO_Init+0x228>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e002      	b.n	8004d30 <HAL_GPIO_Init+0x228>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_GPIO_Init+0x228>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	f002 0203 	and.w	r2, r2, #3
 8004d36:	0092      	lsls	r2, r2, #2
 8004d38:	4093      	lsls	r3, r2
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d40:	4935      	ldr	r1, [pc, #212]	@ (8004e18 <HAL_GPIO_Init+0x310>)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	089b      	lsrs	r3, r3, #2
 8004d46:	3302      	adds	r3, #2
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d72:	4a32      	ldr	r2, [pc, #200]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d78:	4b30      	ldr	r3, [pc, #192]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d9c:	4a27      	ldr	r2, [pc, #156]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004da2:	4b26      	ldr	r3, [pc, #152]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004df0:	4a12      	ldr	r2, [pc, #72]	@ (8004e3c <HAL_GPIO_Init+0x334>)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	f67f ae90 	bls.w	8004b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	3724      	adds	r7, #36	@ 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40013800 	.word	0x40013800
 8004e1c:	40020000 	.word	0x40020000
 8004e20:	40020400 	.word	0x40020400
 8004e24:	40020800 	.word	0x40020800
 8004e28:	40020c00 	.word	0x40020c00
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40021400 	.word	0x40021400
 8004e34:	40021800 	.word	0x40021800
 8004e38:	40021c00 	.word	0x40021c00
 8004e3c:	40013c00 	.word	0x40013c00

08004e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	e001      	b.n	8004e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	807b      	strh	r3, [r7, #2]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e80:	787b      	ldrb	r3, [r7, #1]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e8c:	e003      	b.n	8004e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e8e:	887b      	ldrh	r3, [r7, #2]
 8004e90:	041a      	lsls	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	619a      	str	r2, [r3, #24]
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004eb4:	887a      	ldrh	r2, [r7, #2]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	041a      	lsls	r2, r3, #16
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	43d9      	mvns	r1, r3
 8004ec0:	887b      	ldrh	r3, [r7, #2]
 8004ec2:	400b      	ands	r3, r1
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	619a      	str	r2, [r3, #24]
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ee2:	4b08      	ldr	r3, [pc, #32]	@ (8004f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004eee:	4a05      	ldr	r2, [pc, #20]	@ (8004f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fd fbec 	bl	80026d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40013c00 	.word	0x40013c00

08004f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e12b      	b.n	8005172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fe fbb2 	bl	8003698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	@ 0x24
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0201 	bic.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f6c:	f002 ff26 	bl	8007dbc <HAL_RCC_GetPCLK1Freq>
 8004f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4a81      	ldr	r2, [pc, #516]	@ (800517c <HAL_I2C_Init+0x274>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d807      	bhi.n	8004f8c <HAL_I2C_Init+0x84>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a80      	ldr	r2, [pc, #512]	@ (8005180 <HAL_I2C_Init+0x278>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	bf94      	ite	ls
 8004f84:	2301      	movls	r3, #1
 8004f86:	2300      	movhi	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e006      	b.n	8004f9a <HAL_I2C_Init+0x92>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8005184 <HAL_I2C_Init+0x27c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bf94      	ite	ls
 8004f94:	2301      	movls	r3, #1
 8004f96:	2300      	movhi	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e0e7      	b.n	8005172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a78      	ldr	r2, [pc, #480]	@ (8005188 <HAL_I2C_Init+0x280>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	0c9b      	lsrs	r3, r3, #18
 8004fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800517c <HAL_I2C_Init+0x274>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d802      	bhi.n	8004fdc <HAL_I2C_Init+0xd4>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	e009      	b.n	8004ff0 <HAL_I2C_Init+0xe8>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	4a69      	ldr	r2, [pc, #420]	@ (800518c <HAL_I2C_Init+0x284>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	099b      	lsrs	r3, r3, #6
 8004fee:	3301      	adds	r3, #1
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005002:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	495c      	ldr	r1, [pc, #368]	@ (800517c <HAL_I2C_Init+0x274>)
 800500c:	428b      	cmp	r3, r1
 800500e:	d819      	bhi.n	8005044 <HAL_I2C_Init+0x13c>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1e59      	subs	r1, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	fbb1 f3f3 	udiv	r3, r1, r3
 800501e:	1c59      	adds	r1, r3, #1
 8005020:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005024:	400b      	ands	r3, r1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_I2C_Init+0x138>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1e59      	subs	r1, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	fbb1 f3f3 	udiv	r3, r1, r3
 8005038:	3301      	adds	r3, #1
 800503a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503e:	e051      	b.n	80050e4 <HAL_I2C_Init+0x1dc>
 8005040:	2304      	movs	r3, #4
 8005042:	e04f      	b.n	80050e4 <HAL_I2C_Init+0x1dc>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d111      	bne.n	8005070 <HAL_I2C_Init+0x168>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1e58      	subs	r0, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	440b      	add	r3, r1
 800505a:	fbb0 f3f3 	udiv	r3, r0, r3
 800505e:	3301      	adds	r3, #1
 8005060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005064:	2b00      	cmp	r3, #0
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e012      	b.n	8005096 <HAL_I2C_Init+0x18e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1e58      	subs	r0, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	0099      	lsls	r1, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	fbb0 f3f3 	udiv	r3, r0, r3
 8005086:	3301      	adds	r3, #1
 8005088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_I2C_Init+0x196>
 800509a:	2301      	movs	r3, #1
 800509c:	e022      	b.n	80050e4 <HAL_I2C_Init+0x1dc>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10e      	bne.n	80050c4 <HAL_I2C_Init+0x1bc>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1e58      	subs	r0, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	440b      	add	r3, r1
 80050b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80050b8:	3301      	adds	r3, #1
 80050ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c2:	e00f      	b.n	80050e4 <HAL_I2C_Init+0x1dc>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	1e58      	subs	r0, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	0099      	lsls	r1, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050da:	3301      	adds	r3, #1
 80050dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	6809      	ldr	r1, [r1, #0]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69da      	ldr	r2, [r3, #28]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005112:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6911      	ldr	r1, [r2, #16]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68d2      	ldr	r2, [r2, #12]
 800511e:	4311      	orrs	r1, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	430b      	orrs	r3, r1
 8005126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	000186a0 	.word	0x000186a0
 8005180:	001e847f 	.word	0x001e847f
 8005184:	003d08ff 	.word	0x003d08ff
 8005188:	431bde83 	.word	0x431bde83
 800518c:	10624dd3 	.word	0x10624dd3

08005190 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b80      	cmp	r3, #128	@ 0x80
 80051a4:	d103      	bne.n	80051ae <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	611a      	str	r2, [r3, #16]
  }
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	461a      	mov	r2, r3
 80051c8:	460b      	mov	r3, r1
 80051ca:	817b      	strh	r3, [r7, #10]
 80051cc:	4613      	mov	r3, r2
 80051ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051d0:	f7fe fe64 	bl	8003e9c <HAL_GetTick>
 80051d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b20      	cmp	r3, #32
 80051e0:	f040 80e0 	bne.w	80053a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	2319      	movs	r3, #25
 80051ea:	2201      	movs	r2, #1
 80051ec:	4970      	ldr	r1, [pc, #448]	@ (80053b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f001 ff4e 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
 80051fc:	e0d3      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_I2C_Master_Transmit+0x50>
 8005208:	2302      	movs	r3, #2
 800520a:	e0cc      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d007      	beq.n	8005232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2221      	movs	r2, #33	@ 0x21
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2210      	movs	r2, #16
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	893a      	ldrh	r2, [r7, #8]
 8005262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a50      	ldr	r2, [pc, #320]	@ (80053b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005272:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005274:	8979      	ldrh	r1, [r7, #10]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6a3a      	ldr	r2, [r7, #32]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f001 fcc2 	bl	8006c04 <I2C_MasterRequestWrite>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e08d      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80052a0:	e066      	b.n	8005370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	6a39      	ldr	r1, [r7, #32]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f002 f80c 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d107      	bne.n	80052ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e06b      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b04      	cmp	r3, #4
 800530a:	d11b      	bne.n	8005344 <HAL_I2C_Master_Transmit+0x188>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	6a39      	ldr	r1, [r7, #32]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f002 f803 	bl	8007354 <I2C_WaitOnBTFFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	2b04      	cmp	r3, #4
 800535a:	d107      	bne.n	800536c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800536a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e01a      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	d194      	bne.n	80052a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	00100002 	.word	0x00100002
 80053b4:	ffff0000 	.word	0xffff0000

080053b8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	461a      	mov	r2, r3
 80053c4:	460b      	mov	r3, r1
 80053c6:	817b      	strh	r3, [r7, #10]
 80053c8:	4613      	mov	r3, r2
 80053ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b20      	cmp	r3, #32
 80053da:	f040 8109 	bne.w	80055f0 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053de:	4b87      	ldr	r3, [pc, #540]	@ (80055fc <HAL_I2C_Master_Transmit_DMA+0x244>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	4a86      	ldr	r2, [pc, #536]	@ (8005600 <HAL_I2C_Master_Transmit_DMA+0x248>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0a1a      	lsrs	r2, r3, #8
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009a      	lsls	r2, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d112      	bne.n	800542a <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
 8005428:	e0e3      	b.n	80055f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b02      	cmp	r3, #2
 8005436:	d0df      	beq.n	80053f8 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_I2C_Master_Transmit_DMA+0x8e>
 8005442:	2302      	movs	r3, #2
 8005444:	e0d5      	b.n	80055f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d007      	beq.n	800546c <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800547a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2221      	movs	r2, #33	@ 0x21
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2210      	movs	r2, #16
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	893a      	ldrh	r2, [r7, #8]
 800549c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a56      	ldr	r2, [pc, #344]	@ (8005604 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80054ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80054ae:	897a      	ldrh	r2, [r7, #10]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d07b      	beq.n	80055b4 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02a      	beq.n	800551a <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005608 <HAL_I2C_Master_Transmit_DMA+0x250>)
 80054ca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d0:	4a4e      	ldr	r2, [pc, #312]	@ (800560c <HAL_I2C_Master_Transmit_DMA+0x254>)
 80054d2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e0:	2200      	movs	r2, #0
 80054e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e8:	2200      	movs	r2, #0
 80054ea:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f0:	2200      	movs	r2, #0
 80054f2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	4619      	mov	r1, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3310      	adds	r3, #16
 8005504:	461a      	mov	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	f7fe ff8f 	bl	800442c <HAL_DMA_Start_IT>
 800550e:	4603      	mov	r3, r0
 8005510:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d139      	bne.n	800558c <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8005518:	e013      	b.n	8005542 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e057      	b.n	80055f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005558:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005568:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005578:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e02f      	b.n	80055ec <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a0:	f043 0210 	orr.w	r2, r3, #16
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e01e      	b.n	80055f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055c2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055d2:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80055ea:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000000 	.word	0x20000000
 8005600:	14f8b589 	.word	0x14f8b589
 8005604:	ffff0000 	.word	0xffff0000
 8005608:	08006d09 	.word	0x08006d09
 800560c:	08006ec7 	.word	0x08006ec7

08005610 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005630:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005638:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b10      	cmp	r3, #16
 800563e:	d003      	beq.n	8005648 <HAL_I2C_EV_IRQHandler+0x38>
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b40      	cmp	r3, #64	@ 0x40
 8005644:	f040 80c1 	bne.w	80057ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <HAL_I2C_EV_IRQHandler+0x6e>
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005668:	d003      	beq.n	8005672 <HAL_I2C_EV_IRQHandler+0x62>
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005670:	d101      	bne.n	8005676 <HAL_I2C_EV_IRQHandler+0x66>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_I2C_EV_IRQHandler+0x68>
 8005676:	2300      	movs	r3, #0
 8005678:	2b01      	cmp	r3, #1
 800567a:	f000 8132 	beq.w	80058e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_I2C_EV_IRQHandler+0x92>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	0a5b      	lsrs	r3, r3, #9
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d006      	beq.n	80056a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 ff06 	bl	80074a6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fd06 	bl	80060ac <I2C_Master_SB>
 80056a0:	e092      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	08db      	lsrs	r3, r3, #3
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	0a5b      	lsrs	r3, r3, #9
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fd7c 	bl	80061b8 <I2C_Master_ADD10>
 80056c0:	e082      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	0a5b      	lsrs	r3, r3, #9
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fd96 	bl	800620c <I2C_Master_ADDR>
 80056e0:	e072      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03b      	beq.n	8005766 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056fc:	f000 80f3 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00f      	beq.n	800572c <HAL_I2C_EV_IRQHandler+0x11c>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	0a9b      	lsrs	r3, r3, #10
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_I2C_EV_IRQHandler+0x11c>
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f95a 	bl	80059de <I2C_MasterTransmit_TXE>
 800572a:	e04d      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	089b      	lsrs	r3, r3, #2
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80d6 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	0a5b      	lsrs	r3, r3, #9
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80cf 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	2b21      	cmp	r3, #33	@ 0x21
 800574c:	d103      	bne.n	8005756 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9e1 	bl	8005b16 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005754:	e0c7      	b.n	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b40      	cmp	r3, #64	@ 0x40
 800575a:	f040 80c4 	bne.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa4f 	bl	8005c02 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005764:	e0bf      	b.n	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005774:	f000 80b7 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	099b      	lsrs	r3, r3, #6
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00f      	beq.n	80057a4 <HAL_I2C_EV_IRQHandler+0x194>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	0a9b      	lsrs	r3, r3, #10
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d009      	beq.n	80057a4 <HAL_I2C_EV_IRQHandler+0x194>
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fac8 	bl	8005d32 <I2C_MasterReceive_RXNE>
 80057a2:	e011      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	089b      	lsrs	r3, r3, #2
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 809a 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	0a5b      	lsrs	r3, r3, #9
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8093 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fb7e 	bl	8005ec2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057c6:	e08e      	b.n	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057c8:	e08d      	b.n	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e007      	b.n	80057ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	085b      	lsrs	r3, r3, #1
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <HAL_I2C_EV_IRQHandler+0x20e>
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	0a5b      	lsrs	r3, r3, #9
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005814:	69b9      	ldr	r1, [r7, #24]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 ff47 	bl	80066aa <I2C_Slave_ADDR>
 800581c:	e066      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x22e>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	0a5b      	lsrs	r3, r3, #9
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 ff82 	bl	8006740 <I2C_Slave_STOPF>
 800583c:	e056      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	2b21      	cmp	r3, #33	@ 0x21
 8005842:	d002      	beq.n	800584a <HAL_I2C_EV_IRQHandler+0x23a>
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	2b29      	cmp	r3, #41	@ 0x29
 8005848:	d125      	bne.n	8005896 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	09db      	lsrs	r3, r3, #7
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00f      	beq.n	8005876 <HAL_I2C_EV_IRQHandler+0x266>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	0a9b      	lsrs	r3, r3, #10
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_I2C_EV_IRQHandler+0x266>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fe5d 	bl	800652e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005874:	e039      	b.n	80058ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	089b      	lsrs	r3, r3, #2
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d033      	beq.n	80058ea <HAL_I2C_EV_IRQHandler+0x2da>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	0a5b      	lsrs	r3, r3, #9
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d02d      	beq.n	80058ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fe8a 	bl	80065a8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005894:	e029      	b.n	80058ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	099b      	lsrs	r3, r3, #6
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00f      	beq.n	80058c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	0a9b      	lsrs	r3, r3, #10
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	089b      	lsrs	r3, r3, #2
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fe95 	bl	80065ea <I2C_SlaveReceive_RXNE>
 80058c0:	e014      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	089b      	lsrs	r3, r3, #2
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00e      	beq.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	0a5b      	lsrs	r3, r3, #9
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fec3 	bl	8006666 <I2C_SlaveReceive_BTF>
 80058e0:	e004      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80058ec:	3720      	adds	r7, #32
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	70fb      	strb	r3, [r7, #3]
 800594e:	4613      	mov	r3, r2
 8005950:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d0:	b2db      	uxtb	r3, r3
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059f4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d150      	bne.n	8005aa6 <I2C_MasterTransmit_TXE+0xc8>
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b21      	cmp	r3, #33	@ 0x21
 8005a08:	d14d      	bne.n	8005aa6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d01d      	beq.n	8005a4c <I2C_MasterTransmit_TXE+0x6e>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d01a      	beq.n	8005a4c <I2C_MasterTransmit_TXE+0x6e>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a1c:	d016      	beq.n	8005a4c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a2c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2211      	movs	r2, #17
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ff54 	bl	80058f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a4a:	e060      	b.n	8005b0e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a5a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b40      	cmp	r3, #64	@ 0x40
 8005a84:	d107      	bne.n	8005a96 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff ff6f 	bl	8005972 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a94:	e03b      	b.n	8005b0e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff ff27 	bl	80058f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005aa4:	e033      	b.n	8005b0e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b21      	cmp	r3, #33	@ 0x21
 8005aaa:	d005      	beq.n	8005ab8 <I2C_MasterTransmit_TXE+0xda>
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	2b40      	cmp	r3, #64	@ 0x40
 8005ab0:	d12d      	bne.n	8005b0e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b22      	cmp	r3, #34	@ 0x22
 8005ab6:	d12a      	bne.n	8005b0e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005ad2:	e01c      	b.n	8005b0e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	d103      	bne.n	8005ae8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f88e 	bl	8005c02 <I2C_MemoryTransmit_TXE_BTF>
}
 8005ae6:	e012      	b.n	8005b0e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005b0c:	e7ff      	b.n	8005b0e <I2C_MasterTransmit_TXE+0x130>
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b22:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b21      	cmp	r3, #33	@ 0x21
 8005b2e:	d164      	bne.n	8005bfa <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d012      	beq.n	8005b60 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005b5e:	e04c      	b.n	8005bfa <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d01d      	beq.n	8005ba2 <I2C_MasterTransmit_BTF+0x8c>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d01a      	beq.n	8005ba2 <I2C_MasterTransmit_BTF+0x8c>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b72:	d016      	beq.n	8005ba2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b82:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2211      	movs	r2, #17
 8005b88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fea9 	bl	80058f2 <HAL_I2C_MasterTxCpltCallback>
}
 8005ba0:	e02b      	b.n	8005bfa <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bb0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bc0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b40      	cmp	r3, #64	@ 0x40
 8005bda:	d107      	bne.n	8005bec <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff fec4 	bl	8005972 <HAL_I2C_MemTxCpltCallback>
}
 8005bea:	e006      	b.n	8005bfa <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff fe7c 	bl	80058f2 <HAL_I2C_MasterTxCpltCallback>
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d11d      	bne.n	8005c56 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d10b      	bne.n	8005c3a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005c38:	e077      	b.n	8005d2a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	121b      	asrs	r3, r3, #8
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c54:	e069      	b.n	8005d2a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d10b      	bne.n	8005c76 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c74:	e059      	b.n	8005d2a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d152      	bne.n	8005d24 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b22      	cmp	r3, #34	@ 0x22
 8005c82:	d10d      	bne.n	8005ca0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c92:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c9e:	e044      	b.n	8005d2a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d015      	beq.n	8005cd6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	2b21      	cmp	r3, #33	@ 0x21
 8005cae:	d112      	bne.n	8005cd6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005cd4:	e029      	b.n	8005d2a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d124      	bne.n	8005d2a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b21      	cmp	r3, #33	@ 0x21
 8005ce4:	d121      	bne.n	8005d2a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cf4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d04:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff fe28 	bl	8005972 <HAL_I2C_MemTxCpltCallback>
}
 8005d22:	e002      	b.n	8005d2a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fa33 	bl	8005190 <I2C_Flush_DR>
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b22      	cmp	r3, #34	@ 0x22
 8005d44:	f040 80b9 	bne.w	8005eba <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d921      	bls.n	8005da0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	f040 8096 	bne.w	8005eba <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d9c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005d9e:	e08c      	b.n	8005eba <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d07f      	beq.n	8005ea8 <I2C_MasterReceive_RXNE+0x176>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d002      	beq.n	8005db4 <I2C_MasterReceive_RXNE+0x82>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d179      	bne.n	8005ea8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 fb15 	bl	80073e4 <I2C_WaitOnSTOPRequestThroughIT>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d14c      	bne.n	8005e5a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005dde:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d10a      	bne.n	8005e30 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fdac 	bl	8005986 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e2e:	e044      	b.n	8005eba <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d002      	beq.n	8005e44 <I2C_MasterReceive_RXNE+0x112>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d103      	bne.n	8005e4c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e4a:	e002      	b.n	8005e52 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2212      	movs	r2, #18
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fd57 	bl	8005906 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e58:	e02f      	b.n	8005eba <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fd7a 	bl	800599a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ea6:	e008      	b.n	8005eba <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb6:	605a      	str	r2, [r3, #4]
}
 8005eb8:	e7ff      	b.n	8005eba <I2C_MasterReceive_RXNE+0x188>
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ece:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d11b      	bne.n	8005f12 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ee8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005f10:	e0c8      	b.n	80060a4 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d129      	bne.n	8005f70 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f2a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d00a      	beq.n	8005f48 <I2C_MasterReceive_BTF+0x86>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d007      	beq.n	8005f48 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f6e:	e099      	b.n	80060a4 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	f040 8081 	bne.w	800607e <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d002      	beq.n	8005f88 <I2C_MasterReceive_BTF+0xc6>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d108      	bne.n	8005f9a <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e019      	b.n	8005fce <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d002      	beq.n	8005fa6 <I2C_MasterReceive_BTF+0xe4>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d108      	bne.n	8005fb8 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e00a      	b.n	8005fce <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d007      	beq.n	8005fce <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fcc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006028:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d10a      	bne.n	8006054 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff fc9a 	bl	8005986 <HAL_I2C_MemRxCpltCallback>
}
 8006052:	e027      	b.n	80060a4 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b08      	cmp	r3, #8
 8006060:	d002      	beq.n	8006068 <I2C_MasterReceive_BTF+0x1a6>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b20      	cmp	r3, #32
 8006066:	d103      	bne.n	8006070 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	631a      	str	r2, [r3, #48]	@ 0x30
 800606e:	e002      	b.n	8006076 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2212      	movs	r2, #18
 8006074:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff fc45 	bl	8005906 <HAL_I2C_MasterRxCpltCallback>
}
 800607c:	e012      	b.n	80060a4 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b40      	cmp	r3, #64	@ 0x40
 80060be:	d117      	bne.n	80060f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d109      	bne.n	80060dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80060da:	e067      	b.n	80061ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	611a      	str	r2, [r3, #16]
}
 80060ee:	e05d      	b.n	80061ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060f8:	d133      	bne.n	8006162 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b21      	cmp	r3, #33	@ 0x21
 8006104:	d109      	bne.n	800611a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610a:	b2db      	uxtb	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006116:	611a      	str	r2, [r3, #16]
 8006118:	e008      	b.n	800612c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <I2C_Master_SB+0x92>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d108      	bne.n	8006150 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006142:	2b00      	cmp	r3, #0
 8006144:	d032      	beq.n	80061ac <I2C_Master_SB+0x100>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d02d      	beq.n	80061ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800615e:	605a      	str	r2, [r3, #4]
}
 8006160:	e024      	b.n	80061ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10e      	bne.n	8006188 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	b29b      	uxth	r3, r3
 8006170:	11db      	asrs	r3, r3, #7
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 0306 	and.w	r3, r3, #6
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f063 030f 	orn	r3, r3, #15
 800617e:	b2da      	uxtb	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	611a      	str	r2, [r3, #16]
}
 8006186:	e011      	b.n	80061ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10d      	bne.n	80061ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006194:	b29b      	uxth	r3, r3
 8006196:	11db      	asrs	r3, r3, #7
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f003 0306 	and.w	r3, r3, #6
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f063 030e 	orn	r3, r3, #14
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	611a      	str	r2, [r3, #16]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <I2C_Master_ADD10+0x26>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d108      	bne.n	80061f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <I2C_Master_ADD10+0x48>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061fe:	605a      	str	r2, [r3, #4]
  }
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800620c:	b480      	push	{r7}
 800620e:	b091      	sub	sp, #68	@ 0x44
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800621a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b22      	cmp	r3, #34	@ 0x22
 8006234:	f040 8169 	bne.w	800650a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10f      	bne.n	8006260 <I2C_Master_ADDR+0x54>
 8006240:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d10b      	bne.n	8006260 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006248:	2300      	movs	r3, #0
 800624a:	633b      	str	r3, [r7, #48]	@ 0x30
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	633b      	str	r3, [r7, #48]	@ 0x30
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	633b      	str	r3, [r7, #48]	@ 0x30
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	e160      	b.n	8006522 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11d      	bne.n	80062a4 <I2C_Master_ADDR+0x98>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006270:	d118      	bne.n	80062a4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006272:	2300      	movs	r3, #0
 8006274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006296:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80062a2:	e13e      	b.n	8006522 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d113      	bne.n	80062d6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ae:	2300      	movs	r3, #0
 80062b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e115      	b.n	8006502 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	f040 808a 	bne.w	80063f6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062e8:	d137      	bne.n	800635a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006308:	d113      	bne.n	8006332 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006318:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631a:	2300      	movs	r3, #0
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	e0e7      	b.n	8006502 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006332:	2300      	movs	r3, #0
 8006334:	623b      	str	r3, [r7, #32]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e0d3      	b.n	8006502 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800635a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635c:	2b08      	cmp	r3, #8
 800635e:	d02e      	beq.n	80063be <I2C_Master_ADDR+0x1b2>
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	2b20      	cmp	r3, #32
 8006364:	d02b      	beq.n	80063be <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	2b12      	cmp	r3, #18
 800636a:	d102      	bne.n	8006372 <I2C_Master_ADDR+0x166>
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	2b01      	cmp	r3, #1
 8006370:	d125      	bne.n	80063be <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	2b04      	cmp	r3, #4
 8006376:	d00e      	beq.n	8006396 <I2C_Master_ADDR+0x18a>
 8006378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637a:	2b02      	cmp	r3, #2
 800637c:	d00b      	beq.n	8006396 <I2C_Master_ADDR+0x18a>
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	2b10      	cmp	r3, #16
 8006382:	d008      	beq.n	8006396 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e007      	b.n	80063a6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	e0a1      	b.n	8006502 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ce:	2300      	movs	r3, #0
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e085      	b.n	8006502 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d14d      	bne.n	800649c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	2b04      	cmp	r3, #4
 8006404:	d016      	beq.n	8006434 <I2C_Master_ADDR+0x228>
 8006406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006408:	2b02      	cmp	r3, #2
 800640a:	d013      	beq.n	8006434 <I2C_Master_ADDR+0x228>
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	2b10      	cmp	r3, #16
 8006410:	d010      	beq.n	8006434 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006420:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e007      	b.n	8006444 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006442:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800644e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006452:	d117      	bne.n	8006484 <I2C_Master_ADDR+0x278>
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800645a:	d00b      	beq.n	8006474 <I2C_Master_ADDR+0x268>
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	2b01      	cmp	r3, #1
 8006460:	d008      	beq.n	8006474 <I2C_Master_ADDR+0x268>
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	2b08      	cmp	r3, #8
 8006466:	d005      	beq.n	8006474 <I2C_Master_ADDR+0x268>
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	2b10      	cmp	r3, #16
 800646c:	d002      	beq.n	8006474 <I2C_Master_ADDR+0x268>
 800646e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006470:	2b20      	cmp	r3, #32
 8006472:	d107      	bne.n	8006484 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006482:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	e032      	b.n	8006502 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064aa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ba:	d117      	bne.n	80064ec <I2C_Master_ADDR+0x2e0>
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064c2:	d00b      	beq.n	80064dc <I2C_Master_ADDR+0x2d0>
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d008      	beq.n	80064dc <I2C_Master_ADDR+0x2d0>
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d005      	beq.n	80064dc <I2C_Master_ADDR+0x2d0>
 80064d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d002      	beq.n	80064dc <I2C_Master_ADDR+0x2d0>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d107      	bne.n	80064ec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ec:	2300      	movs	r3, #0
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006508:	e00b      	b.n	8006522 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]
}
 8006520:	e7ff      	b.n	8006522 <I2C_Master_ADDR+0x316>
 8006522:	bf00      	nop
 8006524:	3744      	adds	r7, #68	@ 0x44
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d02b      	beq.n	80065a0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d114      	bne.n	80065a0 <I2C_SlaveTransmit_TXE+0x72>
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b29      	cmp	r3, #41	@ 0x29
 800657a:	d111      	bne.n	80065a0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800658a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2221      	movs	r2, #33	@ 0x21
 8006590:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2228      	movs	r2, #40	@ 0x28
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff f9bd 	bl	800591a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d011      	beq.n	80065de <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d02c      	beq.n	800665e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d114      	bne.n	800665e <I2C_SlaveReceive_RXNE+0x74>
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b2a      	cmp	r3, #42	@ 0x2a
 8006638:	d111      	bne.n	800665e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006648:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2222      	movs	r2, #34	@ 0x22
 800664e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2228      	movs	r2, #40	@ 0x28
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff f968 	bl	800592e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d012      	beq.n	800669e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80066c4:	2b28      	cmp	r3, #40	@ 0x28
 80066c6:	d127      	bne.n	8006718 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	089b      	lsrs	r3, r3, #2
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	09db      	lsrs	r3, r3, #7
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d103      	bne.n	80066fc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	81bb      	strh	r3, [r7, #12]
 80066fa:	e002      	b.n	8006702 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800670a:	89ba      	ldrh	r2, [r7, #12]
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff f916 	bl	8005942 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006716:	e00e      	b.n	8006736 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006718:	2300      	movs	r3, #0
 800671a:	60bb      	str	r3, [r7, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	60bb      	str	r3, [r7, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	60bb      	str	r3, [r7, #8]
 800672c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800675e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006760:	2300      	movs	r3, #0
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800678c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800679c:	d172      	bne.n	8006884 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2b22      	cmp	r3, #34	@ 0x22
 80067a2:	d002      	beq.n	80067aa <I2C_Slave_STOPF+0x6a>
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80067a8:	d135      	bne.n	8006816 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	f043 0204 	orr.w	r2, r3, #4
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe f896 	bl	8004914 <HAL_DMA_GetState>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d049      	beq.n	8006882 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	4a69      	ldr	r2, [pc, #420]	@ (8006998 <I2C_Slave_STOPF+0x258>)
 80067f4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd fede 	bl	80045bc <HAL_DMA_Abort_IT>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d03d      	beq.n	8006882 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006814:	e035      	b.n	8006882 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	b29a      	uxth	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	f043 0204 	orr.w	r2, r3, #4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006848:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe f860 	bl	8004914 <HAL_DMA_GetState>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d014      	beq.n	8006884 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800685e:	4a4e      	ldr	r2, [pc, #312]	@ (8006998 <I2C_Slave_STOPF+0x258>)
 8006860:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006866:	4618      	mov	r0, r3
 8006868:	f7fd fea8 	bl	80045bc <HAL_DMA_Abort_IT>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d008      	beq.n	8006884 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800687c:	4610      	mov	r0, r2
 800687e:	4798      	blx	r3
 8006880:	e000      	b.n	8006884 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006882:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d03e      	beq.n	800690c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b04      	cmp	r3, #4
 800689a:	d112      	bne.n	80068c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068cc:	2b40      	cmp	r3, #64	@ 0x40
 80068ce:	d112      	bne.n	80068f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006904:	f043 0204 	orr.w	r2, r3, #4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f843 	bl	80069a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800691a:	e039      	b.n	8006990 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006920:	d109      	bne.n	8006936 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2228      	movs	r2, #40	@ 0x28
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fe fffc 	bl	800592e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b28      	cmp	r3, #40	@ 0x28
 8006940:	d111      	bne.n	8006966 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a15      	ldr	r2, [pc, #84]	@ (800699c <I2C_Slave_STOPF+0x25c>)
 8006946:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fe fffd 	bl	800595e <HAL_I2C_ListenCpltCallback>
}
 8006964:	e014      	b.n	8006990 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696a:	2b22      	cmp	r3, #34	@ 0x22
 800696c:	d002      	beq.n	8006974 <I2C_Slave_STOPF+0x234>
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b22      	cmp	r3, #34	@ 0x22
 8006972:	d10d      	bne.n	8006990 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fe ffcf 	bl	800592e <HAL_I2C_SlaveRxCpltCallback>
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	08006f41 	.word	0x08006f41
 800699c:	ffff0000 	.word	0xffff0000

080069a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d002      	beq.n	80069c4 <I2C_ITError+0x24>
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b40      	cmp	r3, #64	@ 0x40
 80069c2:	d10a      	bne.n	80069da <I2C_ITError+0x3a>
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b22      	cmp	r3, #34	@ 0x22
 80069c8:	d107      	bne.n	80069da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80069e0:	2b28      	cmp	r3, #40	@ 0x28
 80069e2:	d107      	bne.n	80069f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2228      	movs	r2, #40	@ 0x28
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80069f2:	e015      	b.n	8006a20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a02:	d00a      	beq.n	8006a1a <I2C_ITError+0x7a>
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b60      	cmp	r3, #96	@ 0x60
 8006a08:	d007      	beq.n	8006a1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a2e:	d162      	bne.n	8006af6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d020      	beq.n	8006a90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a52:	4a6a      	ldr	r2, [pc, #424]	@ (8006bfc <I2C_ITError+0x25c>)
 8006a54:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fd fdae 	bl	80045bc <HAL_DMA_Abort_IT>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8089 	beq.w	8006b7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4798      	blx	r3
 8006a8e:	e074      	b.n	8006b7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a94:	4a59      	ldr	r2, [pc, #356]	@ (8006bfc <I2C_ITError+0x25c>)
 8006a96:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fd fd8d 	bl	80045bc <HAL_DMA_Abort_IT>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d068      	beq.n	8006b7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d10b      	bne.n	8006ace <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	e041      	b.n	8006b7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b60      	cmp	r3, #96	@ 0x60
 8006b00:	d125      	bne.n	8006b4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1a:	2b40      	cmp	r3, #64	@ 0x40
 8006b1c:	d10b      	bne.n	8006b36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fe ff31 	bl	80059ae <HAL_I2C_AbortCpltCallback>
 8006b4c:	e015      	b.n	8006b7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b58:	2b40      	cmp	r3, #64	@ 0x40
 8006b5a:	d10b      	bne.n	8006b74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7fe ff10 	bl	800599a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10e      	bne.n	8006ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006bb6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bbe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d113      	bne.n	8006bf4 <I2C_ITError+0x254>
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b28      	cmp	r3, #40	@ 0x28
 8006bd0:	d110      	bne.n	8006bf4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8006c00 <I2C_ITError+0x260>)
 8006bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fe feb5 	bl	800595e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	08006f41 	.word	0x08006f41
 8006c00:	ffff0000 	.word	0xffff0000

08006c04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	460b      	mov	r3, r1
 8006c12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d006      	beq.n	8006c2e <I2C_MasterRequestWrite+0x2a>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d003      	beq.n	8006c2e <I2C_MasterRequestWrite+0x2a>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c2c:	d108      	bne.n	8006c40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e00b      	b.n	8006c58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c44:	2b12      	cmp	r3, #18
 8006c46:	d107      	bne.n	8006c58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fa13 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00d      	beq.n	8006c8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c7e:	d103      	bne.n	8006c88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e035      	b.n	8006cf8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c94:	d108      	bne.n	8006ca8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c96:	897b      	ldrh	r3, [r7, #10]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ca4:	611a      	str	r2, [r3, #16]
 8006ca6:	e01b      	b.n	8006ce0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ca8:	897b      	ldrh	r3, [r7, #10]
 8006caa:	11db      	asrs	r3, r3, #7
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0306 	and.w	r3, r3, #6
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f063 030f 	orn	r3, r3, #15
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	490e      	ldr	r1, [pc, #56]	@ (8006d00 <I2C_MasterRequestWrite+0xfc>)
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fa5c 	bl	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e010      	b.n	8006cf8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006cd6:	897b      	ldrh	r3, [r7, #10]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	4907      	ldr	r1, [pc, #28]	@ (8006d04 <I2C_MasterRequestWrite+0x100>)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fa4c 	bl	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	00010008 	.word	0x00010008
 8006d04:	00010002 	.word	0x00010002

08006d08 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d1c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d24:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006d3a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d48:	2200      	movs	r2, #0
 8006d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	2200      	movs	r2, #0
 8006d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006d5c:	7cfb      	ldrb	r3, [r7, #19]
 8006d5e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006d62:	2b21      	cmp	r3, #33	@ 0x21
 8006d64:	d007      	beq.n	8006d76 <I2C_DMAXferCplt+0x6e>
 8006d66:	7cfb      	ldrb	r3, [r7, #19]
 8006d68:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006d6c:	2b22      	cmp	r3, #34	@ 0x22
 8006d6e:	d131      	bne.n	8006dd4 <I2C_DMAXferCplt+0xcc>
 8006d70:	7cbb      	ldrb	r3, [r7, #18]
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d12e      	bne.n	8006dd4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d84:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006d8c:	7cfb      	ldrb	r3, [r7, #19]
 8006d8e:	2b29      	cmp	r3, #41	@ 0x29
 8006d90:	d10a      	bne.n	8006da8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2221      	movs	r2, #33	@ 0x21
 8006d96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2228      	movs	r2, #40	@ 0x28
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006da0:	6978      	ldr	r0, [r7, #20]
 8006da2:	f7fe fdba 	bl	800591a <HAL_I2C_SlaveTxCpltCallback>
 8006da6:	e00c      	b.n	8006dc2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006da8:	7cfb      	ldrb	r3, [r7, #19]
 8006daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dac:	d109      	bne.n	8006dc2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2222      	movs	r2, #34	@ 0x22
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2228      	movs	r2, #40	@ 0x28
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dbc:	6978      	ldr	r0, [r7, #20]
 8006dbe:	f7fe fdb6 	bl	800592e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006dd0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006dd2:	e074      	b.n	8006ebe <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d06e      	beq.n	8006ebe <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d107      	bne.n	8006dfa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006df8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006e08:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e10:	d009      	beq.n	8006e26 <I2C_DMAXferCplt+0x11e>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d006      	beq.n	8006e26 <I2C_DMAXferCplt+0x11e>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006e1e:	d002      	beq.n	8006e26 <I2C_DMAXferCplt+0x11e>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d107      	bne.n	8006e36 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e34:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e44:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e54:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006e64:	6978      	ldr	r0, [r7, #20]
 8006e66:	f7fe fd98 	bl	800599a <HAL_I2C_ErrorCallback>
}
 8006e6a:	e028      	b.n	8006ebe <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b40      	cmp	r3, #64	@ 0x40
 8006e7e:	d10a      	bne.n	8006e96 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	f7fe fd79 	bl	8005986 <HAL_I2C_MemRxCpltCallback>
}
 8006e94:	e013      	b.n	8006ebe <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d002      	beq.n	8006eaa <I2C_DMAXferCplt+0x1a2>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	d103      	bne.n	8006eb2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2200      	movs	r2, #0
 8006eae:	631a      	str	r2, [r3, #48]	@ 0x30
 8006eb0:	e002      	b.n	8006eb8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2212      	movs	r2, #18
 8006eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006eb8:	6978      	ldr	r0, [r7, #20]
 8006eba:	f7fe fd24 	bl	8005906 <HAL_I2C_MasterRxCpltCallback>
}
 8006ebe:	bf00      	nop
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7fd fd1b 	bl	8004930 <HAL_DMA_GetError>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d01b      	beq.n	8006f38 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f0e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	f043 0210 	orr.w	r2, r3, #16
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7fe fd31 	bl	800599a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8007088 <I2C_DMAAbort+0x148>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	08db      	lsrs	r3, r3, #3
 8006f60:	4a4a      	ldr	r2, [pc, #296]	@ (800708c <I2C_DMAAbort+0x14c>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0a1a      	lsrs	r2, r3, #8
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	00da      	lsls	r2, r3, #3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006f86:	e00a      	b.n	8006f9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9c:	d0ea      	beq.n	8006f74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006faa:	2200      	movs	r2, #0
 8006fac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	2200      	movs	r2, #0
 8006fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fcc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0201 	bic.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b60      	cmp	r3, #96	@ 0x60
 800700e:	d10e      	bne.n	800702e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2200      	movs	r2, #0
 8007024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	f7fe fcc1 	bl	80059ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800702c:	e027      	b.n	800707e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800702e:	7cfb      	ldrb	r3, [r7, #19]
 8007030:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007034:	2b28      	cmp	r3, #40	@ 0x28
 8007036:	d117      	bne.n	8007068 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007056:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2228      	movs	r2, #40	@ 0x28
 8007062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007066:	e007      	b.n	8007078 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	f7fe fc8e 	bl	800599a <HAL_I2C_ErrorCallback>
}
 800707e:	bf00      	nop
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000000 	.word	0x20000000
 800708c:	14f8b589 	.word	0x14f8b589

08007090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070a0:	e048      	b.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a8:	d044      	beq.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070aa:	f7fc fef7 	bl	8003e9c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d302      	bcc.n	80070c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d139      	bne.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	0c1b      	lsrs	r3, r3, #16
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d10d      	bne.n	80070e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	43da      	mvns	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4013      	ands	r3, r2
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bf0c      	ite	eq
 80070dc:	2301      	moveq	r3, #1
 80070de:	2300      	movne	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	e00c      	b.n	8007100 <I2C_WaitOnFlagUntilTimeout+0x70>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	43da      	mvns	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4013      	ands	r3, r2
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	429a      	cmp	r2, r3
 8007104:	d116      	bne.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e023      	b.n	800717c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b01      	cmp	r3, #1
 800713c:	d10d      	bne.n	800715a <I2C_WaitOnFlagUntilTimeout+0xca>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	43da      	mvns	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4013      	ands	r3, r2
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	bf0c      	ite	eq
 8007150:	2301      	moveq	r3, #1
 8007152:	2300      	movne	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	e00c      	b.n	8007174 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	43da      	mvns	r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4013      	ands	r3, r2
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	bf0c      	ite	eq
 800716c:	2301      	moveq	r3, #1
 800716e:	2300      	movne	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	429a      	cmp	r2, r3
 8007178:	d093      	beq.n	80070a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007192:	e071      	b.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800719e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a2:	d123      	bne.n	80071ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d8:	f043 0204 	orr.w	r2, r3, #4
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e067      	b.n	80072bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f2:	d041      	beq.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f4:	f7fc fe52 	bl	8003e9c <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d136      	bne.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	0c1b      	lsrs	r3, r3, #16
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d10c      	bne.n	800722e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	43da      	mvns	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4013      	ands	r3, r2
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	bf14      	ite	ne
 8007226:	2301      	movne	r3, #1
 8007228:	2300      	moveq	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e00b      	b.n	8007246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	43da      	mvns	r2, r3
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4013      	ands	r3, r2
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	bf14      	ite	ne
 8007240:	2301      	movne	r3, #1
 8007242:	2300      	moveq	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e021      	b.n	80072bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d10c      	bne.n	800729c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	43da      	mvns	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	e00b      	b.n	80072b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	43da      	mvns	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4013      	ands	r3, r2
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bf14      	ite	ne
 80072ae:	2301      	movne	r3, #1
 80072b0:	2300      	moveq	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f47f af6d 	bne.w	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072d0:	e034      	b.n	800733c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f8b8 	bl	8007448 <I2C_IsAcknowledgeFailed>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e034      	b.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e8:	d028      	beq.n	800733c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ea:	f7fc fdd7 	bl	8003e9c <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d302      	bcc.n	8007300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11d      	bne.n	800733c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730a:	2b80      	cmp	r3, #128	@ 0x80
 800730c:	d016      	beq.n	800733c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007328:	f043 0220 	orr.w	r2, r3, #32
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e007      	b.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007346:	2b80      	cmp	r3, #128	@ 0x80
 8007348:	d1c3      	bne.n	80072d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007360:	e034      	b.n	80073cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f870 	bl	8007448 <I2C_IsAcknowledgeFailed>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e034      	b.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007378:	d028      	beq.n	80073cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800737a:	f7fc fd8f 	bl	8003e9c <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	d302      	bcc.n	8007390 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d11d      	bne.n	80073cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b04      	cmp	r3, #4
 800739c:	d016      	beq.n	80073cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b8:	f043 0220 	orr.w	r2, r3, #32
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e007      	b.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d1c3      	bne.n	8007362 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80073f0:	4b13      	ldr	r3, [pc, #76]	@ (8007440 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	08db      	lsrs	r3, r3, #3
 80073f6:	4a13      	ldr	r2, [pc, #76]	@ (8007444 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80073f8:	fba2 2303 	umull	r2, r3, r2, r3
 80073fc:	0a1a      	lsrs	r2, r3, #8
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b01      	subs	r3, #1
 800740a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d107      	bne.n	8007422 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	f043 0220 	orr.w	r2, r3, #32
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e008      	b.n	8007434 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800742c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007430:	d0e9      	beq.n	8007406 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	20000000 	.word	0x20000000
 8007444:	14f8b589 	.word	0x14f8b589

08007448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800745a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745e:	d11b      	bne.n	8007498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007484:	f043 0204 	orr.w	r2, r3, #4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80074b6:	d103      	bne.n	80074c0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80074be:	e007      	b.n	80074d0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80074c8:	d102      	bne.n	80074d0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2208      	movs	r2, #8
 80074ce:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e267      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d075      	beq.n	80075e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80074fa:	4b88      	ldr	r3, [pc, #544]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 030c 	and.w	r3, r3, #12
 8007502:	2b04      	cmp	r3, #4
 8007504:	d00c      	beq.n	8007520 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007506:	4b85      	ldr	r3, [pc, #532]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800750e:	2b08      	cmp	r3, #8
 8007510:	d112      	bne.n	8007538 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007512:	4b82      	ldr	r3, [pc, #520]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800751a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800751e:	d10b      	bne.n	8007538 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007520:	4b7e      	ldr	r3, [pc, #504]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05b      	beq.n	80075e4 <HAL_RCC_OscConfig+0x108>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d157      	bne.n	80075e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e242      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007540:	d106      	bne.n	8007550 <HAL_RCC_OscConfig+0x74>
 8007542:	4b76      	ldr	r3, [pc, #472]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a75      	ldr	r2, [pc, #468]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	e01d      	b.n	800758c <HAL_RCC_OscConfig+0xb0>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007558:	d10c      	bne.n	8007574 <HAL_RCC_OscConfig+0x98>
 800755a:	4b70      	ldr	r3, [pc, #448]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a6f      	ldr	r2, [pc, #444]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	4b6d      	ldr	r3, [pc, #436]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a6c      	ldr	r2, [pc, #432]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 800756c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	e00b      	b.n	800758c <HAL_RCC_OscConfig+0xb0>
 8007574:	4b69      	ldr	r3, [pc, #420]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a68      	ldr	r2, [pc, #416]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 800757a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	4b66      	ldr	r3, [pc, #408]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a65      	ldr	r2, [pc, #404]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800758a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d013      	beq.n	80075bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007594:	f7fc fc82 	bl	8003e9c <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800759a:	e008      	b.n	80075ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800759c:	f7fc fc7e 	bl	8003e9c <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b64      	cmp	r3, #100	@ 0x64
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e207      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ae:	4b5b      	ldr	r3, [pc, #364]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f0      	beq.n	800759c <HAL_RCC_OscConfig+0xc0>
 80075ba:	e014      	b.n	80075e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075bc:	f7fc fc6e 	bl	8003e9c <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c4:	f7fc fc6a 	bl	8003e9c <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b64      	cmp	r3, #100	@ 0x64
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e1f3      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075d6:	4b51      	ldr	r3, [pc, #324]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f0      	bne.n	80075c4 <HAL_RCC_OscConfig+0xe8>
 80075e2:	e000      	b.n	80075e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d063      	beq.n	80076ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80075f2:	4b4a      	ldr	r3, [pc, #296]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075fe:	4b47      	ldr	r3, [pc, #284]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007606:	2b08      	cmp	r3, #8
 8007608:	d11c      	bne.n	8007644 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800760a:	4b44      	ldr	r3, [pc, #272]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d116      	bne.n	8007644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007616:	4b41      	ldr	r3, [pc, #260]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <HAL_RCC_OscConfig+0x152>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d001      	beq.n	800762e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e1c7      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762e:	4b3b      	ldr	r3, [pc, #236]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	4937      	ldr	r1, [pc, #220]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 800763e:	4313      	orrs	r3, r2
 8007640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007642:	e03a      	b.n	80076ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d020      	beq.n	800768e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800764c:	4b34      	ldr	r3, [pc, #208]	@ (8007720 <HAL_RCC_OscConfig+0x244>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007652:	f7fc fc23 	bl	8003e9c <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800765a:	f7fc fc1f 	bl	8003e9c <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e1a8      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766c:	4b2b      	ldr	r3, [pc, #172]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007678:	4b28      	ldr	r3, [pc, #160]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	4925      	ldr	r1, [pc, #148]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 8007688:	4313      	orrs	r3, r2
 800768a:	600b      	str	r3, [r1, #0]
 800768c:	e015      	b.n	80076ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800768e:	4b24      	ldr	r3, [pc, #144]	@ (8007720 <HAL_RCC_OscConfig+0x244>)
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fc fc02 	bl	8003e9c <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800769c:	f7fc fbfe 	bl	8003e9c <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e187      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ae:	4b1b      	ldr	r3, [pc, #108]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d036      	beq.n	8007734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d016      	beq.n	80076fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ce:	4b15      	ldr	r3, [pc, #84]	@ (8007724 <HAL_RCC_OscConfig+0x248>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d4:	f7fc fbe2 	bl	8003e9c <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076dc:	f7fc fbde 	bl	8003e9c <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e167      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ee:	4b0b      	ldr	r3, [pc, #44]	@ (800771c <HAL_RCC_OscConfig+0x240>)
 80076f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0f0      	beq.n	80076dc <HAL_RCC_OscConfig+0x200>
 80076fa:	e01b      	b.n	8007734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076fc:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <HAL_RCC_OscConfig+0x248>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007702:	f7fc fbcb 	bl	8003e9c <HAL_GetTick>
 8007706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007708:	e00e      	b.n	8007728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800770a:	f7fc fbc7 	bl	8003e9c <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d907      	bls.n	8007728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e150      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
 800771c:	40023800 	.word	0x40023800
 8007720:	42470000 	.word	0x42470000
 8007724:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007728:	4b88      	ldr	r3, [pc, #544]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 800772a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1ea      	bne.n	800770a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8097 	beq.w	8007870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007746:	4b81      	ldr	r3, [pc, #516]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 8007748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10f      	bne.n	8007772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	4b7d      	ldr	r3, [pc, #500]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	4a7c      	ldr	r2, [pc, #496]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 800775c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007760:	6413      	str	r3, [r2, #64]	@ 0x40
 8007762:	4b7a      	ldr	r3, [pc, #488]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776e:	2301      	movs	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007772:	4b77      	ldr	r3, [pc, #476]	@ (8007950 <HAL_RCC_OscConfig+0x474>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d118      	bne.n	80077b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800777e:	4b74      	ldr	r3, [pc, #464]	@ (8007950 <HAL_RCC_OscConfig+0x474>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a73      	ldr	r2, [pc, #460]	@ (8007950 <HAL_RCC_OscConfig+0x474>)
 8007784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800778a:	f7fc fb87 	bl	8003e9c <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007790:	e008      	b.n	80077a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007792:	f7fc fb83 	bl	8003e9c <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e10c      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007950 <HAL_RCC_OscConfig+0x474>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0f0      	beq.n	8007792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d106      	bne.n	80077c6 <HAL_RCC_OscConfig+0x2ea>
 80077b8:	4b64      	ldr	r3, [pc, #400]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077bc:	4a63      	ldr	r2, [pc, #396]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077be:	f043 0301 	orr.w	r3, r3, #1
 80077c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c4:	e01c      	b.n	8007800 <HAL_RCC_OscConfig+0x324>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCC_OscConfig+0x30c>
 80077ce:	4b5f      	ldr	r3, [pc, #380]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d2:	4a5e      	ldr	r2, [pc, #376]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077d4:	f043 0304 	orr.w	r3, r3, #4
 80077d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80077da:	4b5c      	ldr	r3, [pc, #368]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077de:	4a5b      	ldr	r2, [pc, #364]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80077e6:	e00b      	b.n	8007800 <HAL_RCC_OscConfig+0x324>
 80077e8:	4b58      	ldr	r3, [pc, #352]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ec:	4a57      	ldr	r2, [pc, #348]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80077f4:	4b55      	ldr	r3, [pc, #340]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f8:	4a54      	ldr	r2, [pc, #336]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80077fa:	f023 0304 	bic.w	r3, r3, #4
 80077fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d015      	beq.n	8007834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007808:	f7fc fb48 	bl	8003e9c <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780e:	e00a      	b.n	8007826 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007810:	f7fc fb44 	bl	8003e9c <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800781e:	4293      	cmp	r3, r2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e0cb      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007826:	4b49      	ldr	r3, [pc, #292]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0ee      	beq.n	8007810 <HAL_RCC_OscConfig+0x334>
 8007832:	e014      	b.n	800785e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007834:	f7fc fb32 	bl	8003e9c <HAL_GetTick>
 8007838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800783a:	e00a      	b.n	8007852 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800783c:	f7fc fb2e 	bl	8003e9c <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800784a:	4293      	cmp	r3, r2
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e0b5      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007852:	4b3e      	ldr	r3, [pc, #248]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 8007854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1ee      	bne.n	800783c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d105      	bne.n	8007870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007864:	4b39      	ldr	r3, [pc, #228]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 8007866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007868:	4a38      	ldr	r2, [pc, #224]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 800786a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800786e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 80a1 	beq.w	80079bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800787a:	4b34      	ldr	r3, [pc, #208]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	2b08      	cmp	r3, #8
 8007884:	d05c      	beq.n	8007940 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d141      	bne.n	8007912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800788e:	4b31      	ldr	r3, [pc, #196]	@ (8007954 <HAL_RCC_OscConfig+0x478>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007894:	f7fc fb02 	bl	8003e9c <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800789a:	e008      	b.n	80078ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800789c:	f7fc fafe 	bl	8003e9c <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e087      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ae:	4b27      	ldr	r3, [pc, #156]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f0      	bne.n	800789c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69da      	ldr	r2, [r3, #28]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c8:	019b      	lsls	r3, r3, #6
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	3b01      	subs	r3, #1
 80078d4:	041b      	lsls	r3, r3, #16
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	061b      	lsls	r3, r3, #24
 80078de:	491b      	ldr	r1, [pc, #108]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007954 <HAL_RCC_OscConfig+0x478>)
 80078e6:	2201      	movs	r2, #1
 80078e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ea:	f7fc fad7 	bl	8003e9c <HAL_GetTick>
 80078ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078f0:	e008      	b.n	8007904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f2:	f7fc fad3 	bl	8003e9c <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d901      	bls.n	8007904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e05c      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007904:	4b11      	ldr	r3, [pc, #68]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0f0      	beq.n	80078f2 <HAL_RCC_OscConfig+0x416>
 8007910:	e054      	b.n	80079bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007912:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <HAL_RCC_OscConfig+0x478>)
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007918:	f7fc fac0 	bl	8003e9c <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007920:	f7fc fabc 	bl	8003e9c <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e045      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007932:	4b06      	ldr	r3, [pc, #24]	@ (800794c <HAL_RCC_OscConfig+0x470>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1f0      	bne.n	8007920 <HAL_RCC_OscConfig+0x444>
 800793e:	e03d      	b.n	80079bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d107      	bne.n	8007958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e038      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
 800794c:	40023800 	.word	0x40023800
 8007950:	40007000 	.word	0x40007000
 8007954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007958:	4b1b      	ldr	r3, [pc, #108]	@ (80079c8 <HAL_RCC_OscConfig+0x4ec>)
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d028      	beq.n	80079b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007970:	429a      	cmp	r2, r3
 8007972:	d121      	bne.n	80079b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797e:	429a      	cmp	r2, r3
 8007980:	d11a      	bne.n	80079b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007988:	4013      	ands	r3, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800798e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007990:	4293      	cmp	r3, r2
 8007992:	d111      	bne.n	80079b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	3b01      	subs	r3, #1
 80079a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d107      	bne.n	80079b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d001      	beq.n	80079bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	40023800 	.word	0x40023800

080079cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e0cc      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079e0:	4b68      	ldr	r3, [pc, #416]	@ (8007b84 <HAL_RCC_ClockConfig+0x1b8>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d90c      	bls.n	8007a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ee:	4b65      	ldr	r3, [pc, #404]	@ (8007b84 <HAL_RCC_ClockConfig+0x1b8>)
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f6:	4b63      	ldr	r3, [pc, #396]	@ (8007b84 <HAL_RCC_ClockConfig+0x1b8>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d001      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0b8      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d020      	beq.n	8007a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a20:	4b59      	ldr	r3, [pc, #356]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	4a58      	ldr	r2, [pc, #352]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d005      	beq.n	8007a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a38:	4b53      	ldr	r3, [pc, #332]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	4a52      	ldr	r2, [pc, #328]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a44:	4b50      	ldr	r3, [pc, #320]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	494d      	ldr	r1, [pc, #308]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d044      	beq.n	8007aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d107      	bne.n	8007a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a6a:	4b47      	ldr	r3, [pc, #284]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d119      	bne.n	8007aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e07f      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d003      	beq.n	8007a8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d107      	bne.n	8007a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d109      	bne.n	8007aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e06f      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e067      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aaa:	4b37      	ldr	r3, [pc, #220]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f023 0203 	bic.w	r2, r3, #3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	4934      	ldr	r1, [pc, #208]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007abc:	f7fc f9ee 	bl	8003e9c <HAL_GetTick>
 8007ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ac2:	e00a      	b.n	8007ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac4:	f7fc f9ea 	bl	8003e9c <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e04f      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ada:	4b2b      	ldr	r3, [pc, #172]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 020c 	and.w	r2, r3, #12
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d1eb      	bne.n	8007ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007aec:	4b25      	ldr	r3, [pc, #148]	@ (8007b84 <HAL_RCC_ClockConfig+0x1b8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d20c      	bcs.n	8007b14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007afa:	4b22      	ldr	r3, [pc, #136]	@ (8007b84 <HAL_RCC_ClockConfig+0x1b8>)
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b02:	4b20      	ldr	r3, [pc, #128]	@ (8007b84 <HAL_RCC_ClockConfig+0x1b8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d001      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e032      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b20:	4b19      	ldr	r3, [pc, #100]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	4916      	ldr	r1, [pc, #88]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b3e:	4b12      	ldr	r3, [pc, #72]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	490e      	ldr	r1, [pc, #56]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b52:	f000 f821 	bl	8007b98 <HAL_RCC_GetSysClockFreq>
 8007b56:	4602      	mov	r2, r0
 8007b58:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	091b      	lsrs	r3, r3, #4
 8007b5e:	f003 030f 	and.w	r3, r3, #15
 8007b62:	490a      	ldr	r1, [pc, #40]	@ (8007b8c <HAL_RCC_ClockConfig+0x1c0>)
 8007b64:	5ccb      	ldrb	r3, [r1, r3]
 8007b66:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6a:	4a09      	ldr	r2, [pc, #36]	@ (8007b90 <HAL_RCC_ClockConfig+0x1c4>)
 8007b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007b6e:	4b09      	ldr	r3, [pc, #36]	@ (8007b94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fc f94e 	bl	8003e14 <HAL_InitTick>

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40023c00 	.word	0x40023c00
 8007b88:	40023800 	.word	0x40023800
 8007b8c:	08009f18 	.word	0x08009f18
 8007b90:	20000000 	.word	0x20000000
 8007b94:	20000004 	.word	0x20000004

08007b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b9c:	b094      	sub	sp, #80	@ 0x50
 8007b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bb0:	4b79      	ldr	r3, [pc, #484]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 030c 	and.w	r3, r3, #12
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d00d      	beq.n	8007bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	f200 80e1 	bhi.w	8007d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <HAL_RCC_GetSysClockFreq+0x34>
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d003      	beq.n	8007bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007bca:	e0db      	b.n	8007d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bcc:	4b73      	ldr	r3, [pc, #460]	@ (8007d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8007bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007bd0:	e0db      	b.n	8007d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bd2:	4b73      	ldr	r3, [pc, #460]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007bd6:	e0d8      	b.n	8007d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007be0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007be2:	4b6d      	ldr	r3, [pc, #436]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d063      	beq.n	8007cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bee:	4b6a      	ldr	r3, [pc, #424]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	099b      	lsrs	r3, r3, #6
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c02:	2300      	movs	r3, #0
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	f04f 0000 	mov.w	r0, #0
 8007c12:	f04f 0100 	mov.w	r1, #0
 8007c16:	0159      	lsls	r1, r3, #5
 8007c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c1c:	0150      	lsls	r0, r2, #5
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4621      	mov	r1, r4
 8007c24:	1a51      	subs	r1, r2, r1
 8007c26:	6139      	str	r1, [r7, #16]
 8007c28:	4629      	mov	r1, r5
 8007c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	f04f 0200 	mov.w	r2, #0
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c3c:	4659      	mov	r1, fp
 8007c3e:	018b      	lsls	r3, r1, #6
 8007c40:	4651      	mov	r1, sl
 8007c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c46:	4651      	mov	r1, sl
 8007c48:	018a      	lsls	r2, r1, #6
 8007c4a:	4651      	mov	r1, sl
 8007c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8007c50:	4659      	mov	r1, fp
 8007c52:	eb63 0901 	sbc.w	r9, r3, r1
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c6a:	4690      	mov	r8, r2
 8007c6c:	4699      	mov	r9, r3
 8007c6e:	4623      	mov	r3, r4
 8007c70:	eb18 0303 	adds.w	r3, r8, r3
 8007c74:	60bb      	str	r3, [r7, #8]
 8007c76:	462b      	mov	r3, r5
 8007c78:	eb49 0303 	adc.w	r3, r9, r3
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	024b      	lsls	r3, r1, #9
 8007c8e:	4621      	mov	r1, r4
 8007c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c94:	4621      	mov	r1, r4
 8007c96:	024a      	lsls	r2, r1, #9
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ca8:	f7f8 fe7c 	bl	80009a4 <__aeabi_uldivmod>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb4:	e058      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cb6:	4b38      	ldr	r3, [pc, #224]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	099b      	lsrs	r3, r3, #6
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007cc6:	623b      	str	r3, [r7, #32]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	464b      	mov	r3, r9
 8007cd4:	f04f 0000 	mov.w	r0, #0
 8007cd8:	f04f 0100 	mov.w	r1, #0
 8007cdc:	0159      	lsls	r1, r3, #5
 8007cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ce2:	0150      	lsls	r0, r2, #5
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4641      	mov	r1, r8
 8007cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8007cee:	4649      	mov	r1, r9
 8007cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d08:	ebb2 040a 	subs.w	r4, r2, sl
 8007d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	00eb      	lsls	r3, r5, #3
 8007d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d1e:	00e2      	lsls	r2, r4, #3
 8007d20:	4614      	mov	r4, r2
 8007d22:	461d      	mov	r5, r3
 8007d24:	4643      	mov	r3, r8
 8007d26:	18e3      	adds	r3, r4, r3
 8007d28:	603b      	str	r3, [r7, #0]
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	eb45 0303 	adc.w	r3, r5, r3
 8007d30:	607b      	str	r3, [r7, #4]
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	f04f 0300 	mov.w	r3, #0
 8007d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d3e:	4629      	mov	r1, r5
 8007d40:	028b      	lsls	r3, r1, #10
 8007d42:	4621      	mov	r1, r4
 8007d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d48:	4621      	mov	r1, r4
 8007d4a:	028a      	lsls	r2, r1, #10
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d52:	2200      	movs	r2, #0
 8007d54:	61bb      	str	r3, [r7, #24]
 8007d56:	61fa      	str	r2, [r7, #28]
 8007d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d5c:	f7f8 fe22 	bl	80009a4 <__aeabi_uldivmod>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4613      	mov	r3, r2
 8007d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007d68:	4b0b      	ldr	r3, [pc, #44]	@ (8007d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	0c1b      	lsrs	r3, r3, #16
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	3301      	adds	r3, #1
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d82:	e002      	b.n	8007d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d84:	4b05      	ldr	r3, [pc, #20]	@ (8007d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8007d86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3750      	adds	r7, #80	@ 0x50
 8007d90:	46bd      	mov	sp, r7
 8007d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d96:	bf00      	nop
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	00f42400 	.word	0x00f42400
 8007da0:	007a1200 	.word	0x007a1200

08007da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007da8:	4b03      	ldr	r3, [pc, #12]	@ (8007db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007daa:	681b      	ldr	r3, [r3, #0]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20000000 	.word	0x20000000

08007dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007dc0:	f7ff fff0 	bl	8007da4 <HAL_RCC_GetHCLKFreq>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	0a9b      	lsrs	r3, r3, #10
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	4903      	ldr	r1, [pc, #12]	@ (8007de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dd2:	5ccb      	ldrb	r3, [r1, r3]
 8007dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	08009f28 	.word	0x08009f28

08007de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007de8:	f7ff ffdc 	bl	8007da4 <HAL_RCC_GetHCLKFreq>
 8007dec:	4602      	mov	r2, r0
 8007dee:	4b05      	ldr	r3, [pc, #20]	@ (8007e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	0b5b      	lsrs	r3, r3, #13
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	4903      	ldr	r1, [pc, #12]	@ (8007e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dfa:	5ccb      	ldrb	r3, [r1, r3]
 8007dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40023800 	.word	0x40023800
 8007e08:	08009f28 	.word	0x08009f28

08007e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e07b      	b.n	8007f16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d108      	bne.n	8007e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e2e:	d009      	beq.n	8007e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	61da      	str	r2, [r3, #28]
 8007e36:	e005      	b.n	8007e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fb fcd2 	bl	8003808 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec8:	ea42 0103 	orr.w	r1, r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	f003 0104 	and.w	r1, r3, #4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eea:	f003 0210 	and.w	r2, r3, #16
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69da      	ldr	r2, [r3, #28]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	099b      	lsrs	r3, r3, #6
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10f      	bne.n	8007f64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	099b      	lsrs	r3, r3, #6
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4798      	blx	r3
    return;
 8007f62:	e0d7      	b.n	8008114 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <HAL_SPI_IRQHandler+0x66>
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	09db      	lsrs	r3, r3, #7
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d004      	beq.n	8007f86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
    return;
 8007f84:	e0c6      	b.n	8008114 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10c      	bne.n	8007fac <HAL_SPI_IRQHandler+0x8c>
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	099b      	lsrs	r3, r3, #6
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 80b4 	beq.w	8008114 <HAL_SPI_IRQHandler+0x1f4>
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80ad 	beq.w	8008114 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	099b      	lsrs	r3, r3, #6
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d023      	beq.n	800800e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d011      	beq.n	8007ff6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd6:	f043 0204 	orr.w	r2, r3, #4
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	e00b      	b.n	800800e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	693b      	ldr	r3, [r7, #16]
        return;
 800800c:	e082      	b.n	8008114 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d014      	beq.n	8008044 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801e:	f043 0201 	orr.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008054:	f043 0208 	orr.w	r2, r3, #8
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800805c:	2300      	movs	r3, #0
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	60bb      	str	r3, [r7, #8]
 8008068:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806e:	2b00      	cmp	r3, #0
 8008070:	d04f      	beq.n	8008112 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008080:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <HAL_SPI_IRQHandler+0x17e>
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d034      	beq.n	8008108 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0203 	bic.w	r2, r2, #3
 80080ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d011      	beq.n	80080da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ba:	4a18      	ldr	r2, [pc, #96]	@ (800811c <HAL_SPI_IRQHandler+0x1fc>)
 80080bc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fc fa7a 	bl	80045bc <HAL_DMA_Abort_IT>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d016      	beq.n	8008110 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e6:	4a0d      	ldr	r2, [pc, #52]	@ (800811c <HAL_SPI_IRQHandler+0x1fc>)
 80080e8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fc fa64 	bl	80045bc <HAL_DMA_Abort_IT>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8008106:	e003      	b.n	8008110 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f809 	bl	8008120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800810e:	e000      	b.n	8008112 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008110:	bf00      	nop
    return;
 8008112:	bf00      	nop
  }
}
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	08008135 	.word	0x08008135

08008120 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008140:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff ffe6 	bl	8008120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e041      	b.n	80081f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fb fcb2 	bl	8003aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f000 fb00 	bl	80087a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b01      	cmp	r3, #1
 800820e:	d001      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e04e      	b.n	80082b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0201 	orr.w	r2, r2, #1
 800822a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a23      	ldr	r2, [pc, #140]	@ (80082c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d022      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x80>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823e:	d01d      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x80>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1f      	ldr	r2, [pc, #124]	@ (80082c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d018      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x80>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1e      	ldr	r2, [pc, #120]	@ (80082c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d013      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x80>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a1c      	ldr	r2, [pc, #112]	@ (80082cc <HAL_TIM_Base_Start_IT+0xd0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00e      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x80>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a1b      	ldr	r2, [pc, #108]	@ (80082d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d009      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x80>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a19      	ldr	r2, [pc, #100]	@ (80082d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x80>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a18      	ldr	r2, [pc, #96]	@ (80082d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d111      	bne.n	80082a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b06      	cmp	r3, #6
 800828c:	d010      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0201 	orr.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829e:	e007      	b.n	80082b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40000400 	.word	0x40000400
 80082c8:	40000800 	.word	0x40000800
 80082cc:	40000c00 	.word	0x40000c00
 80082d0:	40010400 	.word	0x40010400
 80082d4:	40014000 	.word	0x40014000
 80082d8:	40001800 	.word	0x40001800

080082dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e097      	b.n	8008420 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7fb facf 	bl	80038a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008320:	f023 0307 	bic.w	r3, r3, #7
 8008324:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3304      	adds	r3, #4
 800832e:	4619      	mov	r1, r3
 8008330:	4610      	mov	r0, r2
 8008332:	f000 fa35 	bl	80087a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	4313      	orrs	r3, r2
 8008356:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	4313      	orrs	r3, r2
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4313      	orrs	r3, r2
 8008374:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800837c:	f023 030c 	bic.w	r3, r3, #12
 8008380:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008388:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800838c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	021b      	lsls	r3, r3, #8
 8008398:	4313      	orrs	r3, r2
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	011a      	lsls	r2, r3, #4
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	031b      	lsls	r3, r3, #12
 80083ac:	4313      	orrs	r3, r2
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80083ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80083c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	4313      	orrs	r3, r2
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008438:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008440:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008448:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008450:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d110      	bne.n	800847a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d102      	bne.n	8008464 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800845e:	7b7b      	ldrb	r3, [r7, #13]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d001      	beq.n	8008468 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e089      	b.n	800857c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008478:	e031      	b.n	80084de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b04      	cmp	r3, #4
 800847e:	d110      	bne.n	80084a2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d102      	bne.n	800848c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008486:	7b3b      	ldrb	r3, [r7, #12]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d001      	beq.n	8008490 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e075      	b.n	800857c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80084a0:	e01d      	b.n	80084de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d108      	bne.n	80084ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d105      	bne.n	80084ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084ae:	7b7b      	ldrb	r3, [r7, #13]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d102      	bne.n	80084ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084b4:	7b3b      	ldrb	r3, [r7, #12]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d001      	beq.n	80084be <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e05e      	b.n	800857c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2202      	movs	r2, #2
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_TIM_Encoder_Start_IT+0xc4>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d010      	beq.n	800850c <HAL_TIM_Encoder_Start_IT+0xe4>
 80084ea:	e01f      	b.n	800852c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2201      	movs	r2, #1
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 f9ff 	bl	80088f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0202 	orr.w	r2, r2, #2
 8008508:	60da      	str	r2, [r3, #12]
      break;
 800850a:	e02e      	b.n	800856a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2201      	movs	r2, #1
 8008512:	2104      	movs	r1, #4
 8008514:	4618      	mov	r0, r3
 8008516:	f000 f9ef 	bl	80088f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68da      	ldr	r2, [r3, #12]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 0204 	orr.w	r2, r2, #4
 8008528:	60da      	str	r2, [r3, #12]
      break;
 800852a:	e01e      	b.n	800856a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2201      	movs	r2, #1
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f9df 	bl	80088f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2201      	movs	r2, #1
 8008540:	2104      	movs	r1, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f000 f9d8 	bl	80088f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0202 	orr.w	r2, r2, #2
 8008556:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0204 	orr.w	r2, r2, #4
 8008566:	60da      	str	r2, [r3, #12]
      break;
 8008568:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0201 	orr.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d020      	beq.n	80085e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01b      	beq.n	80085e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f06f 0202 	mvn.w	r2, #2
 80085b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7fa f858 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 80085d4:	e005      	b.n	80085e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f8c4 	bl	8008764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f8cb 	bl	8008778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d020      	beq.n	8008634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01b      	beq.n	8008634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f06f 0204 	mvn.w	r2, #4
 8008604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2202      	movs	r2, #2
 800860a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7fa f832 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8008620:	e005      	b.n	800862e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f89e 	bl	8008764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f8a5 	bl	8008778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d020      	beq.n	8008680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01b      	beq.n	8008680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f06f 0208 	mvn.w	r2, #8
 8008650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2204      	movs	r2, #4
 8008656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7fa f80c 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 800866c:	e005      	b.n	800867a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f878 	bl	8008764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f87f 	bl	8008778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d020      	beq.n	80086cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01b      	beq.n	80086cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f06f 0210 	mvn.w	r2, #16
 800869c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2208      	movs	r2, #8
 80086a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7f9 ffe6 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 80086b8:	e005      	b.n	80086c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f852 	bl	8008764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f859 	bl	8008778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00c      	beq.n	80086f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f06f 0201 	mvn.w	r2, #1
 80086e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7f9 ff94 	bl	8002618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00c      	beq.n	8008714 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800870c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f99e 	bl	8008a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f82a 	bl	800878c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00c      	beq.n	800875c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f06f 0220 	mvn.w	r2, #32
 8008754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f970 	bl	8008a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800875c:	bf00      	nop
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a46      	ldr	r2, [pc, #280]	@ (80088cc <TIM_Base_SetConfig+0x12c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d013      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087be:	d00f      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a43      	ldr	r2, [pc, #268]	@ (80088d0 <TIM_Base_SetConfig+0x130>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00b      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a42      	ldr	r2, [pc, #264]	@ (80088d4 <TIM_Base_SetConfig+0x134>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d007      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a41      	ldr	r2, [pc, #260]	@ (80088d8 <TIM_Base_SetConfig+0x138>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d003      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a40      	ldr	r2, [pc, #256]	@ (80088dc <TIM_Base_SetConfig+0x13c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d108      	bne.n	80087f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a35      	ldr	r2, [pc, #212]	@ (80088cc <TIM_Base_SetConfig+0x12c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d02b      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008800:	d027      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a32      	ldr	r2, [pc, #200]	@ (80088d0 <TIM_Base_SetConfig+0x130>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d023      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a31      	ldr	r2, [pc, #196]	@ (80088d4 <TIM_Base_SetConfig+0x134>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01f      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a30      	ldr	r2, [pc, #192]	@ (80088d8 <TIM_Base_SetConfig+0x138>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d01b      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a2f      	ldr	r2, [pc, #188]	@ (80088dc <TIM_Base_SetConfig+0x13c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d017      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a2e      	ldr	r2, [pc, #184]	@ (80088e0 <TIM_Base_SetConfig+0x140>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d013      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a2d      	ldr	r2, [pc, #180]	@ (80088e4 <TIM_Base_SetConfig+0x144>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00f      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a2c      	ldr	r2, [pc, #176]	@ (80088e8 <TIM_Base_SetConfig+0x148>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00b      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a2b      	ldr	r2, [pc, #172]	@ (80088ec <TIM_Base_SetConfig+0x14c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d007      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a2a      	ldr	r2, [pc, #168]	@ (80088f0 <TIM_Base_SetConfig+0x150>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d003      	beq.n	8008852 <TIM_Base_SetConfig+0xb2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a29      	ldr	r2, [pc, #164]	@ (80088f4 <TIM_Base_SetConfig+0x154>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d108      	bne.n	8008864 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a10      	ldr	r2, [pc, #64]	@ (80088cc <TIM_Base_SetConfig+0x12c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d003      	beq.n	8008898 <TIM_Base_SetConfig+0xf8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a12      	ldr	r2, [pc, #72]	@ (80088dc <TIM_Base_SetConfig+0x13c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d103      	bne.n	80088a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	691a      	ldr	r2, [r3, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d105      	bne.n	80088be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f023 0201 	bic.w	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	611a      	str	r2, [r3, #16]
  }
}
 80088be:	bf00      	nop
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40010000 	.word	0x40010000
 80088d0:	40000400 	.word	0x40000400
 80088d4:	40000800 	.word	0x40000800
 80088d8:	40000c00 	.word	0x40000c00
 80088dc:	40010400 	.word	0x40010400
 80088e0:	40014000 	.word	0x40014000
 80088e4:	40014400 	.word	0x40014400
 80088e8:	40014800 	.word	0x40014800
 80088ec:	40001800 	.word	0x40001800
 80088f0:	40001c00 	.word	0x40001c00
 80088f4:	40002000 	.word	0x40002000

080088f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f003 031f 	and.w	r3, r3, #31
 800890a:	2201      	movs	r2, #1
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6a1a      	ldr	r2, [r3, #32]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	43db      	mvns	r3, r3
 800891a:	401a      	ands	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6a1a      	ldr	r2, [r3, #32]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 031f 	and.w	r3, r3, #31
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	fa01 f303 	lsl.w	r3, r1, r3
 8008930:	431a      	orrs	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	621a      	str	r2, [r3, #32]
}
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
	...

08008944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008958:	2302      	movs	r3, #2
 800895a:	e05a      	b.n	8008a12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a21      	ldr	r2, [pc, #132]	@ (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d022      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a8:	d01d      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d018      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d013      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1a      	ldr	r2, [pc, #104]	@ (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00e      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a18      	ldr	r2, [pc, #96]	@ (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d009      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a17      	ldr	r2, [pc, #92]	@ (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d004      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a15      	ldr	r2, [pc, #84]	@ (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d10c      	bne.n	8008a00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40000400 	.word	0x40000400
 8008a28:	40000800 	.word	0x40000800
 8008a2c:	40000c00 	.word	0x40000c00
 8008a30:	40010400 	.word	0x40010400
 8008a34:	40014000 	.word	0x40014000
 8008a38:	40001800 	.word	0x40001800

08008a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e042      	b.n	8008afc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fb f874 	bl	8003b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2224      	movs	r2, #36	@ 0x24
 8008a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fdf5 	bl	8009698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	695a      	ldr	r2, [r3, #20]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08a      	sub	sp, #40	@ 0x28
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	4613      	mov	r3, r2
 8008b12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d175      	bne.n	8008c10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_UART_Transmit+0x2c>
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e06e      	b.n	8008c12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2221      	movs	r2, #33	@ 0x21
 8008b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b42:	f7fb f9ab 	bl	8003e9c <HAL_GetTick>
 8008b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	88fa      	ldrh	r2, [r7, #6]
 8008b4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	88fa      	ldrh	r2, [r7, #6]
 8008b52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b5c:	d108      	bne.n	8008b70 <HAL_UART_Transmit+0x6c>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	61bb      	str	r3, [r7, #24]
 8008b6e:	e003      	b.n	8008b78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b78:	e02e      	b.n	8008bd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2200      	movs	r2, #0
 8008b82:	2180      	movs	r1, #128	@ 0x80
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 fb91 	bl	80092ac <UART_WaitOnFlagUntilTimeout>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e03a      	b.n	8008c12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	3302      	adds	r3, #2
 8008bb6:	61bb      	str	r3, [r7, #24]
 8008bb8:	e007      	b.n	8008bca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1cb      	bne.n	8008b7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2200      	movs	r2, #0
 8008bea:	2140      	movs	r1, #64	@ 0x40
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fb5d 	bl	80092ac <UART_WaitOnFlagUntilTimeout>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e006      	b.n	8008c12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e000      	b.n	8008c12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008c10:	2302      	movs	r3, #2
  }
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3720      	adds	r7, #32
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b08a      	sub	sp, #40	@ 0x28
 8008c1e:	af02      	add	r7, sp, #8
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	603b      	str	r3, [r7, #0]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b20      	cmp	r3, #32
 8008c38:	f040 8081 	bne.w	8008d3e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <HAL_UART_Receive+0x2e>
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e079      	b.n	8008d40 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2222      	movs	r2, #34	@ 0x22
 8008c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c60:	f7fb f91c 	bl	8003e9c <HAL_GetTick>
 8008c64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	88fa      	ldrh	r2, [r7, #6]
 8008c6a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	88fa      	ldrh	r2, [r7, #6]
 8008c70:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c7a:	d108      	bne.n	8008c8e <HAL_UART_Receive+0x74>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	61bb      	str	r3, [r7, #24]
 8008c8c:	e003      	b.n	8008c96 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008c96:	e047      	b.n	8008d28 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2120      	movs	r1, #32
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fb02 	bl	80092ac <UART_WaitOnFlagUntilTimeout>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d005      	beq.n	8008cba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e042      	b.n	8008d40 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10c      	bne.n	8008cda <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	3302      	adds	r3, #2
 8008cd6:	61bb      	str	r3, [r7, #24]
 8008cd8:	e01f      	b.n	8008d1a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce2:	d007      	beq.n	8008cf4 <HAL_UART_Receive+0xda>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10a      	bne.n	8008d02 <HAL_UART_Receive+0xe8>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d106      	bne.n	8008d02 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	701a      	strb	r2, [r3, #0]
 8008d00:	e008      	b.n	8008d14 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	3301      	adds	r3, #1
 8008d18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1b2      	bne.n	8008c98 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e000      	b.n	8008d40 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008d3e:	2302      	movs	r3, #2
  }
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3720      	adds	r7, #32
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d7e:	f003 030f 	and.w	r3, r3, #15
 8008d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10f      	bne.n	8008dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d009      	beq.n	8008dae <HAL_UART_IRQHandler+0x66>
 8008d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fbb8 	bl	800951c <UART_Receive_IT>
      return;
 8008dac:	e25b      	b.n	8009266 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 80de 	beq.w	8008f74 <HAL_UART_IRQHandler+0x22c>
 8008db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d106      	bne.n	8008dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80d1 	beq.w	8008f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00b      	beq.n	8008df6 <HAL_UART_IRQHandler+0xae>
 8008dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dee:	f043 0201 	orr.w	r2, r3, #1
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dfa:	f003 0304 	and.w	r3, r3, #4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00b      	beq.n	8008e1a <HAL_UART_IRQHandler+0xd2>
 8008e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e12:	f043 0202 	orr.w	r2, r3, #2
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00b      	beq.n	8008e3e <HAL_UART_IRQHandler+0xf6>
 8008e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e36:	f043 0204 	orr.w	r2, r3, #4
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e42:	f003 0308 	and.w	r3, r3, #8
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d011      	beq.n	8008e6e <HAL_UART_IRQHandler+0x126>
 8008e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e66:	f043 0208 	orr.w	r2, r3, #8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 81f2 	beq.w	800925c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <HAL_UART_IRQHandler+0x14e>
 8008e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e88:	f003 0320 	and.w	r3, r3, #32
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb43 	bl	800951c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea0:	2b40      	cmp	r3, #64	@ 0x40
 8008ea2:	bf0c      	ite	eq
 8008ea4:	2301      	moveq	r3, #1
 8008ea6:	2300      	movne	r3, #0
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb2:	f003 0308 	and.w	r3, r3, #8
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d103      	bne.n	8008ec2 <HAL_UART_IRQHandler+0x17a>
 8008eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d04f      	beq.n	8008f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fa4b 	bl	800935e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed2:	2b40      	cmp	r3, #64	@ 0x40
 8008ed4:	d141      	bne.n	8008f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3314      	adds	r3, #20
 8008edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3314      	adds	r3, #20
 8008efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1d9      	bne.n	8008ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d013      	beq.n	8008f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8009128 <HAL_UART_IRQHandler+0x3e0>)
 8008f30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fb fb40 	bl	80045bc <HAL_DMA_Abort_IT>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d016      	beq.n	8008f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f50:	e00e      	b.n	8008f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f994 	bl	8009280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	e00a      	b.n	8008f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f990 	bl	8009280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f60:	e006      	b.n	8008f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f98c 	bl	8009280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008f6e:	e175      	b.n	800925c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	bf00      	nop
    return;
 8008f72:	e173      	b.n	800925c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	f040 814f 	bne.w	800921c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f82:	f003 0310 	and.w	r3, r3, #16
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 8148 	beq.w	800921c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f90:	f003 0310 	and.w	r3, r3, #16
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 8141 	beq.w	800921c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60bb      	str	r3, [r7, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60bb      	str	r3, [r7, #8]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	60bb      	str	r3, [r7, #8]
 8008fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fba:	2b40      	cmp	r3, #64	@ 0x40
 8008fbc:	f040 80b6 	bne.w	800912c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8145 	beq.w	8009260 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	f080 813e 	bcs.w	8009260 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff6:	f000 8088 	beq.w	800910a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	330c      	adds	r3, #12
 8009000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	330c      	adds	r3, #12
 8009022:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009026:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800902a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009032:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800903e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1d9      	bne.n	8008ffa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3314      	adds	r3, #20
 800904c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009056:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009058:	f023 0301 	bic.w	r3, r3, #1
 800905c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3314      	adds	r3, #20
 8009066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800906a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800906e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009072:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800907c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e1      	bne.n	8009046 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3314      	adds	r3, #20
 8009088:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3314      	adds	r3, #20
 80090a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e3      	bne.n	8009082 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	330c      	adds	r3, #12
 80090ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090d2:	e853 3f00 	ldrex	r3, [r3]
 80090d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090da:	f023 0310 	bic.w	r3, r3, #16
 80090de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	330c      	adds	r3, #12
 80090e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80090ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80090ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e3      	bne.n	80090c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009104:	4618      	mov	r0, r3
 8009106:	f7fb f9e9 	bl	80044dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2202      	movs	r2, #2
 800910e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009118:	b29b      	uxth	r3, r3
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	b29b      	uxth	r3, r3
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f8b7 	bl	8009294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009126:	e09b      	b.n	8009260 <HAL_UART_IRQHandler+0x518>
 8009128:	08009425 	.word	0x08009425
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009134:	b29b      	uxth	r3, r3
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 808e 	beq.w	8009264 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8089 	beq.w	8009264 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	330c      	adds	r3, #12
 8009158:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009168:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009176:	647a      	str	r2, [r7, #68]	@ 0x44
 8009178:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800917c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e3      	bne.n	8009152 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3314      	adds	r3, #20
 8009190:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	623b      	str	r3, [r7, #32]
   return(result);
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	f023 0301 	bic.w	r3, r3, #1
 80091a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3314      	adds	r3, #20
 80091aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e3      	bne.n	800918a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0310 	bic.w	r3, r3, #16
 80091e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	330c      	adds	r3, #12
 80091f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80091f4:	61fa      	str	r2, [r7, #28]
 80091f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	69b9      	ldr	r1, [r7, #24]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	617b      	str	r3, [r7, #20]
   return(result);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e3      	bne.n	80091d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800920e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f83d 	bl	8009294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800921a:	e023      	b.n	8009264 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800921c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009224:	2b00      	cmp	r3, #0
 8009226:	d009      	beq.n	800923c <HAL_UART_IRQHandler+0x4f4>
 8009228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800922c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f909 	bl	800944c <UART_Transmit_IT>
    return;
 800923a:	e014      	b.n	8009266 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800923c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00e      	beq.n	8009266 <HAL_UART_IRQHandler+0x51e>
 8009248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800924c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d008      	beq.n	8009266 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f949 	bl	80094ec <UART_EndTransmit_IT>
    return;
 800925a:	e004      	b.n	8009266 <HAL_UART_IRQHandler+0x51e>
    return;
 800925c:	bf00      	nop
 800925e:	e002      	b.n	8009266 <HAL_UART_IRQHandler+0x51e>
      return;
 8009260:	bf00      	nop
 8009262:	e000      	b.n	8009266 <HAL_UART_IRQHandler+0x51e>
      return;
 8009264:	bf00      	nop
  }
}
 8009266:	37e8      	adds	r7, #232	@ 0xe8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	4613      	mov	r3, r2
 80092ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092bc:	e03b      	b.n	8009336 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d037      	beq.n	8009336 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092c6:	f7fa fde9 	bl	8003e9c <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	6a3a      	ldr	r2, [r7, #32]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d302      	bcc.n	80092dc <UART_WaitOnFlagUntilTimeout+0x30>
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e03a      	b.n	8009356 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d023      	beq.n	8009336 <UART_WaitOnFlagUntilTimeout+0x8a>
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b80      	cmp	r3, #128	@ 0x80
 80092f2:	d020      	beq.n	8009336 <UART_WaitOnFlagUntilTimeout+0x8a>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b40      	cmp	r3, #64	@ 0x40
 80092f8:	d01d      	beq.n	8009336 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0308 	and.w	r3, r3, #8
 8009304:	2b08      	cmp	r3, #8
 8009306:	d116      	bne.n	8009336 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f81d 	bl	800935e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2208      	movs	r2, #8
 8009328:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e00f      	b.n	8009356 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4013      	ands	r3, r2
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	429a      	cmp	r2, r3
 8009344:	bf0c      	ite	eq
 8009346:	2301      	moveq	r3, #1
 8009348:	2300      	movne	r3, #0
 800934a:	b2db      	uxtb	r3, r3
 800934c:	461a      	mov	r2, r3
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	429a      	cmp	r2, r3
 8009352:	d0b4      	beq.n	80092be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800935e:	b480      	push	{r7}
 8009360:	b095      	sub	sp, #84	@ 0x54
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	330c      	adds	r3, #12
 800936c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800937c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	330c      	adds	r3, #12
 8009384:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009386:	643a      	str	r2, [r7, #64]	@ 0x40
 8009388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800938c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3314      	adds	r3, #20
 80093a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	f023 0301 	bic.w	r3, r3, #1
 80093b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3314      	adds	r3, #20
 80093b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e5      	bne.n	800939a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d119      	bne.n	800940a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	330c      	adds	r3, #12
 80093dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f023 0310 	bic.w	r3, r3, #16
 80093ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	330c      	adds	r3, #12
 80093f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093f6:	61ba      	str	r2, [r7, #24]
 80093f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	6979      	ldr	r1, [r7, #20]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	e841 2300 	strex	r3, r2, [r1]
 8009402:	613b      	str	r3, [r7, #16]
   return(result);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e5      	bne.n	80093d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009418:	bf00      	nop
 800941a:	3754      	adds	r7, #84	@ 0x54
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff ff1e 	bl	8009280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009444:	bf00      	nop
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b21      	cmp	r3, #33	@ 0x21
 800945e:	d13e      	bne.n	80094de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009468:	d114      	bne.n	8009494 <UART_Transmit_IT+0x48>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d110      	bne.n	8009494 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009486:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a1b      	ldr	r3, [r3, #32]
 800948c:	1c9a      	adds	r2, r3, #2
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	621a      	str	r2, [r3, #32]
 8009492:	e008      	b.n	80094a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	1c59      	adds	r1, r3, #1
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6211      	str	r1, [r2, #32]
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4619      	mov	r1, r3
 80094b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10f      	bne.n	80094da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80094c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	e000      	b.n	80094e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094de:	2302      	movs	r3, #2
  }
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009502:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fead 	bl	800926c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08c      	sub	sp, #48	@ 0x30
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b22      	cmp	r3, #34	@ 0x22
 800952e:	f040 80ae 	bne.w	800968e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800953a:	d117      	bne.n	800956c <UART_Receive_IT+0x50>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d113      	bne.n	800956c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	b29b      	uxth	r3, r3
 8009556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955a:	b29a      	uxth	r2, r3
 800955c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009564:	1c9a      	adds	r2, r3, #2
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	629a      	str	r2, [r3, #40]	@ 0x28
 800956a:	e026      	b.n	80095ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009570:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800957e:	d007      	beq.n	8009590 <UART_Receive_IT+0x74>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <UART_Receive_IT+0x82>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	b2da      	uxtb	r2, r3
 8009598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959a:	701a      	strb	r2, [r3, #0]
 800959c:	e008      	b.n	80095b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80095be:	b29b      	uxth	r3, r3
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	4619      	mov	r1, r3
 80095c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d15d      	bne.n	800968a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0220 	bic.w	r2, r2, #32
 80095dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80095ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	695a      	ldr	r2, [r3, #20]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0201 	bic.w	r2, r2, #1
 80095fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2220      	movs	r2, #32
 8009602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009610:	2b01      	cmp	r3, #1
 8009612:	d135      	bne.n	8009680 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	330c      	adds	r3, #12
 8009620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	613b      	str	r3, [r7, #16]
   return(result);
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f023 0310 	bic.w	r3, r3, #16
 8009630:	627b      	str	r3, [r7, #36]	@ 0x24
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	330c      	adds	r3, #12
 8009638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800963a:	623a      	str	r2, [r7, #32]
 800963c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963e:	69f9      	ldr	r1, [r7, #28]
 8009640:	6a3a      	ldr	r2, [r7, #32]
 8009642:	e841 2300 	strex	r3, r2, [r1]
 8009646:	61bb      	str	r3, [r7, #24]
   return(result);
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e5      	bne.n	800961a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0310 	and.w	r3, r3, #16
 8009658:	2b10      	cmp	r3, #16
 800965a:	d10a      	bne.n	8009672 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff fe0b 	bl	8009294 <HAL_UARTEx_RxEventCallback>
 800967e:	e002      	b.n	8009686 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7f9 fd19 	bl	80030b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	e002      	b.n	8009690 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	e000      	b.n	8009690 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800968e:	2302      	movs	r3, #2
  }
}
 8009690:	4618      	mov	r0, r3
 8009692:	3730      	adds	r7, #48	@ 0x30
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800969c:	b0c0      	sub	sp, #256	@ 0x100
 800969e:	af00      	add	r7, sp, #0
 80096a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80096b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096b4:	68d9      	ldr	r1, [r3, #12]
 80096b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	ea40 0301 	orr.w	r3, r0, r1
 80096c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	431a      	orrs	r2, r3
 80096d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	431a      	orrs	r2, r3
 80096d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	4313      	orrs	r3, r2
 80096e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80096e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80096f0:	f021 010c 	bic.w	r1, r1, #12
 80096f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80096fe:	430b      	orrs	r3, r1
 8009700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800970e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009712:	6999      	ldr	r1, [r3, #24]
 8009714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	ea40 0301 	orr.w	r3, r0, r1
 800971e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4b8f      	ldr	r3, [pc, #572]	@ (8009964 <UART_SetConfig+0x2cc>)
 8009728:	429a      	cmp	r2, r3
 800972a:	d005      	beq.n	8009738 <UART_SetConfig+0xa0>
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4b8d      	ldr	r3, [pc, #564]	@ (8009968 <UART_SetConfig+0x2d0>)
 8009734:	429a      	cmp	r2, r3
 8009736:	d104      	bne.n	8009742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009738:	f7fe fb54 	bl	8007de4 <HAL_RCC_GetPCLK2Freq>
 800973c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009740:	e003      	b.n	800974a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009742:	f7fe fb3b 	bl	8007dbc <HAL_RCC_GetPCLK1Freq>
 8009746:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800974a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009754:	f040 810c 	bne.w	8009970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800975c:	2200      	movs	r2, #0
 800975e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009762:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800976a:	4622      	mov	r2, r4
 800976c:	462b      	mov	r3, r5
 800976e:	1891      	adds	r1, r2, r2
 8009770:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009772:	415b      	adcs	r3, r3
 8009774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800977a:	4621      	mov	r1, r4
 800977c:	eb12 0801 	adds.w	r8, r2, r1
 8009780:	4629      	mov	r1, r5
 8009782:	eb43 0901 	adc.w	r9, r3, r1
 8009786:	f04f 0200 	mov.w	r2, #0
 800978a:	f04f 0300 	mov.w	r3, #0
 800978e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800979a:	4690      	mov	r8, r2
 800979c:	4699      	mov	r9, r3
 800979e:	4623      	mov	r3, r4
 80097a0:	eb18 0303 	adds.w	r3, r8, r3
 80097a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097a8:	462b      	mov	r3, r5
 80097aa:	eb49 0303 	adc.w	r3, r9, r3
 80097ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80097b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80097be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80097c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80097c6:	460b      	mov	r3, r1
 80097c8:	18db      	adds	r3, r3, r3
 80097ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80097cc:	4613      	mov	r3, r2
 80097ce:	eb42 0303 	adc.w	r3, r2, r3
 80097d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80097d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80097d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80097dc:	f7f7 f8e2 	bl	80009a4 <__aeabi_uldivmod>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4b61      	ldr	r3, [pc, #388]	@ (800996c <UART_SetConfig+0x2d4>)
 80097e6:	fba3 2302 	umull	r2, r3, r3, r2
 80097ea:	095b      	lsrs	r3, r3, #5
 80097ec:	011c      	lsls	r4, r3, #4
 80097ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80097fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009800:	4642      	mov	r2, r8
 8009802:	464b      	mov	r3, r9
 8009804:	1891      	adds	r1, r2, r2
 8009806:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009808:	415b      	adcs	r3, r3
 800980a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800980c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009810:	4641      	mov	r1, r8
 8009812:	eb12 0a01 	adds.w	sl, r2, r1
 8009816:	4649      	mov	r1, r9
 8009818:	eb43 0b01 	adc.w	fp, r3, r1
 800981c:	f04f 0200 	mov.w	r2, #0
 8009820:	f04f 0300 	mov.w	r3, #0
 8009824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800982c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009830:	4692      	mov	sl, r2
 8009832:	469b      	mov	fp, r3
 8009834:	4643      	mov	r3, r8
 8009836:	eb1a 0303 	adds.w	r3, sl, r3
 800983a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800983e:	464b      	mov	r3, r9
 8009840:	eb4b 0303 	adc.w	r3, fp, r3
 8009844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009854:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800985c:	460b      	mov	r3, r1
 800985e:	18db      	adds	r3, r3, r3
 8009860:	643b      	str	r3, [r7, #64]	@ 0x40
 8009862:	4613      	mov	r3, r2
 8009864:	eb42 0303 	adc.w	r3, r2, r3
 8009868:	647b      	str	r3, [r7, #68]	@ 0x44
 800986a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800986e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009872:	f7f7 f897 	bl	80009a4 <__aeabi_uldivmod>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4611      	mov	r1, r2
 800987c:	4b3b      	ldr	r3, [pc, #236]	@ (800996c <UART_SetConfig+0x2d4>)
 800987e:	fba3 2301 	umull	r2, r3, r3, r1
 8009882:	095b      	lsrs	r3, r3, #5
 8009884:	2264      	movs	r2, #100	@ 0x64
 8009886:	fb02 f303 	mul.w	r3, r2, r3
 800988a:	1acb      	subs	r3, r1, r3
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009892:	4b36      	ldr	r3, [pc, #216]	@ (800996c <UART_SetConfig+0x2d4>)
 8009894:	fba3 2302 	umull	r2, r3, r3, r2
 8009898:	095b      	lsrs	r3, r3, #5
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80098a0:	441c      	add	r4, r3
 80098a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80098b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80098b4:	4642      	mov	r2, r8
 80098b6:	464b      	mov	r3, r9
 80098b8:	1891      	adds	r1, r2, r2
 80098ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80098bc:	415b      	adcs	r3, r3
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80098c4:	4641      	mov	r1, r8
 80098c6:	1851      	adds	r1, r2, r1
 80098c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80098ca:	4649      	mov	r1, r9
 80098cc:	414b      	adcs	r3, r1
 80098ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	f04f 0300 	mov.w	r3, #0
 80098d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80098dc:	4659      	mov	r1, fp
 80098de:	00cb      	lsls	r3, r1, #3
 80098e0:	4651      	mov	r1, sl
 80098e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098e6:	4651      	mov	r1, sl
 80098e8:	00ca      	lsls	r2, r1, #3
 80098ea:	4610      	mov	r0, r2
 80098ec:	4619      	mov	r1, r3
 80098ee:	4603      	mov	r3, r0
 80098f0:	4642      	mov	r2, r8
 80098f2:	189b      	adds	r3, r3, r2
 80098f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098f8:	464b      	mov	r3, r9
 80098fa:	460a      	mov	r2, r1
 80098fc:	eb42 0303 	adc.w	r3, r2, r3
 8009900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009910:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009918:	460b      	mov	r3, r1
 800991a:	18db      	adds	r3, r3, r3
 800991c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800991e:	4613      	mov	r3, r2
 8009920:	eb42 0303 	adc.w	r3, r2, r3
 8009924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800992a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800992e:	f7f7 f839 	bl	80009a4 <__aeabi_uldivmod>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4b0d      	ldr	r3, [pc, #52]	@ (800996c <UART_SetConfig+0x2d4>)
 8009938:	fba3 1302 	umull	r1, r3, r3, r2
 800993c:	095b      	lsrs	r3, r3, #5
 800993e:	2164      	movs	r1, #100	@ 0x64
 8009940:	fb01 f303 	mul.w	r3, r1, r3
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	00db      	lsls	r3, r3, #3
 8009948:	3332      	adds	r3, #50	@ 0x32
 800994a:	4a08      	ldr	r2, [pc, #32]	@ (800996c <UART_SetConfig+0x2d4>)
 800994c:	fba2 2303 	umull	r2, r3, r2, r3
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	f003 0207 	and.w	r2, r3, #7
 8009956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4422      	add	r2, r4
 800995e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009960:	e106      	b.n	8009b70 <UART_SetConfig+0x4d8>
 8009962:	bf00      	nop
 8009964:	40011000 	.word	0x40011000
 8009968:	40011400 	.word	0x40011400
 800996c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009974:	2200      	movs	r2, #0
 8009976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800997a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800997e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009982:	4642      	mov	r2, r8
 8009984:	464b      	mov	r3, r9
 8009986:	1891      	adds	r1, r2, r2
 8009988:	6239      	str	r1, [r7, #32]
 800998a:	415b      	adcs	r3, r3
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24
 800998e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009992:	4641      	mov	r1, r8
 8009994:	1854      	adds	r4, r2, r1
 8009996:	4649      	mov	r1, r9
 8009998:	eb43 0501 	adc.w	r5, r3, r1
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	00eb      	lsls	r3, r5, #3
 80099a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099aa:	00e2      	lsls	r2, r4, #3
 80099ac:	4614      	mov	r4, r2
 80099ae:	461d      	mov	r5, r3
 80099b0:	4643      	mov	r3, r8
 80099b2:	18e3      	adds	r3, r4, r3
 80099b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099b8:	464b      	mov	r3, r9
 80099ba:	eb45 0303 	adc.w	r3, r5, r3
 80099be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80099c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80099d2:	f04f 0200 	mov.w	r2, #0
 80099d6:	f04f 0300 	mov.w	r3, #0
 80099da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80099de:	4629      	mov	r1, r5
 80099e0:	008b      	lsls	r3, r1, #2
 80099e2:	4621      	mov	r1, r4
 80099e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099e8:	4621      	mov	r1, r4
 80099ea:	008a      	lsls	r2, r1, #2
 80099ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80099f0:	f7f6 ffd8 	bl	80009a4 <__aeabi_uldivmod>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4b60      	ldr	r3, [pc, #384]	@ (8009b7c <UART_SetConfig+0x4e4>)
 80099fa:	fba3 2302 	umull	r2, r3, r3, r2
 80099fe:	095b      	lsrs	r3, r3, #5
 8009a00:	011c      	lsls	r4, r3, #4
 8009a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a06:	2200      	movs	r2, #0
 8009a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009a14:	4642      	mov	r2, r8
 8009a16:	464b      	mov	r3, r9
 8009a18:	1891      	adds	r1, r2, r2
 8009a1a:	61b9      	str	r1, [r7, #24]
 8009a1c:	415b      	adcs	r3, r3
 8009a1e:	61fb      	str	r3, [r7, #28]
 8009a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a24:	4641      	mov	r1, r8
 8009a26:	1851      	adds	r1, r2, r1
 8009a28:	6139      	str	r1, [r7, #16]
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	414b      	adcs	r3, r1
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	f04f 0200 	mov.w	r2, #0
 8009a34:	f04f 0300 	mov.w	r3, #0
 8009a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a3c:	4659      	mov	r1, fp
 8009a3e:	00cb      	lsls	r3, r1, #3
 8009a40:	4651      	mov	r1, sl
 8009a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a46:	4651      	mov	r1, sl
 8009a48:	00ca      	lsls	r2, r1, #3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4603      	mov	r3, r0
 8009a50:	4642      	mov	r2, r8
 8009a52:	189b      	adds	r3, r3, r2
 8009a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a58:	464b      	mov	r3, r9
 8009a5a:	460a      	mov	r2, r1
 8009a5c:	eb42 0303 	adc.w	r3, r2, r3
 8009a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009a70:	f04f 0200 	mov.w	r2, #0
 8009a74:	f04f 0300 	mov.w	r3, #0
 8009a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	008b      	lsls	r3, r1, #2
 8009a80:	4641      	mov	r1, r8
 8009a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a86:	4641      	mov	r1, r8
 8009a88:	008a      	lsls	r2, r1, #2
 8009a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009a8e:	f7f6 ff89 	bl	80009a4 <__aeabi_uldivmod>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4611      	mov	r1, r2
 8009a98:	4b38      	ldr	r3, [pc, #224]	@ (8009b7c <UART_SetConfig+0x4e4>)
 8009a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8009a9e:	095b      	lsrs	r3, r3, #5
 8009aa0:	2264      	movs	r2, #100	@ 0x64
 8009aa2:	fb02 f303 	mul.w	r3, r2, r3
 8009aa6:	1acb      	subs	r3, r1, r3
 8009aa8:	011b      	lsls	r3, r3, #4
 8009aaa:	3332      	adds	r3, #50	@ 0x32
 8009aac:	4a33      	ldr	r2, [pc, #204]	@ (8009b7c <UART_SetConfig+0x4e4>)
 8009aae:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab2:	095b      	lsrs	r3, r3, #5
 8009ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ab8:	441c      	add	r4, r3
 8009aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009abe:	2200      	movs	r2, #0
 8009ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ac2:	677a      	str	r2, [r7, #116]	@ 0x74
 8009ac4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009ac8:	4642      	mov	r2, r8
 8009aca:	464b      	mov	r3, r9
 8009acc:	1891      	adds	r1, r2, r2
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	415b      	adcs	r3, r3
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ad8:	4641      	mov	r1, r8
 8009ada:	1851      	adds	r1, r2, r1
 8009adc:	6039      	str	r1, [r7, #0]
 8009ade:	4649      	mov	r1, r9
 8009ae0:	414b      	adcs	r3, r1
 8009ae2:	607b      	str	r3, [r7, #4]
 8009ae4:	f04f 0200 	mov.w	r2, #0
 8009ae8:	f04f 0300 	mov.w	r3, #0
 8009aec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009af0:	4659      	mov	r1, fp
 8009af2:	00cb      	lsls	r3, r1, #3
 8009af4:	4651      	mov	r1, sl
 8009af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009afa:	4651      	mov	r1, sl
 8009afc:	00ca      	lsls	r2, r1, #3
 8009afe:	4610      	mov	r0, r2
 8009b00:	4619      	mov	r1, r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	4642      	mov	r2, r8
 8009b06:	189b      	adds	r3, r3, r2
 8009b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b0a:	464b      	mov	r3, r9
 8009b0c:	460a      	mov	r2, r1
 8009b0e:	eb42 0303 	adc.w	r3, r2, r3
 8009b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009b20:	f04f 0200 	mov.w	r2, #0
 8009b24:	f04f 0300 	mov.w	r3, #0
 8009b28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	008b      	lsls	r3, r1, #2
 8009b30:	4641      	mov	r1, r8
 8009b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b36:	4641      	mov	r1, r8
 8009b38:	008a      	lsls	r2, r1, #2
 8009b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009b3e:	f7f6 ff31 	bl	80009a4 <__aeabi_uldivmod>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4b0d      	ldr	r3, [pc, #52]	@ (8009b7c <UART_SetConfig+0x4e4>)
 8009b48:	fba3 1302 	umull	r1, r3, r3, r2
 8009b4c:	095b      	lsrs	r3, r3, #5
 8009b4e:	2164      	movs	r1, #100	@ 0x64
 8009b50:	fb01 f303 	mul.w	r3, r1, r3
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	3332      	adds	r3, #50	@ 0x32
 8009b5a:	4a08      	ldr	r2, [pc, #32]	@ (8009b7c <UART_SetConfig+0x4e4>)
 8009b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b60:	095b      	lsrs	r3, r3, #5
 8009b62:	f003 020f 	and.w	r2, r3, #15
 8009b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4422      	add	r2, r4
 8009b6e:	609a      	str	r2, [r3, #8]
}
 8009b70:	bf00      	nop
 8009b72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009b76:	46bd      	mov	sp, r7
 8009b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b7c:	51eb851f 	.word	0x51eb851f

08009b80 <memset>:
 8009b80:	4402      	add	r2, r0
 8009b82:	4603      	mov	r3, r0
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d100      	bne.n	8009b8a <memset+0xa>
 8009b88:	4770      	bx	lr
 8009b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b8e:	e7f9      	b.n	8009b84 <memset+0x4>

08009b90 <__libc_init_array>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	4d0d      	ldr	r5, [pc, #52]	@ (8009bc8 <__libc_init_array+0x38>)
 8009b94:	4c0d      	ldr	r4, [pc, #52]	@ (8009bcc <__libc_init_array+0x3c>)
 8009b96:	1b64      	subs	r4, r4, r5
 8009b98:	10a4      	asrs	r4, r4, #2
 8009b9a:	2600      	movs	r6, #0
 8009b9c:	42a6      	cmp	r6, r4
 8009b9e:	d109      	bne.n	8009bb4 <__libc_init_array+0x24>
 8009ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8009bd0 <__libc_init_array+0x40>)
 8009ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8009bd4 <__libc_init_array+0x44>)
 8009ba4:	f000 f826 	bl	8009bf4 <_init>
 8009ba8:	1b64      	subs	r4, r4, r5
 8009baa:	10a4      	asrs	r4, r4, #2
 8009bac:	2600      	movs	r6, #0
 8009bae:	42a6      	cmp	r6, r4
 8009bb0:	d105      	bne.n	8009bbe <__libc_init_array+0x2e>
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb8:	4798      	blx	r3
 8009bba:	3601      	adds	r6, #1
 8009bbc:	e7ee      	b.n	8009b9c <__libc_init_array+0xc>
 8009bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc2:	4798      	blx	r3
 8009bc4:	3601      	adds	r6, #1
 8009bc6:	e7f2      	b.n	8009bae <__libc_init_array+0x1e>
 8009bc8:	08009f40 	.word	0x08009f40
 8009bcc:	08009f40 	.word	0x08009f40
 8009bd0:	08009f40 	.word	0x08009f40
 8009bd4:	08009f48 	.word	0x08009f48

08009bd8 <memcpy>:
 8009bd8:	440a      	add	r2, r1
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009be0:	d100      	bne.n	8009be4 <memcpy+0xc>
 8009be2:	4770      	bx	lr
 8009be4:	b510      	push	{r4, lr}
 8009be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bee:	4291      	cmp	r1, r2
 8009bf0:	d1f9      	bne.n	8009be6 <memcpy+0xe>
 8009bf2:	bd10      	pop	{r4, pc}

08009bf4 <_init>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	bf00      	nop
 8009bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfa:	bc08      	pop	{r3}
 8009bfc:	469e      	mov	lr, r3
 8009bfe:	4770      	bx	lr

08009c00 <_fini>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	bf00      	nop
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr
